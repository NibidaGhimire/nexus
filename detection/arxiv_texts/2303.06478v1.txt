PyPoll: A python library automating mining of networks,
discussions and polarization on Twitter
Dimitrios P. Giakatos
dgiakatos@csd.auth.gr
Aristotle University of Thessaloniki
GreecePavlos Sermpezis
sermpezis@csd.auth.gr
Aristotle University of Thessaloniki
GreeceAthena Vakali
avakali@csd.auth.gr
Aristotle University of Thessaloniki
Greece
ABSTRACT
Today online social networks have a high impact in our society
as more and more people use them for communicating with each
other, express their opinions, participating in public discussions,
etc. In particular, Twitter is one of the most popular social net-
work platforms people mainly use for political discussions. This
attracted the interest of many research studies that analyzed social
phenomena on Twitter, by collecting data, analysing communica-
tion patterns, and exploring the structure of user networks. While
previous works share many common methodologies for data col-
lection and analysis, these are mainly re-implemented every time
by researchers in a custom way. In this paper, we introduce PyPoll
an open-source Python library that operationalizes common anal-
ysis tasks for Twitter discussions. With PyPoll users can perform
Twitter graph mining, calculate the polarization index and generate
interactive visualizations without needing third-party tools. We
believe that PyPoll can help researchers automate their tasks by
giving them methods that are easy to use. Also, we demonstrate
the use of the library by presenting two use cases; the PyPoll vi-
sualization app, an online application for graph visualizing and
sharing, and the Political Lighthouse, a Web portal for displaying
the polarization in various political topics on Twitter.
CCS CONCEPTS
•Networks→Online social networks ;•Software and its en-
gineering→Software libraries and repositories ;•Human-
centered computing →Visualization toolkits .
KEYWORDS
Online social networks, graph mining, polarization, open-source
1 INTRODUCTION
Nowadays, online social networks/media play a vital role in public
discussions of various topics all around the world [ 14,15,18,19,22].
In 2022, 190 million new users entered the world of social media,
meaning they started to read news and participate in public dis-
cussions about many topics [ 9]. Twitter is one of the largest social
media platforms where users are free to express their opinion within
280 characters of text ("tweets") and engage in public debates. Be-
cause of the text length limit, Twitter is used, in particular, by many
politicians for posting short statements about political, economic,
or social topics to inform the public. On the other hand, citizens
themselves use to post their own statements, and discuss with oth-
ers by responding to ("quote") or sharing ("retweet") others’ posts.
As a result, Twitter plays a significant role in modern political
discussions and, frequently, opinion formation.Graph mining and analysis on Twitter: User interactions on
Twitter (e.g., through comments, retweets, mentions, etc.) can be
modeled as a graph, where nodes represent users and edges repre-
sent interactions between them. Graphs and graph analyses have
been used to model and explore various phenomena on social media,
such as recommendation systems [ 16] (e.g, predict new connections
between tweets, hashtags, and users) , bot detection [ 7] (e.g., find
if a user is a bot according to his followers), or topic sentiment
analysis [ 20] (i.e. connect hashtags that co-occur in Tweets and use
node features and graph structure for node classification).
Polarization on Twitter: In particular, an important phenome-
non is polarization , where users participating in an online discussion
start to engage only with like-minded users and/or adopt ideas of
extreme views [ 13,15]. While this phenomenon exists in every
society [ 13], it is frequently amplified in the online world [ 12]. A
social network with intense polarization comprises two separate
groups of users with confronting opinions. In a polarized group, if
someone starts to share an opinion that differs from the opinion
that the group accepts, then he has a high percentage of being
rejected by the community. As a result, the users of both groups
tend to adopt a single perspective, thus leading to a non democratic
discussion.
One common research methodology, but lack of common
tools: What is common in the majority of research methodolo-
gies and previous works on Twitter analytics is the graph mining
pipeline that consists of two parts: (i) A set of tweets are collected
using the Twitter API. The tweets are typically related to a spe-
cific discussion, which is done by using one or more keywords or
hashtags in the API call. (ii) The set of users and their interactions
are extracted from the meta-data and other fields included in the
collected tweets, and a graph is then created. Moreover, in the case
of polarization, several research methods need to annotate the users
in order to assign them in one of the opinion groups; while, here,
we can observe more variations in the research methods (e.g., based
on the content, such as usage of common hashtags [ 15], tweets [ 11],
or retweets [ 11]), in many works the users are assigned to a group
based on the accounts they follow. For example, followers of differ-
ent politicians can be attributed to different groups [11, 15].
Despite the fact that many works share this common methodol-
ogy, to our best knowledge, there are no available open-source tools
for operationalizing the graph creation from a Twitter discussion
(neither for automatic the polarization analysis). Existing solutions
include scripts that can create Twitter graphs based on the follow-
ers [1–4], but without tracking a discussion and capturing it in a
graph. As a result, researchers and practitioners need to develop
from scratch their methods, which requires significant effort or can
even be a serious impediment for non-technical users (e.g., fromarXiv:2303.06478v1  [cs.SI]  11 Mar 2023D.P. Giakatos et al.
Figure 1: Graph visualization using PyPoll
domains other than computer science that are interested in the
social aspects of Twitter discussions).
Contributions : Motivated by this lack of common tools for
these common methodologies, in this paper, we introduce PyPoll1
(Section 2), an open-source Python library that automates the min-
ing, graph creation, and polarization analysis from Twitter discus-
sions. Specifically, using PyPoll a user can automate the following
tasks:
•Twitter graph mining: Using as input a list of keywords/hashtags
and a single method (one line of code), PyPoll collects all tweets
relevant to a discussion, saves them to a database, and builds a
graph that includes also node and edge features.
•Polarization: PyPoll can easily collect information about followers
of Twitter users, and based on this to annotate the nodes (i.e.,
users) of the constructed graph. Moreover, it contains methods
that use this information to calculate the polarization index of
the discussion.
•Visualization: Finally, PyPoll can create graph layouts and visual-
ize graphs without using any third-part tools (see Fig.1).
PyPoll is open-source and guidelines and examples for using
it can be found on GitHub [ 5]. Furthermore, we demonstrate its
use through two example cases (Section 3): (i) a visualization Web
application where the user can upload a graph file generated by
PyPoll (e.g., from their own collected dataset) and produce a share-
able visualization of the Twitter graph, annotated with user group
information, and (ii) a Web portal where we present data and visu-
alizations for several political discussions we analyzed.
2 THE PYPOLL LIBRARY
The overall architecture of the library is depicted in Fig. 2, and,
in the following, we present the design and functionality of its
three components: Twitter graph mining, polarization analysis, and
visualization.
2.1 Twitter graph mining
Input: A list of keywords and/or hashtags.
Output: A graph with node and edge attributes.
1PyPoll: Python Twitter mining and polarization library [5].Overview: PyPoll receives as input a list of keywords and/or hash-
tags relevant to a discussion in Twitter, calls the Twitter API, col-
lects all the returned tweets and stores them in a database. Then,
it extracts information contained in the collected tweets to build a
graph, where nodes represent Twitter users and edges interactions
between them, and enriches the graph with node attributes ex-
tracted from the tweets (e.g., nb of tweets, followers, username, i.e.)
and edge attributes (namely, number and type -retweet, mention,
comment- of interactions).
While this Twitter graph mining process contains several steps
with technical challenges (as described below), PyPoll automates it
and enables users to mine and construct a graph with a few lines
of code as seen in the example of Listing 1.
Collecting tweets: PyPoll wraps the tweepy library [ 6] for collect-
ing data from the Twitter API. In practice, several problems may
happen during a call to the Twitter API (e.g., with a list of keywords)
that will break the collection process. PyPoll handles errors that
may occur, and automatically resumes the collection from where it
stopped. Moreover, in the case a user wants to update an existing
collection of tweets, PyPoll automatically detects the last saved
tweet based on its creation date and time, and collects only the
missing (newest) content. Finally, the collected tweets are stored to
a local database (MongoDB). All this functionality can be accessed
through a single method get_tweets (see line 4 in Listing 1).
Constructing the graph: The construction of a graph from the
collected data is again accessed through the method create_graph .
When calling this method, PyPoll extracts from the tweets in the
collection: (i) the Twitter users, representing them as nodes, (ii)
attributes of the users contained in the tweets’ meta data (e.g.,
username) or calculated on the collection (e.g., number of tweets in
the discussion), (iii) the interactions between users from the tweets’
metadata, representing them as edges and edge attributes (e.g., a
user retweeting two tweets of another user is represented as an
edge of type "retweet" and weight 2). This functionality allows the
user to create different graphs (from the same collection of tweets)
based on optional arguments passed to the library. For example,
depending on the use case, a researcher may need to consider only
retweets or only likes as graph edges [ 8,17,21] (e.g. paper [ 8] used
retweets for spam detection).
Finally, after creating the graph, PyPoll saves it in a format
selected by the user (currently available options are the -popular-
formats: GEXF, GML, JSON).
Listing 1: Example script for Twitter graph mining
from p y p o l l import T w i t t e r , MongoDB , Graph
db = MongoDB ( . . . )
a p i = T w i t t e r ( t w i t t e r _ b e a r e r _ t o k e n , db )
a p i . g e t _ t w e e t s ( " # t e s t " )
graph = Graph ( )
graph . c r e a t e _ g r a p h ( " # t e s t " , db , { . . . } )
2.2 Polarization
Input: Two or more Twitter accounts.
Output: Polarization analysis of the graph.
Overview: Given a set of Twitter accounts (corresponding to dif-
ferent "opinions", e.g., accounts of two political parties), PyPollPyPoll: A python library automating mining of networks, discussions and polarization on Twitter
Figure 2: PyPoll: Polarization Library pipeline.
collects their followers, finds which of them are also in an existing
collection of tweets (Section 2.1), annotates the nodes in the Twitter
graph, and calculates the polarization index of the graph.
These polarization analysis steps are automated by PyPoll, and
can be accessed through a few lines of code as in the example of
Listing 2.
Opinion attribution: In the polarization analysis we consider (and
similarly to several previous works [ 11,15]), users are assigned to
an "opinion" (or, "group" or community) based on the account(s)
they follow. For example, following the account of a specific politi-
cal party can be used as an indication for the political attribution
of the user [ 15]. PyPoll implements this methodology, by collect-
ing all the followers of two given Twitter accounts (see method
get_followers in lines 1-2 in Listing 2). Similarly to the graph
mining methods (Section 2.1), PyPoll handles in the background
potential errors in the follower collection process. Then, it finds
which of the collected followers appear also in an existing collection
of tweets, and adds the inferred attributed opinion as an extra node
label for these users.
Polarization index: After the node labeling, the user can use
PyPoll to calculate the polarization of the graph/discussion, using
theget_polarization method (line 4 in Listing 2), which takes
as input a polarization metric, such as the Friedkin & Johnsen
[15] or the Random Walk Controversy [ 11]. PyPoll implements
the corresponding methods and calculates the metric, which takes
values in the range between 0 (no polarization) to 1 (very polarized
discussion).
Listing 2: Example code for polarization analysis of a graph
. . .
a p i . g e t _ f o l l o w e r s ( " username_A " )
a p i . g e t _ f o l l o w e r s ( " username_B " )
. . .
o p t i o n s = {
. . .
" u s e r s " : { " username_A " , " username_B " }
}
graph . c r e a t e _ g r a p h ( " # t e s t " , db , o p t i o n s )
graph . g e t _ p o l a r i z a t i o n ( [ " f j " , " rwc " ] )2.3 Visualization
Input: A Twitter graph file.
Output: An interactive visualization of the graph.
Overview: Visualization of graphs can sometimes quickly reveal
insights that are not easily captured by graph metrics, e.g., structure
of communities, and thus is a useful component several graph
analyses tasks. PyPoll can be used to easily (see example code in
Listing 3) create a graph layout and visualize a generated graph
(Section 2.1), with the option of coloring nodes according to their
attributed opinions (Section 2.2). An example visualization of PyPoll
is given in Fig. 1.
PyPoll implements the Fruchterman-Reingold force-directed al-
gorithm [ 10] to create the graph layout, as well as an in-build visu-
alization tool that enables the user to interact with the graph (e.g,
zoom-in/out, navigation, node selection). It is important to note that
with PyPoll, the user does not need any third-party visualization
tools.
Listing 3: Example code for graph visualization
. . .
graph . c r e a t e _ l a y o u t ( " # t e s t . g e x f " , { . . . } )
p l o t = GraphPlot ( )
p l o t . show ( " # t e s t . g e x f " )
3 USE CASES
We demonstrate the use of PyPoll through two use cases, a visual-
ization Web application (Section 3.1) and a Web portal with polar-
ization analyses of political discussions on Twitter (Section 3.2).
3.1 PyPoll visualization app
We implemented a Web application, where users can easily create
and share online visualization of graphs. A user uploads a GEXF
graph file (e.g., created by PyPoll), and receives a URL with an online
visualization of the uploaded graph. The URL can be shared with
anyone and other users can view and interact with the graph online
through the browser without restrictions (i.e. create an account).
For security reasons, users that want to create visualizations needD.P. Giakatos et al.
to create an account (for free) and login, whereas for accessing a
visualization no account is needed.2
The Web application consists of three components: the frontend,
the backend and the Python SDK. The frontend is implemented in
ReactJS3(HTML/CSS/JavaScript) and deployed in a NGINX web
server4. The backend is implemented with FastAPI5and MongoDB
and the Python SDK is implemented in Python. The code for the
entire Web app is available on GitHub6under the MIT license.
3.2 Political Lighthouse
A use case for PyPoll is the exploration of discussions on Twitter
related to political topics. To this end, we developed the Politi-
cal Lighthouse7, a web page that explores polarization in Greek
political discussions on Twitter.
Specifically, we collected tweets for several political discussions,
including topics related to political parties, the energy crisis, and
national issues. Each discussion corresponds to a different hashtag
that was trending during the collection period. For the opinion at-
tribution, we collected the followers of the accounts corresponding
to heads of two major political parties (a liberal-conservative and a
left-wing political party). Then, we visualized the generated graphs
and presented them in the web page, along with statistics about the
discussions (number of participating users, number of tweets, etc.)
and their polarization.
4 CONCLUSION
In this paper we have presented PyPoll, an open-source Python
library that can be used to automate collection of tweets relevant
to a discussion, create a graph out of them, collect data and analyze
polarization, and visualize graphs. Our design principles for PyPoll
were generality (e.g., can be applied to any discussion, and offers
several options for graph creation and visualization) and ease of use.
Researchers and practitioners can use PyPoll to create, analyze and
visualize Twitter discussions with few lines of codes, thus avoid-
ing technical complexities involved in these tasks. Furthermore,
through the PyPoll visualization app we demonstrated, users can
share their graphs about different topics easily. We believe that
PyPoll can facilitate research in social computing topics; as in the
example of the Political Lighthouse web page we presented.
PyPoll can be further extended in the future, e.g., by imple-
menting more opinion attribution methods (e.g., based on content,
such as, hashtags used in tweets), or more polarization metrics and
methodologies.
ACKNOWLEDGMENTS
This work was co-financed by the European Union and Greek na-
tional funds through the Operational Program for Competitive-
ness, Entrepreneurship and Innovation, under the call RESEARCH-
CREATE-INNOVATE (Project Code: T2EDK-04937).
2https://dpgiakatos.com/redirections/pypoll-visualization-app
3https://reactjs.org
4https://www.nginx.com
5https://fastapi.tiangolo.com
6https://github.com/dpgiakatos/PyPoll-app
7https://dpgiakatos.com/redirections/political-lighthouseREFERENCES
[1] 2012. https://github.com/ianozsvald/twitter-social-graph-networkx.
[2] 2016. https://github.com/davidkiss/twitter-keyword-graph.
[3] 2018. https://github.com/lgallen/twitter-graph.
[4] 2023. https://github.com/eleurent/twitter-graph.
[5] 2023. https://github.com/dpgiakatos/PyPoll.
[6] 2023. https://github.com/tweepy/tweepy.
[7]Eiman Alothali, Nazar Zaki, Elfadil A Mohamed, and Hany Alashwal. 2018. De-
tecting social bots on twitter: a literature review. In 2018 International conference
on innovations in information technology (IIT) . IEEE, 175–180.
[8]David R Bild, Yue Liu, Robert P Dick, Z Morley Mao, and Dan S Wallach. 2015.
Aggregate characterization of user behavior in Twitter and analysis of the retweet
graph. ACM Transactions on Internet Technology (TOIT) 15, 1 (2015), 1–24.
[9]DataReportal. 1999. Global Social Media Statistics - DataReportal – Global Digital
Insights . https://datareportal.com/social-media-users
[10] Thomas MJ Fruchterman and Edward M Reingold. 1991. Graph drawing by force-
directed placement. Software: Practice and experience 21, 11 (1991), 1129–1164.
[11] Kiran Garimella, Gianmarco De Francisci Morales, Aristides Gionis, and Michael
Mathioudakis. 2018. Quantifying controversy on social media. ACM Transactions
on Social Computing 1, 1 (2018), 1–27.
[12] Luca Iandoli, Simonetta Primario, and Giuseppe Zollo. 2021. The impact of
group polarization on the quality of online debate in social media: A systematic
literature review. Technological Forecasting and Social Change 170 (2021), 120924.
[13] Daniel J Isenberg. 1986. Group polarization: A critical review and meta-analysis.
Journal of personality and social psychology 50, 6 (1986), 1141.
[14] Emily Kubin and Christian von Sikorski. 2021. The role of (social) media in polit-
ical polarization: a systematic review. Annals of the International Communication
Association 45, 3 (2021), 188–206.
[15] Antonis Matakos, Evimaria Terzi, and Panayiotis Tsaparas. 2017. Measuring and
moderating opinion polarization in social networks. Data Mining and Knowledge
Discovery 31, 5 (2017), 1480–1505.
[16] Daniel Thilo Schroeder, Konstantin Pogorelov, and Johannes Langguth. 2019. Fact:
a framework for analysis and capture of twitter graphs. In 2019 Sixth International
Conference on Social Networks Analysis, Management and Security (SNAMS) . IEEE,
134–141.
[17] Jonghyuk Song, Sangho Lee, and Jong Kim. 2011. Spam filtering in twitter
using sender-receiver relationship. In Recent Advances in Intrusion Detection: 14th
International Symposium, RAID 2011, Menlo Park, CA, USA, September 20-21, 2011.
Proceedings 14 . Springer, 301–317.
[18] Stefan Stieglitz and Linh Dang-Xuan. 2013. Social media and political communi-
cation: a social media analytics framework. Social network analysis and mining 3
(2013), 1277–1291.
[19] Sebastián Valenzuela, Yonghwan Kim, and Homero Gil de Zúñiga. 2012. Social
networks that matter: Exploring the role of political discussion for online political
participation. International journal of public opinion research 24, 2 (2012), 163–184.
[20] Xiaolong Wang, Furu Wei, Xiaohua Liu, Ming Zhou, and Ming Zhang. 2011. Topic
sentiment analysis in twitter: a graph-based hashtag sentiment classification
approach. In Proceedings of the 20th ACM international conference on Information
and knowledge management . 1031–1040.
[21] Min-Chul Yang, Jung-Tae Lee, Seung-Wook Lee, and Hae-Chang Rim. 2012. Find-
ing interesting posts in twitter based on retweet graph analysis. In Proceedings
of the 35th international ACM SIGIR conference on Research and development in
information retrieval . 1073–1074.
[22] Ekaterina Zhuravskaya, Maria Petrova, and Ruben Enikolopov. 2020. Political
effects of the internet and social media. Annual review of economics 12 (2020),
415–438.