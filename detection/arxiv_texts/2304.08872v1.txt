arXiv:2304.08872v1  [cs.LO]  18 Apr 2023A Simple Rewrite System for
the Normalization of Linear Temporal Logic⋆
Javier Esparza1, Rubén Rubio2, and Salomon Sickert3
1Technical University of Munich, Germany
2Universidad Complutense de Madrid, Spain
3The Hebrew University, Jerusalem, Israel
Abstract. In the mid 80s, Lichtenstein, Pnueli, and Zuck showed that
every formula of Past LTL (the extension of Linear Temporal L ogic with
past operators) is equivalent to a conjunction of formulas o f the form
GFϕ∨FGψ, whereϕandψcontain only past operators. Some years
later, Chang, Manna, and Pnueli derived a similar normal for m for LTL.
Both normalization procedures have a non-elementary worst -case blow-
up, and follow an involved path from formulas to counter-fre e automata
to star-free regular expressions and back to formulas. In 20 20, Sickert and
Esparza presented a direct and purely syntactic normalizat ion procedure
for LTL yielding a normal form similar to the one by Chang, Man na, and
Pnueli, with a single exponential blow-up, and applied it to the problem
of constructing a succinct deterministic ω-automaton for a given formula.
However, their procedure had exponential time complexity i n the best
case. In particular, it does not perform better for formulas that are almost
in normal form. In this paper we present an alternative norma lization
procedure based on a simple set of rewrite rules.
1 Introduction
In the late 1970s, Amir Pnueli introduced Linear Temporal Lo gic (LTL) into
computer science as a framework for specifying and verifyin g concurrent pro-
grams [ 15,16], a contribution that earned him the 1996 Turing Award. Duri ng
the 1980s and the early 1990s, Pnueli proceeded to study the p roperties express-
ible in LTL in collaboration with other researchers. In 1985 , Lichtenstein, Pnueli
and Zuck introduced a classiﬁcation of LTL properties [ 7], later described in de-
tail by Manna and Pnueli, who called it the safety-progress hierarchy in [ 11,12].
These works consider an extended version of LTL with past ope rators, called
Past LTL. The safety-progress hierarchy consists of a safety class of formulas,
and ﬁve progress classes. The classes are deﬁned semantically in terms of the ir
⋆This work was partially supported by the Deutsche Forschung sgemeinschaft (DFG)
under projects 183790222, 317422601, and 436811179; by the European Research
Council (ERC) under the European Union’s Horizon 2020 resea rch and innovation
programme under grant agreement No 787367 (PaVeS); by the Sp anish MCI project
ProCode (PID2019-108528RB-C22); and by the Spanish MU gran ts FPU17/02319
and EST21/00536.2 J. Esparza, R. Rubio, S. Sickert
models, and the largest class, called the reactivity class in [ 11,12], contains all
properties expressible in LTL. Manna and Pnueli provide syn tactic characteri-
zations of each class. In particular, they prove a fundament al theorem showing
that every reactivity property is expressible as a conjunct ion of formulas of the
formGFϕ∨FGψ, whereFχandGχmean thatχholds at some and at every
point in the future, respectively, and ϕ,ψonly contain past operators.
In 1992, Chang, Manna, and Pnueli presented a diﬀerent and ve ry elegant
characterization of the safety-progress hierarchy in term s of standard LTL with-
out past operators, containing only the future operators X(next),U(until), and
W(weak until) [ 4]. They show that every reactivity formula is equivalent to a n
LTL formula in negation normal form, such that every path thr ough the syntax
tree contains at most one alternation of UandW. We call this fundamental
result the Normalization Theorem. In the notation of [ 3,13,18], which mimics
the deﬁnition of the Σi,Πi, and∆iclasses of the arithmetical and polynomial
hierarchies, they proved that every LTL formula is equivale nt to a∆2-formula.
While these normal forms have had large conceptual impact in model check-
ing, automatic synthesis, and deductive veriﬁcation (see e .g. [14] for a recent
survey), the normalization procedures have had none. In particular, contrary to
the case of propositional or ﬁrst-order logic, they have not been implemented in
tools. The reason is that they are not direct, have high compl exity, and their cor-
rectness proofs are involved. The proof of the Normalizatio n Theorem sketched
in [4] (to the best of our knowledge, a full proof was never publish ed) relies on the
1985 theorem by Lichtenstein, Pnueli and Zuck, a complete pr oof of which can
be found in Zuck’s PhD Thesis [ 19]. Zuck’s proof translates the initial Past LTL
formula into a counter-free semi-automaton, then applies t he Krohn-Rhodes de-
composition and other results to translate the automaton in to a star-free regular
expression, and ﬁnally translates this expression into a re activity formula with
a non-elementary blow-up. It is remarkable that, despite th is prominence, only
little progress has been made to improve Zuck’s non-element ary normalization
procedure, even though no lower bound was known.
On the one hand, Maler and Pneuli have presented a double-exp onential4
construction, based on the Krohn-Rhodes decomposition, tr anslating a deter-
ministic counter-free automaton into a Past LTL formula [ 9,10,8]. On the other
hand, building upon this work, Boker, Lehtinen, and Sickert discovered a triple-
exponential construction translating into a standard LTL f ormula without past
operators [ 2]. Noticeably, both constructions yield formulas in the nor mal forms
for Past LTL ([ 11,12]) and standard LTL ([ 4,3,13,18]), respectively.
In 2020, two of us presented a novel proof of the Normalizatio n Theorem in
[18] (based on [ 17]). We showed that every formula ϕof LTL is equivalent to a
formula of the form /logicalordisplay
M⊆µ(ϕ),N⊆ν(ϕ)ϕM,N
whereµ(ϕ)andν(ϕ)are the sets of subformulas of ϕwith top operator in
{U,M}and{W,R}, respectively, and ϕM,Nis a∆2-formula obtained from ϕ,
4For further details we refer the reader to [ 2, Remark 1].A Simple Rewrite System for the Normalization of Linear Temp oral Logic 3
M, andNby means of a few syntactic rewrite rules. This yields a norma lization
procedure with single exponential complexity, which was ap plied in [ 18,17] to the
problem of translating LTL formulas into deterministic and limit-deterministic
ω-automata.
Despite being a clear improvement on the previous indirect a nd non-elementary
procedures, the normalization algorithm of [ 18] still has a problem: Since it has
to consider all possible sets MandN, it has exponential time complexity in the
best case . Moreover, the algorithm is not goal-oriented, in the sense that it does
not only concentrate on those parts of the formula that do not belong to∆2.
Consider for example a family of formulas
ϕn= ((aUb)Wc)Uψn
wherea,b,c are atomic propositions and ψnis some very large formula con-
taining only the Woperator. Intuitively, ψndoes not need to be touched by a
normalization procedure, the only problem lies in the alter nationU-W-Ualong
the leftmost branch of the syntax tree. However, the procedu re of [ 18] will be
exponential in the number of W-subformulas of ψn.
In this paper we provide a normalization procedure that solv es these prob-
lems. The procedure is similar to the one for bringing a Boole an formula in
conjunctive normal form (CNF). Recall that a Boolean formul a is in CNF if in
its syntax tree no conjunctions are below disjunctions, and only atomic propo-
sitions are below negations. The rewrite rules allow us to el iminate a node that
violates one of these conditions; for example, if a conjunct ion is below a dis-
junction, we distribute the conjunction over the disjuncti on. In the case of LTL,
instead of conjunctions and disjunctions we have to deal wit h diﬀerent kinds of
temporal operators, but we can still characterize the norma l form in terms of
constraints of the form “no X-node of the syntax tree is below a Y-node”. Our
rewrite rules eliminate nodes violating one of these constr aints.
The paper is organized as follows. Section 2introduces the syntax and se-
mantics of LTL. Section 3deﬁnes the Safety-Progress hierarchy, and recalls the
Normalization Theorem of Chang, Manna, and Pnueli. Section 4presents the
rewrite system, and proves it correct. Section 5summarizes the normalization
algorithm derived from the rewrite system, and Section 6introduces some de-
rived results and some extensions of the algorithm. Finally , Section 7reports on
an experimental evaluation.
2 Preliminaries
LetΣbe a ﬁnite alphabet. A wordwoverΣis an inﬁnite sequence of letters
a0a1a2...withai∈Σfor alli≥0, and a language is a set of words. A ﬁnite
wordis a ﬁnite sequence of letters. The set of all words (ﬁnite wor ds) is denoted
Σω(Σ∗). We letw[i](starting at i= 0) denote the i-th letter of a word w.
The ﬁnite inﬁx w[i]w[i+1]...w[j−1]is abbreviated with wijand the inﬁnite
suﬃxw[i]w[i+1]...withwi. We denote the inﬁnite repetition of a ﬁnite word4 J. Esparza, R. Rubio, S. Sickert
a0...anby(a0...an)ω=a0...ana0...ana0.... A set of (ﬁnite or inﬁnite)
words is called a language.
Deﬁnition 2.1. LTL formulas over a set Apof atomic propositions are con-
structed by the following syntax:
ϕ::=tt|ﬀ|a| ¬a|ϕ∧ϕ|ϕ∨ϕ
|Xϕ|ϕUϕ|ϕWϕ|ϕRϕ|ϕMϕ
wherea∈Apis an atomic proposition and X,U,W,R, andMare the next,
(strong) until, weak until, (weak) release, and strong rele ase operators, respec-
tively.
The inclusion of both the strong and weak until operators as w ell as the
negation normal form are essential to our approach. The oper atorsRandM,
however, are only added to ensure that every formula of lengt hnin the standard
syntax, with negation but only the until operator, is equiva lent to a formula of
lengthO(n)in our syntax. They can be removed at the price of an exponenti al
blow-up when translating formulas with occurrences of RandMinto formulas
without. The semantics is deﬁned as usual:
Deﬁnition 2.2. Letwbe a word over the alphabet Σ:= 2Apand letϕbe a
formula. The satisfaction relation w|=ϕis inductively deﬁned as the smallest
relation satisfying:
w|=tt for everyw
w/ne}ationslash|=ﬀ for everyw
w|=a iﬀa∈w[0]
w|=¬aiﬀa /∈w[0]
w|=ϕ∧ψiﬀw|=ϕandw|=ψ
w|=ϕ∨ψiﬀw|=ϕorw|=ψ
w|=Xϕiﬀw1|=ϕ
w|=ϕUψiﬀ∃k.wk|=ψand∀j <k.w j|=ϕ
w|=ϕMψiﬀ∃k.wk|=ϕand∀j≤k.wj|=ψ
w|=ϕRψiﬀ∀k.wk|=ψorw|=ϕMψ
w|=ϕWψiﬀ∀k.wk|=ϕorw|=ϕUψ
We letL(ϕ):={w∈Σω:w|=ϕ}denote the language of ϕ. We overload the
deﬁnition of |=and writeϕ|=ψas a shorthand for L(ϕ)⊆ L(ψ). Two formulas
ϕandψareequivalent , denotedϕ≡ψ, ifL(ϕ) =L(ψ). Further, we use the
abbreviations Fϕ:=ttUϕ(eventually) and Gϕ:=ﬀ Rϕ(always).
3 The Safety-Progress Hierarchy
We recall the hierarchy of temporal properties studied by Ma nna and Pnueli [ 11]
following the formulation of Černá and Pelánek [ 3]. The deﬁnition formalizes the
intuition that e.g. a safety property is violated by an execu tion iff one of its ﬁnite
preﬁxes is “bad” or, equivalently, satisﬁed by an execution iff all its ﬁnite preﬁxes
belong to a language of good preﬁxes.A Simple Rewrite System for the Normalization of Linear Temp oral Logic 5
Deﬁnition 3.1 ([ 11,3]).LetP⊆Σωbe a property over Σ.
–Pis a safety property if there exists a language of ﬁnite words L⊆Σ∗such
thatw∈Piff all ﬁnite preﬁxes of wbelong toL.
–Pis a guarantee property if there exists a language of ﬁnite wor dsL⊆Σ∗
such thatw∈Piff there exists a ﬁnite preﬁx of wwhich belongs to L.
–Pis an obligation property if it can be expressed as a positive B oolean com-
bination of safety and guarantee properties.
–Pis a recurrence property if there exists a language of ﬁnite wor dsL⊆Σ∗
such thatw∈Piff inﬁnitely many preﬁxes of wbelong toL.
–Pis a persistence property if there exists a language of ﬁnite wo rdsL⊆Σ∗
such thatw∈Piff all but ﬁnitely many preﬁxes of wbelong toL.
–Pis a reactivity property if Pcan be expressed as a positive Boolean combi-
nation of recurrence and persistence properties.
The inclusions between these classes are shown in Figure 1a. Chang, Manna,
and Pnueli give in [ 4] a syntactic characterization of the classes in terms of the
following fragments of LTL:
Deﬁnition 3.2 (Adapted from [ 3]).We deﬁne the following classes of LTL
formulas:
–The classΣ0=Π0=∆0is the least set of formulas containing all atomic
propositions and their negations, and is closed under the ap plication of con-
junction and disjunction.
–The classΣi+1is the least set of formulas containing Πithat is closed under
the application of conjunction, disjunction, and the X,U, andMoperators.
–The classΠi+1is the least set of formulas containing Σithat is closed under
the application of conjunction, disjunction, and the X,R, andWoperators.
–The class∆i+1is the least set of formulas containing Σi+1andΠi+1that is
closed under the application of conjunction and disjunctio n.
The following is a corollary of the proof of [ 4, Thm. 8]:
Theorem 3.1 (Adapted from [ 3]).A property that is speciﬁable in LTL is
a guarantee (safety, obligation, persistence, recurrence, r eactivity, respectively)
property if and only if it is speciﬁable by a formula from the cla ssΣ1,(Π1,∆1,
Σ2,Π2,∆2, respectively ).
Together with the result of [ 7], stating that every formula of LTL is equivalent
to a reactivity formula, Chang, Manna, and Pnueli obtain:
Theorem 3.2 (Normalization Theorem [ 7,11,4]).Every LTL formula is
equivalent to a formula of ∆2.
In [18], Sickert and Esparza obtain a new proof of the Normalizatio n Theo-
rem. They show that every formula ϕis equivalent to a formula of the form
/logicalordisplay
M⊆µ(ϕ),N⊆ν(ϕ)ϕM,N6 J. Esparza, R. Rubio, S. Sickert
reactivity
recurrence persistence
obligation
safety guarantee⊃⊂
⊂⊃
⊃⊂
(a) Safety-progress hierarchy [ 11]∆2
Π2 Σ2
∆1
Π1 Σ1⊃⊂
⊂⊃
⊃⊂
(b) Syntactic-future hierarchy
Fig. 1: Both hierarchies, side-by-side, indicating the cor respondence of Theo-
rem3.1
whereµ(ϕ)andν(ϕ)are the sets of subformulas of ϕwith top operator in
{U,M}and{W,R}, respectively, and ϕM,Nis a∆2-formula obtained from
ϕ,M, andNby means of a few syntactic rewrite rules. Further, ϕM,Nis at
most exponentially longer than ϕ. While this is a big improvement with respect
to previous procedures, it requires to iterate over all subs ets ofµ(ϕ)andν(ϕ),
and so the procedure always takes exponential time, even for simple families of
formulas that have equivalent ∆2-formulas with only a linear blow-up.
Example 3.1. Consider the family of formulas
ϕn= (···((((a0Ua1)Wa2)Ua3)Ua4)···Uan)
forn≥3. The setsµ(ϕn)andν(ϕn)have sizen−1and 1, respectively. The
procedure of [ 18] yields a disjunction of 2n+1formulasϕM,N, and so it takes
exponential time in n. However, exhaustive application of a few simpliﬁcation
rules yields a short formula in normal form of length Θ(n):
ϕn≡(GFa1∧(···((((a0Ua1)U(a2∨G(a0∨a1)))Ua3)Ua4)···Uan)
∨(···((((a0Ua1)Ua2)Ua3)Ua4)···Uan)
Intuitively, in order to normalize ϕnit suﬃces to solve the “local” problem caused
by the subformula ((a0Ua1)Wa2)Ua3ofϕn, which is in Σ3; however, the pro-
cedure of [ 18] is blind to this fact, and generates 2n+1formulas, only to simplify
them away later on.
4 A Normalizing Rewrite System
We present a rewrite system that allows us to normalize every LTL formula. As
a corollary, we obtain an alternative proof of the Normaliza tion Theorem.
The key idea is to treat the combinations GF(inﬁnitely often) and FG
(almost always) of temporal operators as atomic operators GFandFG(notice
the typesetting with the two letters touching each other). W e call them the limitA Simple Rewrite System for the Normalization of Linear Temp oral Logic 7
operators ; intuitively, whether a word satisﬁes a formula GFϕorFGϕdepends
only on its behaviour “in the limit”, in the sense that w′wsatisﬁesGFϕorFGϕ
iffwdoes.5So we add the limit operators to the syntax. Moreover, in orde r to
simplify the presentation, we also temporarily remove the o perators MandR
(we reintroduce them in Section 6). So we deﬁne:
Deﬁnition 4.1. Extended LTL formulas over a set Apof atomic propositions
are generated by the syntax:
ϕ::=tt|ﬀ|a| ¬a|ϕ∧ϕ|ϕ∨ϕ
|Xϕ|ϕUϕ|ϕWϕ|GFϕ|FGϕ
When determining the class of a formula in the syntactic futu re hierarchy, GF
andFGare implicitly replaced by GFandFG. For example, FGFais rewritten
intoFGFa, and so it is a formula of Σ3. In the rest of the section we only
consider extended formulas which are by construction negat ion normal form
and call them just formulas.
Let us now deﬁne the precise shape of our normal form, which is a bit more
strict than∆2. Formulas of the form ϕUψ,ϕWψ,Xϕ,GFϕ, andFGϕare called
U-,W-,X-,GF-, andFG-formulas, respectively. We refer to these formulas as
temporal formulas. The syntax tree Tϕof a formula ϕis deﬁned in the usual
way, and |ϕ|denotes the number of nodes of Tϕ. A node of Tϕis aU-node if
the subformula rooted at it is a U-formula. W-,GF-,FG- and temporal nodes
are deﬁned analogously.
Deﬁnition 4.2. Letϕbe an LTL formula. A node of Tϕis alimit node if it is
either aGF-node or a FG-node. The formula ϕis innormal form ifTϕsatisﬁes
the following properties:
1. NoU-node is under a W-node.
2. No limit node is under another temporal node.
3. NoW-node is under a GF-node, and no U-node is under a FG-node.
Remark 4.1. Observe that formulas in normal form belong to ∆2. Even a slightly
stronger statement holds: a formula in normal form is a posit ive Boolean combi-
nation of formulas of Σ2and formulas of the form GFψsuch thatψ∈Σ1(and
soGFψ∈Π2).
There is a dual normal form in which property 1. is replaced by “noW-node
is under a U-node”, and the other two properties do not change. Formulas in dual
normal form are positive Boolean combination of formulas of Π2and formulas
of the form FGψsuch thatψ∈Π1. Once the Normalization Theorem for the
primal normal form is proved, a corresponding theorem for th e dual form follows
as an easy corollary (see Section 6).
5Limit operators are called suspendable in [1].8 J. Esparza, R. Rubio, S. Sickert
In the following three subsections we incrementally normal ize formulas by
dealing with the three requirements of the normal form one by one. Intermediate
normal forms are obtained between stages, which we deﬁne for mally using the
following two measures:
–nu(ϕ)is the number of U-nodes inTϕthat are under some W-node, but not
under any limit node of Tϕ. For example, if ϕ= (aUb)W(FG(cUd))then
nu(ϕ) = 1.
–nlim(ϕ)is the number of distinct limit subformulas under some tempo ral
operator. Formally, nlim(ϕ)is the number of limit formulas ψ′such thatψ′
is a proper subformula of a temporal subformula (proper or no t) ofϕ. For
example, if ϕ= (FGaUGFb)∨(GFbWFGa)thennlim(ϕ) = 2.
Deﬁnition 4.3. An LTL formula ϕis in1-form ifnu(ϕ) = 0, and in 1-2-form
ifnu(ϕ) = 0andnlim(ϕ) = 0.
We proceed in three stages:
1. We remove all U-nodes that are under some W-node, but not under any
limit node. The resulting formula is in 1-form.
2. We remove all limit nodes under some other temporal node. T he resulting
formula is in 1-2-form.
3. We remove all W-nodes under some GF-node, and all U-nodes under some
FG-node. The resulting formula is in normal form (Deﬁnition 4.2).
Stage 1: Removing U-nodes under W-nodes.
We consider formulas ϕwith placeholders, i.e., “holes” that can be ﬁlled with a
formula. Formally, let [ ]be a symbol denoting a special atomic proposition. A
formula with placeholders is a formula with one or more occur rences of [ ], all of
them positive (i.e., the formula has no occurrence of ¬[ ]. We denote by ϕ[ψ]the
result of ﬁlling each placeholder of ϕwith an occurrence of ψ; formally,ϕ[ψ]is the
result of substituting ψfor[ ]inϕ. For example, if ϕ[ ] = ([ ] W(aU[ ])),
thenϕ[Xb] = (Xb)W(aUXb). We assume that [ ]binds more strongly than
any operator, e.g. ϕ1Wϕ2[ψ] =ϕ1W(ϕ2[ψ]).
This lemma, proved in the Appendix, allows us to pull U-subformulas out of
W-formulas:
Lemma 4.1.
ϕ1Wϕ2[ψ1Uψ2]≡(ϕ1Uϕ2[ψ1Uψ2])∨Gϕ1 (1)
ϕ1[ψ1Uψ2]Wϕ2≡(GFψ2∧ϕ1[ψ1Wψ2]Wϕ2) (2)
∨ϕ1[ψ1Uψ2]U(ϕ2∨(Gϕ1[ﬀ]))
Proposition 4.1. For every LTL formula ϕthere exists an equivalent formula
ϕ′in 1-form such that |ϕ′| ≤42|ϕ|·|ϕ|. Moreover, for every subformula GFψof
ϕ′the formula ψis a subformula of ϕ, and every FG-subformula of ϕ′is also a
subformula of ϕ.A Simple Rewrite System for the Normalization of Linear Temp oral Logic 9
Proof. We associate to each formula a rank, deﬁned by rank(ϕ) =|ϕ|+nu(ϕ).
Observe that a formula ϕis in 1-form iff rank(ϕ) =|ϕ|. Throughout the proof
we say that a formula ϕ′satisﬁes the limit property if for every subformula GFψ
ofϕ′the formula ψis a subformula of ϕand every FG-subformula of ϕ′is also
a subformula of ϕ(notice the asymmetry). Further, we say that a formula ϕ′
satisﬁes the size property if|ϕ′| ≤4rank(ϕ)·|ϕ|from which the claimed size bound
immediately follows.
We prove by induction on rank(ϕ)thatϕis equivalent to a formula ϕ′in
1-form satisfying the limit and size properties. Within the inductive step we
proceed by a case distinction of ϕ:
Ifϕ=tt,ﬀ,GFψ,FGψthenϕis already in 1-form, and satisﬁes the limit and
size properties.
Ifϕ=ϕ1∧ϕ2,ϕ1∨ϕ2,ϕ1Uϕ2then by induction hypothesis ϕ1andϕ2can
be normalized into formulas ϕ′
1andϕ′
2satisfying the limit and size properties.
The formulas ϕ′
1∧ϕ′
2,ϕ′
1∨ϕ′
2,ϕ′
1Uϕ′
2are then in 1-form (the latter because
the additional U-node is above any W-node) and satisfy the limit property. The
size property holds because:
|ϕ′
1|+|ϕ′
2|+1≤4rank(ϕ1)·|ϕ1|+4rank(ϕ2)·|ϕ2|+1
≤4rank(ϕ1)+rank(ϕ2)·(|ϕ1|+|ϕ2|+1)
≤4rank(ϕ)·|ϕ|
Ifϕ=Xϕ1, then by induction hypothesis there is a formula ϕ′
1equivalent to
ϕ1in 1-form, and so ϕis equivalent to Xϕ′
1, which is in 1-form and satisﬁes the
limit and size properties.
Ifϕ=ϕ1Wϕ2andnu(ϕ) = 0, thenϕ1Wϕ2is already in 1-form and satisﬁes
the limit and size properties.
Ifϕ=ϕ1Wϕ2andnu(ϕ)>0, then we proceed by a case distinction:
–ϕ2contains at least one U-node that is not under a limit node. Let ψ1Uψ2be
such aU-node. We derive ϕ2[ ]fromϕ2by replacing each U-node labelled
byψ1Uψ2by the special atomic proposition [ ]. By Lemma 4.1(1) we have:
ϕ1Wϕ2[ψ1Uψ2]≡ϕ1Uϕ2[ψ1Uψ2]∨ϕ1Wﬀ
Sincerank(ϕ1)<rank(ϕ),rank(ϕ2)<rank(ϕ), andrank(ϕ1Wﬀ)<rank(ϕ)
(the latter because ϕ2contains at least one U-node), by induction hy-
pothesisϕ1,ϕ2, andϕ1Wﬀcan be normalized into formulas ϕ′
1,ϕ′
2, and
ϕ′
3satisfying the limit and size properties. So ϕcan be normalized into
ϕ′=ϕ′
1Uϕ′
2∨ϕ′
3. Moreover, ϕ′satisﬁes the limit property, because all GF-
andFG-subformulas of ϕ′are subformulas of ϕ′
1,ϕ′
2, orϕ′
3. For the size
property we calculate:10 J. Esparza, R. Rubio, S. Sickert
|ϕ′|=|ϕ′
1|+|ϕ′
2|+|ϕ′
3|+2
≤4rank(ϕ1)·|ϕ1|+4rank(ϕ2)·|ϕ2|+4rank(ϕ1Wﬀ)·|ϕ1Wﬀ|+2
≤4rank(ϕ)−1·(|ϕ1|+|ϕ2|+|ϕ1Wﬀ|+2)
≤4rank(ϕ)−1·4·|ϕ|= 4rank(ϕ)·|ϕ|
–EveryU-node ofϕ2is under a limit node, and ϕ1contains at least one
U-node that is not under any limit node. Then ϕ1contains a maximal sub-
formulaψ1Uψ2(with respect to the subformula order) that is not under
a limit node. We derive ϕ1[ ]fromϕ1by replacing each U-node labelled
byψ1Uψ2that does not appear under a limit node by the special atomic
proposition [ ]. By Lemma 4.1(2), we have
ϕ1[ψ1Uψ2]Wϕ2≡
/parenleftbig
GFψ2∧ϕ1[ψ1Wψ2]Wϕ2/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
ρ1/parenrightbig
∨/parenleftbig
ϕ1[ψ1Uψ2]/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
ρ2U(ϕ2∨(ϕ1[ﬀ]Wﬀ/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
ρ3)/parenrightbig
In order to apply the induction hypothesis we argue that ρ1,ρ2, andρ3
have rank smaller than ϕ, and thus can be normalized to ρ′
1,ρ′
2andρ′
3
satisfying the limit and size properties. The formula ρ1has the same num-
ber of nodes as ϕ, but fewer U-nodes under W-nodes; sonu(ρ1)< nu(ϕ)
and thus rank(ρ1)<rank(ϕ). The same argument applies to ρ3. Finally,
rank(ρ2)<rank(ϕ)follows from the fact that ρ2has fewer nodes than ϕ.
Soϕcan be normalized to ϕ′= (GFψ2∧ρ′
1)∨(ρ′
2Uρ′
3).
We show that ϕ′satisﬁes the limit property. Let GFψbe a subformula of
ϕ′. IfGFψ=GFψ2, then we are done, because ψ2is a subformula of ϕ.
Otherwise GFψis a subformula of ρ′
1,ρ′
2, orρ′
3. Since all of them satisfy
the limit property, ψis a subformula of ϕ, and we are done. Further, every
FG-subformula of ϕ′belongs toρ′
1,ρ′
2, orρ′
3and so it is also subformula of
ϕ. For the size property we calculate:
|ϕ′|=|ρ′
1|+|ρ′
2|+|ρ′
3|+|ψ2|+4
≤4rank(ρ1)·|ρ1|+4rank(ρ2)·|ρ2|+4rank(ρ3)·|ρ3|+|ϕ1|+4
≤4rank(ϕ)−1·(|ϕ|+|ϕ|+|ϕ|)+|ϕ|+4
≤4rank(ϕ)−1·4·|ϕ|= 4rank(ϕ)·|ϕ|
Stage 2: Moving GF- andFG-subformulas up.
In this section, we address the second property of the normal form. The following
lemma allows us to pull limit subformulas out of any temporal formula. (Note
that the second rule is only necessary if the formula before s tage 1 contained
FG-subformulas, since stage 1 only creates new GF-formulas.)
Lemma 4.2.
ϕ[GFψ]≡(GFψ∧ϕ[tt])∨ϕ[ﬀ] (3)
ϕ[FGψ]≡(FGψ∧ϕ[tt])∨ϕ[ﬀ] (4)A Simple Rewrite System for the Normalization of Linear Temp oral Logic 11
We show using ( 3) and ( 4) that every formula in 1-form can be transformed
into an equivalent formula in 1-2-form.
Proposition 4.2. Every LTL formula ϕin 1-form is equivalent to a formula
ϕ′in 1-2-form such that |ϕ′| ≤3nlim(ϕ)·|ϕ|. Moreover, the size of the limit sub-
formulas does not increase: for every b>0, if|ψ| ≤bfor every limit subformula
ofϕ, then|ψ′| ≤bfor every limit subformula of ϕ′.
Proof. We proceed by induction on the number of proper limit subform ulas of
ϕ. Ifϕdoes not contain any, then it is already in 1-2-form. Assume t here exists
such a proper limit subformula ψthat is smaller (or incomparable) to all other
limit subformulas of ϕaccording to the subformula order. We derive ϕ[ ]from
ϕby replacing each limit-node labelled by ψby the special atomic proposition
[ ]. We then apply Lemma 4.2to obtain:
ϕ[ψ]≡(ψ∧ϕ[tt])∨ϕ[ﬀ] whereψ=GFψ′,FGψ′.
Note thatψdoes not properly contain any limit subformula, and so it is i n 1-2-
form. Both ϕ[tt]andϕ[ﬀ]are still in 1-form and they have one limit operator
less thanϕ. Thus they can be normalized by the induction hypothesis int oϕ′
1
andϕ′
2in 1-2-form. Finally, ϕ′= (ψ∧ϕ′
1)∨ϕ′
2is a Boolean combination of
formulas in 1-2-form, so it is in 1-2-form. The number of node s ofTϕ′can be
crudely bounded as follows:
|ϕ′| ≤ |ϕ′
1|+|ϕ′
2|+|ψ|+2
≤2·3nlim(ϕ[tt])·|ϕ[tt]|+|ψ|+2
≤3nlim(ϕ[tt])·/parenleftbig
2·(|ϕ|−|ψ|+1)+|ψ|+2/parenrightbig
≤3nlim(ϕ)−1·(2|ϕ|−|ψ|+4)
≤3nlim(ϕ)−1·(3|ϕ|) = 3nlim(ϕ)·|ϕ|
where the induction hypothesis is used in the second inequal ity, and|ψ| ≥2and
|ϕ| ≥2in the last one.
To show that the size of the limit subformulas does not increa se, letbbe a
bound on the size of the GF-subformulas of ϕ. We claim that the size of each GF-
subformula of ϕ′is also bounded by b(the case of FGψis analogous). Indeed, the
GF-subformulas of ϕ′areψ(which is already in ϕ) and the GF-subformulas of
ϕ′
1andϕ′
2. Since the GF-subformulas of ϕ[tt]andϕ[ﬀ]can only have decreased
in size, by induction hypothesis the number of nodes of any GF-subformula of
ϕ′
1andϕ′
2is bounded by b, and we are done.
Stage 3: Removing W-nodes ( U-nodes) under GF-nodes ( FG-nodes)
The normalization of LTL formulas is completed in this secti on by ﬁxing the
problems within limit subformulas. In order to do so, we intr oduce two new
rewrite rules that allow us to pull W-subformulas out of GF-formulas, and U-
subformulas out of FG-formulas.12 J. Esparza, R. Rubio, S. Sickert
Lemma 4.3.
GFϕ[ψ1Wψ2]≡GFϕ[ψ1Uψ2]∨(FGψ1∧GFϕ[tt]) (5)
FGϕ[ψ1Uψ2]≡(GFψ2∧FGϕ[ψ1Wψ2])∨FGϕ[ﬀ] (6)
The following proposition repeatedly applies these rules t o show that limit
formulas can be normalized with an exponential blowup.
Proposition 4.3. For every LTL formula ϕwithout limit operators, GFϕand
FGϕcan be normalized into formulas with at most |ϕ′| ≤3|ϕ|·|ϕ|nodes.
Proof. AGF-obstacle of a formula is a W-node or a U-node under a W-node
inside a GF-node. Similarly, a FG-obstacle is a U-node or a W-node under a
U-node inside a FG-node. Finally, an obstacle is either a GF-obstacle or an FG-
obstacle. We proceed by induction on the number of obstacles ofGFϕorFGϕ.
If they have no obstacles, then they are already in normal for m (Deﬁnition 4.2).
Assume GFϕhas at least one obstacle. Then ϕcontains at least one max-
imalW-nodeψ1Wψ2. We derive GFϕ[ ]fromGFϕby replacing each W-
node labelled by ψ1Wψ2by the special atomic proposition [ ]. By Lemma 4.3,
GFϕ[ψ1Wψ2]is equivalent to
GFϕ[ψ1Uψ2]∨(FGψ1∧GFϕ[tt])
We claim that each of GFϕ[ψ1Uψ2],GFϕ[tt], andFGψ1has fewer obstacles
thanGFϕ[ψ1Wψ2], and so can be normalized by induction hypothesis. Indeed,
GFϕ[ψ1Uψ2], andGFϕ[tt]have at least one W-node less than ϕ, and the num-
ber ofU-nodes under a W-node, due to the maximality of ψ1Wψ2, has not
increased, and as a consequence it has fewer GF-obstacles (and by deﬁnition
noFG-obstacles). For FGψ1, observe ﬁrst that every FG-obstacle of FGψ1is a
GF-obstacle of GFϕ[ψ1Wψ2]. Indeed, the obstacles of FGψ1are theU-nodes
and theW-nodes under U-nodes; the former were under W-nodes inϕ, and the
latter were W-nodes ofϕ, and so both GF-obstacles of GFϕ. Moreover, ψ1Wψ2
is aGF-obstacle of ϕ, but not a FG-obstacle of FGψ1. Hence, the number of
obstacles has decreased.
Assume now that FGϕhas at least one obstacle. Then ϕcontains at least one
maximal U-nodeψ1Uψ2. We derive FGϕ[ ]fromFGϕby replacing each U-
node labelled by ψ1Uψ2by the special atomic proposition [ ]. By Lemma 4.3,
FGϕ[ψ1Uψ2]is equivalent to
(GFψ2∧FGϕ[ψ1Wψ2])∨FGϕ[ﬀ]
Each ofGFψ2,FGϕ[ψ1Wψ2], andFGϕ[ﬀ]has fewer obstacles as FGϕ[ψ1Uψ2],
and can be normalized by induction hypothesis. The proof is a s above.
The size of the formula increases at most by a factor of 3 on eac h step, and
the number of steps is bounded by the number of both W-nodes and U-nodes
inϕ, which is bounded by the total number of nodes in ϕ. So the formula has
at most3|ϕ||ϕ|nodes.A Simple Rewrite System for the Normalization of Linear Temp oral Logic 13
The Normalization Theorem
The main result directly follows from the previous proposit ions.
Theorem 4.1. Every formula ϕof LTL is normalizable into a formula with at
most47|ϕ|nodes.
Proof. Any LTL formula ϕcan be transformed into an equivalent ϕ′in 1-form
of size|ϕ′| ≤42|ϕ|· |ϕ|by Proposition 4.1. Moreover, nlim(ϕ′)≤2· |ϕ|, since
everyFG-subformula of ψ′and every argument ψof aGF-subformula of ϕ′is a
subformula of ϕ. In addition, |ψ| ≤ |ϕ|for every GFψsubformula of ϕ.
According to Proposition 4.2, for every formula ϕ′in 1-form there is an
equivalent formula ϕ′′in 1-2-form with
(⋆) |ϕ′′| ≤3nlim(ϕ′)·|ϕ′| ≤32|ϕ|·(42|ϕ|·|ϕ|)≤32|ϕ|·43|ϕ|
This formula is a Boolean combination of limit formulas with at most|ϕ|nodes,
not containing any proper limit node, and other temporal for mulas containing
neither limit nodes nor U-nodes under W-nodes. The latter are in Σ2and Propo-
sition 4.3deals with the former. Notice that every GFψandFGψsubformula
has at most |ϕ|nodes and thus can be normalized into a formula with at most
3|ϕ||ϕ|nodes. The result ϕ′′′of replacing these limit subformulas by their normal
forms within ϕ′′is a Boolean combination of normal forms, and so we are done.
The number of nodes in the resulting formula ϕ′′′is at most:
|ϕ′′′| ≤ |ϕ′′|+nlim(ϕ′′)·3|ϕ|·|ϕ| nlim(ϕ′′)≤ |ϕ′′|
≤ |ϕ′′|·32|ϕ|·(|ϕ|+1) ( ⋆)
≤43|ϕ|·34|ϕ|·(|ϕ|+1) |ϕ|+1≤4|ϕ|/2
≤43|ϕ|·4(4log43+1
2)|ϕ|≤47|ϕ|
5 Summary of the normalization algorithm
We summarize the steps of the normalization algorithm descr ibed and proven
in Section 4. Recall that a formula is in normal form iff it satisﬁes the fo llowing
properties:
1. NoU-node is under a W-node.
2. No limit node is under another temporal node.
3. NoW-node is under a GF-node, and no U-node is under a FG-node.
The normalization algorithm applies the rules in Table 1as follows to ﬁx any
violation of these properties:
1.U-nodes under W-nodes and not under limit nodes are removed using rules
(1) and ( 2). This may introduce new GF-subformulas. By applying ( 2) only
to highest U-nodes ofϕ1the number of new GF-subformulas is only linear
in the size of the original formula.14 J. Esparza, R. Rubio, S. Sickert
Stage 1:(1)ϕ1Wϕ2[ψ1Uψ2]≡ϕ1Uϕ2[ψ1Uψ2]∨Gϕ1
(2)ϕ1[ψ1Uψ2]Wϕ2≡(GFψ2∧ϕ1[ψ1Wψ2]Wϕ2)
∨ϕ1[ψ1Uψ2]U(ϕ2∨Gϕ1[ﬀ])
Stage 2:(3) ϕ[GFψ]≡(GFψ∧ϕ[tt])∨ϕ[ﬀ]
(4) ϕ[FGψ]≡(FGψ∧ϕ[tt])∨ϕ[ﬀ]
Stage 3:(5)GFϕ[ψ1Wψ2]≡GFϕ[ψ1Uψ2]∨(FGψ1∧GFϕ[tt])
(6)FGϕ[ψ1Uψ2]≡(GFψ2∧FGϕ[ψ1Wψ2])∨FGϕ[ﬀ]
Table 1: Normalization rules.
2. Limit nodes under other temporal nodes are pulled out usin g rules ( 3) and
(4). By applying the rules only to the lowest limit nodes, it onl y needs to be
applied once for each limit subformula.
3.W-nodes under GF-nodes are removed using rule ( 5), andU-nodes under
FG-nodes are removed using rule ( 6). This may produce new limit nodes of
smaller size that are handled recursively. Choosing highes tW- andU-nodes
ensures that the process produces only a single exponential blowup over the
initial size of the formula.
After the three steps, a formula in normal form is obtained wi th a single
exponential blowup in the number of nodes.
Moreover, notice that ψ1itself does not play any role in rules (2) and (6), and
neither does ψ2in (5). Hence, the application of (1) can be made mode eﬃcient
by replacing not only every occurrence of ψ1Uψ2outside a limit subformula with
ψ1Wψ2andﬀ, but also every occurrence of ψUψ2for any formula ψbyψWψ2
and byﬀ. The same holds for rules (5) and (6).
Example 5.1. Let us apply the procedure to the formula ϕnin Example 3.1.
In stage 1, rule ( 2) matches the subformula (a0Ua1)Wa2and rewrites it to
GFa1∧(a0Wa1)Wa2∨(a0Ua1)U(a2∨ﬀWﬀ), whereﬀWﬀ can be simpliﬁed
toﬀand removed. The rewritten formula is in 1-form, because the re is noU-
node under a W-node, so we can continue to stage 2. Now, we must pull the
GF-nodeGFa1out the cascade of U-nodes using rule ( 3). This yields
ϕn≡(GFa1∧(···((((a0Wa1)Wa2∨(a0Ua1)Ua2)Ua3)Ua4)···Uan)
∨((···((((a0Ua1)Ua2)Ua3)Ua4)···Uan)
Since the only remaining limit node is outside any temporal f ormula, we have
obtained a formula in 1-2-form and the procedure arrives to s tage 3. Again, the
only limit subformula is GFa1, anda1does not contain any W-node, so the
formula is completely normalized and we have ﬁnished. Obser ve thatϕnhasA Simple Rewrite System for the Normalization of Linear Temp oral Logic 15
ϕ1[ψ1Mψ2]Wϕ2≡(GFψ1∧ϕ1[ψ1Rψ2]Wϕ2)∨ϕ1[ψ1Mψ2]U(ϕ2∨Gϕ1[ﬀ])
ϕ1Wϕ2[ψ1Mψ2]≡ϕ1Uϕ2[ψ1Mψ2]∨Gϕ1
ϕ1[ψ1Uψ2]Rϕ2≡ϕ1[ψ1Uψ2]Mϕ2∨Gϕ2
ϕ1[ψ1Mψ2]Rϕ2≡ϕ1[ψ1Mψ2]Mϕ2∨Gϕ2
ϕ1Rϕ2[ψ1Uψ2]≡(GFψ2∧ϕ1Rϕ2[ψ1Wψ2])∨(ϕ1∨Gϕ2[ﬀ])Mϕ2[ψ1Uψ2]
ϕ1Rϕ2[ψ1Mψ2]≡(GFψ1∧ϕ1Rϕ2[ψ1Rψ2])∨(ϕ1∨Gϕ2[ﬀ])Mϕ2[ψ1Mψ2]
GFϕ[ψ1Rψ2]≡GFϕ[ψ1Mψ2]∨(FGψ2∧GFϕ[tt])
FGϕ[ψ1Mψ2]≡(GFψ1∧FGϕ[ψ1Rψ2])∨FGϕ[ﬀ]
Table 2: Normalization rules for RandM.
been normalized by exactly two rule applications for all n≥3, so the algorithm
proceeds in linear-time for this family of formulas. The res ult is not identical,
but very similar to the one in Example 3.1.
6 Extensions
The operators RandM.We have omitted these operators from the proof and
the normalization procedure, since they can be expressed in terms of the subset of
operators we have considered. However, this translation ex ponentially increases
the number of nodes of the formula, so handling them directly is convenient for
eﬃciency. Their role at every step of the procedure is analog ous to that of the
UandWoperators, i.e. we treat Rin the same as Wand we treat Min the
same way as U. The corresponding rules are shown in Table 2.
Dual normal form. Recall that a formula is in dual normal form if it satisﬁes
conditions 2. and 3. of Deﬁnition 4.2and noW-node is under a U-node. Given
a formulaϕ, letϕbe a formula in negation normal form equivalent to ¬ϕ, and
letψbe a formula in primal normal form equivalent to ϕ. Sinceϕ≡ ¬ϕ≡ ¬ψ,
pushing the negation into ψyields a formula equivalent to ϕin dual normal
form.
Past LTL. Past LTL is an extension of LTL with past operators like yeste rday
(Y), since ( S), etc. In an appendix of [ 5], Gabbay introduced eight rewrite rules
to pull future operators out of past operators. Combining th ese rules with ours
yields a procedure that transforms a Past LTL formula into a n ormalized LTL
formula, where past operators are gathered in past-only sub formulas, and so can
be considered atomic propositions.16 J. Esparza, R. Rubio, S. Sickert
7 Experimental Evaluation
We have implemented the normalization procedure summarize d in Section 5as
a C++ program,6and compared its performance and the size of the generated
formulas with the implementation of the procedure of [ 18] included in the Owl
tool [6].7In order to make the comparison as fair as possible, we have im ple-
mented the same basic simpliﬁcation rules that are eagerly a pplied during the
normalization process.
We consider the following test suites: TLSF( a-b) is the repertory of formulas
of the 2021 Reactive Synthesis Competition of sizes between aandb; random
formulas are a set of 1000 randomly generated formulas, WU∗is the family of
formulas in Example 3.1for2≤n≤200; ﬁnally, (WU)∗is the family deﬁned
byϕ0=a0andϕn+1= (ϕnUa2n−1)Wa2nfor1≤n≤5. Notice that the last
family is limited to n= 5because Owl cannot handle ϕ6due to the size of the
powersets involved, while this is not a limitation for the ne w procedure.
Test casesSize blowup Time
Mean
(Tree)Worst-case
(Tree)Worst-case
(DAG)(ms)
Random formulas1.38 28.47 4.64 67 New
1.06 10.69 3.90 589 Owl
WU∗ 2.12 3.57 2.20 90 New
2.12 4.00 2.60 32343 Owl
(WU)∗ 193.58 744.29 17.81 11 New
27.86 73.33 10.05 54 Owl
TLSF(-100)1.04 4.60 3.14 65 New
1.17 8.02 2.48 867 Owl
TLSF(100-300)2.14 369.66 15.10 230 New
1.14 12.54 2.47 8636 Owl
Table 3: Experimental comparison of our normalization proc edure and the one
of [18].
Table 3shows the mean and worst-case blowup of the syntax tree of the
formulas (i.e., the ratio between the sizes of the formulas b efore and after nor-
malization), the worst-case blowup of their directed acycl ic graphs, and the exe-
cution time. Generally, the new procedure is faster but gene rates larger formulas.
However, the execution time and the size of the formulas can b e strongly aﬀected
by slight changes in the procedure. For example, selecting a n innermost instead
of an outermost ψ1Uψ2when matching ϕ[ψ1Uψ2]in rule ( 1) yields much bigger
6The implementation is available at https://github.com/ningit/ltl2delta2rs .
7We evaluate the tool build from commit 2fb342a09d3a9d7025b219404c764021d17b7ebd
ofhttps://gitlab.lrz.de/i7/owl/ .A Simple Rewrite System for the Normalization of Linear Temp oral Logic 17
formulas in some examples, like TLSF(-100), but produces th e opposite eﬀect in
others, like (WU)∗. Applying stage 2 separately to each topmost temporal for-
mula is generally better than applying it to the whole term, b ut it can sometimes
be slightly worse. Characterizing these situations and des igning a procedure that
adapts to them is a subject for future experiments.
8 Conclusions
We have presented a simple rewrite system that transforms an y LTL formula into
an equivalent formula in ∆2. We think that, together with [ 18], this result demys-
tiﬁes the Normalization Theorem of Chang, Manna, and Pnueli , which heavily
relied on automata-theoretic results, and involved a nonel ementary blowup. In-
deed, the only conceptual diﬀerence between our procedure a nd a rewrite system
for bringing Boolean formulas in CNF is the use of rewrite rul es with contexts.
The normalization procedure of Sickert and Esparza has alre ady found appli-
cations to the translation of LTL formulas into determinist ic or limit-deterministic
ω-automata [ 18]. Until now normalization had not been considered, because of
the non-elementary blow-up, much higher than the double exp onential blow-up
of existing constructions. With the new procedure, transla tions that ﬁrst nor-
malize the formula, and then apply eﬃcient formula-to-auto maton procedures
speciﬁcally designed for formulas in normal form, have beco me competitive. Our
new algorithm, purely based on rewriting rules, makes this e ven more attractive.
More generally, we think that the design of analysis procedu res for formulas in
normal form (to check satisﬁability, equivalence, or other properties) should be
further studied in the coming years.
References
1. Babiak, T., Badie, T., Duret-Lutz, A., Kretínský, M., Str ejcek, J.: Com-
positional approach to suspension and other improvements t o LTL trans-
lation. In: SPIN 2013. LNCS, vol. 7976, pp. 81–98. Springer ( 2013).
https://doi.org/10.1007/978-3-642-39176-7_6
2. Boker, U., Lehtinen, K., Sickert, S.: On the translation o f automata to linear tem-
poral logic. In: FoSSaCS 2022. LNCS, vol. 13242, pp. 140–160 . Springer (2022).
https://doi.org/10.1007/978-3-030-99253-8_8
3. Cerná, I., Pelánek, R.: Relating hierarchy of temporal pr operties to model
checking. In: MFCS 2003. LNCS, vol. 2747, pp. 318–327. Sprin ger (2003).
https://doi.org/10.1007/978-3-540-45138-9_26
4. Chang, E.Y., Manna, Z., Pnueli, A.: Characterization of t emporal property
classes. In: ICALP 1992. LNCS, vol. 623, pp. 474–486. Spring er (1992).
https://doi.org/10.1007/3-540-55719-9_97
5. Gabbay, D.M.: The declarative past and imperative future : Executable temporal
logic for interactive systems. In: Temporal Logic in Speciﬁ cation. LNCS, vol. 398,
pp. 409–448. Springer (1987). https://doi.org/10.1007/3-540-51803-7_36
6. Kretínský, J., Meggendorfer, T., Sickert, S.: Owl: A libr ary forω-words, au-
tomata, and LTL. In: ATVA 2018. LNCS, vol. 11138, pp. 543–550 . Springer (2018).
https://doi.org/10.1007/978-3-030-01090-4_3418 J. Esparza, R. Rubio, S. Sickert
7. Lichtenstein, O., Pnueli, A., Zuck, L.D.: The glory of the past. In:
Logic of Programs. LNCS, vol. 193, pp. 196–218. Springer (19 85).
https://doi.org/10.1007/3-540-15648-8_16
8. Maler, O.: On the Krohn-Rhodes cascaded decomposition th eorem. In: Time for
Veriﬁcation, Essays in Memory of Amir Pnueli. LNCS, vol. 620 0, pp. 260–278.
Springer (2010). https://doi.org/10.1007/978-3-642-13754-9_12
9. Maler, O., Pnueli, A.: Tight bounds on the complexity of ca scaded
decomposition of automata. In: Proc. of FOCS. pp. 672–682 (1 990).
https://doi.org/10.1109/FSCS.1990.89589
10. Maler, O., Pnueli, A.: On the cascaded decomposition of a utomata,
its complexity and its application to logic. Unpublished (1 994),
http://www-verimag.imag.fr/~maler/Papers/decomp.pdf
11. Manna, Z., Pnueli, A.: A hierarchy of temporal propertie s. In: PODC. pp. 377–410.
ACM (1990). https://doi.org/10.1145/93385.93442
12. Manna, Z., Pnueli, A.: Completing the temporal picture. Theor. Comput. Sci.
83(1), 91–130 (1991). https://doi.org/10.1016/0304-3975(91)90041-Y
13. Pelánek, R., Strejcek, J.: Deeper connections between L TL and alternating
automata. In: CIAA 2005. LNCS, vol. 3845, pp. 238–249. Sprin ger (2005).
https://doi.org/10.1007/11605157_20
14. Piterman, N., Pnueli, A.: Temporal logic and fair discre te sys-
tems. In: Handbook of Model Checking, pp. 27–73. Springer (2 018).
https://doi.org/https://doi.org/10.1007/978-3-319-1 0575-8_2
15. Pnueli, A.: The temporal logic of programs. In: FOCS. pp. 46–57. IEEE Computer
Society (1977). https://doi.org/10.1109/SFCS.1977.32
16. Pnueli, A.: The temporal semantics of concurrent progra ms. Theor. Comput. Sci.
13, 45–60 (1981). https://doi.org/10.1016/0304-3975(81)90110-9
17. Sickert, S.: A Uniﬁed Translation of Linear Temporal Log ic toω-
Automata. Ph.D. thesis, Technical University of Munich, Ge rmany (2019),
https://nbn-resolving.org/urn:nbn:de:bvb:91-diss-20 190801-1484932-1-4
18. Sickert, S., Esparza, J.: An eﬃcient normalisation proc edure for linear temporal
logic and very weak alternating automata. In: LICS. pp. 831– 844. ACM (2020).
https://doi.org/10.1145/3373718.3394743
19. Zuck, L.D.: Past temporal logic. Ph.D. thesis, The Weizm ann Institute of Science,
Israel (Aug 1986)A Simple Rewrite System for the Normalization of Linear Temp oral Logic 19
A Appendix
Letϕ≡wψdenotewk|=ϕiffwk|=ψfor allk∈N. The next two straightfor-
ward lemmas will be used pervasively in the following proofs .
Lemma A.1. For every formula ϕin negation normal form (and thus for every
LTL formula we consider in this article), and for every two formul asψandψ′,
ψ|=ψ′impliesϕ[ψ]|=ϕ[ψ′].
Lemma A.2. For every formula ϕand wordw,ψ≡wψ′impliesϕ[ψ]≡wϕ[ψ′].
Lemma 4.1.(1)ϕ1Wϕ2[ψ1Uψ2]≡(ϕ1Uϕ2[ψ1Uψ2])∨Gϕ1,
(2)ϕ1[ψ1Uψ2]Wϕ2≡(GFψ2∧ϕ1[ψ1Wψ2]Wϕ2)∨ϕ1[ψ1Uψ2]U(ϕ2∨(Gϕ1[ﬀ]))
Proof. For Equation ( 1) observe that, by the deﬁnition of the semantics of LTL,
ϕ1Wϕ2≡ϕ1Uϕ2∨Gϕ2holds for arbitrary formulas ϕ1,ϕ2. For Equation ( 2)
we proceed as follows.
(|=): Assumew|=ϕ1[ψ1Uψ2]Wϕ2. Ifw|=GFψ2, then we have wk|=ψ1Wψ2iff
wk|=ψ1Uψ2for everyk∈N; by Lemma A.2we then have w|=ϕ1[ψ1Wψ2]Wϕ2,
and we are done. If w/ne}ationslash|=GFψ2, then there is n∈Nsuch thatwk/ne}ationslash|=ψ2for all
k≥n, and soψ1Uψ2≡wnﬀ. Sincewsatisﬁes the left-hand side, there are two
possible cases
–There ism∈Nsuch thatwm|=ϕ2andwk|=ϕ1[ψ1Uψ2]for everyk <m .
Then, the second disjunct holds and we are done.
–wk|=ϕ1[ψ1Uψ2]for everyk∈N. Thenwk|=ϕ1[ﬀ]for allk≥nby
Lemma A.2withψ1Uψ2≡wnﬀ. Sown|=ϕ2∨Gϕ1[ﬀ], and we are done.
(=|): Assumewsatisﬁes the right-hand side formula. We consider two cases :
–w|=GFψ2∧ϕ1[ψ1Wψ2]Wϕ2. Thenw|=GFψ2and, as above, we have
wk|=ψ1Wψ2iffwk|=ψ1Uψ2for everyk∈N. Sincew|=ϕ1[ψ1Wψ2]Wϕ2,
we getw|=ϕ1[ψ1Uψ2]Wϕ2.
–w|=ϕ1[ψ1Uψ2]U(ϕ2∨Gϕ1[ﬀ]). Then there is n∈Nsuch thatwn|=
ϕ2∨Gϕ1[ﬀ]andwk|=ϕ1[ψ1Uψ2]for everyk <n . We consider two cases:
wn|=ϕ2orwk|=ϕ1[ﬀ]for allk≥n. In the ﬁrst case, wn|=ϕ1[ψ1Uψ2]Wϕ2
by deﬁnition of W. For the second, since ﬀ|=ψ1Uψ2and by Lemma A.1,
wk|=ϕ1[ﬀ]implieswk|=ϕ1[ψ1Uψ2]. Therefore, we have wk|=ϕ1[ψ1Uψ2]
for everyk<n and for every k≥n, sow|=ϕ1[ψ1Uψ2]Wϕ2.
Lemma 4.2.(3)ϕ[GFψ]≡(GFψ∧ϕ[tt])∨ϕ[ﬀ],
(4)ϕ[FGψ]≡(FGψ∧ϕ[tt])∨ϕ[ﬀ]
Proof. We prove that ϕ[ψ]≡(ψ∧ϕ[tt])∨ϕ[ﬀ]for everyψsuch that Gψ≡ψ,
i.e.,w|=ψiffwk|=ψfor allk∈N. This is a generalization of (3) and (4),
since both GFψ′andFGψ′satisfy the requirement about ψfor anyψ′. Since
ψis satisﬁed by all suﬃxes or for no suﬃx of a word w, it follows that either
ψ≡wttorψ≡wﬀfor any word w.20 J. Esparza, R. Rubio, S. Sickert
(|=): Ifwsatisﬁesψ, we also have w|=ϕ[tt]by Lemma A.2, and so the ﬁrst
disjunct is satisﬁed. Otherwise, again by Lemma A.2, we havew|=ϕ[ﬀ], so the
second disjunct holds.
(=|): Suppose wsatisﬁes the ﬁrst disjunct, then w|=ψandϕ[ψ]≡wϕ[tt]
by Lemma A.2. Otherwise, the second disjunct holds, and then w|=ϕ[ψ]by
Lemma A.1sinceﬀ|=ψ.
Lemma 4.3.
GFϕ[ψ1Wψ2]≡GFϕ[ψ1Uψ2]∨(FGψ1∧GFϕ[tt]) (5)
FGϕ[ψ1Uψ2]≡(GFψ2∧FGϕ[ψ1Wψ2])∨FGϕ[ﬀ] (6)
Proof. Proof of Equation ( 5).
(=|): We prove the following claims, which immediately imply th e result:
–GFϕ[ψ1Uψ2]|=GFϕ[ψ1Wψ2].
Follows from ψ1Uψ2|=ψ1Wψ2and Lemma A.1.
–FGψ1∧GFϕ[tt]|=GFϕ[ψ1Wψ2].
Assumew|=FGψ1∧GFϕ[tt]. On the one hand, there must be n∈Nsuch
thatwk|=Gψ1for allk≥n. SinceGψ1|=ψ1Wψ2,wk/satisfiesψ1Wψ2for all
k≥n. On the other hand, ϕ[tt]holds in inﬁnitely many suﬃxes of w. By
Lemma A.2andψ1Wψ2≡wkttfor allk≥n,ϕ[ψ1Wψ2]holds inﬁnitely
often inwand we are done.
(|=): AssumewsatisﬁesGFϕ[ψ1Wψ2], and so that w′|=ϕ[ψ1Wψ2]for inﬁnitely
many suﬃxes w′ofw. We prove the following three claims, which immediately
imply the result:
–Ifw|=FGψ1thenw|=GFϕ[tt].
Sincew|=FGψ1∧GFϕ[ψ1Wψ2], inﬁnitely many suﬃxes of wsatisfyGψ1
andϕ[ψ1Wψ2]. SinceGψ1|=ψ1Wψ2, these suﬃxes also satisfy ψ1Wψ2,
and so also ϕ[tt].
–Ifw/ne}ationslash|=FGψ1, thenψ1Uψ2≡wψ1Wψ2because Gψ1never holds and
ψ1Wψ2≡ψ1Uψ2∨Gψ1. Therefore, w|=GF[ψ1Wψ2]by Lemma A.2and
the ﬁrst clause of the disjunction.
Proof of Equation ( 6).
(=|): If the second clause of the right-hand side disjunction is satisﬁed, FGϕ[ψ1Uψ2]
holds since ϕis in negation normal form and ﬀ|=ψ1Uψ2. Otherwise, the ﬁrst
disjunct must be true, so for any word wsatisfying GFψ2,ψ1Wψ2≡wψ1Uψ2
and so they can be replaced inside the context by Lemma A.2.
(|=): Assumewsatisﬁes FGϕ[ψ1Uψ2], i.e., there is an n∈Nsuch thatwk|=
ϕ[ψ1Uψ2]for allk≥n. We consider two cases whether w|=GFψ2or not.
–Ifw|=GFψ2,ψ1Uψ2≡wψ1Wψ2for everyk∈N, sowk|=ϕ[ψ1Wψ2]for
allk≥nby Lemma A.2. Hence, the ﬁrst disjunct holds.
–Otherwise, there is an m≥nsuch thatwk/ne}ationslash|=ψ2for allk≥m. As a result,
wk/ne}ationslash|=ψ1Uψ2andψ1Uψ2≡wkﬀfor allk≥m. Using that wk|=ϕ[ψ1Uψ2]
and Lemma A.2,wk|=ϕ[ﬀ]for allk≥m, soFGϕ[ﬀ].