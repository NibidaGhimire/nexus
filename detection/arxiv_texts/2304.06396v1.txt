Ilaria Castellani and Alceste Scalas (Ed.): 14th Workshop
on Programming Language Approaches to Concurrency and
Communication-cEntric Software (PLACES 2023).
EPTCS 378, 2023, pp. 1–13, doi:10.4204/EPTCS.378.1© B. Almeida, A. Mordido & V .T. Vasconcelos
This work is licensed under the
Creative Commons Attribution License.Kind Inference for the FreeST Programming Language
Bernardo Almeida Andreia Mordido
Vasco T. Vasconcelos
LASIGE, Faculdade de Ciˆ encias, Universidade de Lisboa, Po rtugal
{bpdalmeida,afmordido,vmvasconcelos }@ciencias.ulisboa.pt
We present a kind inference algorithm for the F REEST programming language. The input to the
algorithm is F REEST source code with (possibly part of) kind annotations repl aced by kind variables.
The algorithm infers concrete kinds for all kind variables. We ran the algorithm on the F REEST test
suite by ﬁrst replacing kind annotation on all type variable s by fresh kind variables, and concluded
that the algorithm correctly infers all kinds. Non surprisi ngly, we found out that programmers do not
choose the most general kind in 20% of the cases.
1 Introduction
Software systems usually handle resources such as ﬁles and c ommunication channels. The correct usage
of such resources generally follows a protocol that describ es valid patterns of interactions. For exam-
ple a ﬁle should be opened and eventually closed, after which no read or write operations should ever
be performed. The case for communication channels is simila r: channels are opened, messages are
exchanged, channels may eventually be closed, after which n o more messages should be exchanged.
Session types [6, 7, 15] allow expressing elaborate protoco ls (for ﬁles and channels, for example) guar-
anteeing that protocols are obeyed by programs.
FREEST [1, 2, 3] is a concurrent functional programming language based on System F where pro-
cesses communicate via heterogeneously typed-channels go verned by context-free session types [16].
Context-free session types allow describing protocols suc h as the serialization of arithmetic expressions.
Consider the following datatype for arithmetic expression s.
1dataExp = Lit Int|Plus Exp Exp |Times Exp Exp
AnExpis either a literal with an integer ( LitInt), a sum of two sub-expressions ( Plus Exp Exp ) or the
product of two sub-expressions ( Times Exp Exp ). To serialise a value of type Expwe use a session type
such as the following.
2typeExpC = ⊕{LitC : ! Int, PlusC : ExpC;ExpC, TimesC: ExpC;ExpC }
The abbreviation ExpC deﬁnes the type of a channel as seen from the point of view of th e writer. A
channel of type ExpC offers a set of options LitC,PlusC andTimesC . If the ﬁrst option is chosen, an
integer must be sent ( !Int), while, in the others, two (sub-) expressions are expected to be sent.
Now, suppose that serialise is a function that serialises an Expon a channel ExpC .
3serialise : Exp →ExpC;a →a
The function expects a channel whose initial part is of type ExpC and then behaves as a:serialise is thus
polymorphic on a. It consumes the front of the channel (of type ExpC ) and returns the unused part of the
channel (of type a).2 Kind inference
As simple as it may seem, the above code is not valid in the curr ent version of F REEST. The actual
code requires further annotations allowing to distinguish functional from session types as well as linear
from unrestricted types. The distinction is materialised b y classifying types with kinds.
In F REEST kinds are composed of a multiplicity and a basic kind. Mult iplicities control the number
of times a value may be used: exactly once (linear, 1) or zero or more (unrestricted, ∗). Basic kinds
distinguish functional types ( T) from session types ( S). The reason why F REEST requires kinds lies on
polymorphism. If !Int;?Intis undoubtedly a session type and Int→Bool a functional type, the same
does not apply to the polymorphic variable a. Is it a session type or a functional type? The answer
depends on the base kind of a: ifSor then it is a session type, if Tthen it is a functional type. Kinds are
thus necessary to decide whether the types such as a;!Intare well-formed.
The datatype deﬁned in line 1 is currently written in annotat ed form as follows.
4dataExp:∗T = Lit Int|Plus Exp Exp |Times Exp Exp
The kind annotation ∗T, says that the datatype is functional. As for the multiplici ty, we chose the unre-
stricted usage so that it may be used as often as required. Not withstanding, one may declare Expof kind
1T, in which case serialise must become a linear function (of type Exp→ExpC;a 1 →a).
Expanding the abbreviation and annotating the datatype in l ine 2 we get the following type.
5typeExpC:1S = reca:1S . ⊕{LitC : ! Int, PlusC : a;a, TimesC: a;a }
ExpC deﬁnes a recursive type that is well-formed when the kind of i ts body, the external choice ( ⊕), is a
subkind of the kind for the recursion variable. In this case, the recursion variable ExpC is annotated with
1S, given that its body is itself a linear session.
Finally, the function serialise is currently written as follows.
6serialise : ∀a:1S . Exp →ExpC;a →a
The polymorphic variable astands for the continuation channel; it must be a linear sess ion. Annotating
awith the unrestricted session ∗Swould dictate that it can only be instantiated with Skip, the only
unrestricted session type.
Even if kinds are necessary in the underlying theory of the F REEST language, they clutter the code.
The code in lines 1–3 is easier to understand and quicker to wr ite; programmers need not ﬁght the
subtleties of each kind. Note that once kinds are inferred, t he prenex occurrences of ∀can be omitted.
The algorithm that we present in this paper annotates all typ e variables with their kinds, converting the
code in lines 1–3 to that in lines 4–6.
The works more closely related to F REEST are Quill [9], Affe [13], Alms [17], F◦[8], FuSe{}[11]
and Linear Haskell [4]. All these languages feature substru ctural type systems for dealing with linear,
functional and afﬁne types (in the case of Affe).
Quill [9] is a language with linear types and a syntax similar to that of Haskell. Quill features
a novel design that combines linear and functional types. Co ntrarily to F REEST, Quill does not use
kind mechanisms to distinguish between linear and function al types, instead it uses type predicates (or,
qualiﬁed types) to reason about linearity. Furthermore, Qu ill does not support subkinding. Quill also
has a type inference algorithm which was proven sound and com plete. Affe [13] is an ML-like language
with support to linear, afﬁne and unrestricted types. Like Q uill, Affe uses kinds and constrained types
to distinguish between linear and afﬁne types. Affe support s subkinding and it is equipped with full
principal type inference. Like Affe, Alms [17] is an ML-like language but is based on System Fω
<:, the
higher-order polymorphic λ-calculus with subtyping. Alms supports afﬁne and unrestri cted types. It
features a rich kind system with dependent kinds, unions, an d intersections. Moreover, Alms supports
ML modules, allows to expose unrestricted types as afﬁne whi ch gives ﬂexibility to library programmersB. Almeida, A. Mordido & V .T. Vasconcelos 3
m::=∗||ϕ Multiplicity
υ::=S|T Prekind
κ::=mυ|χ Kind
♯::=!|? Polarity
⋆::=⊕|& View
/llparenthesis·/rrparenthesis::={·}|/a\}bracke⊔le{⊔·/a\}bracke⊔ri}h⊔ Record
T::=Skip|End|♯T|⋆/llparenthesisℓ:Tℓ/rrparenthesisℓ∈L|T;T|()m Type
|Tm→T|/llparenthesisℓ:Tℓ/rrparenthesisℓ∈L|∀aκ.T|µaκ.T|a
e::=()m|x|λmx:T.e|Λaκ.v|e e|{ℓ=eℓ}ℓ∈L|let{ℓ=xℓ}ℓ∈L=eine Expression
|ℓe|let()m=eine|case eof{ℓ→xℓ}ℓ∈L|e[T]|match ewith{ℓ→xℓ}ℓ∈L
Figure 1: The syntax of kinds and types with support for kind i nference
and it is equipped with local type inference. F◦[8] is an extension of System F that uses kinds to
distinguish between linear and unrestricted types. Simila rly to Affe and Alms, it supports subkinding.
Similarly to F REEST, but unlike Affe, F◦does not support quantiﬁcation over kinds. The work closest
to F REEST in terms of context-free session types is FuSe{}[11]. Padovani proposed an alternative
formulation of context-free session types in which code and types are aligned via extra annotations,
something we decided to avoid in F REEST. Linear Haskell [4] is a proposal to bring linear types to
Haskell. In Linear Haskell functions T→UandT⊸Udescribe how the arguments of the function
are used. The latter form, inspired by linear logic [5], uses the argument Texactly once. In F REEST,
annotated arrows T∗→UorT→Udescribe how the function is used (unbounded usage or exactl y
once). F REEST kinding system differentiates session from functional t ypes. It also classiﬁes types
according to their usage, linear or unrestricted. Other sys tems consider these notions separately (or only
one of them). The ideas behind our inference algorithm are si milar to Quill and Affe, but the details are
quite different since we do not use type qualiﬁers to reason a bout linearity.
2 The Syntax of Kinds, Types and Expressions
This section brieﬂy introduces the notions of kinds, types a nd expressions; we refer the interested reader
to previous work for details [1]. F REEST relies on a base set for type variables (denoted by a,b,c)
and another for labels (denoted by k,ℓ). For the purpose of kind inference, we further use multiplicity
variables (denoted by ϕ) and kind variables (denoted by χ). The syntax of kinds, types and expressions
is in ﬁg. 1.
T
∗T S
∗SMultiplicities are used to indicate the number of times a value can be used. Th ey
are either unrestricted ( ∗), which denotes an arbitrary number of usages, linear ( ),
indicating precisely one usage, or a multiplicity variable (ϕ). The kinding system
relies on two base kinds: Sfor session types and Tfor arbitrary types. Kinds are either
the combination of a base kind and a multiplicity or a kind var iable χ. Since a value
of an unrestricted type may be used zero or more times, and one with a linear type
must be used exactly once, it should be clear that an unrestri cted value can used where4 Kind inference
a linear one is expected. Similarly, the interpretation of b ase kinds should be such that a session type
(∗S,S) can be used in place of an arbitrary type ( T). The subkind relation for non variables (denoted
κ<:κ) forms a lattice, as exhibited in the diagram.
Session types includeSkip indicating no communication, End representing channels ready to be
closed, output ( !T) and input ( ?T) messages, internal ( &{ℓ:Tℓ}ℓ∈L) and external choices ( ⊕{ℓ:Tℓ}ℓ∈L)
and sequential composition ( T;U).Functional types are composed of linear ()and unrestricted unit
types()∗, linear T→Uand unrestricted T∗→Ufunctions, records {ℓ:Tℓ}ℓ∈L, variants /a\}bracke⊔le{⊔ℓ:Tℓ/a\}bracke⊔ri}h⊔ℓ∈Land
universal types ∀aκ.T. Recursive types µaκ.Tare either session or functional depending on κ. Type
variables amay refer to recursion variables in recursive types or to pol ymorphic variables in universal
types. A function capturing in its body a free linear variabl e must itself be linear.
Expressions include variables x, term abstraction λmx:T.eand application e e, type abstrac-
tion Λaκ.vand application e[T], record {ℓ=eℓ}ℓ∈Land record elimination let{ℓ=xℓ}ℓ∈L=eine,
unit()mand unit elimination let()m=eine, injection in a variant ℓeand variant elimination
case eof{ℓ→xℓ}ℓ∈L. The expressions for channel operations include channel cr eation,newT, and
branching on a choice, match ewith{ℓ→xℓ}ℓ∈L. The remaining operations on channels—namely new,
send,receive andselectℓ—are all understood as constants (pre-deﬁned variables).
Given that our goal is to infer kind annotations, the reader m ay wonder why we allow them in the
source language, namely in polymorphic types ∀aκ.T, in recursive types µaκ.Tand in type abstractions
Λaκ.v. Programmers may, if they so wish, provide kind annotations in the source code. Such annotations
are passed to the algorithm. For those omitted, a fresh kind v ariable χis generated in its place.
3 Kind Inference
Our approach to kind inference follows the established two- step process, wherein the ﬁrst gathers con-
straints and the second resolves the constraints. The const raint generation step produces constraints in
two forms: κ<:κandϕ=/unionsqtext
ℓ∈Lmult(κℓ). The ﬁrst form represents subkinding constraints, while th e
second represents equalities between multiplicity variab les and the least upper bound of a given set of
multiplicities. To enhance readability, we use shorthand n otation ϕ=mult(κ)forϕ=/unionsqtextmult(κ)and
use/unionsqtextin inﬁx format for binary sets.
Constraint Generation from Types Kind and multiplicity constraints are captured by judgemen t∆in⊢
Tin:κout⇒Cout. The judgement states that type Thas kind κunder kinding context ∆(a map from type
variables to kinds), producing constraint set C. To clarify the distinction between input and output, we
use the subscript infor parameters and outfor results.
We explain a core subset of the constraint generation rules, those in ﬁg. 2 (the complete set is in
ﬁg. 4). Rule CG-Var reads the kind for type variable a(recursive or polymorphic) from the kinding
context, generating no additional restrictions. Rule CG-R ec governs recursive types which can either be
session or functional. The kind of the recursion variable is copied to the kinding context when analysing
type T. A constraint κ′<:κis generated to ensure that the kind κ′of the body of the recursive type
is a subkind of the kind κof the recursion variable. Rule CG-Arrow, deals with functi onsTm→U.
It applies the algorithm recursively to TandU, and assigns the kind mTto the function type, where
mcomes from the arrow annotation. Rule CG-Rcd builds kinds an d constraints for all elements in the
record. It generates a new fresh multiplicity variable ϕ. The result is kind ϕTand the constraint set is
composed of the union of Cℓfor allℓ∈Land a new constraint associating variable ϕto the least upper
bound of the multiplicities of κℓ. In order to ensure that ϕgets the expected multiplicity, all elementsB. Almeida, A. Mordido & V .T. Vasconcelos 5
∆in⊢Tin:κout⇒Cout
CG-V AR
∆,a:κ⊢a:κ⇒∅CG-R EC
∆,a:κ⊢T:κ′⇒C
∆⊢µaκ.T:κ′⇒C∪{κ′<:κ}CG-A RROW
∆⊢T:κ1⇒C1 ∆⊢U:κ2⇒C2
∆⊢Tm→U:mT⇒C1∪C2
CG-R CD
∆⊢Tℓ:κℓ⇒Cℓ ϕfresh (∀ℓ∈L)
∆⊢{ℓ:Tℓ}ℓ∈L:ϕT⇒/uniondisplay
ℓ∈LCℓ∪{ϕ=/unionsqdisplay
ℓ∈Lmult(κℓ),κℓ<:ϕT}CG-TA BS
∆,a:κ⊢T:κ′⇒C ϕfresh
∆⊢∀aκ.T:ϕT⇒C∪{ϕ=mult(κ′)}
Figure 2: Constraint generation from types
must be subkinds of the kind of the record, that is ϕT. Thus, if at least one entry in the record is linear,
then ϕis also constrained to be linear. Rule CG-TAbs adds the kind o f the polymorphic variable to the
typing context when checking the body T. It then assigns kind ϕTto the incoming type ∀aκ.T, where
the fresh multiplicity variable ϕdenotes the multiplicity of the kind of type T.
Type operator mult is fully resolved only after analysing expressions. At this point it can only be
partially resolved. When applied to a kind of the form mυoperatormult rewrites into multiplicity m,
that is,mult(mυ)=m.
As an example, let us consider the function that extracts the ﬁrst element of a pair.
fst:∀aχa.∀bχb.{fst:a,snd:b}∗→a
The application of the rules in ﬁg. 2, yields the constraint s et{ϕ1=mult(ϕ2T),ϕ2=mult(∗T),ϕ3=
mult(χa)⊔mult(χb)}. Solving the constraint set one obtains {ϕ1=∗,ϕ2=∗,ϕ3=mult(χa)⊔
mult(χb)}. We resolve the indeterminacy of kind variables χaandχbby assuming that they both are T,
the maximum of the kind lattice. The solution would then be {ϕ1=∗,ϕ2=∗,ϕ3=,χa=T,χb=T}.
We argue that assigning T(the maximum) to χaandχbis the preferred solution, since it is the less
restrictive of all solutions. If we were to choose another ki nd, such as ∗T, then it would be impossible
to call function fston linear values (of types with kind T). We would, undesirably, be ruling out some
perfectly well-behaved programs.
But is Tthe best kind for variables χaandχb? The answer depends on the deﬁnition of fst.
fst=Λaχa.Λbχb.λ∗p:{fst:a,snd:b}.let{fst=x,snd=y}=pinx
An examination of expression let{fst=x,snd=y}=pinxreveals that the second element of the
pair, y, is discarded. Hence, χbmust be unrestricted. Would χb=Tbe chosen, then F REEST would
complain about a linearity violation when type checking the function. In other words, constraint χb<:
∗Tmust be added to the constraint set, but an inspection of the t ype offst alone does not provide
enough information to generate such a constraint. In the fol lowing, we present rules that allow generating
constraints such as χb<:∗Tby inspecting variable usage in expressions.
Constraint Generation from Expressions Constraints for expressions are derived from judgement
∆in|Γin⊢ein:Tout⇒Cout|Σout. The judgement states that expression ehas type Tunder kinding
context ∆and typing context Γ. It generates a constraint set Cand a usage context Σ. Typing contexts
map term variables xto types T; usage contexts map term variables xto the kind κof their types. Usage6 Kind inference
∆in|Γin⊢ein:Tout⇒Cout|Σout
INF-VAR
∆⊢T:κ⇒C
∆|Γ,x:T⊢x:T⇒C|{x:κ}
INF-ABS
∆⊢T1:κ⇒C1∆|Γ,x:T1⊢e:T2⇒C2|ΣC3=ifisAbs ethen{κ<:mT}else∅
∆|Γ⊢λmx:T1.e:T1m→T2⇒C1∪C2∪C3∪Weaken(Σ,x,κ)|Σ\x
INF-APP
∆|Γ⊢e1:T1m→T2⇒C1|Σ1 ∆|Γ⊢e2:T1⇒C2|Σ2 ∆⊢T1m→T2:κ⇒C3
∆|Γ⊢e1e2:T2⇒C1∪C2∪C3∪Merge(Σ1,Σ2)|Σ1∪Σ2
INF-RCDELIM
∆|Γ⊢e1:{ℓ:Tℓ}ℓ∈L⇒C1|Σ1 ∆|Γ,(xℓ:Tℓ)ℓ∈L⊢e2:T⇒C2|Σ2 ∆⊢T:κ⇒C3
∆⊢Tℓ:κℓ⇒CℓC=C1∪C2∪C3∪Cℓ∪Merge(Σ1,Σ2)∪Weaken(Σ2,xℓ,κℓ) (∀ℓ∈L)
∆|Γ⊢let{ℓ=xℓ}ℓ∈L=e1ine2:T⇒C|(Σ1∪Σ2)\{xℓ}ℓ∈L
Figure 3: Constraint generation from expressions
contexts enable reasoning about variable usage: if the vari able is used exactly once, it may be linear,
otherwise it must be unrestricted. Next, we deﬁne functions Weaken andMerge . The former checks
whether variables are used in expressions. If a variable is n ot used, then the set with constraint κ<:∗T
is returned. The latter checks whether a variable is used mor e than once: if it appears in multiple usage
contexts, it must also be unrestricted.
Weaken(Σ,x,κ)=/braceleftBigg
∅ ifx∈Σ
{κ<:∗T}otherwiseMerge(Σ1,Σ2)={κ<:∗T|x:κ∈Σ1∩Σ2}
We are now in a position to explain the rules for expressions, in ﬁg. 3 (the complete set is in ﬁg. 5).
Rule Inf-Var is used to assign a type to a variable in a given ty ping context. The rule requires the type
context Γto contain an entry x:T. The constraints pertaining to type Tare gathered in C. To reﬂect
the usage of x, the rule returns a singleton map x:κ, where κis the kind of T. Rule Inf-Abs deals with
abstractions λmx:T1.e. It recursively calls the judgments on T1and on eto collect constraint sets C1,C2
and usage context Σ. The rule uses a new predicate, isAbs e, which holds when eis an abstraction. Then,
ifeis a closure the kind of T1must be a subkind of mT, where mis the multiplicity of the abstraction.
This restriction ensures that unrestricted abstractions d o not close over linear values. The result is type
T1m→T2together with a constraint set composed of the union of C1,C2,C3and the result of Weaken .
TheWeaken function checks whether a variable is unused at the end of its scope. In this case, the lambda
abstraction introduces term variable xand therefore, at the end of the scope, we have to check its usa ge.
Rule Inf-App states that if e1has type T1m→T2ande2has type T1, then the expression e1e2has type
T2. The constraints Cand usage context Σare computed by combining the results of the kind inference
ofe1,e2andT. The ﬁnal constraint set is the union of Σ1,Σ2,Σ3, and the result of the Merge function
which imposes that any variable found in both Σ1andΣ2must be unrestricted. The ﬁnal usage context is
Σ1∪Σ2. Rule Inf-RcdElim combines all previously discussed conce pts: it evaluates expressions e1and
e2, collecting C1,C2andΣ1,Σ2. The result is the type of e2, a constraint set C, which is the union ofB. Almeida, A. Mordido & V .T. Vasconcelos 7
C1,C2,C3, the result of Merge onΣ1andΣ2, and the application of Weaken onΣ2for all xℓ:κℓto check
for unused variables. The resulting usage context is the com bination of Σ1andΣ2with all entries for xℓ
removed.
When analysing constraint generation from the type for func tionfst, we intuitively concluded that
the second element in the pair must be unrestricted because i t is discarded. The application of rules in
ﬁg. 3, yield the constraint set {χb<:∗T,χa<:ϕ1T,χb<:ϕ1T,χa<:ϕ0T,χb<:ϕ0T,ϕ0=mult(χa)⊔
mult(χb),ϕ1=mult(χa)⊔mult(χb)}. A solution for this set is {ϕ0=,ϕ1=,χa=T,χb=∗T}.
The kind variable χbis set to ∗Tas we predicted. The constraint set is computed by combining the
constraint sets generated resulting from applying the judg ement to all sub-expressions and the result of
functions Merge andWeaken . First, we examine the Merge function: it takes contexts {p:κp}and
{x:χa}as input and calculates the intersection of the two contexts , adding a constraint κ<:∗Tfor
each element in the intersection. This process ensures that any variable that is used in both contexts
is unrestricted. The Weaken function is used to verify if any newly introduced variable i s eventually
discarded. In our example, Weaken is applied to x:χaandy:χbagainst usage context {p:κp,x:χa}.
Fory:χbfunctionWeaken proceeds as follows: since yis not present in the context, a new constraint
{χb<:∗T}is added. On the other hand, since xis already in the context, no constraint is created.
Constraint Solving We now describe an algorithm to solve constraint sets.
1. Initialise all kind variables χto the maximum of the kind lattice, T. Likewise initialize all multi-
plicity variables ϕto the maximum of multiplicities, . Store them in σ.
2. Iterate over each constraint in the set:
(a) If the constraint is of the form χ<:κ, then update the entry for χinσwith the greatest
lower bound of κandσ(χ). For example, if σ=[χ/maps⊔o→T]and we are analysing constraint
χ<:∗T, then the value for χinσmust be updated to T⊓∗T=∗T. After this step, we
would have σ=[χ/maps⊔o→∗T].
(b) If the constraint is of the form κ<:χ, then check whether κand the kind for χinσis in
the subkind relation; if not then fail. For example, if σ= [χ/maps⊔o→T]and we are analysing
constraint ∗T<:χ, then we ﬁnd that it is in the subkind relation since ∗T<:T. A failure
would happen with σ=[χ/maps⊔o→T].
(c) If the constraint is of the form κ1<:κ2and neither of the elements is a kind variable, then
check whether κ1<:κ2is in the subkind relation; if not then fail. If not fail, then remove
constraint κ1<:κ2from the constraint set.
(d) If the constraint is a multiplicity constraint ϕ=/unionsqtext
ℓ∈Lmult(κℓ), then compute the least upper
bound of the multiplicities. If any κℓis a kind variable ( χ) or a base kind with a multiplicity
variable ( ϕT), we get its kind from σ(recall that all variables are in σas per step 1). If the
thus obtained kind is more restrictive than that for ϕinσ(e.g.∗against σ(ϕ) =), then
store it in σ. Ifϕ=∗, then remove the constraint from the set.
3. Repeat the process in step 2 until there are no further upda tes to be made.
4. If all constraints have been satisﬁed, then return the sol ution σ. Otherwise, the constraint set is
unsatisﬁable.
In the case of function fst, the constraints gathered by the rules in ﬁg. 3 are as follows .
χ1<:ϕ0T,χ0<:ϕ0T,χ1<:ϕ1T,χ0<:ϕ1T,χ1<:∗T,
ϕ0=mult(χ0)⊔mult(χ1),ϕ1=mult(χ0)⊔mult(χ1)8 Kind inference
Category of annotation Number of annotations in the
source codeNumber of more general
annotations generated
Datatypes 129 0
Type abbreviations 206 7
Universal types 282 94
Explicit recursive types 23 10
Type abstractions 30 25
Total 670 136
Table 1: Distribution of annotations
We start with σ= [χ0/maps⊔o→T,χ1/maps⊔o→T,ϕ0/maps⊔o→,ϕ1/maps⊔o→]. Next we pick constraint χ1<:ϕ0Tand
use item 2(a). We have, χ1<:Tsince σ(ϕ0)=. Given that σ(χ0)is equal to T, and subkinding is
reﬂexive, σ(ϕ0)remains as T. The process for the second constraint, χ1<:ϕ0T, is similar. We analyse
the constraint χ1<:Tsince σ(ϕ0)=. Also in this case item 2(a) does not change σ. The next two
constraints, χ1<:ϕ1Tandχ0<:ϕ1T, are also handled by item 2(a). Once again, σis subject to no
update. Now we pick constraint χ1<:∗T. Under item 2(a) the algorithm computes the greatest lower
bound of ∗TandT, which is ∗T, soσis updated accordingly. For the last two constraints we use i tem
2(d). We read the values of χ0andχ1from σand compute the least upper bound of mult(T)and
mult(∗T)which yields . Both entries for χ0andχ1are already and therefore no update to σis done.
Since we analysed all constraints and σwas updated in this iteration of the algorithm, the ﬁxed-poi nt
is not reached yet and so we go through each constraint once ag ain. This time no update is made and
therefore we terminate with σ=[χ0/maps⊔o→T,χ1/maps⊔o→∗T,ϕ0/maps⊔o→,ϕ0/maps⊔o→].
The algorithm iteratively updates the values of the kind and multiplicity variables until no further
updates can be made, that is, until a ﬁxed point is reached. Si nce the kind lattice is ﬁnite, any sequence
of updates must eventually converge to a ﬁxed point. For the s ame reason, each constraint can only be
updated a ﬁnite number of times. Therefore, the algorithm te rminates after a ﬁnite number of iterations.
The running time of the constraint generation algorithm is l inear on the size of the input expression;
that of the constraint satisfaction algorithm is quadratic . In the worst case scenario the number of con-
straints is equal to the size of the expression. Each constra int can only update σtwice (when a more
restrictive solution is found). The worst case happens when a different constraint performs an update
in each iteration, forcing the algorithm to analyse all the c onstraints in each iteration. A sensible opti-
mization removes the constraints from the constraint set al so in items 2(a) and 2(b), after concluding that
they cannot update σto a more restrictive solution. Since the update can only be p erformed a constant
number of times, the algorithm becomes linear on the size of t he input expression.
Evaluation We implemented the algorithm and incorporated it in the F REEST interpreter. Then we
conducted an evaluation to check the behaviour of the algori thm when used on F REEST source code.
The evaluation consisted of replacing all the 670 kind annot ations by fresh kind variables in the 232
valid programs in the F REEST test suite and standard library (total of 9131 lines of cod e), running the
algorithm and checking whether the algorithm infers the ann otations back.
Kind annotations are spread over datatypes, type abbreviat ions, universal types, recursive types, and
type abstractions. The distribution of annotations is as in table 1. The small number of annotations in
recursive types and type abstractions comes from the fact th at they are usually introduced implicitly,
either via type abbreviations (as in the code in line 2) or thr ough compiler elaboration introducing typeB. Almeida, A. Mordido & V .T. Vasconcelos 9
abstractions Λaκ.vfor functions accompanied by their signatures.
We concluded that the algorithm correctly inferred all anno tations and found that 136 of the 670
annotations (that is, 20%) were too speciﬁc and could be rela xed to a more general kind. The largest
number of more general annotations found by the algorithm co me from universal types. We attribute
this to the conservative nature of programmers: if we are dev eloping Church encodings (heavy on poly-
morphism), why would one require linear type variables? The algorithm did not improve the kind for
datatypes: datatypes are usually used in an unrestricted ma nner in programs. Moreover, in the test suite,
they usually appear as the ﬁrst argument (to be pattern-matc hed) of functions with unrestricted closures
and therefore they cannot be linear.
For an example where the algorithm suggests a more general ki nd, consider function composition.
dot :∀a:∗T b:∗T c:∗T . (b →c)→(a→b)→a→c
dot f g x = f (g x)
If we only provide unrestricted arguments to dot, then there is no reason why the polymorphic variables
a,bandccould not have kind ∗T. However, we would be ruling out programs that apply dotto linear
arguments. Consider the following program.
dot : (b →c)→(a→b)→a→c
dot f g x = f (g x)
g : ?Int;End→Int
g c =let(x, c) = receive cin close c ; x
main : Int
main =
let(w, r) = new()in
fork(\1→letw =send5 win close w) ;
dotidg r
This program would be ﬂagged as untypable because we instant iate the polymorphic variable awith the
linear session type ?Int;End. Since there is no reason why a,bandcshould be unrestricted, the algorithm
assigns kind 1Tto the three polymorphic variables.
4 Future Work
There are several avenues for future work. The most immediat e is to prove the correctness of the algo-
rithm with respect to the typing system. Then, equipped with kind inference, we may think of introducing
a third base kind, that for session types that must be eventua lly closed (that reach type End). In this case
we would require the kind of the argument to function new to be of the newly introduced kind. We
further plan to study the possibility of quantifying over ki nds or multiplicities for extra ﬂexibility in
programming.
Acknowledgements We thank the anonymous reviewers for their detailed comment s that greatly
contributed to improve the paper. This work was supported by FCT through project SafeSessions,
ref. PTDC/CCI-COM/6453/2020, and the LASIGE Research Unit , ref. UIDB/00408/2020 and ref.
UIDP/00408/2020.10 Kind inference
References
[1] Bernardo Almeida, Andreia Mordido, Peter Thiemann & Vas co T. Vasconcelos (2022): Polymorphic lambda
calculus with context-free session types .Inf. Comput. 289(Part), p. 104948, doi: 10.1016/j.ic.2022.
104948 .
[2] Bernardo Almeida, Andreia Mordido & Vasco T. Vasconcelo s (2019): FreeST, a concurrent programming
language with context-free session types .https://freest-lang.github.io . Last accessed 2023.
[3] Bernardo Almeida, Andreia Mordido & Vasco T. Vasconcelo s (2019): FreeST: Context-free Session Types in
a Functional Language . In: PLACES ,EPTCS 291, pp. 12–23, doi: 10.4204/EPTCS.291.2 .
[4] Jean-Philippe Bernardy, Mathieu Boespﬂug, Ryan R. Newt on, Simon Peyton Jones & Arnaud Spiwack
(2018): Linear Haskell: practical linearity in a higher-order poly morphic language .Proc. ACM Program.
Lang. 2(POPL), pp. 5:1–5:29, doi: 10.1145/3158093 .
[5] Jean-Yves Girard (1987): Linear Logic . Theor. Comput. Sci. 50, pp. 1–102, doi: 10.1016/
0304-3975(87)90045-4 .
[6] Kohei Honda (1993): Types for Dyadic Interaction . In: CONCUR ,LNCS 715, Springer, pp. 509–523,
doi:10.1007/3-540-57208-2_35 .
[7] Kohei Honda, Vasco Thudichum Vasconcelos & Makoto Kubo ( 1998): Language Primitives and Type Dis-
cipline for Structured Communication-Based Programming . In: ESOP ,LNCS 1381, Springer, pp. 122–138,
doi:10.1007/BFb0053567 .
[8] Karl Mazurak, Jianzhou Zhao & Steve Zdancewic (2010): Lightweight linear types in system fdegree . In
Andrew Kennedy & Nick Benton, editors: Proceedings of TLDI 2010: 2010 ACM SIGPLAN International
Workshop on Types in Languages Design and Implementation, M adrid, Spain, January 23, 2010 , ACM, pp.
77–88, doi: 10.1145/1708016.1708027 .
[9] J. Garrett Morris (2016): The best of both worlds: linear functional programming with out compromise .
In Jacques Garrigue, Gabriele Keller & Eijiro Sumii, editor s:Proceedings of the 21st ACM SIGPLAN
International Conference on Functional Programming, ICFP 2016, Nara, Japan, September 18-22, 2016 ,
ACM, pp. 448–461, doi: 10.1145/2951913.2951925 .
[10] Martin Odersky, Christoph Zenger & Matthias Zenger (20 01): Colored local type inference . In Chris Hankin
& Dave Schmidt, editors: Conference Record of POPL 2001: The 28th ACM SIGPLAN-SIGACT Sympo-
sium on Principles of Programming Languages, London, UK, Ja nuary 17-19, 2001 , ACM, pp. 41–53, doi: 10.
1145/360204.360207 .
[11] Luca Padovani (2019): Context-Free Session Type Inference .ACM Trans. Program. Lang. Syst. 41(2), pp.
9:1–9:37, doi: 10.1145/3229062 .
[12] Benjamin C. Pierce & David N. Turner (2000): Local type inference .ACM Trans. Program. Lang. Syst.
22(1), pp. 1–44, doi: 10.1145/345099.345100 .
[13] Gabriel Radanne, Hannes Saffrich & Peter Thiemann (202 0):Kindly bent to free us .Proc. ACM Program.
Lang. 4(ICFP), pp. 103:1–103:29, doi: 10.1145/3408985 .
[14] John C. Reynolds (1974): Towards a theory of type structure . In Bernard J. Robinet, editor: Programming
Symposium, Proceedings Colloque sur la Programmation, Par is, France, April 9-11, 1974 ,Lecture Notes in
Computer Science 19, Springer, pp. 408–423, doi: 10.1007/3-540-06859-7_148 .
[15] Kaku Takeuchi, Kohei Honda & Makoto Kubo (1994): An Interaction-based Language and its Typing System .
In:PARLE ,LNCS 817, Springer, pp. 398–413, doi: 10.1007/3-540-58184-7_118 .
[16] Peter Thiemann & Vasco T. Vasconcelos (2016): Context-free session types . In Jacques Garrigue, Gabriele
Keller & Eijiro Sumii, editors: Proceedings of the 21st ACM SIGPLAN International Conferen ce on Func-
tional Programming, ICFP 2016, Nara, Japan, September 18-2 2, 2016 , ACM, pp. 462–475, doi: 10.1145/
2951913.2951926 .B. Almeida, A. Mordido & V .T. Vasconcelos 11
[17] Jesse A. Tov & Riccardo Pucella (2011): Practical afﬁne types . In Thomas Ball & Mooly Sagiv, editors:
Proceedings of the 38th ACM SIGPLAN-SIGACT Symposium on Pri nciples of Programming Languages,
POPL 2011, Austin, TX, USA, January 26-28, 2011 , ACM, pp. 447–458, doi: 10.1145/1926385.1926436 .
[18] J. B. Wells (1994): Typability and Type-Checking in the Second-Order lambda-C alculus are Equivalent and
Undecidable . In: LICS , IEEE Computer Society, pp. 176–185, doi: 10.1109/LICS.1994.316068 .
[19] Andrew K. Wright (1995): Simple Imperative Polymorphism .LISP Symb. Comput. 8(4), pp. 343–355.12 Kind inference
∆in⊢Tin:κout⇒Cout
CG-U NIT
∆⊢()m:mT⇒∅CG-V AR
∆,a:κ⊢a:κ⇒∅CG-S KIP
∆⊢Skip :∗S⇒∅CG-E ND
∆⊢End:S⇒∅
CG-M SG
∆⊢T:κ⇒C
∆⊢♯T:S⇒CCG-C H
∆⊢Tℓ:κℓ⇒Cℓ(∀ℓ∈L)
∆⊢⋆/llparenthesisℓ:Tℓ/rrparenthesisℓ∈L:S⇒/uniondisplay
ℓ∈LCℓ∪{κℓ<:S}
CG-S EQ
∆⊢T:κ1⇒C1 ∆⊢U:κ2⇒C2 ϕfresh
∆⊢T;U:ϕS⇒C1∪C2∪{κ1<:S,κ2<:S,ϕ=mult(κ1)⊔mult(κ2)}
CG-R EC
∆,a:κ⊢T:κ′⇒C
∆⊢µaκ.T:κ′⇒C∪{κ′<:κ}CG-A RROW
∆⊢T:κ1⇒C1 ∆⊢U:κ2⇒C2
∆⊢Tm→U:mT⇒C1∪C2
CG-R CD
∆⊢Tℓ:κℓ⇒Cℓ ϕfresh (∀ℓ∈L)
∆⊢{ℓ:Tℓ}ℓ∈L:ϕT⇒/uniondisplay
ℓ∈LCℓ∪{ϕ=/unionsqdisplay
ℓ∈Lmult(κℓ),κℓ<:ϕT}CG-TA BS
∆,a:κ⊢T:κ′⇒C ϕfresh
∆⊢∀aκ.T:ϕT⇒C∪{ϕ=mult(κ′)}
Figure 4: Constraint generation from types (complete set of rules)B. Almeida, A. Mordido & V .T. Vasconcelos 13
∆in|Γin⊢ein:Tout⇒Cout|Σout
INF-CONST
∆⊢typeof(c):κ⇒C
∆|Γ⊢c:typeof(c)⇒C|∅INF-VAR
∆⊢T:κ⇒C
∆|Γ,x:T⊢x:T⇒C|{x:κ}
INF-ABS
∆⊢T1:κ⇒C1 ∆|Γ,x:T1⊢e:T2⇒C2|Σ C3=ifisAbs ethen{κ<:mT}else∅
∆|Γ⊢λmx:T1.e:T1m→T2⇒C1∪C2∪C3∪Weaken(Σ,x,κ)|Σ\{x:κ}
INF-APP
∆|Γ⊢e1:T1m→T2⇒C1|Σ1 ∆|Γ⊢e2:T1⇒C2|Σ2 ∆⊢T1m→T2:κ⇒C3
∆|Γ⊢e1e2:T2⇒C1∪C2∪C3∪Merge(Σ1,Σ2)|Σ1∪Σ2
INF-TA BS
∆,a:κ|Γ⊢v:T⇒C1|Σ ∆⊢T:κ′⇒C2
∆|Γ⊢Λaκ.v:∀aκ.T⇒C1∪C2|Σ
INF-TA PP
∆⊢T:κ1⇒C1 ∆|Γ⊢e:∀aκ2.U⇒C2|Σ
∆|Γ⊢e[T]:U[T/a]⇒C1∪C2|Σ
INF-RCDELIM
∆|Γ⊢e1:{ℓ:Tℓ}ℓ∈L⇒C1|Σ1 ∆|Γ,(xℓ:Tℓ)ℓ∈L⊢e2:T⇒C2|Σ2 ∆⊢T:κ⇒C3
∆⊢Tℓ:κℓ⇒CℓC=C1∪C2∪C3∪Merge(Σ1,Σ2)∪Weaken(Σ2,xℓ,κℓ) (∀ℓ∈L)
∆|Γ⊢let{ℓ=xℓ}ℓ∈L=e1ine2:T⇒C|(Σ1∪Σ2)\{xℓ:κℓ}ℓ∈L
INF-RCD
∆|Γ⊢eℓ:Tℓ⇒Cℓ|Σℓ ∆⊢Tℓ:κℓ⇒C′
ℓ(∀ℓ∈L)
∆|Γ⊢{ℓ=vℓ}ℓ∈L:{ℓ:Tℓ}ℓ∈L⇒Cℓ∪C′
ℓ∪Merge(Σℓ)|/uniondisplay
ℓ∈LΣℓ
INF-VARIANT
∆|Γ⊢e:Tk⇒C1|Σ ∆⊢Tℓ:κℓ⇒Cℓ k∈L(∀ℓ∈L)
∆|Γ⊢k e:/a\}bracke⊔le{⊔ℓ:Tℓ/a\}bracke⊔ri}h⊔ℓ∈L⇒C1∪Cℓ|Σ
INF-CASE
∆|Γ⊢e:/a\}bracke⊔le{⊔ℓ:Tℓ/a\}bracke⊔ri}h⊔ℓ∈L⇒C1|Σ1 ∆|Γ⊢eℓ:Tℓm→T⇒Cℓ|Σℓ ∆⊢Tℓ:κℓ⇒C′
ℓ(∀ℓ∈L)
∆|Γ⊢case eof{ℓ→xℓ}ℓ∈L:T⇒C1∪Cℓ∪C′
ℓ|Σ1∪Σℓ
INF-SEL
∆⊢Tℓ:κℓ⇒Cℓ ∆|Γ⊢eℓ:Tℓm→T⇒C′
ℓ|Σℓ k∈L(∀ℓ∈L)
∆|Γ⊢select k:⊕/llparenthesisℓ:Tℓ/rrparenthesisℓ∈Lm→Tk⇒Cℓ∪C′
ℓ|/uniondisplay
ℓ∈LΣℓ
INF-NEW
∅⊢T:κ⇒C
∆|Γ⊢new T:{fst:T,snd:T}⇒C|/ 0
Figure 5: Constraint generation from expressions (complet e set of rules)