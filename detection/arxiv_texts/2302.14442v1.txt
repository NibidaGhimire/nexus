City-scale Pollution Aware Trafﬁc Routing
by Sampling Max Flows using MCMC
Shreevignesh Suriyanarayanan, Praveen Paruchuri, Girish Varma
Machine Learning Lab, IIIT Hyderabad
sshreevignesh.s@research.iiit.ac.in, praveen.p@iiit.ac.in, girish.varma@iiit.ac.in
Abstract
A signiﬁcant cause of air pollution in urban areas worldwide
is the high volume of road trafﬁc. Long-term exposure to se-
vere pollution can cause serious health issues. One approach
towards tackling this problem is to design a pollution-aware
trafﬁc routing policy that balances multiple objectives of i)
avoiding extreme pollution in any area ii) enabling short tran-
sit times, and iii) making effective use of the road capacities.
We propose a novel sampling-based approach for this prob-
lem. We provide the ﬁrst construction of a Markov Chain that
can sample integer max ﬂow solutions of a planar graph, with
theoretical guarantees that the probabilities depend on the ag-
gregate transit length. We designed a trafﬁc policy using di-
verse samples and simulated trafﬁc on real-world road maps
using the SUMO trafﬁc simulator. We observe a considerable
decrease in areas with severe pollution when experimented
with maps of large cities across the world compared to other
approaches.
1 Introduction
Long-term exposure to high amounts of air pollution causes
various health issues (Pope III and Dockery 2006). Data
from WHO (World Health Organization et al. 2016) shows
that91% of the world’s population lives in places where
the pollution levels exceed the guideline limits. Outdoor air
pollution accounts for an estimated 4:2million deaths per
year, primarily due to stroke, heart disease, lung cancer, and
chronic respiratory diseases. Low and middle-income coun-
tries suffer the most, especially in the Western Paciﬁc and
South-East Asia regions. Road trafﬁc is considered one of
the most signiﬁcant contributors to air pollution in urban en-
vironments (Gualtieri et al. 2015). Studies have shown that
people are willing to choose greener routes when credible
information is provided (Ahmed et al. 2020).
Kamishetty, Vadlamannati, and Paruchuri (2020) propose
the development of a transportation policy that distributes
the trafﬁc ﬂow more evenly through a city to reduce the con-
centration of pollution in speciﬁc pockets. They use the con-
cept ofk-optimality, which ensures that any two ﬂows have
at mostkedges in common, and design a trafﬁc policy
using multiple k-optimal maximum ﬂow solutions to route
Copyright © 2023, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.
Figure 1: Pollution released on road links for trafﬁc simu-
lation on a large area of Seattle, USA. Colour legend given
at bottom is the percentage of the max pollution. Left is ob-
tained using only a single ﬂow ( FFA) and right is using our
MaxFlow-MCMC which uses multiple diverse max ﬂow so-
lutions. As can be seen severe pollution (red, purple, black)
is prevented.
trafﬁc differently on different days or for reasonable time-
lines. Here, k-optimality is a measure (Pearce and Tambe
2007) that is used to capture distinctness between solutions
while maximum ﬂow solutions (Ford and Fulkerson 1956)
are generated to maintain the throughput of trafﬁc network.
However, existing work in this space can only be used for
small areas due to computational scalability issues. We build
upon this line of work to develop a signiﬁcantly faster solu-
tion for pollution aware trafﬁc routing using a Markov Chain
Monte Carlo ( MCMC )(Diaconis 2009; Hastings 1970; Gu-
bernatis 2005; Bubley 2001) based method to sample integer
max ﬂow solutions from a planar graph and generate a k-
Optimal set of max ﬂow solutions (hence named MaxFlow-
MCMC ). Our Markov chain extends the algorithm for sam-
pling paths in planar graphs (Montanari and Penna 2015),
and we provide proof of convergence to the stationary dis-
tribution, which assigns a higher probability to max ﬂow so-
lutions with shorter aggregate path length.
To compare our algorithm with the previous work, we
simulated the algorithm on real-world road networks ofarXiv:2302.14442v1  [cs.AI]  28 Feb 2023Figure 2: Seven diverse max ﬂows samples from the MaxFlow-MCMC algorithm. Trafﬁc is routed according to these and
simulated in SUMO for equal intervals, resulting in the emission heatmap shown in Figure 1.
multiple cities. We use Simulation of Urban Mobility
(SUMO) (Lopez et al. 2018), which is a trafﬁc simulator
in combination with OpenStreetMap (OSM) (Haklay and
Weber 2008), an open-source tool that helps to model trafﬁc
settings on a real-world map. We also use the emission
modeling capability of SUMO to evaluate the pollution lev-
els generated by the different solution approaches, namely
MaxFlow-MCMC ,k-optimal Pareto Max Flow Algorithm
(k-PMFA) (Kamishetty, Vadlamannati, and Paruchuri 2020)
andFord-Fulkerson Algorithm (FFA) (Ford and Fulkerson
1956). Our results show that MaxFlow-MCMC performs
as well as the k-PMFA algorithm in terms of pollution
severities while being scalable to large-scale cities. In
particular, we obtained a 79% decrease in normalized mean
pollution compared to FFA on a larger map corresponding
to Seattle (with 18699 edges).
Our Contributions.
1. We design a Markov Chain that can be used to sample in-
teger max ﬂow solutions from a planar graph with proba-
bilities proportional to an exponential of the length of the
solution (see Section 3).
2. We use the MCMC method to obtain a set of diverse
max ﬂows (k-optimal) and use it to give the ﬁrst ap-
proach to designing a large-scale transport policy that
avoids severe pollution while maintaining reasonable
transit times. Trafﬁc routing using such a set of max ﬂows
ensures that i) a diverse set of paths are used, which pre-
vents concentration of pollution ii) vehicles are routed
through shorter paths, and iii) capacity of the road net-
work is fully utilized as it is a max ﬂow (see Section 4).
3. We test our MaxFlow-MCMC trafﬁc policies using the
SUMO trafﬁc simulator on real-world maps.The perfor-
mance was compared with k-PMFA andFFA algorithms.
We also demonstrate the scalability of MaxFlow-MCMC
on large real-world road maps (see Section 6).
2 Related Works
Maximum Flow Problem. TheFord-Fulkerson algorithm
(Ford and Fulkerson 1956), is a popular algorithm to com-
pute the maximum ﬂow between two given points in a net-
work, including trafﬁc networks (Schrijver 2002). However,
it provides us with only a single max ﬂow solution. We aim
to develop an algorithm that will provide multiple max ﬂow
solutions between two points.Pollution aware routing. There has been some work on
the topic of pollution aware routing (Alam, Perugu, and Mc-
Nabola 2018), (Boriboonsomsin et al. 2012). However, most
of the previous work is focused on minimising the exhaust
emissions and fuel consumption of a vehicle. In recent times,
Google Maps has introduced eco-friendly routing, which
suggests a path in a similar manner (Dicker 2021). Our work
focuses on improving the health of residents who live near
frequently used roads by reducing their long term exposure
to high levels of pollution i.e., we do not explicitly aim to re-
duce the pollution but aim to distribute the pollution better.
k-opt Pareto Max Flow Algorithm (k-PMFA). The k-
Opt Pareto Max Flow Algorithm (Kamishetty, Vadlaman-
nati, and Paruchuri 2020), computes a set of k-Optimal max
ﬂow solutions where each max ﬂow solution has at most k
common edges with every other max ﬂow solution. One of
the steps in the algorithm involves computing all the simple
paths from the source to the destination. A simple path be-
tween two nodes is deﬁned as a path where no node appears
more than once (Easley, Kleinberg et al. 2012). Counting all
the simple paths from a source to a destination was proved
to be #P complete (Valiant 1979), which implies that ﬁnd-
ing all the simple paths would be an NP-hard problem. Our
algorithm generates a k-optimal set without requiring us to
ﬁnd and store all the simple paths, and hence it will be more
efﬁcient in terms of time and memory requirements.
MCMC Method for sampling paths in a planar graph.
There is extensive literature on using MCMC method for
generating combinatorial structures (Jerrum, Valiant, and
Vazirani 1986). Typically such generation gives a uniform
distribution over structures. In our case, we need to sample
from a non-uniform distribution (Martin and Randall 2000).
Montanari and Penna (2015) designs an MCMC method for
sampling simple paths in a planar graph. We construct a
Markov Chain over integer Max Flows of a graph, with spe-
ciﬁc guarantees on stationery distribution. Our approach for
sampling max ﬂow solutions from a planar graph is inspired
by them but requires additional proofs for showing the irre-
ducibility of the Markov chain , which ensures that capacity
constraints are not violated.
3 Sampling Integer Max Flows using MCMC
We consider the road network to be a planar graph G(V;E).
EdgesEof the graph will be the roads, while nodes Vwill
be the junctions where roads intersect or represent the end of
roads. Each road in the network has a length and a speciﬁcf1 f2 f3
f4 f 5 f6
f7 f8 f9
13 14 15 169 10 1 1 125 6 7 81 2 3 4
f1 f 2 f3
f4 f5 f6
f7 f8 f9
13 14 15 169 10 1 1 125 6 7 81 2 3 4
f1 f2 f3
f 4 f5 f6
f7 f8 f9
13 14 15 169 10 1 1 125 6 7 81 2 3 4
f 1 f2 f3
f4 f5 f 6
f7 f8 f9
13 14 15 169 10 1 1 125 6 7 81 2 3 4Figure 3: Example of a transition in the Markov chain . The underlying road network has 16 junctions forming a grid with max
ﬂow value from 1to16to be 2. The state space consist of all max ﬂows from 1to16, which can also be considered as a pair of
1 16paths (marked using arrows). The transition in Mﬂowgiven in Algorithm 1, involves choosing one of the paths p(marked
in red) and one of the faces f2ff1;f10g(marked as blue) of the planar graph at random and rerouting the path along the
face. The facesff1f9gare marked in the graph and f10is the outer face.
number of lanes used as the edge’s capacity since one vehi-
cle can travel through each lane at a particular time. Let sbe
the source node from which the vehicles travel to the desti-
nation node t. We want to ensure that the maximum number
of vehicles can travel from stotat any time and hence rep-
resent this as a maximum ﬂow problem.
Our approach starts with an initial integer max ﬂow solu-
tion and makes small random modiﬁcations to it, resulting in
a sample from a distribution over integer max ﬂow solutions.
This method is commonly known as Monte Carlo Markov
Chain (MCMC) method. The Ford Fulkerson Algorithm can
ﬁnd the initial max ﬂow or set of paths. The distribution will
result in higher probabilities for max ﬂows whose aggregate
length of paths is shorter.
Since we are designing a system to route vehicles, we fo-
cus on integer max ﬂow solutions where the ﬂow through
each edge is a non-negative integer. The Integrality Theorem
(Erickson 1999), which is a corollary of the Ford-Fulkerson
Algorithm , states that there exists at least one integer max
ﬂow solution in a graph where all the edge capacities are
non-negative integers. Hence, we will have at least one inte-
ger max ﬂow solution for a road network.
3.1 A Markov Chain for Integer Max Flow
Let us represent an integer max ﬂow solution as a set of mf
number of paths, where mfis the maximum ﬂow value from
stot, and each path contains a ﬂow of 1. Note that if an
edge has a ﬂow value f, it will be part of exactly fpaths.
We deﬁne a Markov Chain Mﬂow, whose state space 
is
the set of all integer max ﬂow solutions. We deﬁne the total
length of a max ﬂow solution xdenotedjxjas the sum of
the lengths of all the paths in it. The length of each path will
be the sum of the lengths of all the edges in the path. We
can reroute a path of the max ﬂow solution using a face if
they have one or more common edges, as shown in Figure
3. These transitions are inspired by (Montanari and Penna
2015), who built a similar Markov Chain for sampling paths.
The transitions rules of Mﬂoware given in Algorithm 1.
The algorithm has a hyperparameter that decides the
preference given to the total length of a state. If <1, tran-
sitions to a state with a lesser total length will be more prob-
able. Similarly, if >1, transitions to a state with a higherAlgorithm 1: Mﬂow(x)deﬁnes a step of the Markov Chain
on current state x. See Figure 3, for an example of its run.
1:faces =set of all faces in the planar graph
2:mf= the current integer max ﬂow
3:paths =set of paths in x
4:b Uniform (f0;1g)
5:ifb== 1 then
6: f Uniform(faces), p Uniform(paths)
7: iff;pdo not share an edge orreroutingpthroughf
violates capacity then
8: returnx
9: else
10:y reroute (p;f)
11: returnywith probability minf1;jyj
jxjgwherejxj
andjyjare the total lengths of xandy.
12: returnx
13: end if
14:end if
total length will be more probable. When = 1, the transi-
tion to all neighbouring paths will have the same probability.
3.2 Convergence of the Markov Chain
We show that the Markov chain Mﬂowconverges to a station-
ary distribution which has the property that the probability
of max ﬂow xwill be proportional to jxj. Setting<1, al-
lows us to sample max ﬂows with shorter aggregate lengths.
First, we show that the distribution with the above property
is a stationary distribution.
Lemma 1. A stationary distribution of Mﬂowis
(x) =jxj
ZwhereZ=X
y2
jyj
Proof. The proof uses standard arguments and is provided
in appendix.
Next, we show that starting from any state, Mﬂowcon-
verges to, by showing that it is Ergodic. An Ergodic
Markov Chain will have a unique stationary distribution andwill converge to it (Durrett 2019). For Ergodicity, we need
to show that it is i.) aperiodic and ii.) irreducible.
Aperiodicity. AMarkov chain is said to be aperiodic if
8x2
;gcdft2NjPt(x;x)>0g= 1:
wherePtis thetstep transition probabilities. For Mﬂow, we
deﬁned transitions in such a way that there is a self-loop with
a probability of at least 1=2. Therefore, Mﬂowis aperiodic.
Irreducibility. AMarkov chain is said to be irreducible if
8x;y2
;9t2NjPt(x;y)>0:
That is, every state in state space can be reached from
every other state with a ﬁnite number of steps. It is shown in
Montanari and Penna (2015) that we can reach any simple
s-t path from any other path by rerouting through the faces
of the planar graph. However, in our case, we need to ensure
that the capacity constraints are not violated. We show this
using the following deﬁnition and proposition.
Deﬁnition (Outer paths of an Integer Flow) .We assume that
the line joining sandtto be the direction of positive xaxis.
We deﬁne the outer path of an integer ﬂow in a planar graph
as a path between sandtwith a non-zero ﬂow, such that
there is no other path in the ﬂow with a non-zero ﬂow in
between the path and the outer face of the graph. We deﬁne
thetop outer path as the outer path that contains the node
with the highest y-coordinate and the bottom outer path as
the one that contains the node with the least y-coordinate.
Proposition. We can reach any state in Mﬂowfrom any other
state in a ﬁnite number of steps.
Proof. Letxandybe any two states in 
and
paths (x);paths (y)be the set of mf paths inx;y respec-
tively. Let opx2paths (x)andopy2paths (y)be the top
outer paths of xandyrespectively. We transform opxand
opyto the same s-tpath using a sequence of reversible
Mﬂowtransitions.Let s;v1;vr;tbe common nodes of
opxandopy. For each of the r+ 1subpaths between these
nodes, we convert the subpath in the lower one of opx;opy
to the other. This is possible without violating capacity con-
straints since there is no ﬂow above the top outer paths by
deﬁnition. Then we consider the residual ﬂow x0;y0given by
removing the unit ﬂow through these paths from x;y. Then
we repeat the same process on x0;y0, until the residual ﬂow
becomes 0. A diagrammatic example of the proof is given in
the appendix for clarity.
Since our Markov chain is both irreducible and aperiodic,
it is ergodic and will have a unique stationary distribution
to which it will converge irrespective of the initial state. As
proved in Lemma 1, in the stationary distribution, the prob-
ability of a max ﬂow solution xis proportional to jxj.
4 Trafﬁc Routing using MaxFlow-MCMC
We propose to use the MaxFlow-MCMC algorithm (see Al-
gorithm 2) to generate a k-Optimal max ﬂow solution set,
which can be used for routing vehicles in such a way that
the pollution is evenly spread out. Even though our chain isnot rapidly mixing, we can start sampling before the chain
has completely mixed as we do not need the solutions to fol-
low the speciﬁc distribution for our use case since we are
just sampling to generate a k-optimal set of max ﬂow solu-
tions. We deﬁne the k-optimality of our solution set similar
to the deﬁnition of k-similarity in Barrett et al. (2008). A set
of max ﬂow solutions is k-optimal when any two solutions
from the set have at most kcommon edges.
We use the Ford-Fulkerson Algorithm (Ford and Fulker-
son 1956) to ﬁnd one max ﬂow solution for the starting state.
We initially let the Markov chain run for a few iterations
without sampling to ensure that the initial state is random
when we start sampling. We sample a random max ﬂow so-
lution from the current distribution every few iterations and
check if it is k-optimal with the solution set. If it is, we ap-
pend it to the solution set. We keep repeating this until we
reach the exit condition. The MaxFlow-MCMC Algorithm
has multiple parameters we can modify to suit our time and
solution constraints, making it scalable for larger maps.
4.1 Implementing Policy in Simulation and Real
World
There are multiple ways by which the MaxFlow-MCMC al-
gorithm can be implemented in real world scenarios: (a)
As described in Kamishetty, Vadlamannati, and Paruchuri
(2020), trafﬁc police can use a different solution to route the
trafﬁc on different days. For example, by identifying a set
of 7 solutions, trafﬁc can be routed using one solution per
day of the week. A solution can be implemented by restrict-
ing the set of paths available for a vehicle to take and the
number of vehicles on each path but does not restrict a ve-
hicle’s choice among the allowed ones. (b) GPS software(s)
like Google maps can use to suggest different set of paths
to different users on different days (Dicker 2021). (c) Au-
tonomous cars can be routed using our method, where vehi-
cles can be instructed to use different paths.
4.2 Trafﬁc Simulation using SUMO
Simulation of Urban MObility (SUMO) is an open source,
microscopic and continuous trafﬁc simulation package de-
signed to handle large networks. SUMO comes with a large
set of tools for scenario creation and simulation and can
handle multiple aspects of trafﬁc ﬂow generation, including
computation of acceleration, deceleration, emission model-
ing, congestion, the distance between vehicles, etc., result-
ing in realistic modeling.
4.3 Parameters for MaxFlow-MCMC
Sampling Frequency : The number of iterations after which
we sample a max ﬂow solution from the current distribution.
If we want to increase the number of solutions in the solu-
tion set, we can sample the solutions more frequently, and if
the aim is to improve the runtime of the algorithm, we can
sample less frequently.
Exit Condition : The User can decide the exit condition of
the algorithm based on requirements. The algorithm can be
run for a ﬁxed number of iterations, or it can be run until a
solution set of the required size is obtained.Algorithm 2: xdenotes current state of the Markov chain ,
FFA denotes Ford Fulkerson Algorithm, mixiter denotes
number of iterations for mixing, numiter denotes num-
ber of iterations for sampling and sfdenotes sampling fre-
quency.
1:x FFA(s,t), solutionset  ;
2:while iternumiter +mixiter do
3: ifiter>mixiter and iter%sf== 0 then
4: ifKOpt(x,solutionset) then
5: solutionset solutionset + x
6: end if
7: end if
8: x Mﬂow(x)(See Algorithm 1)
9: iter iter+1
10:end while
11:return solutionset
Lambda(): Affects the total length of the max ﬂow solu-
tions. A lesser value of lambda would mean that the solu-
tions obtained will typically have a lesser total path length.
In comparison, a higher value of lambda would mean that
the solutions will also include paths of higher length (which
can allow sampling a large number of solutions).
Value of k : Increasing the Value of kwould decrease the
time required to obtain a set of solutions of the same size,
but the set would have more common edges, leading to a
lesser spread of pollution in general.
4.4 Complexity Analysis of MaxFlow-MCMC
Time Complexity. The initial FFA step is of complexity
O(jEjmf), wherejEjis the number of edges and mfis
the max ﬂow. Calculating the faces needs O(kV)on aver-
age, andO(V2)in the worst-case (Schneider and Sbalzarini
2019). At every step of the algorithm, the following compu-
tations need to be done: (a) Randomly choosing a face needs
O(jFj) =O(jEj)sincejFj+jEj jVj= 2 by Euler’s
formula (Trudeau 2013), where jFjandjVjare the number
of faces and nodes respectively. (b) Checking for max ﬂow
condition needs reasoning over the number of edges in the
path, i.e.,O(jEj). (c) Rerouting involves O(jEj). (d) Check-
ing for k-Optimality needs to be done every sfsteps needing
O(numsoljEj2
sf).
The overall worst-case time complexity would therefore
beO(numiternumsoljEj2
sf+jVj2). Therefore, worst case
runtime of MaxFlow-MCMC will be polynomial in jEjand
jVj, provided that numiter andnumsolare not very high
both of which can be tuned per need in the algorithm. Note
that the runtime for MaxFlow-MCMC does not include the
time required for calculating the faces of the graph since it
was done as a prepossessing step. Schneider and Sbalzarini
(2019) proves that even this step can be computed with an
average complexity of O(kjVj)and therefore will not make
a signiﬁcant change to the overall runtime.
Space Complexity. Following are the key steps involved
in the algorithm, which require: (a) A memory of O(jEj2)
for storing all the faces. (b) A memory of numsolmfName  numiter sf
MaxFlow-MCMC1 0.95 50000 25
MaxFlow-MCMC2 0.95 25000 25
MaxFlow-MCMC3 0.90 50000 25
MaxFlow-MCMC4 0.95 50000 50
MaxFlow-MCMCLarge 0.99 until 7 sol 25
MaxFlow-MCMCKanpur 0.95 until 7 sol 25
Table 1: Parameter values used for experiments. The ﬁrst
four are used for ablation studies and the last two are for
large scale experiments.
jEj)for storing the solution set. This leads to a overall worst-
case space complexity of O((numsolmfjEj+jEj2).
In summary, our algorithm has a time and space complex-
ity that is tractable in the number of edges and, therefore,
scalable to larger networks.
5 Experimental Details
The parameters for experiments on large scale graphs named
MaxFlow-MCMC Large , are presented in Table 1. Since
theMaxFlow-MCMC method is applicable only for planar
graphs, we modiﬁed the real-world network to make it pla-
nar by removing the non-planar components such as bridges.
Since there can be cases of multiple sources and destinations
for vehicles, we performed experiments with more than one
source and destination also. We introduce a virtual source
and a virtual destination node, connected to all the source
and sink nodes respectively, using inﬁnite capacity edges
(Borradaile et al. 2011). Algorithms were then used with ve-
hicles traveling from the virtual source to the virtual sink.
We tested MaxFlow-MCMC for different values of kand
simulated trafﬁc using the SUMO simulator (Lopez et al.
2018). We used Sage Math (The Sage Developers 2021)
to ﬁnd the faces of the roadmap. Vehicles were released in
waves with an interval of 5seconds each for the small map
and an interval of 15seconds each for the larger map. They
are released in waves so that a reasonable distance is created
before the next wave of vehicles is allowed into the simu-
lation. The number of vehicles per wave was equal to the
maximum ﬂow from the source to the destination. We in-
creased the interval for the large map since it involved roads
with different speed limits. Vehicles also have to slow down
at junctions for turning, and a larger path can potentially in-
volve a larger number of turns. We use NOx values (i.e.,
NO andNO2values) to measure the pollution due to their
high dependency on trafﬁc ﬂow and their adverse impact on
human health (Tom `as Verg ´es 2013). The plots were gener-
ated using matplotlib (Hunter 2007).
Due to the randomness involved in our algorithm, differ-
ent runs using the same parameters may provide us with a
different number of solutions. Hence, we use each solution
of the generated k-optimal set for 1hour and compute Nor-
malised Mean pollution (NOxnm) to compare the different
runs of the algorithm accurately.
NOxnm=Mean amount of NOx released per hour
Total number of edges with non-zero emissionsMap name Sq. km Edges Nodes s;tPairsk
Small map 0:03 37 25 1 9
Seattle 25:16 18699 14939 2 170
Berkeley 82:90 30808 24864 1 440
Kanpur 18:50 29956 20707 1 350
Islington 14:90 5382 2367 2 300
Table 2: Details of the maps used for the experiments. We
use a small map to compare with k-PMFA since it is infeasi-
ble to run for larger maps.
SUMO provides us with the amount of NOx released for
every edge with non-zero emissions over the simulation pe-
riod. We calculate NOxnmby taking the mean pollution
over all the edges and dividing it by the total number of so-
lutions we used, as we use one solution per hour. NOxnm
helps us understand how well the pollution is distributed
over an area. This is due to the insight that to decrease
NOxnm, we need to decrease the mean amount of NOx
released, or we have to increase the number of edges being
used. Since we are releasing the same number of vehicles
per hour for all the simulations, NOxnmwill be highly de-
pendent on the pollution spread.
ForMaxFlow-MCMC , we setclose to 1 since we mea-
sure the lengths of paths in meters. Given that the probability
of our Markov chain moving from one state to another de-
pends on the difference in their length, and if we set lambda
to a smaller value like 0:5, the probability of moving to a
state that is just 5meters longer would be close to 0:03.
For comparison with previous work on k-PMFA
Kamishetty, Vadlamannati, and Paruchuri (2020), we needed
to make some modiﬁcations since the algorithm was de-
signed for directed graphs. Hence, it can become inefﬁcient
to distribute the pollution in road networks containing lanes
in both directions. This is because solutions generated by
it can include ﬂow in both directions of the road as part of
two different paths, e.g., a max ﬂow solution can contain one
path that has a ﬂow of 1from nodepto nodeq, whereas an-
other path can have a ﬂow of 1from nodeqto nodep. This
will lead to increased pollution with no effective increase
in capacity, which can be avoided. Hence, we extend the
k-PMFA algorithm to undirected graphs by using Breadth-
First Search (BFS) on the ﬂow graph of the max ﬂow solu-
tions to generate the individual paths. This can help avoid
the above situation while retaining the max ﬂow solutions
where the ﬂows do not cancel each other.
Runtime results presented were measured on an Intel E5-
2640 processor on an HP SL230s compute node. All the re-
sults were averaged over 30runs.
6 Results
We benchmark the performance of our Maxﬂow-MCMC
based trafﬁc policy on large-scale maps of many cities along
with baseline algorithms. We also compare it with previous
work of k-PMFA (Kamishetty, Vadlamannati, and Paruchuri
2020) on a small map due to its scalability issues. All the
networks were obtained from OpenStreetMap (Haklay and
FFA (BFS) FFA (Dijk) MCMC(3) MCMC(7)Figure 4: Maxﬂows (top) and pollution (bottom) generated
for the different policies on the map of Seattle with two
s;t-pairs. MCMC( k) denotes routing using ksamples from
Markov Chain .MaxFlow-MCMC with 7samples prevents
severe pollution (red, orange) from happening in any area.
Legend of colors is same as Figure 1.
Weber 2008).
Pollution reduction in City Scale Road Networks. We
benchmarked MaxFlow-MCMC on four larger real-world
road networks, namely Seattle, Berkeley, Kanpur, and Is-
lington, to demonstrate scalability (see Table 3). Table 2
provides details of the maps used. We used MaxFlow-
MCMCLarge from Table 1 for all the simulations. For Kan-
pur map, we set the value of = 0:95since= 0:99was
giving us longer paths. We use two versions of FFA, which
useBreadth First Search (BFS) andDijkstra’s shortest path
algorithm, respectively, to ﬁnd the augmenting paths. The
difference between the two versions of FFA is that BFS ﬁnds
the shortest paths in terms of the number of edges and Di-
jkstra’s ﬁnds in terms of total path length. We also use two
versions of MaxFlow-MCMC , which samples 3and7max
ﬂow solutions, respectively.
In Table 3, the average pollution per link has decreased
for all maps while there is some increase in the average dis-
tance traveled and total pollution summed up over all the
edges. This is because the samples can be slightly longer
than the shortest paths. However, the pollution is spread out
because of the diverse samples, decreasing the max pollu-
tion in any link, which was our objective. It is also clear
that increasing the number of max ﬂow solutions sampled
from 3to7further prevents severe pollution. Figure 4 shows
the NOx heatmap and the paths used by the algorithms for
the multi-source multi-sink scenario of Seattle. The heatmap
shows that while Maxﬂow-MCMC distributes pollution over
a much larger area, it also reduces the concentration of pol-
lution in speciﬁc areas compared to FFA. Plots for the other
cities are provided in the Appendix.CityTrafﬁc Length Pollution ( NOxnmin mg)
Policy avg (m) avg max * 10 3total * 10 4BerkeleyFFA(BFS) 8528 945 10.2 57.4
FFA(Dij) 8001 718 8.5 54.3
MCMC(3) 9457 40 4624 6.70.2 66.50.4
MCMC(7) 9456 19 3162 5.70.2 66.70.2IslingtonFFA(BFS) 4723 2048 13.7 62.7
FFA(Dij) 4930 2047 13.7 65.3
MCMC(3) 4976 10 13695 8.00.1 67.50.2
MCMC(7) 4945 7 11504 7.60.0 67.00.1SeattleFFA(BFS) 3270 2402 18.2 57.6
FFA(Dij) 2133 1999 10.0 55.4
MCMC(3) 3914 27 85611 12.80.9 77.31.2
MCMC(7) 4041 24 5129 12.30.8 83.61.1KanpurFFA(BFS) 4628 1152 8.8 48.0
FFA(Dij) 4248 922 8.8 44.2
MCMC(3) 4513 4 5974 6.60.1 50.60.2
MCMC(7) 4512 4 4442 5.90.1 50.70.1
Table 3: Comparison of lengths and pollution generated
for different trafﬁc policies and cities simulated in SUMO .
Since our MaxFlow-MCMC policy is randomized, we pro-
vide mean value and the standard error (Siddharth Kalla
2022) from 30 runs. Avg. pollution decreases signiﬁcantly
in all cases. Max pollution also reduces in most cases help-
ing our objective of distributing the pollution better. There is
some increase in distance travelled and hence the total pol-
lution (summed up over all the links).
CityTrafﬁc Length Pollution ( NOxnmin mg)
Policy avg (m) avg max totalSmall MapFFA(BFS) 213 4387 9644 61428
FFA(Dij) 198 4616 19884 73853
k-PMFA(7) 208 1853 11255 72262
MCMC(7) 207 1784 11776 69104
Table 4: Comparing the pollution values of k-PMFA and
MCMC for the small map with k= 9.
Comparison with k-PMFA. k-PMFA (Kamishetty, Vad-
lamannati, and Paruchuri 2020) is a pollution-aware routing
algorithm that we compare within Table 4. The table shows
the performance of three algorithms, namely MaxFlow-
MCMC ,k-PMFA , and FFA. As shown, the Maxﬂow-MCMC
gives comparable results while being scalable.
Effect of hyperparameters. Figure 5 studies the effect of
using multiple max ﬂow solutions on the pollution level. We
also experiment with four different hyperparameter values of
MaxFlow-MCMC as given in Table 1, denoted as MaxFlow-
MCMC 1-4. It shows that increasing the number of solutions
after 7-10does not signiﬁcantly change the NOxnmvalue
across the different sets of parameters tested. A key insight
from this experiment is that for practical purposes, we can
identify a set of, say 7solutions and use one solution per
day of the week to route the vehicles and obtain a better
distribution of pollution compared to the FFA solution.
Runtime. Figure 6 shows the runtime comparison re-
sults between MaxFlow-MCMC and k-PMFA . Although
MaxFlow-MCMC provides approximately the same num-
Figure 5: The change in normalised mean pollution reduces
as we increase the number of solutions (obtained by increas-
ing value of k). While there is signiﬁcant reduction upto 10,
the beneﬁts are lesser later.
Figure 6: The runtime of k-PMFA is two orders of magnitude
higher than MCMC , making it infeasible for road networks
over a few sq km. Increasing the value of k increases the
diversity while also increasing the running time, especially
afterk= 10 .
ber of solutions as k-PMFA , it is signiﬁcantly faster. For
example, for k=10the runtime needed for k-PMFA is
110:07seconds while the slowest MCMC version has a run-
time of 1:89seconds. For values of kfrom 1to15, the
slowest version of MaxFlow-MCMC (MaxFlow-MCMC1)
showed a speedup of 65x on average, and the fastest version
(MaxFlow-MCMC2) showed a speedup of 130x on average.
7 Conclusion
We design a Markov Chain to sample integer max ﬂow so-
lutions for a planar graph. We used it to build an urban
trafﬁc routing policy that prevents the concentration of pol-
lution. Since MCMC algorithms are very efﬁcient, we are
able to scale our experiments to large cities. We believe that
the sampling method for integer max ﬂows can be of in-
dependent interest in solving other combinatorial optimiza-
tion problems. For future work, the policy can be expanded
to non-planar graphs since real-world maps can contain ﬂy-
overs and trafﬁc between multiple sources and destinations.References
Ahmed, S.; Adnan, M.; Janssens, D.; and Wets, G. 2020.
A route to school informational intervention for air pollu-
tion exposure reduction. Sustainable Cities and Society , 53:
101965.
Alam, M.; Perugu, H.; and McNabola, A. 2018. A com-
parison of route-choice navigation across air pollution expo-
sure, CO2 emission and traditional travel cost factors. Trans-
portation Research Part D: Transport and Environment , 65:
82–100.
Barrett, C.; Bisset, K.; Holzer, M.; Konjevod, G.; Marathe,
M.; and Wagner, D. 2008. Engineering label-constrained
shortest-path algorithms. In International conference on al-
gorithmic applications in management , 27–37. Springer.
Boriboonsomsin, K.; Barth, M. J.; Zhu, W.; and Vu, A. 2012.
Eco-routing navigation system based on multisource histor-
ical and real-time trafﬁc information. IEEE Transactions on
Intelligent Transportation Systems , 13(4): 1694–1704.
Borradaile, G.; Klein, P. N.; Mozes, S.; Nussbaum, Y .;
and Wulff-Nilsen, C. 2011. Multiple-Source Multiple-Sink
Maximum Flow in Directed Planar Graphs in Near-Linear
Time. In 2011 IEEE 52nd Annual Symposium on Founda-
tions of Computer Science , 170–179.
Bubley, R. 2001. Randomized algorithms - approxima-
tion, generation and counting . Distinguished dissertations.
Springer. ISBN 978-1-85233-325-6.
Diaconis, P. 2009. The Markov chain Monte Carlo revolu-
tion. Bull. Amer. Math. Soc. 46, 179-205 .
Dicker, R. 2021. 3 new ways to navigate more sus-
tainably with Maps. https://blog.google/products/maps/3-
new-ways-navigate-more-sustainably-maps/. (Accessed on
07/24/2022).
Durrett, R. 2019. Probability: theory and examples , vol-
ume 49. Cambridge university press.
Easley, D.; Kleinberg, J.; et al. 2012. Networks, crowds, and
markets: Reasoning about a highly connected world. Signif-
icance , 9(1): 43–44.
Erickson, J. 1999. Algorithms.
Ford, L. R.; and Fulkerson, D. R. 1956. Maximal ﬂow
through a network. Canadian journal of Mathematics , 8:
399–404.
Gualtieri, G.; Crisci, A.; Tartaglia, M.; Toscano, P.; and Gi-
oli, B. 2015. A statistical model to assess air quality levels
at urban sites. Water, Air, & Soil Pollution , 226(12): 1–15.
Gubernatis, J. E. 2005. Marshall Rosenbluth and the
Metropolis algorithm). Physics of Plasmas , 12(5): 057303.
Haklay, M.; and Weber, P. 2008. OpenStreetMap: User-
Generated Street Maps. Pervasive Computing , 7(4): 12–18.
Hastings, W. K. 1970. Monte Carlo sampling methods using
Markov chains and their applications. Biometrika , 57(1):
97–109.
Hunter, J. D. 2007. Matplotlib: A 2D graphics environment.
Computing in Science & Engineering , 9(3): 90–95.
Jerrum, M.; Valiant, L.; and Vazirani, V . 1986. Random Gen-
eration of Combinatorial Structures from a Uniform Distri-
bution. Theor. Comput. Sci. , 43: 169–188.Kamishetty, S.; Vadlamannati, S.; and Paruchuri, P. 2020.
Towards a better management of urban trafﬁc pollution us-
ing a Pareto max ﬂow approach. Transportation Research
Part D: Transport and Environment , 79: 102194.
Lopez, P. A.; Behrisch, M.; Bieker-Walz, L.; Erdmann, J.;
Fl¨otter ¨od, Y .-P.; Hilbrich, R.; L ¨ucken, L.; Rummel, J.; Wag-
ner, P.; and Wießner, E. 2018. Microscopic Trafﬁc Simula-
tion using SUMO. In The 21st IEEE International Confer-
ence on Intelligent Transportation Systems . IEEE.
Martin, R.; and Randall, D. 2000. Sampling adsorbing
staircase walks using a new Markov chain decomposition
method. In Proceedings 41st Annual Symposium on Foun-
dations of Computer Science , 492–502.
Montanari, S.; and Penna, P. 2015. On Sampling Simple
Paths in Planar Graphs According to Their Lengths. In Ital-
iano, G. F.; Pighizzini, G.; and Sannella, D. T., eds., Math-
ematical Foundations of Computer Science 2015 , 493–504.
Berlin, Heidelberg: Springer Berlin Heidelberg. ISBN 978-
3-662-48054-0.
Pearce, J. P.; and Tambe, M. 2007. Quality Guarantees on k-
Optimal Solutions for Distributed Constraint Optimization
Problems. In IJCAI , 1446–1451.
Pope III, C. A.; and Dockery, D. W. 2006. Health effects of
ﬁne particulate air pollution: lines that connect. Journal of
the air & waste management association , 56(6): 709–742.
Schneider, S.; and Sbalzarini, I. F. 2019. Finding faces in a
planar embedding of a graph.
Schrijver, A. 2002. On the history of the transportation
and maximum ﬂow problems. Mathematical programming ,
91(3): 437–445.
Siddharth Kalla, L. T. W. 2022. Standard Error of the Mean.
https://explorable.com/standard-error-of-the-mean.
The Sage Developers. 2021. SageMath, the
Sage Mathematics Software System (Version 9.4) .
https://www.sagemath.org .
Tom`as Verg ´es, J. 2013. Analysis and simulation of trafﬁc
management actions for trafﬁc emission reduction . Ph.D.
thesis, TU Berlin.
Trudeau, R. J. 2013. Introduction to graph theory . Courier
Corporation.
Valiant, L. G. 1979. The complexity of enumeration and re-
liability problems. SIAM Journal on Computing , 8(3): 410–
421.
World Health Organization; et al. 2016. Ambient air pollu-
tion: A global assessment of exposure and burden of disease.8 Appendix
8.1 Proof of Stationary Distribution
Lemma 2. A stationary distribution of Mﬂowis
(x) =jxj
ZwhereZ=X
y2
jyj
Proof. We show that satisﬁes the detailed balance condi-
tion. That is, for the transition probabilities P(x;y)(fromx
toy), and8x;y2
;(x)P(x;y) =(y)P(y;x).
For the case where xandyare states that differ by more
than one face, P(x;y) = 0 according to our transition rules,
and therefore the detailed balance condition will be satisﬁed.
Let us take two states, x, and y, which differ only by one
face. LetP(x;y)be the probability of transitioning from x
toy. LetFbe the total number of faces in the graph. Now,
(x)P(x;y) =jxj
Z1
F1
mfmin
1;jyj
jxj
Similarly,
(y)P(y;x) =jyj
Z1
F1
mfmin
1;jxj
jyj
Ifjyj
jxj1,
(x)P(x;y) =jxj
Z1
F1
mf1 =jyj
Z1
F1
mfjxj
jyj
=(y)P(y;x)
Ifjyj
jxj<1,
(x)P(x;y) =jxj
Z1
F1
mfjyj
jxj=jyj
Z1
F1
mf1
=(y)P(y;x)
8.2 Diagrammatical explanation of proof of
Proposition 3.3
In Figure 7, The ﬁrst two diagrams represent the two
top outer paths. The common nodes between the two are
s;1;4;7;t, which gives us 4subpaths. For each of these sub-
paths, we convert the subpath in the lower one of the two
to the other, resulting in both of these paths becoming the
path shown in the third diagram. Next create the residual
graph and repeat the steps until both the max ﬂow solutions
reach the same state. Since all our steps are reversible, we
can reach any state from any other state in a ﬁnite number of
steps to the other.
s12
34
65
7
t
s12
34
65
7
t
s12
34
65
7
tFigure 7: Diagrammatical explanation of proof of Proposi-
tion 3.3
8.3 Additional analysis with k-PMFA
4 6 8 10 12 14 16050100150200
kNumber of solutionsMaxFlow-MCMC1
MaxFlow-MCMC2
MaxFlow-MCMC3
MaxFlow-MCMC4
k-PMFA
Figure 8: k vs Number of solutions: x-axis represents the
maximum number of common edges between two max ﬂow
solutions and y-axis represents the size of the k-optimal so-
lution set. Parameters for the MaxFlow-MCMC 1 4are pro-
vided in Table 1 of the paper. At k=0, size of the solution set
will be 1 since no common edges are allowed between two
max ﬂow solutions. Number of max ﬂow solutions increase
as we increase k. Plot also shows that the number of solu-
tions provided by MaxFlow-MCMC is very close to that of
k-PMFA when the number of solutions is small. Varying the
parameters of MaxFlow-MCMC changes the size of the k-
optimal set obtained8.4 Heatmaps of Cities
Berkeley
Islington
Kanpur
Figure 9: Maxﬂows (top) and pollution (bottom) generated
for the different policies on the maps of Berkeley (USA), Is-
lington (UK) and Kanpur (India). The ﬁgures correspond to
the results mentioned in Table 3 of the paper. MCMC( n) de-
notes routing using nsamples from Markov Chain . We can
see that MaxFlow-MCMC has reduced the areas severe pol-
lution (purple,black) for all the maps in the ﬁgure. Legend
of colors is same as Figure 4 in the paper.