arXiv:2304.11757v1  [math.OC]  23 Apr 2023Computing Controlled Invariant Sets of Nonlinear Control- Afﬁne Systems
Scott Brown Mohammad Khajenejad Sze Zheng Yong Sonia Mart´ ı nez
Abstract — In this paper, we consider the computation of con-
trolled invariant sets (CIS) of discrete-time nonlinear co ntrol-
afﬁne systems. We propose an iterative reﬁnement procedure
based on polytopic inclusion functions, which is able to ap-
proximate the maximal controlled invariant set to within a
guaranteed precision. In particular, this procedure allow s us
to guarantee the invariance of the resulting near-maximal C IS
while also computing sets of control inputs which enforce
the invariance. Further, we propose an accelerated version of
this procedure which reﬁnes the CIS by computing backward
reachable sets of individual components of set unions, rath er
than all at once. This reduces the total number of iterations
required for convergence, especially when compared with ex ist-
ing methods. Finally, we compare our methods to a sampling
based approach and demonstrate the improved accuracy and
faster convergence.
I. I NTRODUCTION
Invariance is an important concept for ensuring robustness
and safety of control systems. For a dynamical system, a
set is ( forward )invariant if every trajectory starting in that
set remains in the set for all time. For control systems, this
notion can be generalized with the determination of a contro l
input which is able to render a set invariant, leading to the
notion of a controlled invariant set (CIS). For systems which
are subject to uncertainty or noise, the concept of a robust
controlled invariant set (RCIS) is critical for safety, as it
guarantees invariance in the presence of disturbances.
Controlled invariant sets have been thoroughly studied for
linear systems, e.g., [1]–[5]. Many of these methods employ
iterative procedures based on a one-step backward operator
[2], [3] to ﬁnd backward reachable sets of the system for
computing the CIS with high precision. In order to improve
the computation time for high-dimensional systems, other
non-iterative techniques have also been proposed which rel y
on lifting to a higher dimensional space to compute the CIS
in closed form and projecting the resulting set to the origin al
domain, e.g., [4], [5].
On the other hand, determining controlled invariant sets
of nonlinear systems remains a signiﬁcant challenge. Some
works employ convex or zonotopic approximations, e.g., [6] ,
[7], in order to reduce the computational complexity. How-
ever, as the maximal controlled invariant sets are nonconve x
in general, these methods can be overly conservative.
Another related work pertains to the study of invariant sets
ofswitched systems, e.g., [8]–[10], where the input controls
switching between a ﬁnite number of modes. In that case,
S. Brown, M, Khajenejad and S. Mart´ ınez are with the Mechani cal and
Aerospace Engineering Department, University of Californ ia San Diego, San
Diego, CA, USA. {sab007,mkhajenejad,soniamd }@ucsd.edu
S. Z. Yong is with the Mechanical and Industrial Engineering Department,
Northeastern University. s.yong@northeastern.eduthe input is easily determined by considering all possible
modes and selecting those which lead to invariance [9]. By
sampling a continuous set of inputs, these methods can be
applied to more general nonlinear systems, but the accuracy
and scalability may be limited [10]. These methods result in
sets that are guaranteed to be invariant, but the sampling is
an additional source of computational complexity as it must
be ﬁne enough to properly capture the nonlinear behavior of
the system. As a result, these methods are difﬁcult to apply
to systems with multiple inputs.
In this paper, we propose two iterative algorithms to
compute the near-maximal (non-convex) controlled invaria nt
set of control afﬁne systems up to a guaranteed precision,
without sampling the set of allowable inputs. Inspired by [9],
our methods use a bisection approach to over- and under-
approximate the one-step backward reachable set operator.
The main idea of the approach is to compute the forward
reachable set of the region of interest, which is described
by a union of intervals. The parts of this forward set that
are entirely contained in the original set are used as an
under-approximation of the backward reachable set. To chec k
the containment, we use polyhedral over-approximations of
reachable sets, which allows us to cast the problem of de-
termining the control input as a translation of a polyhedron .
This technique allows us to determine a continuous , rather
than sampled, set of invariance enforcing control inputs. I n
addition, we leverage the structure of set unions in the acce l-
erated version, which has the potential to signiﬁcantly red uce
the total number of iterations required for convergence, wh en
compared with existing methods.
A. Notation
LetZ≥0be the set of nonnegative integers, and Rnand
Rn×pbe then-dimensional Euclidean space, and the set of
n×pmatrices, respectively. By means of Br, we denote
the∞-norm hyperball of radius r. We make use of IRnto
denote the collection of (multidimensional) intervals of Rn,
and denote its elements as [x]/defines[x,x]∈IRnwith lower
and upper bounds xandx. The function w([x])measures
interval width (i.e., w([x]) =/bardblx−x/bardblwith any vector norm
/bardbl·/bardbl),mid([x])selects the midpoint of [x](i.e.,mid([x]) =
1
2(x+x)), and a function in brackets [f]([x])represents an
interval inclusion function (cf. Deﬁnition 1). The operato r⊕
denotes the Minkowski sum of two sets, and ⊖denotes the
Pontryagin difference. For a function f:Rn→Rmand a
setS⊂Rn,f0(S)denotes the image of Sunderf0. For
a bounded polyhedron (polytope) P, we use HPandbPto
denote the components deﬁning the halfspace representatio n
P={x:HPx≤bP}. The symbol VPdenotes the verticesofP. Finally, convXdenotes the convex hull of the set X.
II. P RELIMINARIES
This section introduces preliminary notions that will be
used throughout the paper. We begin by deﬁning inclusion
functions, which are critical for tractably approximating the
images of sets under nonlinear functions.
Deﬁnition 1. Given a function f:Rn→Rm, an inclusion
function is an interval function [f] :IRn→IRmthat
satisﬁes
[f]([x])⊇f([x]),∀[x]∈IRn,
wheref([x])denotes the exact image of [x]underf.
The reader is referred to [11, Section 2.4] and [12] for a
thorough discussion of different types of inclusion functi ons,
such as natural, centered, etc., as well as mixed-monotone
decomposition-based inclusion functions. The results of t his
paper are not speciﬁc to any one type of inclusion function.
However, different inclusion functions may produce more or
less precise approximations depending on the system.
A. Translating Polytopes
This section deﬁnes two different operations on polytopes:
translating one into another, and translating one so it in-
tersects another. These will be used in our algorithm to
determine safe control inputs.
Deﬁnition 2. Given two polytopes PandQ, the set of
translations ofPthat insertPintoQis denoted by
I(P,Q)/defines{r∈Rn:P⊕{r}⊆Q}.
Similarly, the set of translations of Pthat overlapPwithQ
is deﬁned as
O(P,Q)/defines{s∈Rn:P⊕{s}∩Q/\e}atio\slash=∅}.
Proposition 1 ([13, Theorem 2.3]) .For polytopesPandQ,
I(P,Q) ={r∈Rn:HQr≤bQ−β},
whereβi= max v∈VP(HQ)iv. IfPcannot be embedded into
Q, then this results in I(P,Q) =∅.
Proposition 2. Given two polytopes PwithQ,
O(P,Q) =/braceleftbigg
s∈Rn:/bracketleftbigg
HQ
−HP/bracketrightbigg
s≤/bracketleftbigg
bQ−α
bP−γ/bracketrightbigg/bracerightbigg
,
whereαi= min v∈VP(HQ)ivandγi= min v∈VQ(HP)iv.
Proof. See Appendix A. /squaresolid
III. I NVARIANCE CONTROL PROBLEM
Here we introduce the class of systems under consideration
and deﬁne the concept of controlled invariance. Speciﬁcall y,
we consider nonlinear control afﬁne systems of the form
xk+1=f(xk,uk)/definesf0(xk)+m/summationdisplay
i=1gi(xk)ui,k, (1)
wherex∈Rnis the state and u∈U⊂Rmis the input. We
assume thatUis a compact interval, and we will restrict ourattention to a region of interest, Ω⊂Rn, which we assume
to be given as a ﬁnite union of compact intervals.
Assumption 1. The functions f0, andg1,...,gmare
Lipschitz continuous, i.e.,
∀i∈{1,...,m},∃Lis.t./bardblgi(x)−gi(y)/bardbl≤Li/bardblx−y/bardbl,
andLs.t./bardblf0(x)−f0(y)/bardbl≤L/bardblx−y/bardbl,
for every x,y∈Ω.
Next we deﬁne the precise notions of invariance which we
will consider in this work.
Deﬁnition 3. A setX ⊂Rniscontrolled invariant with
respect to the dynamics (1)if for every x0∈X, there exists
an input usuch that f(x0,u)∈X.
There are many computational challenges associated with
computing controlled invariant sets, many of which arise du e
to the inﬁnite precision required to adequately handle regi ons
near the boundary of the set. As such, it is convenient to
modify the deﬁnition to incorporate a robustness margin r.
Deﬁnition 4. A setX⊂Rnisr-robustly controlled invariant
for system (1)if for every x0∈X , there exists an input u
such that f(x0,u)∈X⊖B r.
Intuitively, in order to be robustly invariant, every point
must be mapped into the interior of the set, at some distance
rfrom the boundary.
We are ready to formally state the problem which we aim
to address in this paper.
Problem 1 (Controlled Invariant Set Computation) .For a
system (1)that satisﬁes Assumption 1 and a region of interest
Ω⊂Rn, given by a union of compact intervals, compute
the maximal controlled invariant set contained in Ωup to a
guaranteed precision. Additionally, compute the correspo nd-
ing set of control inputs that enforces this invariance.
Remark 1. For ease of exposition, we do not consider any
noise or uncertainty in the system dynamics (1). However, it
is straightforward to include robustness to bounded noise i n
our algorithm by increasing the robustness margin r.
IV. C OMPUTATION OF CONTROLLED INVARIANT SETS
This section starts by reviewing a well-known iterative
procedure for computing maximal controlled invariant sets
[14]. After this, we describe our main contribution, which
approximates the operator used in each iteration.
Deﬁnition 5. The pre-set , or the one-step backward reach-
able set of a setΩ⊂Rnis deﬁned as
Q(Ω)/defines{x∈Rn:∃u∈U s.t.f(x,u)∈Ω}.
We further deﬁne the operator
I(Ω)/definesQ(Ω)∩Ω,
which will enable computation of the maximal controlled
invariant set. Repeated application is denoted as Ii(Ω) =I(Ii−1(Ω)) ,i∈Z≥0, withI0(Ω) = Ω . We also deﬁne
Ir(Ω)/definesQ(Ω⊖Br)∩Ω.
Lemma 1 ([14, Special Case of Proposition 4]) .IfΩ⊂Rn
is closed, then
I∞/defineslim
i→∞Ii(Ω)
is the maximal controlled invariant set contained in Ω.
This result is the basis for many iterative algorithms, e.g. ,
[2], [3], [14], but there are several computational challen ges
when dealing with nonlinear systems. In addition to oper-
ations involving backward reachability, our algorithm also
utilizes operations related to forward reachability, which we
deﬁne here.
Deﬁnition 6. The one-step forward reachable set of a set
Ω⊂Rnis deﬁned as
P(Ω)/defines{x∈Rn:∃x0∈Ω,u∈U s.t.x=f(x0,u)}.
The following deﬁnition restricts the previous reachable
set to that of a particular input, which is used later for
determining a suitable controller.
Deﬁnition 7. For a given u∈U, the ﬁxed-control one-step
forward reachable set of a setΩ⊂Rnis deﬁned as
Pu(Ω)/defines{x∈Rn:∃x0∈Ωs.t.x=f(x0,u)}.
From the deﬁnitions, it is clear that/uniontext
u∈UPu(Ω) =P(Ω).
A. Polyhedral Approximation of Reachable Sets
Our algorithm will employ polyhedral over-
approximations of P(Ω) andPu(Ω) to determine feasible
control inputs that can lead to invariance.
To this end, we use a decomposition of the function
f, which we will show to satisfy certain properties. This
decomposition will vary depending on the interval [x]under
consideration. We ﬁrst compute Aandφsuch that
f0(x) =Ax+φ(x),∀x∈[x], (2)
decomposing finto a linear term plus a remainder. This is
always possible (since we can let A= 0) and can be done in
multiple different ways. For example, if fis differentiable,
this can be done via linearization about the midpoint of the
interval. Another possibility is that fhas a bounded Jacobian
matrix on [x], in which case we can apply a Jacobian sign-
stable decomposition [15, Proposition 2] to compute (2). Th e
method of decomposition will affect the accuracy of the ﬁnal
approximation, as we will discuss at the end of this section.
Then, by using an inclusion function [Φ] :IRn→IRn
satisfying [Φ]([x])⊇φ([x]), we can guarantee that
f0([x])⊆A[x]⊕[Φ]([x]), (3)
whereA[x]denotes the exact (polytope) image of [x]under
the linear map A.
We also decompose the individual input functions gi.
For an inclusion function [gi], letsi= mid([gi]([x]))and
[Ψi]([x]) = [gi]([x])⊖{si}, so that
gi([x])⊆{si}⊕[Ψi]([x]), (4)and[Ψi]([x])is centered at the origin. A centered [Ψi]([x])
will result in a better approximation later on. We will use
the notation S∈Rn×mand[Ψ] :IRn→IRn×mto denote
the matrices with columns siand[Ψi], respectively.
In order to guarantee the accuracy of the algorithm, we
must ﬁrst compute bounds on the error of these overapprox-
imations. Assumption 1 allows us to upper bound the width
of the resulting inclusion functions.
Proposition 3. Under Assumption 1, inclusion functions [Φ]
and[Ψi],i∈ {1,...,m}, and constants ˜Li>0, i∈
{0,...,m}can be found so that
w([Φ]([x])≤˜L0w([x])andw([Ψi]([x])≤˜Liw([x]).
for every interval [x]⊆Ω.
Proof. We can, for example, use inclusion functions based
on mixed-monotone decompositions (cf. [16, Lemma 1]) or
the mean-value form (cf. [11] and [9, Eq. (3)]) that can be
shown to satisfy these bounds. /squaresolid
With these decompositions in mind, we can deﬁne our
approximations of the forward reachable sets. Let
P([x])/definesA[x]⊕[Φ]([x])⊕SU⊕[Ψ]([x])U
be the polyhedral overapproximation of the one-step forwar d
reachable set, and let
Pu([x])/definesA[x]⊕[Φ]([x])⊕Su⊕[Ψ]([x])U
be the polyhedral overapproximation of the ﬁxed-control
reachable set. The expression SUdenotes the polytopic
image ofUunder the linear transformation S, and[Ψ]([x])U
denotes the interval-valued product of two interval matric es
that can be computed using interval arithmetic.
Lemma 2. Letρ/defines˜L0+ max 1≤i≤m˜Liw(Ui). Then for
all intervals [x]⊂Ω, the polytopic approximations of the
forward reachable sets satisfy
Pu([x])⊆Pu([x])⊆Pu([x])⊕Bρw([x])
and
P([x])⊆P([x])⊆P([x])⊕Bρw([x]).
Proof. The inclusion Pu([x])⊆Pu([x])is guaranteed by
construction, since
Pu([x]) =A[x]⊕φ([x])⊕Su⊕m/summationdisplay
i=1ˆgi([x]))ui,
φ([x])⊆[Φ]([x]), andˆgi([x])⊆[Ψi]([x]). The inclusion
Pu([x])⊆Pu([x])⊕Bρw([x])follows from Proposition 3 and
the deﬁnition of the Minkowski sum. The second statement
is proved in the same way. /squaresolidAlgorithm 1 I(Ω)
Require: Ω,ε
1:Q←{Ω},N←∅,I←∅,E←∅ ,UI←∅
2:whileQ/\e}atio\slash=∅do
3:[x]←popfront(Q)
4: Compute A,Φ,si, andΨion[x]
5: ifP([x])∩Ω =∅then
6: N←N∪[x]
7: else if∃u∈U s.t.Pu([x])⊆Ωthen
8: I←I∪[x]
9:UI←UI∪([x],S†(SU([x])))
10: else ifw([x])≤εthen
11:E←E∪ [x]
12: else
13: (l,r)←bisect([x])
14: pushfront(Q,l)
15: pushfront(Q,r)
16: end if
17:end while
18:returnI,UI
B. Interval Approximation of Pre-Sets
We describe our main contribution next, which is a novel
algorithm for approximating the operator Ifor systems of the
form (1). Given a union of compact intervals Ω, we propose
an iterative reﬁnement procedure that approximates I(Ω)by
another union of compact intervals. Algorithm 1 summarizes
the main steps of this process, described in detail next.
The algorithm is a loop that operates on a queue ( Q) of
intervals. An element of the queue is retrieved (and removed )
from the front of the queue using the popfront operation,
while an element is added to the front of the queue using the
pushfront operation. The following steps are implemented
until the queue is empty. Every interval [x]is checked to see
whether it may be part of the pre-set of Ω. Two tests are
performed:
1) Is the forward reachable set from [x]disjoint with Ω?
If so,[x]is disjoint from I(Ω).
2) Can an input ube found so that the reachable set from
[x], restricted to the input u, lies entirely within Ω? If
so,[x]⊂I(Ω).
If either condition is satisﬁed, then the set [x]is saved in lists
labeledN(the collection of intervals disjoint with I(Ω)) and
S(the collection of intervals contained in I(Ω)).
If neither condition is satisﬁed and the [x]is wider
than the speciﬁed tolerance, it is bisected along its larges t
dimension and both resulting intervals are added to the fron t
of the queue using the pushfront operation. Otherwise,
[x]is added toE, which is a collection of the so-called
“indeterminate” sets, which are neither disjoint from nor
subsets of I(Ω).
Line 7 of Algorithm 1 requires checking the condition
∃u∈U s.t.Pu([x])⊆Ω, (5)which is a nonconvex feasibility problem, due to the non-
convexity of Ω. Luckily, we can exploit the structure of both
Pu([x])andΩin order to efﬁciently and precisely compute
the set of uthat satisfy (5).
Notice that, in the deﬁnition of Pu, the term A[x]⊕
[Φ]([x])⊕[Ψ]([x])Uis a convex polyhedron, and the additive
termSuserves only to translate the resulting polyhedron.
On the other hand, Ωis a union of intervals, and also more
generally a union of polyhedra. Therefore, we can reduce
the feasibility problem in (5) to a problem of translating a
polyhedron into a union of polyhedra. We describe here an
equivalence which helps solve this problem, inspired by [17 ].
Lemma 3. LetP= conv(Ω∩P([x]))andQ=P\(Ω∩
P([x])). Then, the following statements are equivalent:
1)∃u∈U s.t.Pu([x])⊆Ω;
2)SU([x])/definesI(P0([x]),P)\O(P0([x]),Q)/\e}atio\slash=∅.
Proof. By deﬁning P0([x])/definesA[x]⊕[Φ]([x])⊕[Ψ]([x])U,
we obtain that for any u,Pu([x]) =P0([x])⊕{Su}.
Furthermore, P([x]) =P0([x])⊕SU. This gives rise to
the equivalance
∃u∈U s.t.Pu([x])⊆Ω
⇐⇒ ∃r∈Rns.t.P0([x])⊕{r}⊆Ω∩P([x]),
where it must be true that r=Su. We see that by
intersecting with P([x])on the right hand side, we can
identify a translation by a vector r, which is automatically
restricted to the range of S. To ﬁnd the rin the latter
expression, we ﬁrst ﬁnd the translations into the convex
hull ofΩ∩P([x])(i.e.,I(P0([x]),P)), then remove the
translations that cause overlap with parts of the convex hul l
that are not in the original set (i.e., O(P0([x]),Q)). This
gives the set of translations rthat result in containment in
Ω∩P([x]), therefore yielding the expression for SU([x])./squaresolid
SinceSU([x])is the difference between a polytope and
a union of polytopes, it can be expressed as the union of
a ﬁnite number of polytopes. The equivalence in Lemma 3
gives us a tractable method of solving the feasibility probl em
in (5), using procedures to efﬁciently compute IandO.
Finally, since∀r∈SU([x]),∃u∈U such that r=Su,
we can recover the set of inputs with the Moore-Penrose
pseudoinverse,U([x]) =S†(SU([x])), which is stored/saved
inUIas pairs([x],U([x])).
Remark 2. The computation of the set difference between
two polyhedra can be represented as a union of polyhe-
dra. This procedure is computationally expensive, especia lly
when considering the difference between a polyhedron and
a union of polyhedra, for which the best algorithms [18]
have exponential complexity. In fact, the computation of se t
differences is the largest computaional burden of our metho d.
Caching of results from previous iterations may reduce the
number of differences that must be computed in the ﬁnal
implementation, although these details are not described h ere
for the sake of brevity. •We ﬁnish this section by proving that Algorithm 1 returns
a useful approximation of I(Ω), which is within some known
bound of the maximal CIS.
Lemma 4. LetΩbe a ﬁnite union of compact intervals.
Then, for any precision ε >0, Algorithm 1 terminates in a
ﬁnite number of iterations. Furthermore, letting I(Ω)denote
the output of Algorithm 1, it holds that
I(Ω⊖Bρε)⊆Iρε(Ω)⊆I(Ω)⊆I(Ω). (6)
Proof. The proof is similar to [9, Lemma 1], relying on the
bounds provided by Lemma 2. /squaresolid
C. Near-Maximal Controlled Invariant Sets
With the ability to compute I(Ω) using Algorithm 1, all
that remains is to repeat this operation until convergence i s
achieved. Algorithm 2 describes this simple procedure, whi ch
is guaranteed to terminate in ﬁnite time.
Algorithm 2 Approximation of I∞(Ω)
Require: Ω,ε
1:I0←Ω,I1←∅
2:whileI0/\e}atio\slash=I1do
3:I1←I0
4:I0←I(I0) ⊲via Algorithm 1
5:end while
6:returnI0
Theorem 1. For any ﬁnite union of compact intervals Ωand
precision ε >0, Algorithm 2 terminates in a ﬁnite number of
iterations. Furthermore, denoting the output of the algori thm
asI∞(Ω), the following inclusions hold:
I∞
r(Ω)⊆I∞(Ω)⊆I∞(Ω),
wherer=ρε. Finally, I∞(Ω)is controlled invariant.
Note that it is possible for the algorithm to return an empty
set only if the system does not admit an r-robustly controlled
invariant set, meaning I∞
r=∅.
Proof. LetIk(Ω)denote the value of I(Ik−1(Ω)) in thek-th
iteration, with I0(Ω) = Ω . Since the algorithm terminates if
Ik−1(Ω) =Ik(Ω), we only need to consider the case when
they are not equal. In this case, the structure of Algorithm 1
is such that Ik(Ω)/subsetnoteqlIk−1(Ω). SinceΩis compact, Ik(Ω)
contains only a ﬁnite number of intervals which will be
considered using the bisection method for a given ε. Then
∃K≥0such that Ik(Ω) =∅,∀k≥K, meaning the
algorithm terminates in ﬁnite time.
To prove the inclusions, note that by Lemma 4, Ir(Ω)⊆
I(Ω)⊆I(Ω). Also, for any two sets A⊆B⊆Rn, we
know that I(A)⊆I(B)andIr(A)⊆Ir(B). Therefore
by applying Lemma 4 and induction, we can determine that
Ik
r(Ω)⊆Ik(Ω)⊆Ik(Ω)for allk≥0.
Finally, to prove invariance of I∞(Ω), note that by
Lemma 4, I∞(Ω) =I(I∞(Ω))⊆I(I∞(Ω)) . /squaresolidRemark 3 (An Outside-In Approach) .The method described
in this paper is commonly known as an outside-in method,
since we start with a region of interest Ωand search for the
largest invariant set X=I∞(Ω)which it contains. It is also
possible to use an inside-out approach, which starts with a
known invariant set, and iteratively grows that set [10]. Ou r
method can be easily adapted for this case, as well. •
To conclude this section, we state a result that has the
potential to signiﬁcantly reduce the number of iterations
required by Algorithm 2, hence, accelerating convergence.
Let{Ωi}N
i=1be any ordered collection of sets such that
Ω =/uniontextN
i=1Ωi. Deﬁne the operator
Ii(Ω)/defines/uniondisplay
j/negationslash=iΩj∪(Q(Ω)∩Ωi),
and letI1:N/definesIN(···(I1(Ω)) . We let the Iioperator
preserve the order of the constituent subsets by deﬁning
(Ii(Ω))i=Q(Ω)∩Ωiand(Ii(Ω))j= Ωj, j/\e}atio\slash=i.
Theorem 2. For a closed set Ω⊆Rn,I1:Nsatisﬁes
I1:N(Ω)⊆I(Ω),and
lim
k→∞(I1:N)k(Ω) = lim
k→∞Ik(Ω) =I∞(Ω). (7)
Proof. By deﬁnition, for any i/\e}atio\slash=j,
Ii(Ij(Ω)) =/uniondisplay
ℓ/negationslash=iIj(Ω)ℓ∪(Q(Ij(Ω))∩Ij(Ω)i)
=/uniondisplay
ℓ/negationslash=i,ℓ/negationslash=jΩℓ∪(Q(Ω)∩Ωj)∪(Q(Ij(Ω))∩Ij(Ω)i)
⊆/uniondisplay
ℓ/negationslash=i,ℓ/negationslash=jΩℓ∪(Q(Ω)∩(Ωi∪Ωj)),
sinceIj(Ω)i⊆ΩiandQ(Ij(Ω))∩Ij(Ω)i⊆Q(Ω)∩Ωi. By
applying this statement recursively, we arrive at
I1:N(Ω)⊆N/uniondisplay
i=1Ωi∩Q(Ω) =I(Ω). (8)
In (7), since I1:Nis monotonically decreasing and closed, the
limit exists. We will show by induction that for all k≥0,
(I1:N)k(Ω)⊇I∞(Ω). Consider a point x∈I∞(Ω). We
knowx∈Q(I∞(Ω))⊆Q(Ω). Therefore, by the deﬁnition
ofI1,x∈I1(Ω), meaning I1(Ω)⊇I∞(Ω). By repeating
this reasoning for I2,...,I N, we can see that I1:N(Ω)⊇
I∞(Ω). For the step case, assume that (I1:N)k−1(Ω)⊇
I∞(Ω). Then by the same argument as the base case, for any
x∈I∞(Ω),x∈Q(I∞(Ω))⊆Q((I1:N)k−1(Ω)) , implying
(I1:N)k(Ω)⊇I∞(Ω). Using this fact in combination with
(8), monotonicity of IandI1:N, and an induction argument
proves (7). /squaresolid
Theorem 2 is useful because it allows us to independently
consider individual regions of the invariant set, rather th an
approximating the Ioperator all at once. Essentially, our
procedure can focus on Ii(Ω) without needing to compute
all ofQ(Ω), which is more expensive. Using the Iioperator
often leads to a reduction in the total number of iterationsrequired. Algorithm 3 describes the modiﬁed procedure that
takes advantage of this fact. In the algorithm, Ωis updated
whenever an interval is determined to not be a part of the
invariant set. The loop terminates if every interval in the
queue has been checked since Ωwas last changed, meaning
every interval is contained in the invariant set. The functi on
checked tracks whether a given [x]has been tested against
the current Ω. It defaults to 0, and is assigned a value of 1
after[x]is processed. Note that pushback places an item
in the back of the queue.
Algorithm 3 Accelerated Approximation of I∞(Ω)
Require: Ω,ε
1:Q←{Ω},N←∅,I←∅,E←∅ ,UI←∅
2:while∃[x]∈Q,checked([ x],Ω) = 0 do
3:[x]←popfront(Q)
4: Compute A,Φ,si, andΨion[x]
5: ifP([x])∩Ω =∅then
6: N←N∪[x]
7: Ω←Ω\[x]
8: else if∃u∈U s.t.Pu([x])⊆Ωthen
9: checked([ x],Ω)←1
10: pushback(Q,[x])
11:UI←UI∪([x],S†(SU([x])))
12: else ifw([x])≤εthen
13:E←E∪ [x]
14: Ω←Ω\[x]
15: else
16: (l,r)←bisect([x])
17: pushfront(Q,l)
18: pushfront(Q,r)
19: end if
20:end while
21:I∞←/uniontext
[x]∈Q[x]
22:returnI∞,UI
Lemma 5. For any ﬁnite union of compact intervals Ωand
precision ε >0, Algorithm 3 returns the same result as
Algorithm 2. Furthermore, the number of iterations require d
by Algorithm 3 is less than or equal to the number required
by Algorithm 2.
Proof. The ﬁrst statement can be proved by the same rea-
soning as Theorem 1. The second statement arises from the
inclusion I1:N(Ω)⊆I(Ω)(cf. Theorem 2) and can also be
seen by direct comparison of the algorithms. /squaresolid
V. E XAMPLES AND COMPARISONS
In this section, we demonstrate the effectiveness of our
approach on a numerical example, i.e., an inverted pendulum
on a cart. We also compare our approach to the method
for switched systems in [9], where the input space is sam-
pled/gridded and considered as controlled modes.
As in [9], we consider an inverted pendulum on a cart,
discretized using forward Euler with a sampling time of0.01s. The dynamics are
˙x1=x2,
˙x2=mgl
Jsin(x1)−b
Jx2+l
Jcos(x1)u,
with parameters m= 0.2kg,g= 9.8m/s2,l= 0.3m,
J= 0.006 kg·m2, andb= 0.1N/m/s. This system and
its discretization are control afﬁne. We consider a region o f
interestΩ = [−0.05,−0.05]×[−0.01,0.01]and an input set
U= [−0.1,0.1].
Fig. 1: Controlled invariant sets of the inverted pendulum system.
Fig. 2: Union of invariance-enforcing inputs U([x])identiﬁed by
Lemma 3.
Figure 1 shows the identiﬁed controlled invariant sets for
our approaches, i.e., using Algorithms 2 and 3, and that
of [9], with nu= 10 andnu= 1000 sampled inputs.
All methods were run with a precision ε= 0.001. On
the other hand, Figure 2 shows the union of all invariance-
enforcing control inputs U([x])identiﬁed by Algorithms 2
and 3. Finally, Table I shows a comparison of computation
times with different parameters.Method ε Iterations Time (s) V olume
Algorithm 2 10−3703 0.54 97.9%
Algorithm 3 10−3618 0.63 97.9%
[9] (nu= 10 )10−310729 0.12 59.8%
[9] (nu= 1000 )10−3485 0.59 97.9%
TABLE I: Computational comparison between Algorithm 2, Al-
gorithm 3, and [9]. nudenotes the number of input samples taken
uniformly across U. The volume is given in % of the original Ω.
Evidently, our method is able to identify a larger CIS in
fewer iterations than the sampling and interval arithmetic
based approach in [9], when the number of samples is
small. This is presumably due to the higher accuracy of
our polytopic approximations, and the fact that we consider
the entire continuous range of control inputs. Increasing t he
number of sampled inputs results in a better approximation
of the CIS, at the cost of some additional computation time.
VI. C ONCLUSION
We proposed two methods for approximating controlled
invariant sets of nonlinear control-afﬁne systems using an
iterative reﬁnement approach. We used techniques from
computational geometry involving translations of polyhed ra
to allow us to efﬁciently compute continuous sets of feasibl e
control inputs, rather than using a sampling approach with
switched dynamics. We demonstrated the effectiveness of ou r
method on a numerical example, which showed improved
accuracy over existing methods and led to faster convergenc e
in some cases. In the future, we will further explore the
extension of our approach to continuous time, as well as
the control synthesis problem, including some notions of
optimality, while also investigating ways to improve the
accuracy and efﬁciency of our algorithms. We also will test
our approaches on a wide variety of nonlinear systems.
APPENDIX
A. Proof of Proposition 2
We begin by stating two intermediate results which will
be used to prove the proposition. The ﬁrst allows us to
determine whether two polytopes intersect by examining the
hyperplanes deﬁning each polytope.
Proposition 4. Given two polytopes PandQ,P∩Q/\e}atio\slash=∅
if and only if both of the following statements are true
1)Pintersects every halfspace deﬁning Q, i.e.,∀i∈
{1,...,N Q},∃pi∈P such that (HQ)ipi≤(bQ)i.
2)Qintersects every halfspace deﬁning P, i.e.,∀i∈
{1,...,N P},∃qi∈Q such that (HP)iqi≤(bP)i.
Proof. Necessity is simple, since if P∩Q/\e}atio\slash=∅, everyv∈
P∩Q will satisfy the existence conditions in 1) and 2).
To prove sufﬁciency, note that P∩Q=∅if and only if
there exists a separating hyperplane, deﬁned by some h∗∈
Rnandb∗∈R, such that∀v∈P, h⊤v≤band∀v∈
Q, h⊤v > b . Conditions 1) and 2) preclude the existence of
this separating hyperplane, implying P∩Q/\e}atio\slash=∅. /squaresolid
The second intermediate result tells us how to translate a
polytope so that it intersects a given halfspace.Proposition 5. Given a polytopePand halfspaceH={x:
h⊤x≤b}, the set of translations, i.e., of Pthat intersectH;
i.e.O(P,H)/defines{s∈Rn:P⊕{s}∩H/\e}atio\slash=∅}, is given by
O(P,H) ={s∈Rn:h⊤s≤b−α},
whereα= min v∈VPh⊤v.
Proof. The reasoning is similar to [13, Theorem 2.3], with
min replacing max because intersection, rather than contain-
ment, is required. /squaresolid
Proposition 2 follows from the combination of Proposi-
tion 4 with repeated application of Proposition 5 to every
halfspace deﬁning both PandQ(with−sreplacing sin
the second part, as the translation is applied to P, notQ).
REFERENCES
[1] F. Blanchini, “Set invariance in control,” Automatica , vol. 35, no. 11,
pp. 1747–1767, 1999.
[2] M. Fiacchini and M. Alamir, “Computing control invarian t sets in high
dimension is easy,” arXiv preprint , 2018.
[3] M. Rungger and P. Tabuada, “Computing robust controlled invariant
sets of linear systems,” IEEE Transactions on Automatic Control ,
vol. 62, no. 7, pp. 3665–3670, 2017.
[4] T. Anevlavis and P. Tabuada, “Computing controlled inva riant sets in
two moves,” in 2019 IEEE 58th Conference on Decision and Control
(CDC) , 2019, pp. 6248–6254.
[5] T. Anevlavis, Z. Liu, N. Ozay, and P. Tabuada, “An enhance d hier-
archy for (robust) controlled invariance,” in 2021 American Control
Conference (ACC) , 2021, pp. 4860–4865.
[6] M. Fiacchini, T. Alamo, and E. Camacho, “On the computati on of con-
vex robust control invariant sets for nonlinear systems,” Automatica ,
vol. 46, no. 8, pp. 1334–1338, 2010.
[7] L. Sch¨ afer, F. Gruber, and M. Althoff, “Scalable comput ation
of robust control invariant sets of nonlinear systems,” submit-
ted to IEEE Transactions on Automatic Control. Available fr om
https://mediatum.ub.tum.de/doc/1663416/document.pdf , 2022.
[8] S. Jang, N. Ozay, and J. L. Mathieu, “An invariant set cons truction
method, applied to safe coordination of thermostatic loads ,”arXiv
preprint , 2022.
[9] Y . Li and J. Liu, “Invariance control synthesis for switc hed nonlin-
ear systems: An interval analysis approach,” IEEE Transactions on
Automatic Control , vol. 63, no. 7, pp. 2206–2211, 2018.
[10] J. Bravo, D. Limon, T. Alamo, and E. Camacho, “On the comp utation
of invariant sets for constrained nonlinear systems: An int erval arith-
metic approach,” Automatica , vol. 41, no. 9, pp. 1583–1589, 2005.
[11] L. Jaulin, M. Kieffer, O. Didrit, and E. Walter, “Applie d interval
analysis,” ed: Springer, London , 2001.
[12] M. Khajenejad and S. Z. Yong, “Tight remainder-form dec omposition
functions with applications to constrained reachability a nd guaranteed
state estimation,” IEEE Transactions on Automatic Control , pp. 1–16,
2023.
[13] I. Kolmanovsky and E. Gilbert, “Theory and computation of distur-
bance invariant sets for discrete-time linear systems,” Mathematical
Problems in Engineering , vol. 4, pp. 317–367, 01 1998.
[14] D. Bertsekas, “Inﬁnite time reachability of state-spa ce regions by using
feedback control,” IEEE Transactions on Automatic Control , vol. 17,
no. 5, pp. 604–613, 1972.
[15] M. Khajenejad, F. Shoaib, and S. Z. Yong, “Interval obse rver synthesis
for locally Lipschitz nonlinear dynamical systems via mixe d-monotone
decompositions,” in American Control Conference (ACC) , 2022, pp.
2970–2975.
[16] M. Khajenejad and S. Z. Yong, “Simultaneous input and st ate interval
observers for nonlinear systems with full-rank direct feed through,” in
IEEE Conference on Decision and Control , 2020, pp. 5443–5448.
[17] B. Baker, S. Fortune, and S. Mahaney, “Polygon containm ent under
translation,” Journal of Algorithms , vol. 7, no. 4, pp. 532–548, 1986.
[18] M. Baotic, “Polytopic computations in constrained opt imal control,”
Automatika , vol. 50, pp. 119–134, 04 2009.