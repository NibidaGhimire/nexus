Microusity: A testing tool for Backends for
Frontends (BFF) Microservice Systems
Pattarakrit Rattanukul*, Chansida Makaranond*, Pumipat Watanakulcharus*, Chaiyong Ragkhitwetsagul*,
Tanapol Nearunchorny, Vasaka Visoottiviseth*, Morakot Choetkiertikul*, Thanwadee Sunetnanta*
*Faculty of ICT, Mahidol University , Thailand,yLineman Wongnai , Thailand
Abstract —The microservice software architecture is more
scalable and efﬁcient than its monolithic predecessor. Despite
its increasing adoption, microservices might expose security
concerns and issues that are distinct from those associated with
monolithic designs. We propose Microusity, a tool that performs
RESTful API testing on a speciﬁc type of microservice pattern
called back end for front end (BFF). We design a novel approach
to trace BFF requests using the port mapping between requests
to BFF and the sub-requests sent to back-end microservices.
Furthermore, our tool can pinpoint which of the back end
service causing the internal server error, which may lead to
unhandled errors or vulnerabilities. Microusity provides an error
report and a graph visualization that reveal the source of the
error and supports developers in comprehension and debugging
of the errors. The evaluation of eight software practitioners
shows that Microusity and its security test reports are useful
for investigating and understanding problems in BFF systems.
The prototype tool and the video demo of the tool can be found
at https://github.com/MUICT-SERU/MICROUSITY.
Index Terms —microservices, API security, testing, fuzzing
I. I NTRODUCTION
Microservice architecture has been increasingly adopted [1]
and is frequently used when building modern software. One of
the beneﬁts of the microservice architecture is its scalability
and modularity [2]. The developers can adopt a microservice
pattern that is suitable to their business, such as an aggregator
pattern, chained pattern, proxy pattern [3], micro front-end
pattern, and the backends for frontends (BFF) pattern [4]. The
BFF pattern provides an API endpoint as a middleman for
the client, i.e., the front end, to fetch the data from itself
rather than fetching directly from the back-end microservices.
Multiple BFFs can be created to support several target devices
of the same system to support different types of data used by
such devices, such as a BFF for mobile applications and a
BFF for the desktop website [4]. Thus, using the BFF pattern is
useful for the service with different client platforms. However,
when the error occurs in the back-end microservices, it is hard
to trace which service causes the error when the data is passed
via the BFF. Furthermore, without proper implementation,
back end problems (i.e., stack trace, error exception) may be
transmitted back to the client, exposing sensitive data to the
attackers.
Existing tools and techniques [5], [6], [7], [8], [9] that per-
form RESTful API testing can only test at the API endpoints,
but cannot trace the execution after the endpoint. In the case
of the BFF pattern, when an endpoint (i.e., BFF) returns anerror, the developers need to manually perform the checking to
identify which back-end microservice(s) is causing the error.
In this paper, we introduce Microusity , a tool that performs
RESTful API testing of BFF microservices. The tool traces
requests processed by BFF, creates main-request to sub-request
mapping, and provides test reports, in both textual and visu-
alization formats, to help developers to trace and ﬁx issues.
This paper makes the following key contributions.
1) BFF API fuzzing and request tracking: A novel approach
to map the request coming into the BFF to the requests
sent to the back-end microservices.
2) A graph-based visualization to help the developers in
comprehension and in debugging the errors caused by
the back-end microservices.
II. B ACKGROUND
In this section, we discuss the background knowledge and
the existing tools that are related to Microusity.
RESTful APIs. A Representational State Transfer (REST)
application programming interface (API) is a web service that
offers functionalities via HTTP. It has been adopted widely by
industry [9]. Microservices usually adopt RESTful APIs as a
communication method between their services.
Microservices and their security. Microservice is a soft-
ware architecture that breaks down an application into several
decoupled components that may be deployed independently of
one another [4]. The services communicate with one another
via multiple methods such as RESTful APIs, event streaming,
or message brokers [2]. Furthermore, each microservice in-
tends to be an autonomous development and run-time decision-
making unit. Therefore, microservice have seen widespread
use in practice [10], [11], [12], [13]. Several software and
service organizations, including Netﬂix [14], Soundcloud [15],
[16], and Uber [17], have embraced microservice architecture
as a substitute for their older monolithic approaches. It is
expected to grow further with the 5-year forcasted growth rate
during 2022–2027 of 15.7% [18].
Nevertheless, threats to the security of microservice archi-
tectures are becoming more prevalent. According to the study
from Hannousse and Yahiouche [19], microservices suffer
from security breaches by user-based, data, infrastructure, and
software attacks. Esposito et al. [20] report that microservices
can introduce more attack surfaces due to the larger number of
independent services compared to their monolithic counterpart.
As a result, the lack of a testing support framework in thearXiv:2302.11150v1  [cs.SE]  22 Feb 2023RESTful API of the microservice system might cause serious
issues since the RESTful API plays a huge role in integrating
microservices together [21].
Backends for Frontends (BFF). BFF is one of the patterns
for microservices that is designed to provide several gateways
for the front ends rather than having only one API gateway
for every front end. It allows ﬁne-tuning to a speciﬁc front-
end user interface (UI) such as mobile and web applications
since they may have different requirements [4]. BFF works
as an interface between the front end and the back-end
microservices. It receives a request from a front end and
dispatches the request or creates requests to several back-end
microservices to retrieve data and aggregate the result back to
the front end [22]. In this paper, we call the request to the BFF
as the main request and those requests that propagate from the
BFF to back-end services as sub-requests . This usually creates
a one-to-many mapping between the main request, created by
the client, to the sub-requests created by the BFF. By not
carefully checking for responses that are sent from the back-
end microservices, the BFF can leak sensitive information such
as programming exception messages. This information can
be beneﬁcial to attackers and lead to API attacks targeting
a module that caused the exception. Moreover, identifying the
back-end service that causes an error could be troublesome in
BFF. When an API request is sent to the BFF, this request
is passed to several back-end services. If one of the back-
end services fails and returns the 500 HTTP status code, we
cannot know which of the services fail since we can only get
the unsuccessful result from the BFF response.
RESTler is a stateful RESTful API fuzzing tool [23].
RESTler automatically tests RESTful APIs for ﬁnding bugs
related to security and reliability issues based on the responses
from APIs. It generates test requests by compiling Swagger
or OpenAPI speciﬁcations and inferring the producer and
consumer dependencies. In addition, RESTler can identify the
state of the test sequence and use the response from previous
test results to generate new test requests to ﬁnd more bugs.
Zeek (formerly known as Bro) is a network monitoring tool
specialized in event logging and powerful event handling. It is
extensible with its own programming language [24]. Zeek can
be used to perform network trafﬁc analysis and create alerts
to the user by using scripts.
III. T HEMICROUSITY TOOL
Microusity is an automated API testing tool that targets
BFF microservice systems. In this section, we present the
Microusity system design, the approach of API fuzzing and
request tracking, and the reporting mechanism.
A. System Design
The system architecture of Microusity is depicted in Figure
1. Microusity’s back end is composed of three components.
The ﬁrst component is a Controller . The controller reads the
test conﬁguration and handles the data ﬂow between the front
end and back end of the tool allowing the user to query
test history. The second component is the Test Conﬁgurator .Test Conﬁgurator incorporates the custom conﬁguration that
the user created. This conﬁguration is used to adjust the test
coverage of the target BFF system and also to modify the
test inputs. The third component is the Data Aggregator . Data
Aggregator processes the data collected from the test execution
and generates the test result mapping between main requests
to BFF and their sub-requests. This mapping result is stored
in data storage and sent to the tool’s front end for processing
as a test report and graph report. For Microusity’s front end,
HTML, CSS, Bootstrap, and EJS are used. The graph report
from the API testing is visualized by Cytoscape.js.
Two main components of Microusity that handle the testing
part include RESTler and Zeek. We use RESTler as the
RESTful API fuzzing engine and we use Zeek to intercept
the network log between the BFF and their back-end services.
Microusity monitors HTTP requests and responses that occur
by RESTler’s fuzzing in order to trace the execution of
each request and to locate responses that contain errors, i.e.,
responses that contain HTTP response status code of client
error responses (400–499) or server error responses (500–599).
B. BFF API Fuzzing and Request Tracking
We propose a novel approach for BFF API fuzzing and
request tracking in this paper. Figure 1 is used to explain the
approach. First, the testing conﬁguration is supplied by the
user through the web interface and passed to the Controller.
The Controller passes the testing conﬁguration to the Test
Conﬁgurator, which identiﬁes the target system to test. Next,
RESTler will be executed with the provided conﬁguration to
fuzz the APIs of the tested system while Zeek monitors the
communications between the BFF and the back-end microser-
vices. After fuzzing, the Data Aggregator collects the test
results from RESTler and the network monitoring log from
Zeek. The mapping is performed and the ﬁnal API test results
are kept in the Test Result database. Lastly, the results are sent
back to the front end to generate security and graph reports.
Microusity leverages the fuzzing capability from RESTler
which generates the requests from the targeted BFF’s Ope-
nAPI speciﬁcation. Once a request is validated, RESTler
will attempt to modify the request into a malformed one by
taking the BFF’s state into account. After testing is completed,
Microusity reads the log and creates the main request and sub-
request mapping based on the network port in the requests as
described in Algorithm 1. For each test input generated by
RESTler, Zeek collects all the requests created in the system.
Then, based on the order of requests in the Zeek log (sorted
chronologically), each request is checked whether it is the
original request coming to BFF (i.e., by having the destination
to the BFF’s host and port) or the sub-request generated by
BFF. Then, the sub-requests are mapped to the original request.
The process keeps repeating until all the requests in the Zeek
log are processed.
C. Reporting Mechanism
Microusity offers two types of reports: the error report and
the graph report. We explain them below.BFF 
microservice 
system
Data 
Aggregator
Test 
Configurator
Controller
User
Test 
result
Test/Graph 
Report 
Testing 
Configuration
Testing 
Configuration
Testing 
Configuration
RESTler
Zeek
Frontend
Testing 
Tool
Infrastructure
BFF 
Gateway
microservices
History 
Selection
History 
Selection
History 
Selection
Backend
RESTler
Configuration
Fuzz
Monitor
RESTler 
Result
Zeek 
Result
Test 
Result
Test 
ResultFig. 1: System architecture and workﬂow of Microusity
Algorithm 1 Mapping of main-request and its sub-requests
Require: zeeklog is sorted chronologically.
forrequest2zeeklog do
ifrequest :port = BFF PORT then
request map:insert (request)
BFF REQUEST request
else
request map:get(BFF REQUEST) :add subrequest(request)
end if
end for
Fig. 2: Example of the error report
1) Error Report: The error report is divided into three
main sections as shown in Figure 2. The ﬁrst section is the
overall test summary. This section tells the API coverage,
the number of total requests sent to the BFF, the total of
responses, and HTTP status code from all responses, including
sub-responses. The second section shows the total number of
error responses from the BFF and back-end microservices.
This can help the user understand how many errors are
occurred from the BFF or back-end microservices. The last
section is the request sequence that contains issues found
by Microusity. This section is grouped into four different
categories. The ﬁrst category contains the request sequences
in which their response contains an exception leakage in both
of main response from the BFF and sub-responses from the
back-end microservices. The second category contains the
Fig. 3: Example of the graph report
request sequence that only the main response from the BFF
contains the exception leakage. The third category contains the
sequence that only the sub-responses from back-end microser-
vices contain exception leakage. The last category includes
sequences that contain the HTTP 5xx (i.e., HTTP 500–599
indicating a server error) as their return status code. We choose
to monitor HTTP 5xx responses because they indicate that
an unhandled issue occurs in the back-end microservices, and
potentially contains a security vulnerability1.
2) Graph Report: Microusity offers a graph report to
visualize the relationship between the main request and sub-
requests and their responses. Figure 3 shows an example of
the graph report. It depicts an API request and responses that
pass through the BFF. The triangle node represents the client.
The arrow on the left is the main request and main response
from Microusity to the BFF, while the arrows on the right are
the sub-requests that the BFF creates after receiving the client
request. Each request is labeled by IP address and port number.
Microusity provides this graph visualization for the sequence
that contains the issues shown in the error report to give
additional information and easy-to-trace connections between
the main request and the sub-requests to the developers. The
requests which contain exception message leakage or HTTP
5xx are highlighted in red and the user can expand the request
arrow to show more information such as the request’s or
response’s bodies and header.
IV. E VALUATION
We performed a user evaluation to evaluate the ease of un-
derstanding and the usefulness of Microusity using a demon-
stration and an interview. We recruited eight full-time software
1Internal Server Error (HTTP 500) is a response from a server when it ﬁnds
an error that it does not know how to handle. More info: https://developer.
mozilla.org/en-US/docs/Web/HTTP/StatusPosition Working Exp. Exp. with microservices
Solution Architect 7 years 6 years
Senior Software Engineer 5 years 3 years
Software Engineer 2.5 years 2.5 years
Software Engineer 3 years 2 years
Software Engineer 3 years 1.5 years
Software Engineer 1 years 1 years
Senior Software Engineer 7 years 0.7 year
Software Architect 3 years 0.5 year
TABLE I: Interviewed participants
=  a v e r a g e score
Fig. 4: User evaluation result
engineers from four different companies. The demographic
of the interviewed participants is shown in Table I. The
participants are software architects and software engineers
with working experience from 1 to 7 years. They all have
worked with microservice systems ranging from half a year to
6 years. We explained the Microusity tool and its API testing
concept to the participants. Then, for three participants, we
demonstrated the tool execution on a simple BFF project2
with the security test report and graph report. For the other
ﬁve participants, we demonstrated the tool execution on their
company’s BFF system. Then, we asked them 7 questions to
rate the usability and usefulness of the system using the 5-
level Likert scale. The full list of interview questions is on
our study website3.
After performing the interviews, we aggregated the scores
given by the participants. The result is shown in Figure 4. We
found that the overall average score (represented by a green
triangle) that the research participants evaluated the usability
of the system in terms of clearness and comprehension of
the error report at 4.25 out of 5. The average score for
theclearness and comprehension of the graph report is 4.1.
Furthermore, Microusity received an average score of 4.1
in the overall system usability . Lastly, for the real-world
usefulness , the average score is 4.5.
We also asked them what they liked and disliked about the
tool. Five participants agreed that Microusity’s error report,
which indicates which service has an error, is useful. They
believed the tool can assist them in determining which service
causes API security issues. It saves them time compared to
manually identifying the service that causes the problem.
Moreover, the participants give positive comments such as
2https://github.com/piomin/sample-spring-microservices-new
3https://github.com/MUICT-SERU/MICROUSITYcategorization of HTTP error types, working with more than
one service, showing API test coverage, being open-source,
and using a fuzzing technique that can discover more bugs
than traditional or manual testing. However, three participants
reported that the tool has no getting-start instruction and high
learning curve, which caused them to struggle with learning
how to start using the tool. The other issues include requiring
a lot of settings and pre-requisite knowledge about RESTler,
maintaining the tool, in the long run, can be problematic, lacks
of ﬁltering options in the error report, and not presenting a
guide on how to solve the detected security issues. We plan to
improve the tool based on their comments in our future work.
The user evaluation reveals that the Microusity system is
useful for software practitioners that work and maintain BFF
microservice systems. The participants found the error and the
graph reports useful and support the debugging of one-to-many
requests created by BFF.
V. R ELATED WORK
Chondamrongkul et al. [5] proposed a security analysis ap-
proach for the microservice architecture model. The approach
analyzes the microservice model deﬁned using Ontology
Web Language and Architecture Description Language and
identiﬁes security issues. Compare to their work, Microusity
performs the API testing on the actual microservice system
instead of the model. RESTTESTGEN [7] and QuickREST [8]
are automated testing tools for RESTful APIs. Similar to
Microusity, the two tools rely on the speciﬁcation of the
APIs (e.g., Swagger or OpenAPI) to generate test inputs and
locate the errors based on the HTTP response status code.
EvoMaster [9] is a search-based white-box automated testing
tool that can be applied to RESTful API testing.
These existing tools can mostly test the RESTful APIs at the
endpoints but do not trace the requests behind the endpoints. In
contrast, Microusity deploys RESTler and Zeek and monitors
the requests and responses. Therefore, Microusity can trace
errors from the request and response sequence across the
BFF as well as their back-end microservices. Microusity then
provides easy-to-understand reports for the mapping of the
service which causes such errors.
VI. C ONCLUSION
We propose Microusity, an automated RESTful API testing
tool for BFF microservice systems using stateful fuzzing and
main-request and sub-request mapping. The tool detects the
requests that create HTTP 500–599 responses with exception
messages from the back-end microservices and creates an error
report and a graph report to aid the developers in comprehens-
ing the issues. The evaluation with eight practitioners shows
that the participants found the tool easy to use and useful
during their development and maintenance of microservices.
REFERENCES
[1] IBM Market Development & Insight, “Microservices in the enterprise,
2021: Real beneﬁts, worth the challenges,” IBM, Tech. Rep., 2021.
[2] I. C. Education, “Microservices,” https://www.ibm.com/cloud/learn/
microservices, Mar 2021.[3] A. Raj, Pethuru abd Raman and H. Subramanian, Architectural Patterns .
Packt Publishing, 2017.
[4] S. Newman, Building Microservices: Designing Fine-grained Systems .
O’Reilly Media, Inc, 2021.
[5] N. Chondamrongkul, J. Sun, and I. Warren, “Automated Security
Analysis for Microservice Architecture,” in 2020 IEEE International
Conference on Software Architecture Companion (ICSA-C) , mar 2020,
pp. 79–82.
[6] T. Taya, M. Hanada, Y . Murakami, A. Waseda, Y . Ishida, T. Mimura,
M. W. Kim, and E. Nunohiro, “An Automated Vulnerability Assessment
Approach for WebAPI that Considers Requests and Responses,” in 2022
24th International Conference on Advanced Communication Technology
(ICACT) , 2022, pp. 423–430.
[7] E. Viglianisi, M. Dallago, and M. Ceccato, “RESTTESTGEN: Auto-
mated Black-Box Testing of RESTful APIs,” in 2020 IEEE 13th In-
ternational Conference on Software Testing, Validation and Veriﬁcation
(ICST) , 2020, pp. 142–152.
[8] S. Karlsson, A. Causevic, and D. Sundmark, “QuickREST: Property-
based Test Generation of OpenAPI-Described RESTful APIs,” in 2020
IEEE 13th International Conference on Software Testing, Validation and
Veriﬁcation (ICST) . IEEE, 2020, pp. 131–141.
[9] A. Arcuri, “Automated Black- and White-Box Testing of RESTful APIs
With EvoMaster,” IEEE Software , vol. 38, no. 3, pp. 72–78, may 2021.
[10] N. Dragoni, S. Giallorenzo, A. L. Lafuente, M. Mazzara, F. Montesi,
R. Mustaﬁn, and L. Saﬁna, “Microservices: Yesterday, Today, and
Tomorrow,” in Present and Ulterior Software Engineering . Springer
International Publishing, 2017, pp. 195–216.
[11] C. Pahl and P. Jamshidi, “Microservices: A Systematic Mapping Study,”
inProceedings of the 6th International Conference on Cloud Computing
and Services Science , vol. 1, 2016, pp. 137–146.
[12] J. Thones, “Microservices,” IEEE Software , vol. 32, no. 1, pp. 116–116,
jan 2015.
[13] P. Jamshidi, C. Pahl, N. C. Mendonca, J. Lewis, and S. Tilkov, “Mi-
croservices: The Journey So Far and Challenges Ahead,” IEEE Software ,
vol. 35, no. 3, pp. 24–35, may 2018.
[14] Netﬂix TechBlog, “Microservices,” https://netﬂixtechblog.com/tagged/
microservices, Feb 2022, (Accessed on 01/11/2023).
[15] M. K ¨appler, “Inside a soundcloud microservice,” https:
//developers.soundcloud.com/blog/inside-a-soundcloud-microservice,
December 2015.
[16] L. Plotnicki, “BFF @ SoundCloud,” https://www.thoughtworks.com/
insights/blog/bff-soundcloud, July 2017.
[17] A. Gluck, “Introducing domain-oriented microservice architecture,”
https://eng.uber.com/microservice-architecture, Sep 2020.
[18] IMARC Group, “Microservices Architecture Market: Global Industry
Trends, Share, Size, Growth, Opportunity and Forecast 2022-2027,”
IMARC, Tech. Rep., 2022.
[19] A. Hannousse and S. Yahiouche, “Securing microservices and microser-
vice architectures: A systematic mapping study,” Computer Science
Review , vol. 41, p. 100415, aug 2021.
[20] C. Esposito, A. Castiglione, and K.-K. R. Choo, “Challenges in Deliv-
ering Software in the Cloud as Microservices,” IEEE Cloud Computing ,
vol. 3, no. 5, pp. 10–14, sep 2016.
[21] T. Yarygina and A. H. Bagge, “Overcoming Security Challenges in
Microservice Architectures,” in 2018 IEEE Symposium on Service-
Oriented System Engineering (SOSE) , 2018, pp. 11–20.
[22] H. Harms, C. Rogowski, and L. Lo Iacono, “Guidelines for adopting
frontend architectures and patterns in microservices-based systems,” in
Proceedings of the 11th Joint Meeting on Foundations of Software
Engineering (ESEC/FSE ’17) , 2017, pp. 902–907.
[23] V . Atlidakis, P. Godefroid, and M. Polishchuk, “RESTler: Stateful REST
API fuzzing,” in 2019 IEEE/ACM 41st International Conference on
Software Engineering (ICSE ’19) , 2019.
[24] Zeek.org. (2022) Zeek - an open source network security monitoring
tool. [Online]. Available: https://zeek.org/