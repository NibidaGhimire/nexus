CONTROLLABLE EXPLORATION OF A DESIGN SPACE
VIAINTERACTIVE QUALITY DIVERSITY
A P REPRINT
Konstantinos Sﬁkas
Institute of Digital Games
University of Malta
Msida, Malta
konstantinos.sfikas@um.edu.mt
Antonios Liapis
Institute of Digital Games
University of Malta
Msida, Malta
antonios.liapis@um.edu.mt
Georgios N. Yannakakis
Institute of Digital Games
University of Malta
Msida, Malta
georgios.yannakakis@um.edu.mt
ABSTRACT
This paper introduces a user-driven evolutionary algorithm based on Quality Diversity (QD) search.
During a design session, the user iteratively selects among presented alternatives and their selections
affect the upcoming results. We aim to address two major concerns of interactive evolution: (a) the
user must be presented with few alternatives, to reduce cognitive load; (b) presented alternatives
should be diverse but similar to the previous user selection, to reduce user fatigue. To address these
concerns, we implement a variation of the MAP-Elites algorithm where the presented alternatives
are sampled from a small region (window) of the behavioral space. After a user selection, the
window is centered on the selected individual’s behavior characterization, evolution selects parents
from within this window to produce offspring, and new alternatives are sampled. Essentially we
deﬁne an adaptive system of local QD, where the user’s selections guide the search towards speciﬁc
regions of the behavioral space. The system is tested on the generation of architectural layouts, a
constrained optimization task, leveraging QD through a two-archive approach. Results show that
while global exploration is not as pronounced as in MAP-Elites, the system ﬁnds more appropriate
solutions to the user’s taste, based on experiments with controllable artiﬁcial users.
Keywords quality diversityinteractive evolution human computer interaction creativity support tools ﬂoorplan
generation
1 Introduction
Interactive Evolutionary Computation (IEC) is a form of “systemic optimization that uses a real human’s subjective
evaluation in its optimization process” [1]. In its narrow deﬁnition, the user’s subjective evaluation essentially takes
the role of ﬁtness in an Evolutionary Computation (EC) optimization process [2]. The main beneﬁt of IEC is that it
is applicable to problems where the deﬁnition of a ﬁtness function is hard, or even impossible, while their evaluation
from real humans is feasible. IEC however can easily lead to user fatigue [2]: EC typically operates better with
large populations and many generations, while a human’s ability to examine and compare solutions is a valuable
and limited resource. Several solutions have been proposed to address user fatigue; among the most promising are
function approximation via user models [3, 4], which allows evolution to run for many generations in-between user
interactions, and interactive differential evolution [1]. However, training a user model as an approximator might be
slow to adapt to the user’s current interactions [5], while population-based metaheuristics are suited to real-valued
continuous genotypic representations which may not always be possible.arXiv:2304.01642v2  [cs.NE]  7 Apr 2023Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
In this paper we introduce a novel IEC algorithm aiming to provide a high degree of user control, with a reduced
degree of user fatigue. We showcase that this is achievable by exploiting the illumination capabilities of Quality
Diversity (QD) algorithms [6]. We envision a hybrid system of “User-Controlled QD Exploration”, where the user’s
subjective criteria localize and control QD search within a part of the behavioral space. We implement this concept
by modifying the basic operation of MAP-Elites [7], a popular QD algorithm, and devising the following interaction
loop: we constrain the algorithm’s operation within a window that covers a small region of the feature map, where it
locally expands the archive for a number of generations. Afterwards, design alternatives are sampled from within the
window and presented to the designer. Finally, the user’s selection determines where the window will move towards
next. These steps summarize the functionality of the speciﬁc algorithmic implementation introduced here, which we
refer to as User Controlled MAP-Elites (UC-ME).
We test UC-ME on the constrained design problem of generating architectural layouts, using a generative methodol-
ogy that was introduced in [8]. This problem has multiple constraints, an ad-hoc representation and ad-hoc genetic
operators. To apply UC-ME on a constrained problem we draw inspiration from FI-MAP-Elites [8] and adapt UC-ME
to work on the dual archives of feasible and infeasible elites. To test how UC-ME caters to different potential user
goals, we utilize artiﬁcial users with different selection criteria.
2 Related Work
The following sections highlight research on topics directly relevant to our work: Interactive Evolution and Quality
Diversity.
2.1 Interactive Evolutionary Computation
As discussed in Section 1, IEC is a powerful tool for domains where formulating a ﬁtness function is as difﬁcult as the
problem itself. IEC has been applied for the generation of abstract images [9], 3D models [10], and sounds [11], and
its process has also been gamiﬁed, i.e. fully implemented within games as a part of the games’ mechanics [12, 13, 14].
Several proposals have been put forth to address user fatigue in IEC [2], e.g. by showing a subset of the population
to the user, evolving through surrogate ﬁtness functions [3] for more than one generation, and using online tools to
share the burden of IEC with multiple users [13, 9, 12]. As a speciﬁc example of surrogate ﬁtnesses for IEC, past
work has proposed computational models of the designer [15, 16] to drive evolution. Relevant work in [16] showcases
that designer models that are updated after every human interaction with the tool can be used as a ﬁtness function
in intermediate generations (between user selections), thus reducing user involvement. The main drawback of this
approach is that it sacriﬁces the immediacy of user control, and must balance between overﬁtting or underﬁtting to the
user’s latest expressed preferences.
Other methods attempt to address the issue of user fatigue by accelerating the evolutionary process and its convergence
to an optimum. Those include ﬁtness landscape approximation [17, 18], interactive differential evolution [19, 20, 21]
and convergence point estimation [22], among others. The main limitation of these methods is that they are mostly
applicable to problems whose genotypic representation is (or can be) expressed as a numeric vector which deﬁnes a
continuous space. However, design problems (such as the use case examined in this paper) often require the use of
ad-hoc genotypic representations that would be hard, if not impossible, to be reduced to a vector of real numbers.
2.2 Quality Diversity
Quality Diversity (QD) search [6] is a form of EC that simultaneously optimizes and diversiﬁes the population of
generated solutions. Exemplary algorithms of this approach include Novelty Search with Local Competition [23] and
MAP-Elites [7]. The original aim of QD algorithms was to tackle deception in EC, by ensuring population diversity
along dimensions detached to the problem’s ﬁtness. Their ability to illuminate a problem space, however, has been
recognized as a way to foster human creativity [24, 25]. QD search has thus spread beyond its original application in
evolutionary robotics [7, 23] to various design-related problems [26, 27, 28].
MAP-Elites [7] is one of the most well-researched QD algorithms. The algorithm operates by subdividing a multidi-
mensional feature space into cells. Each cell may contain a single individual, thus forming an archive of elites within
their own behavioral niches. During its operation, MAP-Elites randomly selects individuals from the occupied cells,
mutates them and generates offspring. The offspring is assigned an appropriate behavioral niche, deﬁned by multiple
Behavioral Characterizations (BCs) acting as coordinates of the feature map. The offspring is placed in the cell for
that niche, if that cell is currently empty; if the cell is already occupied, the offspring replaces the elite in that cell if its
2Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
ﬁtness is higher. Over many repetitions of this process, the algorithm both expands the archive (towards all possible
BCs) and improves the ﬁtness of elites contained therein.
2.2.1 Constrained Quality Diversity
When a problem includes hard constraints, solutions are characterized as feasible or infeasible if they satisfy a set
of criteria or not. Importantly, their feasibility often requires special treatment, as it is often unrelated to ﬁtness and
may require the simultaneous satisfaction of different constraints. Although these types of problems are not the main
concern of QD algorithms, various approaches exist in the literature [29, 26] that combine QD with constraint solving.
Many of these methods draw inspiration from the FI-2-Pop GA [30] for their constraint solving aspects. In short, the
FI-2-Pop GA operates on two populations, one containing feasible solutions and one containing infeasible. Parents
are selected by either population, cross-breed only with other parents from the same population, but may produce
offspring that are assigned to the other population, depending on their feasibility.
In constrained QD search, FI-MAP-Elites [8] hybridizes FI-2Pop GA [30] and MAP-Elites [7] by maintaining two
archives (one with feasible elites and one with infeasible elites). Parent selection alternates between the two archives,
while mutated offspring can change archives based on their feasibility. Quality in the infeasible archive is based on
how close the individual is to being feasible. BCs do not need to be shared between the two archives (although they
often are). More details on the algorithm can be found in [8].
2.2.2 Interactive Quality Diversity
Despite its high suitability for design problems, QD in a Mixed-Initiative setting [31] is relatively under-researched.
Notable examples can be found in the works of Alvarez et al. on Interactive, Constrained Quality Diversity [27, 32].
In these works, the user’s interaction is implemented in two ways: (a) the user can control the MAP-Elites algorithm’s
parameters in a dynamic way, thus allowing them to illuminate the design space in different ways. Second, at a low-
level, the designer can manually intervene on the generated designs, or design their own from scratch and then use
them as seeds for MAP-Elites, to automatically generate variations. It is important to emphasize that while these
modes of operation rely on a user’s initiative, they are not matching the narrow deﬁnition [1] of IEC (see Section 1).
3 User-Controllable MAP-Elites
We introduce the User Controllable MAP-Elites (UC-ME) algorithm as a way to endow a user with control over the
direction and computational resources of the QD exploration. The algorithm operates by allowing parent selection
only from a small window of the archive of elites, and moving this selection window according to the user’s selections.
The user can select one favorite solution among a small number of alternatives (four in this paper) that have been
sampled from within the current window. The general process of the UC-ME algorithm, and different methods for
sampling design alternatives to show the user, are described in this paper.
3.1 Algorithm Initialization
UC-ME starts by producing a number of initial individuals through a random initialization method and placing them in
the MAP-Elites archive according to their behavioral characterization. This step seeds the archive to enable interaction
with the human user. The initial selection window of size wwis centered at the cell with the mean BC values of
existing elites, or the nearest elite if that cell is unoccupied. The window size ( w) is a parameter of UC-ME which
should be much smaller than the resolution of the feature map.
3.2 Interactive Operation
After the algorithm has been initialized, the interactive session can begin. During an interactive session, the following
steps are repeated indeﬁnitely, until the designer decides to end it.
1.Design Alternatives Sampling: The algorithm samples Ddesign alternatives, from within the selection
window, to be shown to the designer as options to select from.
2.Designer Input: The designer selects one preferred design.
3.Selection Window Placement: The selection window is centered at the coordinates of the designer’s last
selection.
4.Windowed Archive Expansion: The algorithm operates for Neevaluations, selecting parents from within
the window. The mutated offspring are evaluated and placed at their corresponding archive cell, based on
3Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
Figure 1: Visual representation of the available DAS methods, applied to a selection window of 99cells, for a
hypothetical underlying coverage (in white). In case there are multiple cells of the same color, one candidate is chosen
randomly from cells of the same color.
their Behavioral Characterization coordinates, without being constrained by the window. In case an offspring
lands on an already occupied cell, the individual with the highest ﬁtness survives.
3.3 Design Alternatives Sampling Methods
As described in Section 3.2, the algorithm samples a number of design alternatives to present to the user, from within
the selection window. We only test UC-ME with four alternatives in this paper, and examine six methods for design
alternatives sampling (DAS), which are all stochastic to some degree. The following list describes each DAS method;
Fig. 1 visualizes a hypothetical DAS example.
•Random (AR)samples 4 elites from the window at random.
•Quadrants ( AQ)andSquares (AS)split the window into 4 equal sections, using the diagonals ( AQ) or the
x-yaxes (AS). One individual is sampled randomly from each section.
•Edges (AE)samples one individual at random from each of the 4 edges of the window. If no individual is on
the edge, then the nearest individuals to that edge are preferred.
•Corners (AC)samples one individual per corner of the window, or the nearest individual to that corner (as
inAE).
•Medoids (AM): The coordinates of the individuals within the selection window are used as data points in a
k-medoids clustering algorithm, where k= 4in this paper. The four medoids of these clusters are shown to
the user.
4 Use Case: Layout Generation
We test UC-ME on the complex and constrained problem of generating architectural layouts. Variations of this task
can be found in computational architecture [33, 34, 35] and in games [36, 37]. We follow the methodology of [8],
where the problem deﬁnition is a set of topological and other constraints, and the output is a geometrical solution that
respects these constraints. We summarize the process for this use case below; more details can be found in [8].
We chose to focus on this complex problem for two reasons: ﬁrst, architectural layouts are characterized by many
quantiﬁable, yet subjective, features, making them ideal for testing MI-CC methods. Second, this task offers an
opportunity to test the proposed methodology on a constrained domain, showcasing its extensibility to other MAP-
Elites variants.
4Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
4.1 Layout Representation
The representation of the architectural layout has two facets: a Design Speciﬁcation (DS) and a Design Implementation
(DI).
The DS is a user-deﬁned description of the problem at hand. It contains a connectivity graph of the layout, where
vertices represent space units (rooms or other regions) and edges represents a connection between two space units
through a door (see e.g. Fig. 2). It also includes the desired area per space-unit, the number of doors to the exterior
and windows in each space-unit, and whether it is an indoors or outdoors space (see e.g. Table 1).
The DI is a concrete, geometric implementation of a DS, where every space unit occupies a speciﬁc region of the
plane, having a speciﬁc shape. The DS also includes the precise location of doors and windows. In order to support
the generation of free-form geometries (i.e. not conﬁned to ﬁxed geometric systems such as grids), we implement
a system based on a V oronoi-tessellation of the plane. The generated space units can be placed at speciﬁc regions
of this tessellation. Both the space-units’ placement and the underlying structure are mutated during the algorithm’s
operation.
4.2 Constraints
Architectural layouts are highly constrained problems, both from the physical requirements and design constraints
(from the DS). We consider layouts as feasible if (a) each space units take up a single, connected region; (b) adjacent
space units in the DS share a boundary; (c) the area of each space unit is suitably close to its speciﬁed area in the DS;
(d) all prescribed doors and windows are properly placed and (e) all interior pathways are at least 0.5 meters wide;
(f) the entire V oronoi graph is connected and (g) at least 50% of the V oronoi cells do not touching the border. The
latter two constraints are low-level engine constraints to ensure that the generation process for space units is possible.
Every generated individual is tested against these constraints, and if it fails any of them it is assigned a feasibility score
proportionate to the number of constraints succeeded, and the degree that they are succeeded.
4.3 Fitness
In this architectural layout problem, quality is mainly ensured by the satisfaction of constraints. Any individual that
satisﬁes the constraints of Section 4.2 is ultimately “good enough” as a layout. In order to guide the QD algorithm,
however, we use the adherence to the DS as our main quality criterion in the feasible population and optimize how
close the areas of the space units are to the speciﬁed ones. We deﬁne mean area precision ( Ps) as the average difference
between speciﬁed and actual area of each space unit. For each space unit its area precision is calculated via Eq. (1);
If a space unit from the DS is missing from the DI then its Psis 0. Note that Psis also a criterion for feasibility:
indeed, if Ps<0:6then the individual is infeasible. If Ps0:6, this metric is treated as quality characterization for
the feasible archive.
Ps=A=AtA<At
At=A AtA(1)
whereAis the area of the generated space unit and Atis the target area for this space unit prescribed in the DS.
4.4 Behavioral Characterizations
We use two Behavioral Characterizations (BCs) as measures of diversity of generated DIs. These BCs are used in both
the feasible and infeasible archives and their deﬁnition follows:
Mean Space Units’ Compactness (Cs) is based on the notion of compactness, a unit-less measure that expresses the
relation between a shape’s perimeter and its area [38]. A single space unit’s compactness ( Cs) is calculated as via
Eq. (2); If a space unit is deﬁned in the DI but is missing from the DS, its Cs= 0. Finally, Csmeasures the mean
compactness of all space units in the DI.
Cs= 2A=2(2)
whereAis the space unit’s surface area and its perimeter.
Plan Orthogonality (O) is calculated as the mean orthogonality of all angles ( ) between connected walls in the
layout. A single angle’s orthogonality ( O) is calculated as shown in Eq. (3); For acute angles, Oincreases linearly
from 0to1. For obtuse angles 2[=2;3=4],Odecreases linearly from 1to0:5. For obtuse angles 2[3=4;],
5Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
Oincreases linearly from 0:5to1.
O=8
<
:2= 0<= 2
2 2= = 2<3=4
2= 1 3=4(3)
whererepresents an unsigned angle between two continuous line segments, always in the range of [0:::].
4.5 Initial Generation
The initial generation of layouts occurs in a semi-stochastic manner that does not guarantee feasibility.
First, a set of points are randomly placed within the bounding rectangle, and deﬁne a V oronoi tessellation of the plane;
then, the prescribed space-units in the DS are iteratively placed on the plane starting from space units with the most
connections; each space unit is assigned a number of cells that matches the area prescribed in the DS. Then, if possible,
prescribed openings are placed randomly on walls in each room.
4.6 Genetic Operators
Mutation of layouts occurs in two stages, stochastic destruction and scripted repair . This approach produces offspring
that have partial similarities with the parents (as only parts of the layout is destroyed), while the repair functions aims
to decrease the chance of producing infeasible offspring.
In the destruction step, the algorithm selects and applies between 1 and 3 of the following stochastic operations: (1)
moving all points of the underlying V oronoi grid along the same direction; (2) moving a small set of V oronoi points
in random directions; (3) deleting an entire room; (4) expanding an existing room, either taking over cells from other
rooms (unsafe expansion) or respecting them (safe expansion); (6) eroding the exteriors cells of a room while still
maintaining connectivity; (7) deleting a subset of existing openings.
During the repair step, the following operations are applied sequentially: (1) adding any missing rooms, if there
is enough space; (2) re-connecting segments of the same room that may have become disconnected; (3) expanding
rooms in order to fulﬁll adjacency requirements with other rooms; (4) deleting or adding room segments until they are
suitably close to the desired area in the DS; (5) deleting extraneous openings and placing missing openings.
4.7 Constrained QD Process
Due to the constrained nature of this problem, we modify the general operation of UC-ME (Section 3) inspired by the
constrained FI-MAP-Elites [8] algorithm.
Constrained UC-ME works on a two-archives approach: one archive for the feasible elites and one for infeasible. We
employ two BCs, described in Section 4.4, and apply them to both archives. For the infeasible archive, we assign
elites a quality based on their feasibility score (see Section 4.2), while for the feasible archive we assign quality as
Ps. We modify the initialization process of Section 3.1 as follows: the 100 initial individuals are assigned to the
feasible or infeasible archive, according to their feasibility. Afterwards, we run FI-MAP-Elites QD search until the
feasible archive has at least 1% coverage. This provides us with enough of a seed to run the interactive operation of
the algorithm; in terms of this operation, the only changes are that (a) DAS methods are applied only on the feasible
archive, (b) the selection window is applied to both the feasible and the infeasible archive and (c) parents are chosen in
an alternating fashion between the feasible and the infeasible archive. As in the basic UC-ME of Section 3.2, offspring
are tested for feasibility and their BCs and placed in the appropriate archive in the appropriate cell, replacing any elite
there if they have a higher feasibility (for the infeasible archive) or a higher Psscore (for the feasible archive).
5 Experiment Protocol
As a speciﬁc case study for architectural layout generation, we set up an experiment with a speciﬁc design speciﬁcation
for a medium-size apartment (Section 5.1), algorithm parameters (Section 5.2), controllable (artiﬁcial) users to test the
algorithm (Section 5.3). We also identiﬁed a plethora of performance metrics in order to assess the general and user-
speciﬁc efﬁcacy of the algorithm, which are described in Section 5.4.
6Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
Figure 2: Connections between space-units in the DS. Interior Space Units are in gray and exterior ones in cyan.
ID Name Type Area Entrances Windows
1 Living Room Interior 40m21 2
2 Veranda 1 Exterior 25m20 0
3 Interior Hall Interior 5m20 0
4 W.C. Interior 4m20 1
5 Bathroom Interior 6m20 1
6 Bedroom 1 Interior 15m20 0
7 Bedroom 2 Interior 12m20 0
8 Veranda 2 Exterior 15m20 0
9 Kitchen Interior 14m20 1
10 Balcony Exterior 4m20 0
Table 1: Space-Units included in the DS for the experiment.
5.1 Apartment Layout Speciﬁcation
For this paper we use a DS of a typical Mediterranean apartment. The DS consists of 10 space units, as described in
Table 1. The prescribed connections between them are visualized in Fig. 2.
5.2 Algorithm Parameters
For this experiment, we partition each archive into 4,096 cells ( 6464). BCs, feasible and infeasible ﬁtness are as in
Section 4. The selection window is of size 99. The algorithm is initialized with 100 individuals, and FI-MAP-Elites
runs until 1% of the feasible archive is covered. All runs across all experiments start from the same initial population
produced above. Between user selections, UC-ME operates within the selection window by iteratively selecting 10,000
parents (alternating between feasible and infeasible archives) before the next batch of design alternatives are shown to
the user.
5.3 Artiﬁcial Users
In order to test the performance of our interactive QD approach, we need a way to control the user’s selection criteria.
We thus developed several artiﬁcial users: each artiﬁcial user ( Ui) following a heuristic ( hi) as its user selection
criterion (USC) when selecting among the presented alternatives. All agents select the individual with the highest
hi(maximization problem) and all hi2[0;1]. Eight artiﬁcial agents ( U1toU8) have a consistent USC throughout
evolution), while four artiﬁcial agents ( U9toU12) change their USC after 5 selections ( s) in order to test how the
algorithm adapts to a shifting user taste. This method for evaluating algorithms dependent on personal taste via
artiﬁcial users (including a changing USC) is based on [5]. We have chosen USCs that are captured in the two
behavioral characterizations of our case study (BC1 and BC2), as the proposed method operates best when the user’s
taste is not orthogonal to the dimensions of QD explored. The heuristics of the different users are listed below:
•U1maximizes BC1: h1=Cs.
•U2maximizes BC2: h2=O.
•U3maximizes both BC1 and BC2: h3=1
2(Cs+O).
7Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
•U4maximizes BC1 or BC2: h4=max(Cs;O).
•U5minimizes BC1: h5= 1 Cs.
•U6minimizes BC2: h6= 1 O.
•U75minimizes both BC1 and BC2: h7= 1 1
2(Cs+O).
•U8minimizes BC1 or BC2: h8= 1 max(Cs;O).
•U9maximizes BC1, then minimizes it:
h9=Csifs5
1 Csifs>5
•U10maximizes BC2, then minimizes it:
h10=Oifs5
1 Oifs>5
•U11maximizes BC1, then maximizes BC2:
h11=Csifs5
Oifs>5
•U12maximizes BC2, then maximizes BC1:
h12=Oifs5
Csifs>5
5.4 Performance Metrics
We follow the literature for assessing the performance of MAP-Elites algorithms through observing the Coverage
(percentage of occupied cells), Maximum Fitness (highest ﬁtness among elites) and QD-Score (total ﬁtness of all
elites) of the feasible archive [7]. Speciﬁcally, we examine the Area Under Curve (AUC) of these metrics from the
start of evolution until the end, thus measuring performance during the entirety of the run—not just the ﬁnal state.
Since we want to achieve a user-controllable exploration of the problem space, we use the user selection criterion
(USC) in several variations to assess how the algorithm caters for a user’s tastes. The following metrics capture
whether the elites match the user’s selection criteria: the maximum and average value of the USC of elites in the
archive (Max USC, Mean USC). In addition, we want to assess whether good elites according to the USC are also of
good quality: to measure this, we multiply the USC score of feasible elites with their ﬁtness to derive W-USC. Inspired
by the QD score, we assess both the average W-USC in the archive (Mean W-USC), and the sum of W-USC scores of
feasible elites (Sum W-USC). These four metrics are evaluated in every time-step of the algorithm, and we calculate
the AUC score for each of them, similarly to above.
Given the many DAS methods in Section 3.3, it would be important to evaluate how useful the design alternatives are
to the user. We thus introduce the following metrics: Local Diversity as the average distance between concurrently
presented alternatives in the feature space, Local Mean Fitness as their average ﬁtness, Local Mean USC as their
average USC value. As above, the AUC of these metrics is used for comparisons between DAS methods.
Finally, the DAS method can impact the efﬁciency with which the selection window reaches areas of the search space
with high USC scores, versus randomly moving around. We evaluate USC Efﬁciency via Eq. (4); it essentially captures
the degree to which consecutive designer selections lead to a higher USC than was previously acquired. Unlike all
other metrics, efﬁciency captures the entirety of the evolutionary run and thus does not need to be captured over time
(as AUC).
USC Efﬁciency =PNs
s=2(Us Us 1)
PNs
s=2jUs Us 1j(4)
whereNsis the total number of user selections in the experiment, Usis the USC value of the selected individual at
selections.
6 Results
In order to summarize our ﬁndings from experiments with the use case of Section 4, we ﬁrst compare results of UC-ME
with different DAS methods (Section 6.1), then we choose the most promising DAS method among them to compare
against MAP-Elites without user control (Section 6.2). Results are from 10 independent runs, and signiﬁcance is
established via Student’s t-test withp<0:05.
8Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
6.1 Comparisons between DAS methods
Parameter ARAQAEASACAM
Local Diversity 0 0 48 0 58 13
Local Mean Fitness 17 2 0 2 0 31
Local Mean USC 0 2 2 1 7 0
USC Efﬁciency 0 10 10 10 7 6
Table 2: Comparison between all DAS Methods for local QD metrics. Values show how many times this DAS method
was signiﬁcantly better ( p <0:05) than another DAS method in the same experiment. Results are collected after 10
selections.
Table 2 summarizes a comparison between different DAS methods. Treating each artiﬁcial user as a separate experi-
ment, we evaluate in how many pairwise comparisons the DAS method had signiﬁcantly better metrics than another
method, after 10 selections. With 6 DAS methods (i.e. 5 comparison per method) and 12 artiﬁcial users, the maximum
number in each cell is 60. The Bonferroni correction [39] is applied for multiple comparisons. Note that we also tested
for all other metrics (pertaining to QD and USC), but there was almost no difference between the DAS methods.
Table 2 indicates that the Edges and Corners DAS methods have a clear advantage in local diversity. This is expected,
as both methods prioritize individuals that are as far away from the selection window’s center as possible. Intuitively
the Corners method is slightly better at local diversity as its ﬁrst choices have the absolute maximum distance of all
candidates in the window (see Fig. 1).
In terms of local mean ﬁtness, we can see that the most successful methods in that regard are Medoids, followed by
Random DAS. Intuitively, both of these methods are less likely to move the window quickly away from its current
position (as indicated by their poor efﬁciency) and thus more QD iterations are targeting the same cells which is likely
to lead to higher ﬁtness within the window. Moreover, individuals at the edges of the feasible space tend to have a
lower ﬁtness (see Fig. 4) and thus Edges or Corners DAS methods are likely to sample at least some less ﬁt individuals.
We also note that in terms of local mean USC and USC efﬁciency there are no clear winners, with AE,ASandAM
being slightly more efﬁcient than other methods. Even before 10 selections, ACtends to reach the edge of the feasible
space with the best USC (see Fig. 4) and after that the window moves erratically—and inefﬁciently.
Based on the ﬁndings of Table 2, the Corners DAS method has the best performance due to a higher diversity of
shown individuals, while still being fairly efﬁcient. The Medoids method shows ﬁtter individuals to the user than other
DAS methods, while still being somewhat efﬁcient at adapting to the USC. We thus test these DAS methods against a
baseline MAP-Elites in the next Section.
6.2 Comparisons with MAP-Elites
Parameter MAP-Elites AC MAP-Elites AM
Coverage 12 0 12 0
Max Fitness 0 0 0 0
QD Score 12 0 12 0
Max USC 1 9 1 4
Mean USC 0 12 0 10
Mean W-USC 0 11 0 11
Sum W-USC 11 0 12 0
Table 3: Comparison between baseline MAP-Elites and two of the best performing DAS methods, showing the number
of experiments where one method or the other had signiﬁcantly higher scores ( p <0:05) in each metric. Results are
collected after 10 selections.
Based on the comparisons between DAS methods in Section 6.1, we focus on comparing the Corners and Medoids
methods against a baseline MAP-Elites which does not consider the user’s taste and performs unguided exploration
of the search space. The baseline implements FI-MAP-Elites [8] and randomly selects random individuals to mutate,
alternating between the two archives.
Table 3 shows the pairwise comparison between the unguided MAP-Elites baseline and each UC-ME variant. Results
show the number of experiments in which the baseline or the UC-ME variant had superior performance in terms of
the chosen metric (out of a total of 12 experiments), after 10 user selections. It is evident that unguided MAP-Elites
has better coverage of the problem space and thus a higher QD score, across all experiments. This is not surprising, as
9Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
Figure 3: Charts display the value of Max and Mean USC of four different artiﬁcial users ( U1,U4,U9andU11),
comparing the Quadrants ( AC) and Medoids ( AM) DAS methods with the baseline (MAP-Elites without user control).
Values are averaged across 10 different runs and shaded regions capture the 95% conﬁdence interval.
UC-ME drives search towards speciﬁc parts of the problem space (and regions of the feature map), while MAP-Elites
covers as much of the feature map as possible. We also note that there are no differences in terms of maximum ﬁtness.
This is somewhat surprising, since different parts of the feature map (targeted by different users) may not have equally
good ﬁtnesses. It seems that ﬁnding a highly ﬁt individual is not challenging in this use case.
As expected, the unguided exploration of the baseline MAP-Elites performs worse than both UC-ME versions for
maximum and mean USC score of all elites in the archive. The AMmethod is less efﬁcient at reaching very high
USC scores, compared to AC; this is not surprising since the latter moves the selection window toward regions of the
problem space with high USC faster. Mainly due to a higher mean USC, it is not surprising that the mean W-USC is
higher for UC-ME variants compared to the baseline. The higher coverage of the baseline, however, leads to higher
values in the sum of W-USC scores among all elites, similarly to the QD Score.
Figure 3 shows a comparison between the progression of mean USC and max USC for four indicative artiﬁcial users:
two consistent ( U1,U3) and two that change criteria after 5 selections ( U9,U11). Note that throughout Section 6 we
chose to focus on a threshold of 10 selections because this is a realistic number of times that the user may interact with
a tool such as this one before user fatigue kicks in. However, for completeness we let experiments run until 50 user
selections were completed and display the full runs in Fig. 3.
It is evident from Fig. 3 that while the unguided MAP-Elites can accidentally ﬁnd regions of the problem space with
a high USC (i.e. max USC keeps increasing), this is not a guarantee for the broader population (mean USC may
increase or decrease) depending on which parts of the space are more easily reachable. As expected, UC-ME variants
consistently improve both USC measures as the archive is driven by local QD towards speciﬁc parts of the space.
Figure 3 also shows how the algorithms handle abrupt changes in user criteria after the 5th selection ( U9,U11).U9has
a more abrupt change as it suddenly targets the opposite of its previous criterion, causing a drop in USC. It takes several
user interactions to move the window towards more appropriate regions of the problem space, but after 5 selections
from the criterion change, UC-ME approaches the mean and max USC of the baseline which has been evolving for
both high Csand low Cs(both captured in h9). Given enough time, both methods surpass the baseline (e.g. after 25
selections).U11is not as “aggresssive” in changing its mind; indeed, even unguided MAP-Elites can ﬁnd individuals
with high O, which is the USC from 6th selection onward. Since the selection window does not have to retrace its
steps, as with U9, the UC-ME methods can ﬁnd comparable or slightly better individuals to the baseline after 5 more
selections, and much better individuals given enough time.
The progress of UC-ME can also be visualized through the feature map itself. Figure 4 shows how coverage changes
after each user selection (or the same evaluation threshold for MAP-Elites). In addition, the ﬁgures show in red the
selection window of UC-ME as it moves towards higher USC scores (in this case that of U3). We focus on the AC
method, as the most efﬁcient. The top row of images in Fig. 4 illustrates the differences between UC-ME and MAP-
Elites exploration patterns: in gray we see the common cells discovered by both methods, in magenta we see the
cells discovered only by MAP-Elites and in blue we see the cells discovered only by UC-ME. We see that cells at
higher USC values exclusively belong to UC-ME. The higher coverage of MAP-Elites is due to most cells occupying
10Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
Figure 4: Behavioral space exploration for the baseline MAP-Elites (bottom row) and UC-ME with Corners DAS
guided byU3(middle row), for the ﬁrst 5 selections. Their shared color scale (shown at the bottom) represents ﬁtness
Ps2[0:6;1]. The top row shows coverage differences: red cells are discovered only by the baseline, blue cells are
discovered only by UC-ME and gray cells are common. In these ﬁgures the xaxis is Cs2[0:44;0:86]and theyaxis
isO2[0:61;0:97].
(a) Selection 1
 (b) Selection 10
 (c) Selection 50
Figure 5: Indicative individuals selected by U3, using theACDAS method, after 1, 10 and 50 interactions with
UC-ME.
lower CsandOvalues, which are undesirable for U3. Figure 4 also shows how the selection window moves ﬁrst
towards a higher Cs; once it reaches the edge of the feasible space and can not ﬁnd individuals with higher scores in
that direction, it moves towards higher Oscores. We also see that within the ﬁrst 3 selections, UC-ME with AChas
found the edges of the feasible space with the highest USC scores and starts moving around fairly haphazardly in that
vicinity, leading to more selections and improved quality of individuals in that speciﬁc region of the problem space.
Finally, we show what U3selected in an indicative run of UC-ME with ACin Fig. 5. We observe that initial individuals
do not have a good USC score as the shown selection has many acute angles and complex shapes in the rooms. After
10 selections, the user has found an individual with mostly compact and square rooms. After 50 selections, the results
are not much different than with 10 selections; thus 10 selections are usually enough for this problem and would not
be overly fatiguing to the user.
7 Discussion
This paper considers that the space partitioning of MAP-Elites can beneﬁt interactive evolution: the (moving) selection
window is a simple and intuitive way to localize QD search, treating the window (and the BCs) as an implicit function
11Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
approximator [2]. Our experiments have showcased that while the unguided MAP-Elites explores more of the problem
space, UC-ME ﬁnds individuals more pertinent to the user’s taste and covers fairly large regions of the feasible space
that have desirable characteristics (see Fig. 4). Interestingly, experiments with artiﬁcial users did not reveal major
differences between DAS methods; however, we expect that different shown alternatives may impact human users
more, making their selection harder and increasing fatigue.
Therefore, an intuitive next step is to deploy UC-ME to human designers, with experience in architectural layouts, and
evaluate both the performance metrics listed in Section 5.4 and the users’ experience through a post-study usability
questionnaire [40]. Unlike artiﬁcial users, the complex problem of architectural layouts may be difﬁcult to process for
human users, while also choosing between more or less similar options. Therefore, future work should explore how
UC-ME performs in unconstrained (or less constrained) problems, including problems which require less cognitive
effort on the part of the human user to process the results visually. An intuitive unconstrained case study would be
image generation—to which MAP-Elites has already been applied [41]. Other directions for future work could explore
constrained domains such as games where QD search can be beneﬁcial to give game designers diverse but good options
[24]; possible cognitive-light tasks in the games domain could be sprite generation [42] or narrative structures [43].
Beyond testing in other domains and with human users, there is a plethora of future directions for improving the
algorithmic properties of UC-ME. Speciﬁcally, implementing a variant that operates within a higher-dimensional
feature space (more than 2 dimensions) would be a worthwhile step, as it would offer the user more control over
the search direction. Such an approach could leverage CVT-MAP-Elites [44], which can theoretically operate on
more dimensions, and convert the selection window into a point cloud (of nearest CVT neighbors) moving within that
space. A more ambitious avenue of future work would be the re-introduction of user models [15] to UC-ME, as a
complementary way of (aesthetic) function approximation [1] to the local QD. Moreover, a constantly updated user
model [4] could potentially be used to adapt the behavior characterizations themselves to better align to the user’s
taste, enabling a simpler UC-ME pipeline that moves the selection window around. This ambitious direction could
have several applications beyond UC-ME, and could leverage existing methods of automatic and incremental behavior
characterization [45, 46, 47].
8 Conclusion
In this paper, we propose a way of controlling the direction of exploration and the computational budget of Quality
Diversity search with little cognitive load. The user-controlled MAP-Elites algorithm (UC-ME) is the ﬁrst instance
of the interactive evolution paradigm (in its narrow sense) applied to MAP-Elites, unlike past work [32]. The UC-
ME algorithm operates by focusing selection of parents in a smaller window of the feature map, which allows it to
operate in both unconstrained and constrained problems via two archives [8]. In our experiments, on a complex and
heavily constrained problem, we observe that UC-ME can focus on interesting parts of the problem space according
to the user’s selection criterion, at the cost of lower coverage and fewer elites in total. The proposed method shows
potential, but important next steps include testing its efﬁciency and impact on user fatigue with human users, as well
as expanding the work in more domains, with more BC dimensions, and alongside constantly updated models of the
user’s taste [15].
9 Acknowledgments
This work has been supported by the European Union’s Horizon 2020 research and innovation programme from the
PrismArch (Grant Agreement No. 952002) and AI4media (Grant Agreement No. 951911) projects.
References
[1] Yan Pei and Hideyuki Takagi. Research progress survey on interactive evolutionary computation. Journal of
Ambient Intelligence and Humanized Computing , pages 1–14, 2018.
[2] Hideyuki Takagi. Interactive evolutionary computation: Fusion of the capabilities of EC optimization and human
evaluation. Proceedings of the IEEE , 89(9):1275–1296, 2001.
[3] Antonios Liapis, Georgios N. Yannakakis, and Julian Togelius. Adapting models of visual aesthetics for per-
sonalized content creation. IEEE Transactions on Computational Intelligence and AI in Games , 4(3):213–228,
2012.
[4] Alexander Hagg, Alexander Asteroth, and Thomas Bäck. Modeling user selection in quality diversity. In Pro-
ceedings of the Genetic and Evolutionary Computation Conference , 2019.
12Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
[5] Antonios Liapis, Héctor P. Martínez, Julian Togelius, and Georgios N. Yannakakis. Adaptive game level creation
through rank-based interactive evolution. In Proceedings of the IEEE Conference on Computational Intelligence
and Games , 2013.
[6] Justin K Pugh, Lisa B Soros, and Kenneth O Stanley. Quality diversity: A new frontier for evolutionary compu-
tation. Frontiers in Robotics and AI , 2016.
[7] Jean-Baptiste Mouret and Jeff Clune. Illuminating search spaces by mapping elites. arXiv preprint
arXiv:1504.04909 , 2015.
[8] Konstantinos Sﬁkas, Antonios Liapis, and Georgios N. Yannakakis. A general-purpose expressive algorithm for
room-based environments. In Proceedings of the FDG workshop on Procedural Content Generation in Games ,
2022.
[9] Jimmy Secretan, Nicholas Beato, David B. D’Ambrosio, Adelein Rodriguez, Adam Campbell, Jeremiah T.
Folsom-Kovarik, and Kenneth O. Stanley. Picbreeder: A case study in collaborative evolutionary exploration
of design space. Evolutionary Computation , 19(3):373–403, 2011.
[10] Jeff Clune, Anthony Chen, and Hod Lipson. Upload any object and evolve it: Injecting complex geometric
patterns into CPPNs for further evolution. In Proceedings of the IEEE Congress on Evolutionary Computation ,
pages 3395–3402, 2013.
[11] Björn Þór Jónsson, Amy K. Hoover, and Sebastian Risi. Interactively evolving compositional sound synthesis
networks. In Proceedings of the Genetic and Evolutionary Computation Conference , page 321–328, 2015.
[12] Sebastian Risi, Joel Lehman, David B. D’Ambrosio, Ryan Hall, and Kenneth O. Stanley. Petalz: Search-based
procedural content generation for the casual gamer. IEEE Transactions on Computational Intelligence and AI in
Games , 8(3):244–255, 2016.
[13] Erin J. Hastings, Ratan K. Guha, and Kenneth O. Stanley. Evolving content in the galactic arms race video game.
InProceedings of the IEEE Symposium on Computational Intelligence and Games , pages 241–248, 2009.
[14] Terence Soule, Samantha Heck, Thomas E. Haynes, Nicholas Wood, and Barrie D. Robison. Darwin’s demons:
Does evolution improve the game? In Proceedings of Applications of Evolutionary Computation , pages 435–451,
2017.
[15] Antonios Liapis, Georgios N. Yannakakis, and Julian Togelius. Designer modeling for personalized game content
creation tools. In Proceedings of the AIIDE Workshop on Artiﬁcial Intelligence & Game Aesthetics , 2013.
[16] Antonios Liapis, Georgios N. Yannakakis, and Julian Togelius. Designer modeling for sentient sketchbook. In
Proceedings of the IEEE Conference on Computational Intelligence and Games , 2014.
[17] Yan Pei and Hideyuki Takagi. Accelerating evolutionary computation with elite obtained in projected one-
dimensional spaces. In Proceedings of the Genetic and Evolutionary Computation Conference , pages 89–92,
2011.
[18] Yan Pei and Hideyuki Takagi. Fourier analysis of the ﬁtness landscape for evolutionary search acceleration. In
Proceedings of the IEEE Congress on Evolutionary Computation , 2012.
[19] Hideyuki Takagi and Denis Pallez. Paired comparison-based interactive differential evolution. In Proceedings of
the World Congress on Nature & Biologically Inspired Computing , pages 475–480, 2009.
[20] Yan Pei and Hideyuki Takagi. Triple and quadruple comparison-based interactive differential evolution and
differential evolution. In Proceedings of the Workshop on Foundations of Genetic Algorithms , page 173–182.
ACM, 2013.
[21] Yan Pei and Hideyuki Takagi. Local ﬁtness landscape from paired comparison-based memetic search in interac-
tive differential evolution and differential evolution. International Journal of Ad Hoc and Ubiquitous Computing ,
2017.
[22] Noboru Murata, Ryuei Nishii, Hideyuki Takagi, and Yan Pei. Analytical estimation of the convergence point of
populations. In Proceedings of the IEEE Congress on Evolutionary Computation , pages 2619–2624, 2015.
[23] Joel Lehman and Kenneth O Stanley. Evolving a diversity of virtual creatures through novelty search and local
competition. In Proceedings of the Genetic and Evolutionary Computation Conference , pages 211–218, 2011.
[24] Daniele Gravina, Ahmed Khalifa, Antonios Liapis, Julian Togelius, and Georgios N. Yannakakis. Procedural
content generation through quality-diversity. In Proceedings of the IEEE Conference on Games , 2019.
[25] Antonios Liapis, Héctor P Martınez, Julian Togelius, and Georgios N Yannakakis. Transforming exploratory
creativity with DeLeNoX. In Proceedings of the International Conference on Computational Creativity , pages
56–63, 2013.
13Controllable Exploration of a Design Space via Interactive Quality Diversity A P REPRINT
[26] Ahmed Khalifa, Scott Lee, Andy Nealen, and Julian Togelius. Talakat: Bullet hell generation through constrained
map-elites. In Proceedings of the Genetic and Evolutionary Computation Conference , pages 1047–1054, 2018.
[27] Alberto Alvarez, Steve Dahlskog, Jose Font, and Julian Togelius. Empowering quality diversity in dungeon
design with interactive constrained MAP-Elites. In Proceedings of the IEEE Conference on Games , 2019.
[28] Theodoros Galanos, Antonios Liapis, Georgios N. Yannakakis, and Reinhard Koenig. Arch-elites: Quality-
diversity for urban design. In Proceedings of the Genetic and Evolutionary Computation Conference Companion ,
page 313–314, 2021.
[29] Antonios Liapis, Georgios N Yannakakis, and Julian Togelius. Constrained novelty search: A study on game
content generation. Evolutionary computation , 23(1):101–129, 2015.
[30] Steven Orla Kimbrough, Gary J Koehler, Ming Lu, and David Harlan Wood. On a feasible–infeasible two-
population (FI-2pop) genetic algorithm for constrained optimization: Distance tracing and no free lunch. Euro-
pean Journal of Operational Research , 190(2):310–327, 2008.
[31] Antonios Liapis, Gillian Smith, and Noor Shaker. Mixed-initiative content creation. In Noor Shaker, Julian
Togelius, and Mark J. Nelson, editors, Procedural Content Generation in Games: A Textbook and an Overview
of Current Research , pages 195–214. Springer, 2016.
[32] Alberto Alvarez, Jose Maria Maria Font Fernandez, Steve Dahlskog, and Julian Togelius. Interactive constrained
MAP-Elites: Analysis and evaluation of the expressiveness of the feature dimensions. IEEE Transactions on
Games , 14(2), 2020.
[33] Philippe Charman. A constraint-based approach for the generation of ﬂoor plans. In Proceedings of the IEEE
Conference on Tools with Artiﬁcial Intelligence , pages 555–561, 1994.
[34] Benachir Medjdoub and Bernard Yannou. Separating topology and geometry in space planning. Computer-aided
design , 32(1):39–61, 2000.
[35] Eugénio Rodrigues, Adélio Rodrigues Gaspar, and Álvaro Gomes. An evolutionary strategy enhanced with a
local search technique for the space allocation problem in architecture, part 1: Methodology. Computer-Aided
Design , 45(5):887–897, 2013.
[36] Daniel Karavolos, Antonios Liapis, and Georgios N Yannakakis. Evolving missions to create game spaces. In
Proceedings of the IEEE Conference on Computational Intelligence and Games , 2016.
[37] Joris Dormans. Adventures in level design: Generating missions and spaces for action adventure games. In
Proceedings of the FDG workshop on procedural content generation in games , 2010.
[38] Petros Koutsolampros, Kerstin Sailer, Tasos Varoudis, and Rosie Haslem. Dissecting visibility graph analysis:
The metrics and their role in understanding workplace human behaviour. In Proceedings of the International
Space Syntax Symposium , 2019.
[39] Olive Jean Dunn. Multiple comparisons among means. Journal of the American Statistical Association , 56:52–
64, 2012.
[40] James R. Lewis, Suzanne C. Henry, and Robert L. Mack. Integrated ofﬁce software benchmarks: A case study.
InProceedings of the International Conference on Human-Computer Interaction , 1990.
[41] Matthew Fontaine and Stefanos Nikolaidis. Differentiable quality diversity. In M. Ranzato, A. Beygelzimer,
Y . Dauphin, P.S. Liang, and J. Wortman Vaughan, editors, Advances in Neural Information Processing Systems ,
volume 34, pages 10040–10052, 2021.
[42] Antonios Liapis. Exploring the visual styles of arcade game assets. In Proceedings of Evolutionary and Biolog-
ically Inspired Music, Sound, Art and Design (EvoMusArt) . Springer, 2016.
[43] Alberto Alvarez and Jose Font. TropeTwist: trope-based narrative structure generation. In Proceedings of the
FDG workshop on Procedural Content Generation , 2022.
[44] Vassilis Vassiliades, Konstantinos Chatzilygeroudis, and Jean-Baptiste Mouret. Using centroidal voronoi tessel-
lations to scale up the multidimensional archive of phenotypic elites algorithm. IEEE Transactions on Evolu-
tionary Computation , 22(4):623–630, 2018.
[45] Antoine Cully. Autonomous skill discovery with quality-diversity and unsupervised descriptors. In Proceedings
of the Genetic and Evolutionary Computation Conference , 2019.
[46] Alexander Hagg, Alexander Asteroth, and Thomas Bäck. Prototype discovery using quality-diversity. In Pro-
ceedings of the International Conference on Parallel Problem Solving from Nature , 2018.
[47] Alexander Hagg, Sebastian Berns, Alexander Asteroth, Simon Colton, and Thomas Bäck. Expressivity of pa-
rameterized and data-driven representations in quality diversity search. In Proceedings of the Genetic and Evo-
lutionary Computation Conference , 2021.
14