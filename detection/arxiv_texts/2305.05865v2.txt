An adaptable JSON Diff Framework
Ao Sun
Abstract —In this paper, we present an implemen-
tation of JSON-diff framework JYCM, extending the
existing framework by introducing the concept of "un-
ordered" comparisons and allowing users to customize
their comparison scenarios flexibly. Furthermore, we
provide a diff-result renderer to visualize better and
understand the differences between JSON objects. Our
work enables more adaptable and comprehensive com-
parisons to accommodate a wider range of use cases
and requirements.
Index Terms —json, json-diff, testing, unit test
I. Introduction
JSON [1] as a protocol has become prevalent in web
applications [2], where it is used as the most common
input and output format. Many test cases have been
created based on that to ensure the quality assurance
of large web applications. A typical use case is that
we periodically send JSON input to an idempotent
web API and obtain JSON output, then use scripts to
verify whether the output JSON meets expectations by
differing the output with a target one, which is usually
called JSON diff. As these technologies are increasingly
used, we face several challenges.
First, the returned JSON often contains fields like
timestamp that need to be excluded naturally during
the JSON diff process. We note that these fields are
not always on the top level; they could appear any-
where in JSON. Second, in scenarios involving large
JSON composed of complex nested structures and long-
length arrays, it can be challenging for users to view
and analyze JSON diff. Third, for a particular field in
JSON, whether it "has been changed or its change is
OK" really depends on the context. For example, for
an API that outputs the bounding box of a person
in a picture based on an input image URL, usually,
we should compare it with the benchmark bounding
box in IOU metrics rather than comparing the four
coordinates of the bounding box are the same or not.
Additionally, when an API returns an array, its meaning
in the context could be a set, so it should be compared
as two sets instead of ordered arrays.
In this paper, we have proposed a JSON diff frame-
work JYCM, which you can access on github1, several
contributions to the field of JSON diff:
1https://github.com/eggachecat/jycm•We have presented an implementation of a JSON
diff framework, demonstrating high efficiency,
adaptability, and scalability for various use cases.
•Our framework introduces the concept of un-
ordered comparison for JSON arrays, which en-
hances its applicability in scenarios where the
order of elements is not crucial.
•Our framework allows users to flexibly customize
the comparison logic according to their specific
requirements, such as comparing or matching only
the IDs of objects within a collection or defining
domain-specific similarity function, which further
increases its versatility and suitability for a wide
range of scenarios.
•We have developed a dedicated renderer for diff
results, which enables users to conveniently visu-
alize and analyze the differences identified by our
JSON diff framework.
These contributions collectively demonstrate the
value of our JSON diff framework as a powerful and
flexible tool for JSON diff in various applications and
contexts.
The structure of this paper is as follows:
First, we provide a survey of the related works, high-
lighting the theoretical foundations underpinning the
current state-of-the-art and practical implementations
found in open-source communities.
Second, we overview the architecture of our pro-
posed framework, outlining the design principles and
key components that contribute to its efficacy and
extendability. And we introduce various concepts, as-
sumptions, and notations that will enable us to clearly
define the problem and maintain consistency through-
out our subsequent discussions. By employing these
tools, we can formulate the JSON diff problem and
provide the proposed framework.
Following this, we describe the design and imple-
mentation of our framework, detailing the relevant al-
gorithms and their applications in real-world scenarios.
As we discuss these algorithms, we also demonstrate
how they can be adapted to suit the specific require-
ments of different use cases.
Finally, we conclude the paper with a summary of our
findings and a discussion of our research’s implications
and potential future directions. This section summa-
rizes the key takeaways from our study and providesarXiv:2305.05865v2  [cs.SE]  18 Jun 2023insights into areas that warrant further exploration,
ultimately contributing to the ongoing advancement of
the research field.
II. Related Works
The study of diff structured data has received
widespread attention for years. One notable research
paper, [3], examined the problem of efficiently obtain-
ing the shortest delta operation given a tree structure.
The paper focused on two key issues: effectively rep-
resenting and detecting changes in hierarchical data
and utilizing these changes to optimize data synchro-
nization and version control processes. The paper pro-
posed an algorithm that uses a top-down approach to
compare the two trees. Starting from the root node, the
algorithm systematically compares child nodes until a
minimum edit script is found, which can transform one
tree into another and provides a valuable foundation
for further research in this field.
Besides, [4] extensively discussed the algorithms
used for entire JSON diffs, providing a detailed analysis
of algorithmic complexity and discourse. [4] standard-
ized the calculation of "similarity" using the concept of
edit distance, and its algorithmic complexity surpassed
that of previous frameworks. Compared to this paper,
our work focuses more on introducing the implementa-
tion of JYCM and demonstrating its high customizabil-
ity and visualization capabilities.
Furthermore, subsequent researches, such as [5] and
[6], have examined best practices for working with
specific data structures like XML and HTML. In addi-
tion, open-source communities have contributed many
excellent JSON diff frameworks, such as [7] and [8] and
[9], which implement various algorithms with different
contributions and focuses. For example, [7] provides
a comprehensive JSON diff framework and includes
a deephash library, while [8] has made significant
progress in fuzzy matching.
III. Overview and Preliminary
A. JSON
JSON, short for JavaScript Object Notation, is a
lightweight data-interchange format that is human-
readable and machine-readable. It has become a widely
adopted standard for data exchange between web ap-
plications often used in RESTful APIs, configuration
files, and data storage and servers due to its simplicity
and compatibility with various programming languages
[1]. A JSON object is an unordered collection of key-
value pairs enclosed in curly braces ({ }). The keys
are strings, and the values can be strings, numbers,
booleans, null, objects, or arrays. Objects can be nestedwithin one another, providing a flexible way to model
complex data structures.
A JSON array is an ordered collection of values
enclosed in square brackets ([ ]). The values within
an array can be any valid JSON data type, including
objects, arrays, strings, numbers, booleans, or null. Ar-
rays can also be nested within one another to represent
multi-dimensional data structures.
JSON supports several primitive data types as shown
in Code 1:
•String: A sequence of Unicode characters enclosed
in double quotes (" ").
•Number: A numeric value can be an integer or a
floating-point number. JSON does not differentiate
between the two.
•Boolean: Represents true or false values.
•Null: Represents an empty or non-existent value.
1{
2 "Image": {
3 "Width": 800,
4 "Height": 600,
5 "Title": "View from 15th Floor",
6 "Thumbnail": {
7 "Height": 125,
8 "Width": "100"
9 },
10 "IDs": [116, 943, 234, 38793]
11 }
12 }
Code 1. Example JSON from [1]
B. Design factors
In designing our framework, we primarily considered
several factors:
•High coverage: The diff functionality should en-
compass a wide range of scenarios.
•High extensibility and ease of use: The framework
must allow users to define scenarios flexibly.
•Friendly UI: Human-readable results should also
be easy to analyze, even for large JSON files.
We divided the diff capabilities according to the
components of a JSON, which include Primitive compo-
nents, Dictionary objects, and Array objects. For each
component, we provide various diff strategies tailored
to the specific component type.
By incorporating different diff strategies for each
JSON component and supporting nested structures,
our framework achieves high coverage and extensi-
bility, enabling users to define scenarios flexibly and
efficiently.
In addition to the component-specific diff strategies,
we adopted a similarity-based design. This approach
enables a more nuanced comparison between objects
beyond a simple binary distinction of "identical" or"different". As a result, the framework’s extensibility
and flexibility are enhanced, providing users with more
granular control over the comparison process.
Since our algorithm is recursive, it is essential to
define the terminal state, in which no further recursion
is required, and the actual algorithm execution can
take place.
C. Similarity
In our design, a single terminal state exists: Given
two objects, a similarity score can be calculated be-
tween them. The similarity Φis defined as follows: a
scalar real value ranging from 0 to 1, where a value of
1 indicates complete equality between the objects and
0 indicates complete inequality, respectively, whose
formula can be found at (1)
Φ :x, y→[0,1] (1)
where
x, y∈ {STR,NUM ,NULL ,BOOL ,OBJ,ARR}
for simplicity, we point out the the Φshould be sym-
metric, that is
Φ(x, y) = Φ( y, x) (2)
and by default, we define
Φ(x,NONE ) = 0 (3)
where NONE is for non-existing value.
D. JSON path
In our approach, we utilize JSON path notation to
effectively locate elements within JSON objects. While
there is no official standard for JSON path, the basic
concepts are widely shared, as outlined in [10] and
[11], and implemented in [12] and [13]. JSON objects
exhibit a tree-like structure, allowing each node to be
accessed by tracing the path from the root node to the
desired target node.
To represent these paths, we adopt a unique symbol
(→) to connect nodes sequentially along the path, ul-
timately referencing the target element. Furthermore,
to offer a more intuitive depiction of a node’s position
within an array object, we include the array index
within square brackets, denoted as [index ]. This no-
tation enhances the overall readability and compre-
hension of JSON paths in our framework, providing
a clearer understanding of a node’s location and its
relation to surrounding elements.
We have also extended our JSON path notation to
support regular expressions, allowing for more flexible
and powerful pattern matching when locating elements
within JSON objects. This enables users to find and
target nodes based on specific patterns and conditions,improving the versatility and adaptability of JSON
paths in our framework.
1{
2 "a": 1,
3 "b": [
4 { "c": 1 },
5 { "d": 2 }
6 ]
7}
Code 2. Example JSON for JSON path
In Table I We provide an example of JSON path and
the values it receives given Code 2
TABLE I
Retrieve value by JSON path on Code 2
JSON PATH VALUE
a 1
b→[0] { "c": 1 }
b→[∗] { "c": 1 } and { "d": 2 }
b→[0]→d 2
JSON path empowers users by enabling them to
define custom similarity functions for comparing two
objects by checking the current differed objects’ JSON
path as shown in Code 3. It also gives users an acces-
sible and efficient way to analyze the diff results. By
offering this level of control, our framework caters to
the specific needs of users, allowing for more precise
and meaningful comparisons within the context of their
applications.
E. Pairing
In addition to the primary task of computing the
differences between JSON objects, our framework also
addresses the challenge of rendering and collecting
the diff results. To achieve this, it is crucial to record
the optimal similarity pairs, described in JSON path,
identified during the execution of the diff algorithm.
In our framework, recording the specific operations
is of utmost importance. For example, We must doc-
ument the transformation process during our diff al-
gorithm, which converts the array xinto the array y:
which elements need to be deleted, added, modified,
and preserved. By tracking these operations, we can
not only determine the similarity between JSON objects
but also provide a clear and concise representation of
the changes that have occurred.
Moreover, this approach allows for a more in-depth
analysis of the paired JSON objects. For example, by
examining the JSON diff, users can gather insights into
the primary locations of differences based on JSON
path patterns. This information can provide valuable
insights to users and guide them in identifying the key
areas of change between the JSON objects.Given two JSON objects AandB, we use θto denote
the set of optimal similarity pairs identified during the
execution of the diff algorithm. Each pair in θconsists
of elements (or pointers to those elements) from Aand
B.
F. Formulation
With the above definitions and notions, we can now
formally describe this JSON diff problem as an opti-
mized problem: give two JSON objects xandy, we want
to find the paring that maximizes the similarity of these
two objects, which can be expressed as in (4).
max
θΦ
x, y;θ
(4)
And if we donate
θ∗= arg max
θΦ
x, y;θ
,ϕ∗= Φ
x, y;θ∗
Then our diff algorithm ˜Acan be expressed as in (5)
˜A:x, y→θ∗, ϕ∗(5)
IV . Design and Implementation
A. Primitive Similarity
For primitive data types (such as strings, numbers,
and boolean values), the default similarity function
is relatively straightforward, comparing their equal-
ity as shown in Algrithm 1. However, users can also
customize the similarity function by hooking into this
functionality, for instance, by utilizing the edit distance
to calculate the similarity between two strings. This
flexibility allows for more tailored comparisons that
cater to the specific needs of the users and their
datasets.
Algorithm 1 Default Primitive Similarity
1:procedure Φ(A, B)
2: ifA==Bthen
3: return 1
4: else
5: return 0
6: end if
7:end procedure
B. Object Similarity
For the similarity function of JSON objects, the de-
fault similarity function computes the average sim-
ilarity score for each key-pair in objects Aand B
shown in Algrithm 2 where keys is to retrieve all
keys of an object (dictionary). This approach takes into
consideration the individual similarity scores for each
corresponding key-pair, ultimately producing an overall
average score that represents the similarity between
the two JSON objects under comparison.Algorithm 2 Default Object Similarity
1:procedure Φ(A, B)
2: Initialize allKeys ←keys (A)∪keys (B)
3: Initialize score←0
4: forkeyinallKeys do
5: ifAhaskeyand Bhaskeythen
6: score←score + Φ(A[key], B[key])
7: else if Ahaskeythen
8: score←score + Φ(A[key],NONE )
9: else
10: score←score + Φ(B[key],NONE )
11: end if
12: end for
13: return socre /len(allKeys )
14:end procedure
C. Arrary Similarity
Array comparison in JSON data is classified into
two main categories in our framework: Ordered and
Unordered comparisons. Furthermore, each category
can be divided into two subcategories: Exact matching
and Fuzzy matching.
The reason why we design this way is as follows.
JSON arrays are generally considered to have an
order. However, to accommodate a broader range of
scenarios, we allow users to request that the frame-
work treat arrays as unordered "sets" when comparing
them.
When comparing arrays with distinct orderings, such
as(a, b, c) and(c, b, a) , different conclusions may be
reached depending on whether the order is considered
or not. Therefore, it is essential to treat these cases
separately.
The distinction between precise and fuzzy matching
is crucial for our framework, as fuzzy matching is
fundamentally a pairing problem to find a combination
of pairs with the minimum cost. Using the ordered
arrays (a, b, c) and(a, z, c) as an example, it is possible
that the cost of matching bandzis too high, causing
the algorithm to incorrectly pair awith z. This result
may not be reasonable in some scenarios, hence the
need for fuzzy matching separately.
It is important to note that our work does not in-
troduce any fundamentally new algorithms. Instead,
our main contribution lies in combining and adapting
existing algorithms to suit common web application
JSON-used scenarios. Consequently, we will not pro-
vide proof for the fundamental algorithms but will focus
on our definitions and context in the framework of
these algorithms.
All the fundamental algorithms we use have been
summarized together under different matching scenar-
ios Table II;TABLE II
Matching algorithm for array
Exact matching Fuzzy matching
Ordered LCS [14] Edit distance [15]
InOrdered Brute force Hungarian [16]
By default, we utilize Algorithm 3 to compute the
similarity between two arrays. This algorithm takes two
input arrays, and the pairs obtained through various
matching methods. Consequently, the subsequent algo-
rithms discussed in this paper are primarily employed
for matching purposes. Once the matching process is
completed, we use this function to calculate the real-
valued similarity between the arrays.
Algorithm 3 Array Similarity Helper
1:procedure ΦarrayHelper (A, B, pairs)
2: Initialize score←0
3: Initialize n←len(A) +len(B)
4: record (A,B,pairs)
5: forpairinpairs do
6: score←score + Φ(pair[0], pair [1])
7: end for
8: return socre /n
9:end procedure
1) Ordered Array similarity under Exact Matching:
For this matching type, we use the Longest Common
Subsequence (LCS) [14] algorithm to find the longest
common subsequence between two arrays.
The Longest Common Subsequence (LCS) algorithm
is a dynamic programming method to find the longest
subsequence common to two sequences. In the context
of matching elements from two ordered array, the
LCS algorithm can identify the longest subsequence
of elements shared by two arrays, taking into account
their order but not necessarily their contiguity. This
method is particularly useful for ordered, exact array
comparisons where the elements’ relative positions
matter.
Algorithm 4 Ordered Array Exact Matching
1:procedure Φ(A, B)
2: Initialize dp←LCS(A, B)
3: Initialize pairs←BacktrackLCS (A, B, dp )
4: return ΦarrayHelper (A, B, pairs )
5:end procedure
The whole algorithm we used here is described in
Algorithm 4, which is composed of two parts: first
we apply the LCS, described in Algorithm 5, then we
use another procedure, described in Algorithm 6, to
backtrack what are exactly the common elements.Algorithm 5 Longest Common Subsequence
1:procedure LCS(A, B)
2: Initialize n←length (A)
3: Initialize m←length (B)
4: Initialize dp[0. . . n, 0. . . m ]with all zeros
5: fori= 1tondo
6: forj= 1tomdo
7: if1 == Φ( A[i], B[j])then
8: dp[i, j]←dp[i−1, j−1] + 1
9: else
10: dp[i, j]←max( dp[i−1, j], dp[i, j−1])
11: end if
12: end for
13: end for
14: return dp
15:end procedure
As shown in Fig. 1, this type of matching is useful
when the order of the elements is crucial, and only
identical matches are considered valid. One such ap-
plication is in the field when swapping the order of
operations or introducing different events could result
in unexpected behavior or even errors. An example
of this would be comparing the outputs of two APIs
that provide lists of chronological events, such as user
activity logs or transaction histories, where the order of
events is essential and the exact details of each event
need to match.
Algorithm 6 LCS backtrack
1:procedure BacktrackLCS(A, B, dp)
2: Initialize pairs as an empty list
3: Initialize i←length (A)
4: Initialize j←length (B)
5: while i >0andj >0do
6: ifX[i−1] == Y[j−1]then
7: Prepend [i−1, j−1]topairs
8: i←i−1,j←j−1
9: else if dp[i−1][j]> dp[i][j−1]then
10: i←i−1
11: else
12: j←j−1
13: end if
14: end while
15: return pairs
16:end procedure
2) Ordered Array similarity under Fuzzy Matching:
In ordered fuzzy matching, we use a variation of the
Edit Distance algorithm [15] to find the minimum cost
matching between two arrays. In this case, the default
cost of "editing" two elements is the negative of theirsimilarity; that is, the more they are similar, the less
they need to be edited.
The Edit Distance algorithm, also known as the
Levenshtein distance, is a dynamic programming tech-
nique used to determine the minimum number of edit
operations required to transform one sequence into
another.
Algorithm 7 Ordered Array Fuzzy Matching
1:procedure Φ(A, B)
2: Initialize dp←EditDistance (A, B)
3: Initialize pairs←BacktrackEditDistance (A, B, dp )
4: return ΦarrayHelper (A, B, pairs )
5:end procedure
The whole algorithm we used here is described in
Algorithm 7 which is composed of two parts: first, we
apply the LCS, described in Algorithm 5, then we use
another procedure, described in Algorithm 6 where
zeros is a helper function to create a matrix filled
with zeros, to backtrack what are exactly the common
elements.
In the context of array comparison, the Edit Distance
algorithm can quantify the similarity between two ar-
rays by calculating the minimum number of element
insertions, deletions, and substitutions needed to make
the arrays identical.
This method is particularly useful for ordered, ap-
proximate array comparisons where the elements’ rel-
ative positions matter.
Algorithm 8 Edit Distance
1:procedure EditDistance(A, B)
2: Initialize m←1 +len(A)
3: Initialize n←1 +len(B)
4: Initialize dp←zeros (m, n)
5: forx∈ {m−2, . . . , 0}do
6: fory∈ {n−2, . . . , 0}do
7: dp[x][y]←max(
dp[x+ 1][y],
dp[x][y+ 1],
Φ(A[x], B[y]) +dp[x+ 1][y+ 1])
)
8: end for
9: end for
10: return dp
11:end procedureAlgorithm 9 Edit Distance Backtrack
1:procedure EditDistanceBacktrack(A, B)
2: Initialize m←1 +len(A)
3: Initialize n←1 +len(B)
4: Initialize pairs as an empty list
5: Initialize i←0
6: Initialize j←0
7: while i+j < m +n−2do
8: curr←dp[i][j]
9: pxs←0ifi+ 1≥melsedp[i+ 1][k]
10: pys←0ifj+ 1≥nelsedp[i][j+ 1]
11: ifcurr ==pxsandi+ 1< mthen
12: i←i+ 1
13: continue
14: end if
15: ifcurr ==pysandj+ 1< nthen
16: j←j+ 1
17: continue
18: end if
19: Append [i, j]topairs
20: i←i+ 1
21: j←j+ 1
22: end while
23: return pairs
24:end procedure
Just for clarification, to re-construct from A[i]toB[j],
line 11 is for removing A[i]and line 15 is for adding
B[j]
As shown in Fig. 2, this type of matching is useful
when the order of the elements is essential, but some
degree of flexibility is allowed in terms of matching
the elements themselves. One such application is in the
field of natural language processing, where the order
of words or phrases is significant, but synonyms or
paraphrasing can still convey the same meaning. An
example of this would be comparing the outputs of two
APIs that provide ranked lists of search results, such as
product listings or top news articles, where the order
of the results is essential, but the exact details of each
result might vary slightly.
3) Unordered Array similarity under Exact Match-
ing: We use a brute-force approach to find matching
pairs between two arrays in unordered exact matching
(i.e., two sets). Usually, we should use hash to deal
with such tasks effectively. However considering the
difficulties of calculating hash value in the context of
flexibility and user-defined similarity, taking the IOU
example in the previous section it is impossible to use
a reasonable hash function to hash those two high-IOU-
yet-different coordinates into the same value, we use a
two-depth nested for-loop,
The procedure is described in Algorithm 10 wherethe brute force approach is described in Algorithm 11
Algorithm 10 Unordered Array Exact Matching
1:procedure Φ(A, B)
2: Initialize pairs←BruteForceMatching (A, B)
3: return ΦarrayHelper (A, B, pairs )
4:end procedure
Algorithm 11 BruteForceMatching
1:procedure BruteForceMatching(A, B)
2: Initialize m←len(A)
3: Initialize n←len(B)
4: Initialize i←0
5: Initialize j←0
6: fori= 1tomdo
7: forj= 1tondo
8: if1 == Φ( A[i], B[j])then
9: Append [i, j]topairs
10: end if
11: end for
12: end for
13: return pairs
14:end procedure
As shown in Fig. 3, an ideal scenario for this match-
ing algorithm would be when the order of the elements
is not essential, but only identical matches are con-
sidered valid. One such application is in the field of
inventory management, an example of this would be
comparing the outputs of two inventory management
APIs that return lists of items in stock, where the order
of items is not important, but the exact items and their
properties need to match.
4) Unordered Array similarity under Fuzzy Match-
ing: Before delving into this scenario, we first for-
mulate this matching problem as follows: Given two
sets of elements, where the similarity between any two
elements can be calculated using (1), we aim to find a
pairing method that maximizes the total similarity of
the pairings.
To achieve this, we must define the total similarity .
By default, we employ Algorithm 3 to compute it.
This problem formulation aligns well with the Hun-
garian algorithm [16], also known as the Kuhn-
Munkres algorithm. This efficient method solves the
assignment problem, which involves assigning tasks to
agents in a manner that minimizes the total cost of the
assignments.
Due to space constraints, we will not provide a de-
tailed explanation of this algorithm. However, we shall
define its input and output. Given an m×ncost matrix
costMatrix = [costMatrix ij], where costMatrix ijrep-
resents the cost of assigning the i-th worker to the j-thjob, the goal is to find a permutation σthat minimizes
the total costPn
i=1ci,σ(i). This is where the hungarian
function comes into play, as described in (6), where σ(i)
can be deduced from the pairs variable:
hungarian :costMatrix →pairs (6)
The algorithm operates by constructing a cost matrix
representing the dissimilarity between each pair of
elements in the two sets. It then iteratively modifies
the cost matrix by subtracting the smallest element in
each row and column until a complete set of assign-
ments can be made with zero total cost. The optimal
matching is obtained from the modified cost matrix by
identifying the unique assignments corresponding to
zero-cost pairs.
We can now describe our matching algorithm under
this scenario in Algorithm 12
Algorithm 12 Unordered Array Fuzzy Matching
1:procedure Φ(A, B)
2: Initialize costMatrix ← −1×sm∗
3: return ΦarrayHelper (A, B, hungarian (costMatrix ))
4:end procedure
∗smis calculated as below:
sm=

Φ(A1, B1) Φ( A1, B2)··· Φ(A1, Bn)
Φ(A2, B1) Φ( A2, B2)··· Φ(A2, Bn)
............
Φ(An, B1) Φ( Am, B2)··· Φ(Am, Bn)
As shown in Fig. 4, an ideal scenario would be when
the order of the elements is not essential, and some
degree of flexibility is allowed in terms of matching
the elements themselves. An example of this would be
comparing the output of two search engine APIs that
return similar but not identical results.
D. Renderer
We have utilized React[17], an open-source front-
end library, to implement our renderer. Leveraging the
context feature of React, we have made it easy for users
to override our rendering logic, such as the coloring
scheme and the presentation of specific diff informa-
tion. For example, users can customize the rendering
of the edit distance between two strings according to
their preferences. The code for our renderer can be
found in the repository at react-jycm-viewer, which you
can access on Furthermore, our renderer supports the
display of large JSON objects and seamless navigation
between pairings. This is made possible by the inte-
gration of monaco-editor[18] project, which enablesefficient browsing and searching within large JSON
files. Thanks to this feature, our JYCM renderer can
handle substantial JSON objects and diff results.
V . Conclusion
This paper presents a comprehensive framework for
comparing and analyzing JSON objects by identifying
their differences. Our approach emphasizes the com-
putation of optimal similarity between JSON objects
and the rendering of diff results in a user-friendly
manner, accommodating various scenarios and empow-
ering users to define custom similarity functions that fit
within the framework easily. As discussed, no universal
rule defines "what has been changed" without con-
sidering realistic scenarios. We have employed JSON
path notation to locate and represent elements within
JSON objects and have introduced regular expression
support for more flexible path matching. Moreover, our
renderer, built using the React library, enables users to
customize rendering logic, such as color schemes and
diff presentation styles.
We have demonstrated the effectiveness of our
framework in various practical scenarios by applying
different algorithms, such as the Hungarian algorithm
for ordered exact matching and the default array sim-
ilarity algorithm for unordered matching. Our frame-
work also supports the implementation of user-defined
similarity functions for more specific use cases.
References
[1] D. Crockford, The application/json media type
for javascript object notation (json) , RFC 4627,
2006. [Online]. Available: https://tools.ietf.org/
html/rfc4627.
[2] F. Pezoa, J. L. Reutter, F. Suarez, M. Ugarte, and
D. Vrgo ˇc, “Foundations of json schema,” in Pro-
ceedings of the 25th International Conference on
World Wide Web , International World Wide Web
Conferences Steering Committee, 2016, pp. 263–
273.
[3] S. S. Chawathe, A. Rajaraman, H. Garcia-Molina,
and J. Widom, “Change detection in hierar-
chically structured information,” SIGMOD Rec. ,
vol. 25, no. 2, pp. 493–504, Jun. 1996, issn: 0163-
5808. doi: 10 . 1145 / 235968 . 233366. [Online].
Available: https : / / doi . org / 10 . 1145 / 235968 .
233366.[4] T. Hütter, N. Augsten, C. M. Kirsch, M. J. Carey,
and C. Li, “Jedi: These aren’t the json docu-
ments you’re looking for...,” in Proceedings of
the 2022 International Conference on Manage-
ment of Data , ser. SIGMOD ’22, Philadelphia,
PA, USA: Association for Computing Machinery,
2022, pp. 1584–1597, isbn: 9781450392495. doi:
10.1145/3514221.3517850. [Online]. Available:
https://doi.org/10.1145/3514221.3517850.
[5] Y. Wang, D. DeWitt, and J.-Y. Cai, “X-diff:
An effective change detection algorithm for
xml documents,” in Proceedings 19th Interna-
tional Conference on Data Engineering (Cat.
No.03CH37405) , 2003, pp. 519–530. doi: 10 .
1109/ICDE.2003.1260818.
[6] E. Berk, “Htmldiff: A differencing tool for html
documents,” Student Project, Princeton Univer-
sity, 1996.
[7] Json-diff , https://github.com/andreyvit/json-diff.
[8] Gojsondiff , https://github.com/yudai/gojsondiff.
[9] Jdd, https://github.com/zgrossbart/jdd.
[10] S. Gössner, “Jsonpath - xpath for json,” 2007.
[Online]. Available: https://goessner.net/articles/
JsonPath/.
[11] E. P . Bryan, K. Zyp, and E. M. Nottingham,
“Javascript object notation (json) pointer,,” 2013.
[Online]. Available: https://www.rfc-editor.org/
info/rfc6901.
[12] Jsonpath , https://github.com/json-path/JsonPath.
[13] Jsonpath , https://github.com/dchester/jsonpath.
[14] L. Bergroth, H. Hakonen, and T. Raita, “A survey
of longest common subsequence algorithms,” in
Proceedings Seventh International Symposium
on String Processing and Information Retrieval.
SPIRE 2000 , Sep. 2000, pp. 39–48. doi: 10.1109/
SPIRE.2000.878178.
[15] G. Navarro, “A guided tour to approximate string
matching,” ACM Comput. Surv. , vol. 33, no. 1,
pp. 31–88, Mar. 2001, issn: 0360-0300. doi: 10.
1145/375360.375365. [Online]. Available: https:
//doi.org/10.1145/375360.375365.
[16] H. W . Kuhn, “The hungarian method for the
assignment problem,” Naval Research Logistics
Quarterly , vol. 2, no. 1-2, pp. 83–97, 1955. doi:
https://doi.org/10.1002/nav.3800020109. eprint:
https : / / onlinelibrary. wiley. com / doi / pdf / 10 .
1002/nav.3800020109. [Online]. Available: https:
//onlinelibrary.wiley.com/doi/abs/10.1002/nav.
3800020109.
[17] React , https://github.com/facebook/react.
[18] Monaco-editor , https : / / github . com / microsoft /
monaco-editor.Appendix
A. JYCM result
Fig. 1. Ordered Array Exact Matching
Fig. 2. Ordered Array Fuzzy MatchingFig. 3. Unordered Array Exact Matching
Fig. 4. Unordered Array Fuzzy MatchingB. JYCM define custom similarity
1import math
2from jycm. operator import BaseOperator
3
4class L2DistanceOperator(BaseOperator ):
5 __operator_name__ = "operator : l2distance"
6 __event__ = "operator : l2distance"
7
8 def __init__ ( self , path_regex , distance_threshold ):
9 super ( ) . __init__ (path_regex=path_regex)
10 self . distance_threshold = distance_threshold
11
12 def diff ( self , level : ’TreeLevel ’ , instance , drill : bool )−> Tuple[ bool ,float ]:
13 distance = math. sqrt (
14 ( level . left [ "x" ] −level . right [ "x" ]) **2 + ( level . left [ "y" ] −level . right [ "y" ]) **2
15 )
16 info = {
17 "distance" : distance ,
18 "distance_threshold" : self . distance_threshold ,
19 "pass" : distance < self . distance_threshold
20 }
21
22 if not drill :
23 instance . report ( self . __event__ , level , info )
24 return True, 1 ifinfo [ "pass" ] else 0
Code 3. Example code to define similarity function within JYCM