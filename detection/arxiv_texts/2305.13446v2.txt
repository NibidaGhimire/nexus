The Power Domination Toolbox∗
Johnathan Koch†, Beth Bjorkman‡
April 22, 2024
Minimum Power
Dominating Set
Solution SpaceGraph Contraction
High Degree Vertices
Terminal Forts
Non-terminal Forts
Only Active Vertices
Abstract
Phasor Measurement Units (PMUs) are placed at strategic vertices in an electrical power network to
monitor the flow of power. Determining the minimum number and optimal placement of PMUs is modeled
by the graph theoretic process called Power Domination . This paper describes the Power Domination
Toolbox (PDT) , which efficiently identifies a minimum number of PMU locations that monitor the entire
network. The PDT leverages graph theoretic literature to reduce the complexity of determining optimal
PMU placements by: reducing the order of the graph (contraction), leveraging zero forcing forts, sorting
the remaining solution space, and parallel computing. The PDT is a drop-in replacement of the current
state-of-the-art exhaustive search algorithm in Python and maintains compatibility with SageMath. The
PDT can identify minimum PMU placements for graphs with hundreds of vertices on personal computers
and can analyze larger graphs on high performance computers. The PDT affords users the ability to
investigate power domination on graphs previously considered infeasible due to the number of vertices
resulting in a prohibitively long run-time.
Keywords - optimal sensor placement, phasor measurement units, graph methods, power domination.
1 Introduction
In 2003, a blackout in the Ohio power grid cascaded through a large portion of the Northeastern United
States and Canada [7]. Blackouts this extensive can be mitigated by monitoring the power grid with phasor
∗This project was sponsored by the Air Force Research Laboratory via the Autonomy Technology Research Center
†Youngstown State University, Applied Research Solutions
‡Air Force Research Laboratory
1arXiv:2305.13446v2  [math.CO]  19 Apr 2024measurement units (PMUs) and acting quickly on the information they provide. PMUs use conservation
of energy laws to observe phasor measures at distant locations in addition to the directly connected power
lines. One goal for power grid planners is to maximize grid coverage while minimizing the number of installed
PMUs to minimize the cost of grid maintenance. A minimum set of locations to install PMUs in order to
monitor the entire network is called a minimum power dominating set (PDS).
Currently, some algorithms that are used to find optimal PMU placement locations include: genetic
algorithm, particle swarm optimization, tabu search, greedy algorithm, integer linear programming, integer
quadratic programming, simulated annealing, hybrid algorithm, exhaustive search, depth-first search, and
minimum spanning tree [12]. Recently, Hicks and Smith [15] have implemented integer linear programming
methods in Gurobi to achieve results on large graphs. To build the integer linear programming constraints,
Hicks and Smith created a restricted problem where PMUs are placed at certain locations and prohibited
from being placed at other locations. This solution, however, is no longer restricted to the integers and may
be slightly greater from the minimum number of PMUs required. To find an exact solution, graph theorists
commonly perform power domination via a combination of zero forcing code maintained by Jephian Lin and
power domination code developed by Brian Wissman [1–4, 11]. This method is an exhaustive search for a
minimum PDS, and we will call this the JL-BW algorithm .
The PDT serves as a drop-in replacement and extension for the JL-BW algorithm written in Python.
We implement pre-processing techniques used in graph theoretic proofs that have previously not been imple-
mented in software, including: graph contraction to reduce propagation time, leveraging zero forcing forts
to restrict the solution space, and assigning a qualitative score to sets in the remaining solution space to
determine minimum PDSs more efficiently. Parallel compute methodologies are also implemented to fully
leverage computational resources. To demonstrate the PDT’s utility: on random graphs with 120 vertices
we see an average 19 times run-time improvement over the JL-BW algorithm. The amount of improvement
is dependent on the graph structure, and is repeatable on random graphs of other sizes as well as standard
test networks.
This paper will describe the PDT. Section 2 will provide the graph theoretic definitions and terminology
required in this paper. Section 3 will define the power domination algorithm and related concepts. Section 4
will describe the process that the PDT uses to find a minimum PDS with brief discussions on the run-time
for each step. Section 5 is a survey of run-time analysis, demonstrating the efficiency of the PDT over the
JL-BW algorithm. Finally, section 6 gives examples of interfacing with the PDT.
2 Graph Theory
An electrical power grid can be represented as a graph G, which consists of two sets: a set of vertices (busses),
V(G), and a set of unordered pairs of vertices called edges (transmission lines), E(G), usually written as v1v2
for vertices v1andv2. An edge is incident to the vertices it contains. Two vertices are adjacent (neighbors)
if there exists an edge between them. The degree of a vertex vis the number of vertices adjacent to vand
is written degG(v). When the graph is understood, the subscript is omitted. A vertex with degree one is
called a leafand a vertex with degree zero is called an isolated vertex .
For a graph G, a structure Hwithin Gis called a subgraph , written H⊆G, when His a graph with
V(H)⊆V(G) and E(H)⊆E(G). A set A⊆V(G) generates a vertex-induced subgraph ,G[A], where
V(G[A]) =AandE(G[A]) ={xy∈E(G) :x, y∈A}.
Apath in a graph Ghas vertices {v1, v2, ..., v n} ⊆V(G), so that {vivi+1: 1≤i≤n−1} ⊆E(G), and is
usually written as v1v2...vn. The length of a path is the number of edges it contains. A graph Gisconnected
if there exists at least one path between any two distinct vertices. For a vertex xinV(G), ifGis a connected
graph but G[V(G)\ {x}] is not connected, then xis acut vertex .
For a graph Gand edge xy∈E(G), an edge contraction (contraction) on xyadds a new vertex ztoG
such that zis adjacent to any vertex adjacent to either xoryand removes xandyfrom Gas well as any
edges incident to xory.
For a graph Gwith subset X⊆V(G), the entrance of XinG, written ∂(X), is the set of vertices not
inXbut adjacent to at least one vertex in X. Afort,F, in a graph Gis a non-empty subset of vertices for
which no vertex in ∂(F) is adjacent to exactly one vertex in F[8]. A terminal fort with corresponding cut
vertex v, denoted Fv, is a fort in which ∂(F) ={v}. By way of example, the sets {v1, v2, v6}and{v1, v6}are
2v1
v2
v6v3 v4 v5
Figure 1: The tadpole graph
both forts of the tadpole graph in Figure 1 with supports {v3}and{v2, v3}respectively. The set {v1, v2, v6}
is a terminal fort with corresponding cut vertex v3.
3 Power Domination
In the power domination algorithm outlined by Haynes et. al [9], vertices are either unobserved orobserved
by a PMU. The power domination algorithm with input S⊆V(G) is as follows:
1. (Domination Step ) Each vertex in S, or adjacent to a vertex in S, is observed.
2. (Zero Forcing Step ) While there exists an observed vertex adjacent to exactly one unobserved vertex,
the unobserved vertex becomes observed.
For a graph Gand subset S⊆V(G), we identify the set of observed vertices in the graph Gafter applying
the power domination algorithm as Obs ( G;S). A power dominating set (PDS) is any subset S⊆V(G)
where Obs ( G;S) =V(G). The power domination number of a graph Gis the cardinality of a minimum
PDS, written as γP(G). Note, there may be many minimum PDSs for a particular graph.
We also leverage the following terminology from [5]: for a graph Gand subset X⊆V(G), apower
dominating set subject to Xis any subset S⊆V(G) containing Xthat is also a power dominating set. In
a graph with maximum degree at least 3, a minimum power dominating set can be chosen in which each
vertex has degree at least 3 [10, Observation 4] . In a restricted power domination problem, certain vertices
are already observed by the existing PMUs and may have no unobserved neighbors. This means that some
vertices provide no additional observations when a PMU is placed on them. Combining this with a restriction
to vertices with degree at least 3, we define active vertices to be vertices that have degree at least 3 and
have unobserved neighbors with respect to the restricted power domination problem subject to X.
4 Optimizations
The PDT implements optimizations to the power domination process in four ways:
1. Contract the input graph.
2. Leverage zero forcing forts.
3. Sort the solution space.
Steps 1-3 are done as pre-processing steps and are followed by:
4. Distribute the search for a minimum PDS across parallel compute resources.
The following sections describe each of these optimizations in turn. Additionally, we will provide short
discussions in each subsection on the run-time impact of implementing the given optimization. The discussion
centers around a collection of graphs we provide alongside the PDT, and describe in more detail in Section 5.3.
For the purposes of these discussions, this data set is a collection of 600 random graphs with 100 graphs
each on 20, 40, 60, 80, 100, and 120 vertices.
3H
H′
(a) Contraction when His a path.H
H′
(b) Contraction when His a cycle.
x yH
x yH′
(c) Contraction when Hterminates in vertices adjacent
to distinct vertices in G,xandy, both with degree at
least 3.xH
xH′
(d) Contraction when Hterminates in a leaf and a ver-
tex adjacent to a vertex, x, inGwith degree at least 3.
Figure 2: Cases where Algorithm 1 contracts Hto a single vertex.
x H x H′
Figure 3: Case where Algorithm 1 contracts Hto a pair of adjacent vertices: when Hterminates in vertices
adjacent to a unique vertex in Gwith degree at least 3.
4.1 Contracting the Graph
Due to the nature of the zero forcing step, we have an opportunity to reduce propagation time via contraction.
Paths on vertices with degree less than 3 are contracted via Algorithm 1. We will then show that this
contraction yields a graph with minimum PDSs that are also minimum PDSs of the input graph.
Algorithm 1: Graph Contraction Algorithm
Input: A graph G
Output: A contracted graph G′
1forHa connected component of Gh
{v∈V(G) : deg( v)<3}i
do
2 ifHis a path terminating in two leaves, or His a cycle then
3 Contract the path or cycle in Gcorresponding to Hto an isolated vertex in G.
4 ifHis a path terminating in vertices adjacent in Gto distinct vertices x, ywith degG(x)≥3
anddegG(y)≥3then
5 Contract the path in Gcorresponding to Hto a single degree 2 vertex.
6 ifHis a path terminating in a leaf and a vertex adjacent in Gto a vertex xwith degG(x)≥3
then
7 Contract the path in Gcorresponding to Hto a leaf.
8 ifHis a path terminating in vertices adjacent in Gto a single vertex xwith degG(x)≥3then
9 Contract the path in Gcorresponding to Hto a pair of adjacent degree 2 vertices.
Algorithm 1 contracts subgraphs of the input graph to either a single vertex, or a pair of adjacent vertices.
Figure 2 provides examples of when Algorithm 1 contracts Hto a single vertex which corresponds to the
conditional statements on lines 2, 4, and 6. Figure 3 provides the example of when Algorithm 1 contracts
Hto a pair of adjacent vertices which corresponds to the conditional statement on line 8.
A minimum power dominating set for the contracted graph resulting from Algorithm 1 corresponds to a
minimum power dominating set of the input graph.
4Theorem 4.1. LetGbe a graph and let G′be the result of contracting Gvia Algorithm 1. A minimum power
dominating set of G′corresponds to a minimum power dominating set of G. Therefore, γP(G) =γP(G′).
Proof. We will begin with a minimum power dominating set SofGand demonstrate a corresponding
minimum power dominating set of G′. For any vertex v∈S, ifv̸∈V(G′), then vis a degree 1 or 2 vertex in
Gthat was contracted to create G′. Note that as Sis minimum, there cannot be 2 adjacent such vertices in
S. Replace each vertex vwith its corresponding contracted vertex and call this set S′. The power domination
process on G′with initial set S′proceeds analogously to the power domination process on Gwith initial set
S, with removed observations along the contracted paths.
Next, consider a power dominating set S′ofG′. For any vertex x∈S′, ifx̸∈V(G), then xis the result
of contracting degree 1 or 2 vertices in G. Replace each such xwith one of the corresponding vertices and
call the resulting set S. The power domination process on Gwith initial set Sproceeds analogously to the
power domination process on G′with initial set S′, with added observations along the non-contracted paths.
We have shown corresponding minimum power dominating sets of the same size for GandG′and so
γP(G) =γP(G′).
Contracting the graph is done in linear time, while the propagation steps it eliminates from the power
domination process is potentially exponential. This is a novel method of the PDT that dramatically improves
run-time on graphs that demonstrate substructures of long chains compared to the JL-BW algorithm. Table 1
outlines the average run-time to contract random graphs of varying size.
|V(G)| 20 40 60 80 100 120
Time to determine G′2.320×10−44.357×10−46.440×10−46.907×10−41.251×10−31.661×10−3
Table 1: Average time (in seconds) the PDT uses to calculate G′for graphs of varying sizes.
4.2 Leveraging Forts
Forts were first utilized in zero forcing by Fast and Hicks in [8]. They were generalized to power domination
Bozeman et al. in [5]. Hicks and Smith exploited forts to find minimum power dominating sets in their
integer linear program method [15]. We will also use forts in order to find a minimum power dominating set
while considering significantly fewer cases than brute force methods.
Proposition 4.2 ([5, Proposition 4.3]) .LetGbe a graph and Fbe any fort of G. IfSis a power dominating
set of G, then S∩N[F]̸=∅.
Thus, any power dominating set must intersect with the closed neighborhood of every fort. In special
cases, we can be more particular about which vertices from the closed neighborhood of a fort are in some
minimum power dominating set. Note that N[F] =F∪∂(F).
Theorem 4.3. There exists a minimum power dominating set Ssuch that S∩F=∅andS∩∂(F)̸=∅for
every fort Fsatisfying F∪∂(F)⊆Obs ( G;{v})for all v∈∂(F).
Proof. LetSbe a minimum power dominating set of G. Let Fbe a fort satisfying F∪∂(F)⊆Obs ( G;{v})
for all v∈∂(F).
IfS∩F̸=∅, then there is some vertex w∈S∩F. We construct S′= (S\ {w})∪ {v}for any v∈∂(F).
AsF∪∂(F)⊆Obs ( G;{v}), and any neighbor of vis either in For in ∂(F), any vertex observed as a result
ofvis also observed as a result of w. Thus S′is a power dominating set of the same size as S.
IfS∩∂(F) =∅then by Proposition 4.2, there is some vertex w∈S∩F, and the first case is recovered.
Theorem 4.3 can be used to determine a set of vertices that are in some minimum power dominating set
of a given graph. Determining all such vertices may be time-intensive, and so we focus on 2 cases: terminal
forts and forts associated with induced C4subgraphs in the contracted graph.
Observation 4.4. For any graph Gwith corresponding contracted graph G′from Algorithm 1, there exists
a minimum power dominating set SofG′such that
51.S∩F=∅andv∈Sfor every terminal fort Fvsatisfying Fv∪ {v} ⊆Obs ( G′;{v}), and
2. For any zero forcing fort F={y, z}with degG(y) = degG(z) = 2 so that F∪∂(F)is an induced C4
subgraph in G′, we have S∩F=∅andS∩∂(F)̸=∅. Note that in this case, Fautomatically satisfies
F∪∂(F)⊆Obs ( G′;{v})for all v∈∂(F).
That is, for any contracted graph G′from Algorithm 1, there exists a minimum power dominating set
Scontaining: all isolated vertices, the entrance of every terminal fort, and containing at least one of the
2 entrance vertices of any induced C4inG′containing 2 non-adjacent vertices with degree 2. We will call
the entrance vertices of terminal forts preferred vertices , and let Pref ( G) ={v:Fvis a terminal fort }. Let
allpaired entrance vertices to zero forcing forts corresponding to an induced C4containing 2 non-adjacent
vertices with degree 2 be given as Pev ( G) =.
Preferred vertices and paired entrance vertices give us lower bounds on the power domination number.
Let Γ =n
{ξ}:ξ∈Pref ( G′)o
∪n
ξ∈Pev ( G′)o
and let Φ be a minimum set of vertices of G′that intersects
non-trivially with each set in Γ. Calculating Φ explicitly can be done by creating a graph with vertices
V= Γ and edges E={xy:x∩y̸=∅}and determining a dominating set. Instead, we approximate |Φ|by
the number of components in this graph, written as φ.
Observation 4.5. For any graph GwithγP(G)>1and corresponding contraction G′from Algorithm 1,
γP(G)≥ |Φ| ≥φ≥ |Pref ( G′)|.
The condition γP(G)>1 consists of an edge case in which terminal forts overlap, yielding multiple
preferred vertices for a graph with power domination number one. For example, consider Gto be C3with
a leaf added to distinct vertices aandb.γP(G) = 1 but Pref ( G) ={a, b}. This can be shown to occur
precisely when γP(G) = 1.
In practice, the PDT determines preferred vertices first, as shown in Algorithm 2. The conditional on
line 6 corresponds to catching the edge case where γP(G) = 1, which is nested in the loop on line 5. The
loop on line 5 locates terminal forts, including type I and type II forts as defined by Hicks and Smith [15]
and more general terminal forts as shown in Figure 4. Paired entrance vertices are located with Algorithm 3,
which leverages fast methods for determining chordless cycles within a graph. The run-time to calculate
Pref ( G) and Pev ( G) is given in Table 2.
Algorithm 2: Algorithm to determine Pref( G)
Input: A graph G
Output: Pref ( G)
1Pref ( G)← ∅
2forv∈V(G)where vis a cut vertex do
3 ifvis adjacent to at least 2 leaves then
4 Pref ( G)←Pref( G)∪ {v}
5 forHa connected component of G[V(G)\ {v}], and|V(H)|>1do
6 ifH⊆Obs ( G;{v})then
7 ifPref ( G) =∅then
8 ifV(G)⊆Obs ( G;{v})then
9 return {v}
10 Pref ( G)←Pref( G)∪ {v}
11return Pref ( G)
4.3 Determining Qualitative Scores
The PDT sorts the potential power dominating sets in the solution space to more optimally locate power
dominating sets. This is done by maximizing the number of vertices observed after considering the restricted
6v Fv
(a) A pair of leaves, Fv, indicated by Hicks and Smith as
Type I forts [15].v Fv
(b) A terminal C3,Fv, indicated by Hicks and Smith as
Type II forts [15].
v Fv
(c) An example of a terminal fort, Fv, not described by
Hicks and Smith, that is located by the PDT.y z F
(d) A fort associated with an induced C4,F, indicated by
Hicks and Smith as Type III forts [15].
Figure 4: Forts located by the PDT indicated in red. Dashed edges represent connection(s) from the entrance
vertices to the remainder of the graph.
Algorithm 3: Algorithm to determine the entrance of forts associated with induced C4subgraphs
of the contracted graph
Input: A graph G
Output: Pev ( G)
1G′←Algorithm 1( G)
2A← {v∈V(G′) : degGv= 2}
3B←NG′[A]
4Pev ( G)← ∅
5forHa connected component of G′[B]do
6 ifC4⊆Hthen
7 Pev ( G)←Pev ( G) +{v∈V(H) : degG(v)>2}
|V(G)| 20 40 60 80 100 120
Time to determine Pref ( G)4.898×10−4s1.234×10−3s2.046×10−3s2.501×10−3s2.703×10−3s2.831×10−3s
Time to determine Pev ( G)4.225×10−4s9.010×10−4s1.385×10−3s1.487×10−3s1.656×10−3s1.905×10−3s
Table 2: Average run-time (in seconds) the PDT uses to calculate Pref ( G) and Pev ( G).
71111
w11
Figure 5: Zim graph with qualitative score for each non-preferred vertex with degree at least 3 displayed.
Vertex wis the only preferred vertex.
power domination problem on G′subject to Pref ( G′). Define the qualitative score , of a vertex vas
Q(v) := Obs ( G; Pref ( G)∪ {v}), (1)
Formulating Q(v) in this way affords another opportunity for optimization. If γP(G)̸=|Pref ( G)|and
max( Q(v) :v∈V(G)) =|V(G)|, then γP(G) =|Pref ( G)|+ 1 and Pref ( G)∪ {v}is a minimum PDS for
anyv∈V(G) such that Q(v) =|V(G)|.
The PDT iteratively adds vertices to a potential PDS from largest to smallest qualitative score. Figure 5
provides Q(v) for each active vertex in the Zim graph. The PDT checks subsets with higher total qualitative
score first. The JL-BW algorithm does no such pre-processing and checks subsets lexicographically by vertex
label.
4.4 Distribution Across Multiple Threads
Using an exhaustive search algorithm to determine the power domination number of a graph, necessarily,
requires determining Obs ( G;S) for sets S⊆V(G) with |S|< γP(G). While the PDT dramatically lowers
this number of sets S, the number of sets to analyze with the PDT still grows factorially as the power
domination number grows. Checking each set Scan be viewed as an independent process and so the PDT
utilizes parallelization.
The multiprocessing library in Python is implemented to distribute the search for a minimum PDS across
available CPU resources. This parallelization requires computational overhead, so the PDT checks the first
50,000 subsets that may be PDSs on a single compute thread. Once the number of subsets to check grows,
however, it becomes advantageous to parallelize the search for a minimum PDS with a given number of
PMUs. The PDT can dynamically determine the number of processes to leverage, or it can be set explicitly
to use a predetermined number of processes. Common personal computers can facilitate the search for a
minimum PDS across approximately 10 processes while allowing the user to continue using the computer for
light tasks.
4.5 The PDT Algorithm
We now discuss the algorithm that the PDT uses to find a minimum PDS of an input graph G. The PDT
calculates G′and the parameters Pref ( G′), Pev ( G′), Obs ( G′; Pref ( G′)), and active vertices. The PDT
then iterates over the connected components of G′, restricts the predetermined parameters to the connected
component, and calls Algorithm 4 with these parameters as additional input to determine a minimum PDS
of the component. The PDT allows the user to directly call this algorithm as PDT_minpds_connected , and
determines G′, Pref ( G′), Pev ( G′), Obs ( G′; Pref ( G′)), and active vertices if not provided by the user. Let
us inspect Algorithm 4 as if the user called it directly.
Line 1 is the application of the graph contraction algorithm. If there are no vertices with degree more
than 2, then any vertex is a PDS, and hence an arbitrary vertex is returned on line 4.
8The PDT then calculates Pref ( G′), and Obs ( G; Pref ( G′)) and stores these observed vertices in the set
Bon line 5. If B=V(G), then Pref ( G′) is a PDS and is then returned on line 8. Lines 9 and 10 then locate
active vertices for the restricted power domination problem on G′subject to Pref ( G′) and determine Q(v)
for each active vertex. If max( Q(v)) =|V(G′)|, then the PDT has located a minimum power dominating set
with a PMU on each vertex in Pref ( G′) and a vertex with Q(v) =|V(G′)|. The PDT returns this minimum
PDS on line 13.
If a PDS has not been located at this point, γP(G′)≥ |Pref ( G′)|+ 2. The PDT then determines
Pev ( G′) and φ. Ifφ− |Pref ( G)|>2, more than 2 additional vertices are required to form a PDS. These
two cases are covered by i= max {2, φ− |Pref ( G)|}on line 14.
The PDT then begins checking sets of size |Pref ( G′)|+ifor a minimum PDS. Line 17 sets up the
combination of additional vertices, C, to be added to Pref ( G′) to create a subset S, which is formed on
line 18. The PDT enforces that Sintersects non-trivially with each pair of entrance vertices on line 19.
Determining the observed vertices in Obs ( G; Pref ( G′)∪C) on line 20 is given by repeated application of
the zero forcing step to the set Obs ( G; Pref ( G))∪N[C]. If the resulting set is equal to V(G′), then the
minimum PDS Sis returned on line 22. If all Bwith|B|=iare exhausted, then iis incremented on line
23 and the PDT returns to the loop starting on line 16.
Algorithm 4: The PDT algorithm for determining a minimum PDS of a connected graph
Input: Aconnected graph G
Output: A minimum PDS of G
1G′←Algorithm 1( G)
2if̸ ∃v∈V(G)with degG(v)>2then
3 S← {v}for any v∈V(H)
4 return S
5B←Obs ( G′; Pref ( G′))
6ifB=V(G′)then
7 S←Pref ( G′)
8 return S
9U←V(G′)\B
10A← {v∈V(G′) : degG′(v)>2 and N[v]∩U̸=∅}
11ifmax( Q(v) =|V(G′)|)then
12 S←Pref ( G′)∪ {v}for some vthat maximizes Q(v)
13 return S
14i←max(2 , φ− |Pref ( G′)|)
15PDS←false
16while notPDS do
17 forC⊆Awhere |C|=ido
18 S←Pref ( G′)∪C
19 ifS∩R̸=∅for each R∈Pev ( G′)then
20 ifObs ( G′;S) =V(G′)then
21 PDS←true
22 return S
23 i←i+ 1
5 Run-time Analysis
We now compare the JL-BW algorithm and the PDT in two ways: empirically, and with run-time examples
on both random graphs with varying size and common IEEE test systems.
9(a) New England Power Grid as a graph. (b) Contracted New England Power Grid as a graph.
Figure 6: New England power grid as a graph with 39 vertices in (a). The PDT removes the dark grey
diamond vertices to contract the graph into the graph in (b). Further, the PDT locates 3 preferred vertices
(black stars) and 11 active vertices 3 (light grey and black circles). The minimum PDS of size 5 returned by
the PDT is indicated by solid black vertices.
5.1 Empirical Comparison
For a graph G, we can compare the number of subsets strictly smaller than γP(G) checked by both the
JL-BW algorithm and the PDT. Let NandN′represent this number for the JL-BW algorithm and the
PDT respectively:
N:=γP(G)−1X
i=1|V(G)|
i
N′:= 1 + a+γP(G)−p−1X
i=max(2 ,φ)a−φ
i
2φ−p
where G′is the contracted graph, p=|Pref ( G′)|,φis as in Section 4.2, and ais the number of active
vertices with respect to the restricted power domination problem on G′subject to Pref ( G′). There is 1 case
from checking if Pref ( G′) is a PDS and acases from determining if any vertex satisfies Q(v) =|V(G′)|.
We then check sets containing iadditional vertices from the set of active vertices that intersect non-trivially
with each of the paired entrance vertices. Observe that N′is often lower than Ndue to the prevalence of
preferred vertices, paired entrance vertices, and non-active vertices.
5.2 IEEE Test Systems
Returning to the original problem of the 2003 power grid failure, we consider the IEEE 39 bus test system
that represents a historic model of the New England power grid as available in the pandapower Python
module [16]. This graph is displayed in Figure 6a and has power domination number 5. The JL-BW
algorithm evaluates the N= 92,170 subsets to determine γP(G)>4 and locates a minimum PDS of size 5
in an average of 3.566 seconds. The PDT contracts to a graph on 36 vertices and finds 3 preferred vertices.
The contracted graph is shown in Figure 6b. By considering the restricted power domination problem on G′
subject to Pref ( G′), the PDT indicates 11 active vertices. The PDT evaluates N′= 12 subsets to determine
γP(G)>4 and locates a minimum PDS of size 5 in an average of 2 .673×10−3seconds.
The IEEE 118 bus test system [14] shown in Figure 7 is also available in the pandapower module and has
γP(G) = 8. The JL-BW algorithm would need to evaluate the N≈5.620×1010subsets to determine γP(G),
however the search was terminated after a week and no minimum PDS was located. The PDT locates the
single preferred vertex, contracts the graph to a graph with 115 vertices, locates 54 active vertices, and finds
one set of paired entrance vertices. By leveraging the PDT and 32 threads, N′≈4.650×107subsets are
1000
00000000
00
00 00
00
0000
0000
0000
00
000000
00
00
00
0000
000000000000
00
0000
0000000000
00
0000
00
000000
00000000
000000000000
00
000000
0000
00000000
0000
00
00
00
00
00000000
0000
00
000
00000000
000000
00
00
00
00 0000
000000
00
0000
00000000000
00000000
00
0000
00
00
0000
00
00
Figure 7: IEEE 118 vertex test system as a graph. The PDT contracts the dark grey diamond vertices
to yield G′with 101 vertices. The PDT indicates 1 preferred vertex (black star), 1 set of paired entrance
vertices (triangles), and 54 active vertices (light grey and black circles and triangles). The minimum PDS
of size 8 returned by the PDT is indicated by solid black vertices.
evaluated to determine γP(G)>7 and to locate a minimum PDS of size 8 in 1 .098×102seconds. This
exemplifies the drastic run-time improvements of the PDT over the JL-BW algorithm.
Table 3 shows the average run-time on various other IEEE test systems up to 300 vertices. In the
appendix, Table 5 details |V(G)|,|V(G′)|,|Pref ( G′)|, and|Pev ( G′)|for other IEEE test systems up to the
1354 vertex system.
number of
verticesγP(G)average JL-BW
algorithm timeaverage PDT time
5 1 2.087×10−5s1.526×10−4s
6 1 2.791×10−5s1.643×10−4s
9 1 9.541×10−5s7.172×10−4s
11 2 1.518×10−4s3.194×10−4s
14 2 1.806×10−4s1.023×10−3s
24 3 1.161×10−2s2.043×10−3s
30 3 8.830×10−3s1.920×10−3s
30 3 9.259×10−3s1.954×10−3s
33 1 5.945×10−4s5.368×10−4s
39 5 3.567 s 2.733×10−3s
57 3 2.352×10−1s1.064×10−2s
89 5 2.023×102s 7.776×10−3s
118 8 >1 week 1.098×102s
145 13 N/A 6.495×105s∗
200 20 N/A 4.062×10−2s
300 ? N/A >1 week
Table 3: Average run-time for determining γP(G) for various IEEE test systems. The 145 vertex test system,
due to it’s long run-time, was only tested once where each other graph was tested 20 times unless terminated
early.
5.3 On Erd˝ os-R´ enyi Random Graphs With Varying Size
We now compare the run-time of the PDT to the JL-BW algorithm on Erd˝ os-R´ enyi random graphs. An
Erd˝ os-R´ enyi random graph onnvertices is a graph resulting from adding edges between each pair of distinct
vertices with a predetermined probability [6]. In this paper, we will consider Erd˝ os-R´ enyi random graphs with
edge probability of 0.05 and a varying number of vertices. While it is not guaranteed that an Erd˝ os-R´ enyi
random graph is connected, we generate Erd˝ os-R´ enyi random graphs until the resulting graph is connected
and store the connected graph. To collect the following run-time data, we determined γP(G) for each graph
1120 times and used the average run-time as the estimated run-time for each graph.
We investigated the impact graph order has on time to find a minimum PDS by testing on connected
Erd˝ os-R´ enyi random graphs with 20, 40, 60, 80, 100, and 120 vertices. This data set is available in graph6
format [13] alongside the PDT and includes a total of 600 Erd˝ os-R´ enyi random graphs (100 of each order).
As expected, when the order of the graph increases, so does the time required to find a minimum PDS. This
difference in run-time is shown in Figure 8 and Table 4 gives mean and median values.
In addition to the faster run-times, the PDT yields less variance in run-time.
Figure 8: Boxplots of time to determine γP(G) grouped by algorithm and |V(G)|for each graph Gin the
Erd˝ os-R´ enyi data set including 100 graphs with 20, 40, 60, 80, 100, and 120 vertices each.
Table 4: Average run-time on Erd˝ os-R´ enyi random graphs with varying number of vertices
Algorithm |V(G)|= 20 |V(G)|= 40 |V(G)|= 60 |V(G)|= 80 |V(G)|= 100 |V(G)|= 120
meanJL-BW 4.550×10−34.646 6.361 1.009×1017.216×1011.108×102
PDT 6.692×10−44.847×10−37.233×10−26.999×10−14.077 3.935×101
medianJL-BW 2.661×10−34.218×10−17.004×10−12.416 3.009×1015.483×102
PDT 5.833×10−42.959×10−32.034×10−29.241×10−12.110 2.793×101
6 Concluding Remarks
6.1 Using the Power Domination Toolbox
The primary interface functions of the PDT are the following:
1.PDT_pdn(Input_graph, Number_workers) -> int
This function returns an integer (the power domination number of the input graph) when supplied with
a NetworkX graph object. Optionally, the user may supply this function with a number of compute
12threads to use in the parallelization step. If no number of compute threads are given, then all but one
available compute threads are used by default.
2.PDT_minpds(Input_graph, Number_workers) -> list
This function returns a list containing vertex labels of vertices that form a minimum power dominating
set for the input graph. Optionally, the user may supply this function with a number of compute threads
to use in the parallelization step. If no number of compute threads are given, then all but one available
compute threads are used by default. The function signature is as follows:
3.CheckForPDSOfSize(Input_graph, Contracted, PreferredVertices, CycleEntrances,
ActiveVertices, Blues, Placement_size, Number_workers) -> list
This function returns a power dominating set of the given size (if one exists) that is subject to the
restrictions discussed in Section 4. Power dominating sets returned by this function have no PMUs
located on vertices with degree less than 3, no PMUs located on redundant vertices, and PMUs located
on all preferred vertices. Optionally, the user may supply: a boolean value for if the input graph is
already contracted, the list of preferred vertices, the list of paired entrance vertices, the list of active
vertices, and the list of vertices colored blue in the restricted power domination problem subject to
Pref ( G). If none of these parameters are supplied, then the PDT will calculate them.
4.allpdsofsize(Input_graph, Size) -> list
This generator yields each power dominating set of a given size. Note that this function is not paral-
lelized and can be used to find all minimum PDSs and not just ones that satisfy the restricted power
domination problem on G′subject to Pref ( G′).
5.parallel_allpds_of_size(Input_graph, Placement_size, Number_workers)-> list of lists
This function returns a list of all power dominating sets of a given size. This differs from allpdsofsize
in that each power dominating set is held in memory at a given time. Due to memory constraints, this
function may overload personal computer’s memory capacity for large power dominating sets. Note
that this function leverages parallel computing methodologies.
Documentation for the other functions contained within the PDT can be located on GitHub as well as
examples that act as unit tests for each function.
Moreover, we include functions that afford some preliminary investigation into power domination varia-
tions within the PDT, including: failed power domination, k-fault-tolerant power domination, k-PMU-defect-
robust power domination, and fragile power domination. The PDT can also be used to investigate the token
jumping reconfiguration graph for power domination, or the token addition and removal reconfiguration
graph for power domination.
6.2 Acknowledgements
The authors thank Dr. Mary Flagg of the University of St. Thomas in Houston for her insights on forts
and power domination. This project was sponsored, in part, by the Air Force Research Laboratory via the
Autonomy Technology Research Center and Wright State University. This research was also supported by
Air Force Office of Scientific Research award 23RYCOR004 and is Distribution A under the reference number
AFRL-2024-1739.
6.3 Reproducibility and Code Availability Statement
All tests were conducted on a Ryzen 9 5950X with 128 gigabytes of system RAM running Ubuntu 22.04.3.
Total system RAM usage never exceeded 8 gigabytes at any time during the tests. The Power Domination
Toolbox is available on GitHub at https://github.com/JibJibFlutterhousen/PowerDominationToolbox
13References
[1] Sarah Anderson, Karen Collins, Daniela Ferrero, Leslie Hogben, Carolyn Mayer, Ann Trenk, and
Shanise Walker. Product throttling for power domination. The Australasian Journal of Combinatorics ,
85(3):248–272, 2023. URL: https://ajc.maths.uq.edu.au/pdf/85/ajc_v85_p248.pdf .
[2] Katherine Benson, Daniela Ferrero, Mary Flagg, Veronika Furst, Leslie Hogben, Violeta Vasilevska, ,
and Brian Wissman. Zero forcing and power domination for graph products. Australasian Journal
of Combinatorics , 7(2):221–235, 2018. URL: https://ajc.maths.uq.edu.au/pdf/70/ajc_v70_p221.
pdf.
[3] Katherine F. Benson, Daniela Ferrero, Mary Flagg, Veronika Furst, Leslie Hogben, and Violeta
Vasilevska. Nordhaus–gaddum problems for power domination. Discrete Applied Mathematics , 251:103–
113, December 2018. doi:10.1016/j.dam.2018.06.004 .
[4] Beth Bjorkman, Chassidy Bozeman, Daniela Ferrero, Mary Flagg, Cheryl Grood, Leslie Hogben, Bonnie
Jacob, and Carolyn Reinhart. Power domination reconfiguration, 2022. doi:10.48550/ARXIV.2201.
01798 .
[5] Chassidy Bozeman, Boris Brimkov, Craig Erickson, Daniela Ferrero, Mary Flagg, and Leslie Hog-
ben. Restricted power domination and zero forcing problems. Journal of Combinatorial Optimization ,
37(3):935–956, July 2018. doi:10.1007/s10878-018-0330-6 .
[6] P. Erd˝ os and A. R´ enyi. On random graphs. i. Publicationes Mathematicae Debrecen , 6(3–4):290–297,
July 1949. doi:10.5486/pmd.1959.6.3-4.12 .
[7] Joseph H Eto. Final report on the august 14, 2003 blackout in the united states and canada: causes
and recommendations, 2004.
[8] Caleb C. Fast and Illya V. Hicks. Effects of vertex degrees on the zero-forcing number and propagation
time of a graph. Discrete Applied Mathematics , 250:215–226, December 2018. doi:10.1016/j.dam.
2018.05.002 .
[9] Teresa W. Haynes, Sandra M. Hedetniemi, Stephen T. Hedetniemi, and Michael A. Henning. Domination
in graphs applied to electric power networks. SIAM Journal on Discrete Mathematics , 15(4):519–529,
January 2002. doi:10.1137/s0895480100375831 .
[10] Teresa W. Haynes, Sandra M. Hedetniemi, Stephen T. Hedetniemi, and Michael A. Henning. Domination
in graphs applied to electric power networks. SIAM Journal on Discrete Mathematics , 15(4):519–529,
2002. doi:10.1137/S0895480100375831 .
[11] Leslie Hogben, Jephian C.-H. Lin, and Bryan L. Shader. Inverse problems and zero forcing for graphs .
Number v. 270 in Mathematical Surveys and Monographs. American Mathematical Society, Providence,
Rhode Island, 2022. Includes bibliographical references and index. - Electronic reproduction;Providence,
Rhode Island;American Mathematical Society;2022. - Description based on print version record.
[12] Nikolaos M. Manousakis, George N. Korres, and Pavlos S. Georgilakis. Taxonomy of pmu placement
methodologies. IEEE Transactions on Power Systems , 27(2):1070–1077, May 2012. doi:10.1109/
tpwrs.2011.2179816 .
[13] Brendan McKay. URL: http://users.cecs.anu.edu.au/ ~bdm/data/formats.html .
[14] University of Washington. URL: https://labs.ece.uw.edu/pstca/pf118/ieee118cdf.txt .
[15] Logan A. Smith and Illya V. Hicks. Optimal sensor placement in power grids: Power domination, set
covering, and the neighborhoods of zero forcing forts, 2020. doi:10.48550/ARXIV.2006.03460 .
[16] Leon Thurner, Alexander Scheidler, Florian Schafer, Jan-Hendrik Menke, Julian Dollichon, Friederike
Meier, Steffen Meinecke, and Martin Braun. Pandapower—an open-source python tool for convenient
modeling, analysis, and optimization of electric power systems. IEEE Transactions on Power Systems ,
33(6):6510–6521, November 2018. doi:10.1109/tpwrs.2018.2829021 .
14Appendices
A Table of IEEE Graph Parameters
|V(G)|Number of vertices
with deg( v)≥3|V(G′)|Average
contraction time|Pref ( G′)|Average time
to calculate
Pref ( G′)|Pev ( G′)|Average time
to calculate Pev ( G′)
4 0 1 4.181×10−50 4.321×10−40 6.275×10−5
5 2 4 8.187×10−50 9.654×10−40 1.853×10−4
6 6 6 5.170×10−50 6.929×10−40 7.557×10−5
9 3 9 9.790×10−50 2.265×10−40 2.263×10−4
11 3 9 1.277×10−42 2.525×10−40 2.198×10−4
14 7 13 1.442×10−40 2.088×10−40 5.116×10−4
24 14 23 2.071×10−40 3.165×10−41 7.595×10−4
30 12 25 2.994×10−41 6.621×10−40 9.014×10−4
30 12 25 3.121×10−41 6.611×10−40 9.298×10−4
33 3 9 3.653×10−42 4.501×10−40 4.096×10−4
39 18 36 3.791×10−43 1.293×10−30 1.293×10−4
57 24 42 6.231×10−40 8.031×10−41 7.121×10−3
89 50 84 1.115×10−33 2.973×10−31 2.738×10−3
118 55 101 1.612×10−31 3.422×10−31 4.443×10−3
145 102 141 2.225×10−34 6.811×10−30 4.071×10−3
200 73 176 3.568×10−317 1.022×10−20 5.235×10−3
300 155 283 6.718×10−311 3.818×10−22 8.870×10−3
1,354 496 1,233 1.119×10−1141 6.228×10−112 1.237×10−1
Table 5: Parameters for various test networks as available through the pandapower Python module.
15