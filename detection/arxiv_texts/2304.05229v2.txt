THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE
(PSPACE-COMPLETE)
LAURE DAVIAUDa, DAVID PURSERb, AND MARIE TCHENGc
aUniversity of East Anglia, UK
e-mail address : l.daviaud@uea.ac.uk
bUniversity of Liverpool, UK
e-mail address : d.purser@liverpool.ac.uk
cENS Paris Saclay, France
e-mail address : marie.tcheng@ens-paris-saclay.fr
Abstract. We show that the big-O problem for max-plus automata, i.e. weighted au-
tomata over the semiring ( N∪ {−∞} ,max,+), is decidable and PSPACE-complete. The
big-O (or affine domination) problem asks whether, given two max-plus automata computing
functions fandg, there exists a constant csuch that f≤cg+c. This is a relaxation of the
containment problem asking whether f≤g, which is undecidable. Our decidability result
uses Simon’s forest factorisation theorem, and relies on detecting specific elements, that we
call witnesses, in a finite semigroup closed under two special operations: stabilisation and
flattening.
1.Introduction
Weighted automata are a generalisation of finite state automata, assigning values (integers,
rationals, strings...) to input words, and modelling probabilities, costs or program running
times. They have been introduced by Sch¨ utzenberger [ Sch61 ] and found applications in
quantitative verification [ CDH10 ] and verification of probabilistic systems [ Var85 ], text and
speech recognition [MPR02] or program complexity analysis [CDZ14].
More precisely, a weighted automaton is defined over a semiring. Commonly studied
examples include the rational semiring ( Q,+,×) (and the particular case of probabilistic
automata) and the tropical semirings ( N∪{+∞},min,+) (referred to as min-plus automata)
and (N∪ {−∞} ,max,+) (max-plus automata). Non-deterministic finite automata can be
viewed as weighted automata over the Boolean semiring. In all these cases, input words are
mapped to rational values (and possibly + ∞or−∞).
Key words and phrases: Max-plus automata, Big-O, Decidability.
The first author has been supported for this work by the EPSRC grant EP/T018313/1. The second author
was partially supported by the ERC grant INFSYS, agreement no. 950398. A preliminary version appeared
in [DP23].
Preprint submitted to
Logical Methods in Computer Science© L. Daviaud, D. Purser, and M. Tcheng
CC⃝ Creative CommonsarXiv:2304.05229v2  [cs.FL]  29 Apr 20242 L. DAVIAUD, D. PURSER, AND M. TCHENG
Comparing the functions computed by two given weighted automata is then a funda-
mental question. It is natural to consider the equivalence problem (are they equal?), and
the containment problem (is one pointwise smaller than the other?). These two problems
have been extensively studied and solutions are highly dependent on the semiring under
consideration. Results for the equivalence problem are contrasting, but the containment
problem is usually difficult:
•For the Boolean semiring, the equivalence and containment problems correspond to the
language equivalence and language inclusion respectively. Both problems are PSPACE-
complete [SM73].
•For the rational semiring the equivalence problem is decidable [ Sch61 ], even in polyno-
mial time [ KMO+13], but containment is undecidable [ Paz14 ], even in restricted sub-
classes [DJL+21].
•For the tropical semirings both problems are undecidable [ Kro94 ]. See [ ABK22 ,ABK11 ]
for a comprehensive overview of the decidability boundary for min-plus automata.
In this paper we consider a relaxation of the containment problem, called the big-O
problem which asks whether an automaton Ais big-O of an automaton B, that is, if there
exists a constant csuch that:
[ [A] ](w)≤c[ [B] ](w) +cfor all words w
where [ [ A] ] (resp. [ [ B] ]) denotes the function computed by A(resp. B). Intuitively the
problem asks whether, asymptotically, [ [ B] ] grows at least as fast as [ [ A] ] on every sequence of
words.
Chistikov, Kiefer, Murawski and Purser [ CKMP20 ,CKMP22 ] study the big-O problem
over the non-negative rational semiring, where it is shown to be undecidable in general,
but decidable for certain restrictions on the ambiguity or the accepted language. Similarly,
in [CLM+22], two restrictions of the big-O problem, also known to be undecidable in general,
are studied on specific subclasses: the boundedness problem (a.k.a. limitedness), and the
zero isolation problem1
For the tropical semirings, the big-O problem has also been proved to be decidable
in the ( N∪ {+∞},min,+) setting via the study of another problem: the domination
problem [ Col07 ,Col09 ]. This later asks whether there is a function α:N→Nsuch that
[ [A] ]≤α◦[ [B] ]. Affine domination requires that αbe affine, and is equivalent to the big-O
problem that we consider. Colcombet and Daviaud [ CD13 ] show that domination and affine
domination are equivalent and decidable for min-plus automata. More specifically, it turns
out that if some function αexists then an affine αsuffices. This result superseded the
decidability of the boundedness problem for min-plus automata [Has91, Leu88, Sim94].
In this paper, we turn our attention to ( N∪{−∞} ,max,+) for which the (un)decidability
of the big-O problem was open. First, note that there is no obvious way to use the results
obtained for min-plus automata. The natural transformation - given fcomputed by a min-
plus automaton, −fis computed by a max-plus automaton - does not preserve positivity,
and the standard way to go back to Nimplies adding a big enough function to −fwhich does
not preserve the growth rate. In fact, we prove that the equivalence between domination and
affine domination does not hold any more for max-plus automata (see Running Example 2).
Second, the boundedness problem in this case is trivially decidable and does not provide any
1The boundedness problem is the special case of the big-O problem when [ [ B] ] = 1. The zero isolation
problem is the special case when [ [ A] ] = 1. Chistikov et al. [ CKMP22 ] deal with the problem whether
[ [A] ]≤c[ [B] ] - so without + c, but the two problems are equivalent (see Remark 3.4).THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 3
help. The problem for max-plus automata requires individual attention and the introduction
of new tools. We show that it is PSPACE-complete and our proof provides new insights in
the description of the behaviour of these automata. In [ CDZ14 ], some description of the
asymptotic behaviour of the functions computed by max-plus automata is given, but this is
somehow orthogonal to the big-O problem. While providing a precise description, it is not
sufficient to solve the big-O problem and new techniques are required.
Building on some standard techniques, in particular Simon’s factorisation forest theorem
and the stabilisation operation [ Sim90 ,Col07 ,Kuf08 ,KL09 ,FGKO15 ,CD13 ,CLM+22], we
construct a finite semigroup closed under the stabilisation operation and a new flattening
operation. The stabilisation operation identifies unbounded behaviour, while the flattening
operation identifies maximal growth rates. The problem reduces to detecting the presence
ofwitnesses in this semigroup. A na¨ ıve search through the semigroup gives decidability, but
may require exponential space. The PSPACE complexity comes from searching witnesses
of a particular shape only requiring polynomial space. The hardness comes from the
PSPACE-hardness of the universality problem for Boolean automata.
Organisation of the paper. The paper expands on [ DP23 ], giving full proofs and expla-
nations. In Section 2, we give the definition of max-plus automata and introduce a running
example that we will use all along the paper. In Section 3, we state the big-O problem and
a simplified version of it, prove their PSPACE-hardness and reduce our result to prove that
the simplified big-O problem is PSPACE (Theorem 3.2). In Section 4, we give a high-level
description of this proof and define the semigroups that will be used and the stabilisation
and flattening operations. In Section 5, we define witnesses and give a decision procedure
that we show to be PSPACE. Sections 6, 7, 8 and 9 are then dedicated to prove that the
decision procedure is sound and complete. The organisation and content of these sections are
explained at the end of Section 5, when the suitable notions have been introduced. Finally,
in Section 10, we provide a sequence of max-plus automata that require increasingly intricate
witnesses (for a notion defined in the paper); this section is new compared with [DP23].
2.Max-plus automata
LetNmaxdenote the set N∪ {−∞} and note that ( Nmax,max,+) is a semiring. For some
positive integers i, j, letMi×jdenote the set of matrices of dimension i×jwith coefficients
inNmax. We define the product of matrices as usual on a semiring, provided the numbers
of columns of Amatches the number of rows of B: (A⊗B)q,q′=max q′′ 
Aq,q′′+Bq′′,q′
.
We will use the symbol ⊗to denote the product of matrices on several semirings, but the
context will always clearly identify which one.
Definition 2.1. Amax-plus automaton is a tuple ⟨Q,Σ, M, I, F ⟩where Qis a finite set
of states (and |Q|denotes the number of states), Σ is a finite alphabet, M: Σ→ M|Q|×|Q|
maps each letter to a matrix, Iis a row vector in M1×|Q|andFa column vector in M|Q|×1.
Moreover, the automaton is said to be deterministic if Ihas at most one entry different
from−∞and for all ain Σ, every row of M(a) has at most one entry different from −∞.
Given a max-plus automaton ⟨Q,Σ, M, I, F ⟩, we extend Mby morphism to Σ∗.
Definition 2.2. The weighting function computed by A=⟨Q,Σ, M, I, F ⟩, a max-plus
automaton, is defined as the function [ [ A] ] : Σ∗→Nmaxmapping a word w=w1w2. . . w k,4 L. DAVIAUD, D. PURSER, AND M. TCHENG
p0 0a, b: 1
A: Computes word length |w|.
q1 q2 q3
q40
0 0
0 00 b: 0a, b: 0 a, b: 0 a: 1
b: 0
b: 1, a: 0 B: Computes the maximum between the longest block of a’s
and the number of b’s.
Figure 1. Running examples
where wi∈Σ for all i= 1, . . . , k , to:
[ [A] ](w) =I⊗M(w1)⊗M(w2)⊗ ··· ⊗ M(wk)⊗F.
These definitions can be expressed in terms of graphs as usual, and we will rather use
the usual automaton vocabulary (transitions, runs, accepting runs, initial and final states,
etc.) when appropriate in some proofs. We will often write pw:x− − →qfor a run from state pto
state qlabelled by the word wwith weight x̸=−∞, the weight of a run being the sum of the
weights of the transitions in the run. In matrix terms, this means that, for w=w1w2. . . w k,
where wi∈Σ for all i= 1, . . . , k , there are p=j0, . . . , j k=qsuch that M(wi)ji−1,ji=xi
andx=x1+. . .+xk. The run is accepting if pis initial and qis final, i.e. Ip̸=−∞and
Fq̸=−∞and [ [A] ](w) is equal to the maximum of the weights of the accepting runs labelled
byw.
We assume that all the states in the automata under consideration in this paper are
accessible and co-accessible.
The size of an automaton is the number of bits required to encode M,IandFwhich is
bounded by ( |Σ| · |Q|2+ 2|Q|)· ⌈log(Λ) ⌉, where Λ is the maximal weight appearing in an
entry of M, I orF.
Throughout the paper we will illustrate the results and proofs using a running example
that we detail now.
Running Example, Part 1.Let us consider two example automata AandBover Σ = {a, b},
depicted in Fig. 1. Acomputes the length of the input word and Bcomputes the maximum
between the length of the longest block of consecutive a’s, and the number of b’s.
In the following matrix descriptions, to avoid cluttering notation, we use −instead of
−∞to denote that there is no path.
Formally, the automaton Ais defined by a single state QA={p}, alphabet Σ = {a, b}
andMA(a) = (1) , MA(b) = (1) with IA=FA= (0).
Formally Bis defined by states QB={q1, q2, q3, q4}, alphabet Σ = {a, b}and
MB(a) =0− − −
−1− −
− − 0−
− − − 0
andMB(b) =0 0− −
− − 0−
− − 0−
− − − 1THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 5
with ( IB)q1= (IB)q2= (IB)q4= (FB)q2= (FB)q3= (FB)q4= 0, and the unspecified entries of
I, Fare−∞. ⌟
3.Decidability of the big-O problem
The big-O problem for max-plus automata asks whether, given two max-plus automata
A,Bon the same alphabet Σ, there is a positive integer csuch that for all words win Σ∗,
[ [A] ](w)≤c[ [B] ](w) +c. In this case, we say that Ais big-O of B.
Running Example, Part 2.Observe that Ais not big-O of B, since [ [ A] ]((an−1b)n) =n2,
while [ [ B] ]((an−1b)n) =nfor all positive integers n.
However, [ [ B] ](w)≤[ [A] ](w) for all words w, soBis big-O of A.
Note also that [ [ A] ]≤([ [B] ] + 1)[ [ B] ], hence [ [ A] ] is dominated by [ [ B] ] as explained in the
introduction, but not big-O, showing the discrepancy between the min-plus and the max-plus
cases. ⌟
The main contribution of this paper is the following result.
Theorem 3.1. The big-O problem for max-plus automata is decidable and is PSPACE-
complete.
The rest of this paper is devoted to prove this theorem. The first step is to make a
number of simplifications on the automata taken as input.
Theorem 3.2. The following problem, called the simplified big-O problem , is PSPACE-
complete:
•Input: Max-plus automata A,Bsuch that Ais deterministic and [ [B] ] : Σ∗→N.
•Output: Yes if and only if Ais big-O of B.
Compared to the big-O problem, the simplified big-O problem requires that Abe
deterministic and no word whas [ [B] ](w) =−∞.
Running Example, Part 3.Recall A,Bfrom the running example in Running Example,
Part 1. Observe that Ais deterministic and [ [ B] ](w)≥0 for all w, soAandBform an
instance of the simplified big-O problem. ⌟
If the simplified big-O problem is decidable in PSPACE then the big-O problem is
decidable in PSPACE.
Proof. We reduce an instance of the big-O problem to the simplified big-O problem. The
instance of simplified big-O problem will be of polynomial size with respect to the initial
input, but a PSPACE pre-processing step is also used.
•LetA,Bbe max-plus automata. Let us first construct A′,B′with [ [ B′] ] : Σ∗→Nsuch
thatAis big-O of Bif and only if A′is big-O of B′. Let LA(resp. LB) be the (rational)
language of words wsuch that [ [ A] ](w)̸=−∞(resp. [ [ B] ](w)̸=−∞). Checking whether
LA⊆LBcan be done in PSPACE (consider the Boolean automata obtained from Aand
Bby ignoring the weights - they accept LAandLB, and inclusion of rational languages is
PSPACE [ MS72 ]). If LAis not included in LBthenAcannot be big-O of B. Take A′that
computes the length of the words and B′that computes the function 0. If LAis included
inLB, take A′=AandB′beingBaugmented with a new state which is both initial and
finial and has a self loop on all letters with weight 0. In both cases, Ais big-O of Bif and
only if A′is big-O of B′and [ [B′] ] : Σ∗→N.6 L. DAVIAUD, D. PURSER, AND M. TCHENG
•We now reduce this to the case where automaton Ais deterministic. Consider two automata
A=⟨QA,Σ, MA, IA, FA⟩andB=⟨QB,Σ, MB, IB, FB⟩with [ [ B] ] : Σ∗→N. We construct
A′,B′withA′deterministic and [ [ B′] ] : Σ∗→Nsuch that Ais big-O of Bif and only if A′
is big-O of B′. Automata A′andB′are over the alphabet Σ′={aq|a∈Σ,q∈QA}and:
–A′is constructed from A, with states QA∪{r}withra new state (the new unique initial
state), ( IA′)r= 0 and all the other entries of IA′being−∞, final states ( FA′)p= (FA)p
forp∈QAand ( FA′)r=max{(FA)p|pinitial in A }, a transition paq:x− − → qfor each
transition pa:x− − →qinA, and a transition raq:x+(IA)p− − − − − − − → qfor each transition pa:x− − →qin
A. Note that A′is deterministic.
–B′is constructed from B, with states QB, initial and final states IBandFBrespectively,
and a transition par:x− − → qfor each transition pa:x− − →qinBand each r∈QA. Note that
[ [B] ] : Σ∗→N.
Suppose that Ais big-O of Band let us prove that A′is big-O of B′. Let wbe a word
over Σ′and¯wover Σ defined as wwhere the subscripts of the letters are removed. Then
[ [A′] ](w)≤[ [A] ](¯w) and [ [ B] ](¯w) = [ [B′] ](w) by construction and hence A′is big-O of B′.
Conversely, suppose that A′is big-O of B′. Let w∈Σ∗. Consider an accepting run in A
labelled by wthat has maximal weight and q0, q1, q2, . . . , q kthe corresponding sequence of
states. Let ¯w=a1
q1···ak
qkword over Σ′where w=a1···akandai∈Σ for all i. Then
[ [A] ](w) = [ [A′] ]( ¯w) and [ [ B′] ]( ¯w) = [ [B] ](w) by construction. Hence Ais big-O of B.
The simplified big-O problem is PSPACE-hard.
Proof. We reduce from the Cofiniteness problem, which asks whether the language of a
non-deterministic finite automaton is cofinite, that is, accepts all but a finite set of words.
Lemma 3.3. Cofiniteness is PSPACE-hard
Proof. We reduce from the universality of non-deterministic finite automata. Let Abe an
instance of universality over alphabet Σ; we construct A′over Σ ∪ {#}where # is a new
letter not in Σ. A′is such that for all words wover Σ∗and for all words uover Σ ∪ {#},
w#uis accepted by A′if and only if wis accepted in A. This is achieved by augmenting A
with an accepting sink state reachable on # from every accepting state of A. We observe A
is universal if and only if A′is cofinite. In particular, if Ais universal, so too is A′, and
in particular, cofinite. If Adoes not accept wthenAdoes not accept the language w#Σ∗,
and thus is not cofinite.
LetBbe an input to Cofiniteness ; we construct an instance of the simplified big-O
problem. Let A′andB′such that [ [ A′] ](w) =|w|for all w∈Σ∗and [ [B′] ](w) =|w|for all w
accepted by LBand 0 otherwise. The automaton B′is constructed from Bby associating
every edge in Bwith the weight 1 and augmented with a new state which is both initial and
finial and has a self loop on zero for all letters.
We observe Bis cofinite if and only if Ais big-O of B.
•IfBis cofinite then there exists a longest word wLthat is not recognised by Band
[ [A′] ](w)≤[ [B′] ](w) +|wL|for all w∈Σ∗andAis big-O of B.
•IfBis not cofinite then there is an infinite sequence of words not accepted by Band in
particular one of increasing length words, ( wi)i∈N. Hence we have [ [ A′] ](wi)→ ∞ while
[ [B′] ](wi) = 0 as i→ ∞ andA′is not big-O of B′.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 7
Section 3 states that it is enough to prove that the simplified big-O problem is in
PSPACE in order to conclude the proof of Theorem 3.1. Section 3 gives the hardness parts
of Theorems 3.1 and 3.2 (since the simplified problem is a particular instance of the general
one).
The rest of the paper, Section 4 and beyond, will then focus on proving that the
simplified big-O problem is PSPACE.
Remark 3.4. Chistikov, Kiefer, Murawski and Purser [ CKMP22 ] use a slightly different
notion of big-O for rational automata, requiring the existence of csuch that [ [ A] ]≤c[ [B] ] (that
is, without + c). We note that for max-plus automata these two problems are equivalent,
they reduce to each other in PSPACE, so without further blow up in complexity. Indeed,
[ [A] ]≤c[ [B] ] +cif and only if [ [ A] ]≤c([ [B] ] + 1), for which the translation can be constructed
in polynomial time. Conversely, there exists csuch that [ [ A] ]≤c[ [B] ] if and only if there is c
such that [ [ A] ]≤c[ [B] ] +cand{w|[ [A] ](w)≥1and[ [B] ](w) = 0}is empty. The latter check
can be done with an emptiness test for regular languages in PSPACE.
Remark 3.5. One could be interested in computing the optimal or minimal constant c
such that [ [ A] ]≤c[ [B] ] +c, or with the previous remark such that [ [ A] ]≤c[ [B] ]. Such a cis not
computable. If one could compute it and check whether it is at most 1, it could be decided
whether [ [ A] ]≤[ [B] ], which is undecidable for max-plus automata [Kro94].
4.Projective semigroups
From now on, we fix a deterministic max-plus automaton A=⟨QA,Σ, MA, IA, FA⟩and a
max-plus automaton B=⟨QB,Σ, MB, IB, FB⟩over the same alphabet Σ.
4.1.Proof schema. We describe here the general idea of the proof: this is a very high level
explanation, omitting a lot of technical (but necessary) details, so should be read as such.
We want to show that either Ais big-O of B, or exhibit an infinite sequence of words
witnessing that this is not the case. The general idea of the proof follows the (now rather
standard) scheme of finding a finite semigroup, computable from AandB, and identifying
special elements in it - which we will call witnesses - such that witnesses exist in the semigroup
associated with AandBif and only if Aisnotbig-O of B. To obtain the complexity bound,
we will show that testing the existence of such a witness can be done in PSPACE. Similar
proof schema can be found in [ Sim94 ,CD13 ,CDZ14 ] - in particular this has been used for
deciding the boundedness of distance automata, and we will explain the new insights our
proof provides in comparison.
To construct the appropriate semigroup, the first step is to project the weights into
{−∞ ,0,1}. Indeed, the exact weights are not important, the only thing that matters is
the difference in growth rates as illustrated in Running Example, Part 2. This leads to
introduce the so-called semigroup of paths (denoted MA,B) in Definition 4.3, which is finite
and contains elements ( p, x, q, M ) where p, qare states in A,xis in{0,1}and there is a
word wsuch that there is a run in Afrom ptoqlabelled by wwith weight 0 if x= 0, and
positive weight if x= 1. Moreover, Mis the matrix MB(w) where all the (strictly) positive
entries are replaced by 1. This semigroup is easily computed starting from the letters and
closing under an appropriate product.
This semigroup witnesses the existence of runs with 0 or positive weights, but is not
enough to compare the growth rates in AandB. The next step is to add a value ∞: an entry8 L. DAVIAUD, D. PURSER, AND M. TCHENG
will be ∞if there is a sequence of words with paths with unbounded weights for this entry.
We introduce the semigroup of asymptotic behaviour (denoted MA,B) in Definition 4.6,
which contains elements ( p, x, q, M ) where p, qare states in A,xis in{0,1,∞}andMis
a matrix with entries in {−∞ ,0,1,∞}. We introduce a first operation - the stabilisation
operation (as defined in Definition 4.4) - which essentially iterates a word many times and
puts value ∞in the entries that are unbounded as the word is repeated. If starting from the
letters and closing under an appropriate product and the stabilisation operation, we would
get the following: for an element ( p, x, q, M ) in the semigroup of asymptotic behaviour, there
is a sequence of words ( wi)ilabelling paths in Afrom ptoqwith weights 0 if x= 0, positive
but bounded weights if x= 1, unbounded weights if x=∞. Moreover, an entry of Mis 0 if
it is 0 in all MB(wi), is 1 if it is positive and bounded for the MB(wi) and ∞if it tends to
+∞when i→+∞in the matrix MB(wi).
Up to now the semigroup of asymptotic behaviour witnesses unboundedness of sequences
of words, but not yet the difference in growth rates in AandB. This is where our proof
gives new insight. We introduce a second operation, which we call flattening, and behaves
as follows: consider an element ( p, x, p, M ) in the semigroup of asymptotic behaviour such
thatx=∞, so witnessing some sequence of words with unbounded weights in Afrom pto
p. We would like to iterate the words in this sequence, no longer looking at unboundedness,
but rather at which entries in Mwill grow linearly as the elements of the sequence are
repeated. We define the flattening operation to do exactly that. After flattening, we obtain
an element ( p, x, p, M′) witnessing a sequence of words ( wi)isuch that it is possible for an
entry in M′to have value 1, corresponds to paths with unbounded weights, but only if the
asymptotic growth rate of these weights is little-o of the respective weights in Afrom ptop.
In other words, unbounded runs of maximal growth rate continue to be represented by ∞,
but runs which are not of the maximal growth rate are ‘flattened’ back to 1, even if they are
unbounded.
The semigroup of asymptotic behaviour can be easily computed starting from the letters,
closing under an appropriate product and stabilisation and flattening operations. Witnesses
are those elements ( p, x, q, M ) where x=∞, with pinitial and qfinal in A, and all the
entries of Mbetween an initial and a final state in Bhave value at most 1. We will use
Simon’s factorisation theorem [ Sim90 ] (see Theorem 6.1) in two ways. In the case where
there is no witness, this will allow us to bound a constant csuch [ [ A] ]≤c[ [B] ] +c. In the
case where there is a witness, this will allow us to limit our search to a specific type - called
tractable witness of non-domination (Definition 5.2) - ensuring the PSPACE complexity of
our algorithm.
Remark 4.1. We could have introduced a single operation, somehow defined as a stabilisation
in some cases, and as flattening in others. We chose not to as the definition felt ad-hoc
and we believe the two operations of stabilisation and flattening are more intuitive. This
might have slightly simplified parts of the proof, however an added benefit we gained with
two operations is to characterise exactly the shape of these special witnesses we define: the
tractable witnesses of non-domination.
4.2.Semigroup of paths.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 9
Projection in {−∞ ,0,1,∞}.Let Ω be the semiring ({−∞ ,0,1,∞},max,+)where the
operations are defined as follows: the max operation is given by the order −∞<0<1<∞
and the sum operation is commutative and given by −∞+x=−∞ for any element x
(including x=∞), 0 + x=xfor any x∈ {0,1,∞}, 1 + 1 = 1 and 1 + ∞=∞+∞=∞.
LetMi×j
Ωbe the set of matrices of size i×jover the semiring Ω. We use again ⊗to
denote the product of matrices induced by the operations in Ω.
Given a finite set Qand a positive integer i, we denote by ( MQ,i,⊗) the semigroup
where:
•MQ,iis the union of the sets Q×Ω×Q× Mi×i
Ωand{⊥}.
•(p, x, q, M )⊗(p′, x′, q′, M′) = (p, x⊗x′, q′, M⊗M′) ifq=p′and⊥otherwise.
We will often denote the product of two elements e, e′∈MQ,iasee′instead of e⊗e′.
Projection in {−∞ ,0,1}.We denote −∞=−∞,0= 0 and for any positive integer x,
x=∞= 1. For a matrix MinMi×j, we denote by Mthe matrix Mwhere the coefficients
are replaced by their barred version.
LetΩbe the semiring ({−∞ ,0,1},max,+)where the operations are defined as follows:
themax operation is given by the order −∞<0<1 and the sum operation is commutative
and given by −∞+x=−∞for any element x, 0 + x=xfor any x∈ {0,1}and 1 + 1 = 1.
LetMi×j
Ωbe the set of matrices of size i×jover the semiring Ω. We use again ⊗to
denote the product of matrices induced by the operations in Ω.
Note that x7→xis a morphism over Nmax, as well as over Mi×j
Ω. We will use the
following basic properties without referencing them in the rest of the paper.
Lemma 4.2.
Leta, b∈Nmax, and let a,bbe the projection of aandbintoΩ, we have:
(1)Ifa≤bthen a≤b.
(2)a+b=a+b, where a+bis taken in the Ωsemiring.
LetM, N∈(Nmax)d×dand let M,Nbe the pointwise projection of MandNintoΩd×d, we
have:
(3)M⊗N=M⊗Nwhere M⊗Nis taken in the Ωsemiring.
Proof.
(1)•Suppose a=−∞then−∞=a≤band−∞=a≤b.
•Suppose a= 0, we have a≤b⇐⇒ b∈N. Then a≤b.
•Suppose a∈N, we have a≤b⇐⇒ b∈N≥a, thus b= 1. Then 1 = a≤b.
(2)•Suppose a=−∞(or,b=−∞) then a+b=a+b=a+b=−∞.
•Suppose a=b= 0, then a+b=a+b=a+b= 0.
•Suppose a∈N≥1,b∈N. Then a+b∈N≥1,a+b= 1,a= 1,a+b= 1.
(3) We have(M⊗N)i,k=Mi,j+Nj,kfor some j
=Mi,j+Nj,k
≤max
jMi,j+Nj,k
= (M⊗N)i,k
and10 L. DAVIAUD, D. PURSER, AND M. TCHENG
(M⊗N)i,k=Mi,j+Nj,kfor some j
=Mi,j+Nj,k
≤max
jMi,j+Mj,k
=(M⊗N)i,k.
Analogously to ( MQ,i,⊗), given a finite set Qand a positive integer i, we denote by
(MQ,i,⊗) the semigroup where:
•MQ,iis the union of the sets Q×Ω×Q× Mi×i
Ωand{⊥}.
•(p, x, q, M )⊗(p′, x′, q′, M′) = (p, x⊗x′, q′, M⊗M′) ifq=p′and⊥otherwise.
Semigroup of paths of AandB.Recall we have fixed a deterministic max-plus automaton
A=⟨QA,Σ, MA, IA, FA⟩and a max-plus automaton B=⟨QB,Σ, MB, IB, FB⟩over the same
alphabet Σ.
Definition 4.3. Thesemigroup of paths ofAandB, denoted MA,B, is the subsemigroup of
MQA,|QB|generated by {(p,x, q,MB(a))|a∈Σ, pa:x− − →qinA}.
Running Example, Part 4.From aandbrespectively we construct
ea= (p,1, p,0− − −
−1− −
− − 0−
− − − 0
) and eb= (p,1, p,0 0− −
− − 0−
− − 0−
− − − 1
).
Observe that eaea=ea, and, for example, eaebandebeb, inMA,B, are given by
eaeb= (p,1, p,0 0− −
− − 1−
− − 0−
− − − 1
), ebeb= (p,1, p,0 0 0 −
− − 0−
− − 0−
− − − 1
). ⌟
4.3.Semigroup of asymptotic behaviours. The idempotent elements of a semigroup
are elements esuch that e⊗e=e. A matrix MinMi×i
Ωis called path-idempotent ifMis
idempotent in Mi×i
Ω. Similarly, an element ( p, x, q, M ) ofMQ,iis called path-idempotent if
p=qandMis path-idempotent.
Stabilisation operation. The semigroup MQ,iis equipped with a unary operation on its
path-idempotent elements, called the stabilisation operation and defined as follows: The
stabilisation of elements in Ω is defined as: ( −∞)♯=−∞, 0♯= 0 and 1♯=∞♯=∞. Given
a path-idempotent matrix MinMi×i
Ω, the stabilisation of M, denoted M♯is defined as
the product M⊗M′⊗Mwhere M′is the matrix Mwhere all the diagonal elements are
replaced by their stabilisation.
Definition 4.4. Thestabilisation operation ofMQ,iis defined on its path-idempotents as
follows: ( p, x, p, M )♯= (p, x♯, p, M♯).
Running Example, Part 5.Observe eais idempotent and
e#
a= (p,∞, p,0− − −
− ∞ − −
− − 0−
− − − 0
)
indicating that the sequence of words ( an)nhas unbounded values in A, and the sequence
(MB(an)q2,q2)nis also unbounded.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 11
Consider
e#
aeb= (p,∞, p,0 0− −
− − ∞ −
− − 0−
− − − 1
).
Recall from Running Example, Part 2 we are aiming to represent a word of the shape ( anb)n.
Hence, we would expect to iterate e#
aebagain, however it is not path-idempotent. Instead
we can make one iteration manually resulting in e#
aebe#
aebwhich is idempotent,
e#
aebe#
aeb= (p,∞, p,0 0∞ −
− − ∞ −
− − 0−
− − − 1
).
Let us consider the effect of stabilisation on it. We have
(e#
aebe#
aeb)#= (p,∞, p,0 0∞ −
− − ∞ −
− − 0−
− − − ∞
).
The purpose of this operation is to identify unbounded entries after arbitrarily many iterations
of either the first, the second, or both, stabilisation operations. Note that [ [ A] ]((anbanb)n) =
2n2+ 2nwhile MB((anbanb)n)q1,q3=MB((anbanb)n)q2,q3=nandMB((anbanb)n)q4,q4= 2n.
Both sequences are unbounded as witnessed by the ∞but this does not allow us to identify
the different rates of growth between the entries. ⌟
Flattening operation. The semigroup MQ,iis also equipped with another unary operation
on its path-idempotent elements, called the flattening operation and defined as follows:
Given a path-idempotent matrix MinMi×i
Ω, the flattening ofM, denoted M♭is defined as
the product M⊗⟨M3⟩⊗Mwhere ⟨M⟩is the matrix Mwhere all the non diagonal elements
are replaced by their barred version.
Definition 4.5. The flattening operation ofMQ,iis defined on its path-idempotents as
follows: ( p, x, p, M )♭= (p, x, p, M♭).
Running Example, Part 6.Let us consider the effect of flattening on e#
aebe#
aeb:
(e#
aebe#
aeb)♭= (p,∞, p,0 0 1 −
− − 1−
− − 0−
− − − 1
).
Here observe that ∞corresponds to an entry with growth rates n2on the sequence of words
(anbanb)n. Other entries, even unbounded sequences, with asymptotically smaller growth
rates – such as n– are projected to 1 (or 0). The flattening behaviour allows us to capture
differences in growth rates (not fully, but enough for our purpose), by, roughly speaking,
keeping only the fastest growing elements. Intuitively ( e#
aebe#
aeb)♭demonstrates that Acan
grow faster than Band so Ais not big-O of B, we formalise this intuition as a witness of
non-domination in the next section. ⌟
The semigroup of asymptotic behaviours of AandB.Recall we have fixed a de-
terministic max-plus automaton A=⟨QA,Σ, MA, IA, FA⟩and a max-plus automaton
B=⟨QB,Σ, MB, IB, FB⟩over the same alphabet Σ.
Definition 4.6. Thesemigroup of asymptotic behaviours ofAandB, denoted MA,B, is the
subsemigroup of MQA,|QB|generated by {(p,x, q,MB(a))|a∈Σ, pa:x− − →qinA}and closed
under the stabilisation and flattening operations.12 L. DAVIAUD, D. PURSER, AND M. TCHENG
5.Decision Procedure
5.1.Witnesses. Given a deterministic max-plus automaton Aand a max-plus automaton B
over the same alphabet, an element ( p, x, q, M ) inMA,Bis called a witness of non-domination
if:
•pis initial in A,
•qis final in A,
•x=∞,
•IB⊗M⊗FB<∞.
Theorem 5.1. Given two max-plus automata A,Bsuch that Ais deterministic and [ [B] ] :
Σ∗→N, the two following assertions are equivalent:
• A is big-O of B.
•There is no witness of non-domination in MA,B.
We will not prove Theorem 5.1 directly, rather we will prove a refined version of the
theorem incorporating tractable witnesses, which are defined next.
5.2.Tractable witnesses. A witness could be any element in MA,B, found through
arbitrary application of product, stabilisation and flattening, satisfying the conditions. We
now consider a restricted form of witness in which we place a restriction on the sequence of
operations to construct it.
Definition 5.2 (Tractable witness of non-domination) .We say an element ginMA,Bis a
tractable witness of non-domination if it is both a witness of non-domination and of the form
g=g0(g1(. . .(gk−2(gk−1(gk)#g′
k−1)♭g′
k−2)♭. . .)♭g′
1)♭g′
0,
fork≤3|MA,B|andgi, g′
i∈MA,B∪ {id}, where idis an added identity element of MA,B
such that e⊗id=id⊗e=efor all e∈MA,B.
Running Example, Part 7.(e#
aebe#
aeb)♭is a witness but not a tractable witness of non-
domination. However, ( eaebe#
aeb)♭will turn out to be a tractable witness. Intuitively, it
represents the sequence of words ( abanb)n, which is almost the same as the sequence used to
showAis not big-O of Bin Running Example, Part 2. ⌟
We will now strengthen Theorem 5.1, in which we add the condition that there is a
tractable witness; this allows us to limit our search to tractable witnesses.
Theorem 5.3. Given two max-plus automata A,Bsuch that Ais deterministic and [ [B] ] :
Σ∗→N, the following assertions are equivalent:
• A is big-O of B.
•There is no witness of non-domination in MA,B.
•There is no tractable witness of non-domination in MA,B.
The benefit of a tractable witness will be that we can identify the existence of one
in PSPACE. In the next section we present the PSPACE algorithm to detect a tractable
witness and then we will prove the equivalences of Theorem 5.3 to conclude the result.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 13
5.3.PSPACE algorithm. We define a non-deterministic procedure to construct a tractable
witness from middle out, that runs in polynomial space. Since NPSPACE = PSPACE (from
Savitch’s theorem), this will allow us to conclude.
Any element g∈MA,Bcan be constructed using at most |MA,B|product operations
from the generators. Suppose g=g1⊗···⊗ gmsuch that giare generators and mis minimal,
then we can assume that g1⊗ ··· ⊗ giis different from g1⊗ ··· ⊗ gjfor each i̸=j, i, j≤m.
Thus m≤ |MA,B|.
The procedure is as follows:
•Non-deterministically choose k≤3|MA,B|.
•Letgbe a non-deterministically chosen idempotent element of MA,B, constructed in at
most|MA,B|steps.
•Update gto be the stabilisation g#.
•Repeating for i=ktoi= 0, we update gwith ( gig g′
i)♭for some gi, g′
i∈MA,B∪ {id}in
the following way:
–Update gby non-deterministically choosing a generator or idand multiply on the left of
g. Repeat up to |MA,B|many times.
–Update gby non-deterministically choosing a generator or idand multiply on the right
ofg. Repeat up to |MA,B|many times.
–Except for i= 0, check that gis path-idempotent and update gto be the flattening of
g.
•Check if gis a witness.
At any moment we are only storing one element gofMA,B, plus the space needed for doing
the product, iteration and stabilisation operations, the current iteration and number of
iterations iandk, and how many elements we have multiplied (on the left or on the right)
with g. This requires only polynomial space. This results in an NPSPACE algorithm, which
is equivalent to a PSPACE algorithm.
5.4.Proof of Theorem 5.3. To prove Theorem 5.3, we are going to prove the following
result - the notions of factorisation trees and faults will be introduced in due course.
Theorem 5.4. Given two max-plus automata A,Bsuch that Ais deterministic and [ [B] ] :
Σ∗→N, the following assertions are equivalent:
(1)Ais not big-O of B.
(2)There is a witness of non-domination in MA,B.
(3)There is a tractable witness of non-domination in MA,B.
(4)Some word has a factorisation tree, of height at most 3|MA,B|, with a fault.
Since a tractable witness is a special case of a witness, it is clear that (3) implies (2).
The remainder of the paper will prove the remaining implications.
In Section 6, we introduce the notions of factorisation trees and faults. In Section 7, we
prove that (1) implies (4) - by proving its contrapositive. In Section 8, we prove that (4)
implies (3). Sections 7 and 8 are independent of each other, but rely on Section 6. Finally,
in Section 9, we prove that (2) implies (1). This later section can be read independently of
the other ones.14 L. DAVIAUD, D. PURSER, AND M. TCHENG
6.Factorisation trees and faults
Recall we have fixed a deterministic max-plus automaton A=⟨QA,Σ, MA, IA, FA⟩and a
max-plus automaton B=⟨QB,Σ, MB, IB, FB⟩over the same alphabet Σ.
6.1.Factorisation trees. Letw=w1···wkwith w1, . . . , w k∈Σ such that [ [ A] ](w)̸=−∞
and let:
p0w1:x1− − − → p1w2:x2− − − → p2···pk−1wk:xk− − − → pk
be its unique accepting path in A. Let αw(wi) be the element of MA,Bdefined as
(pi−1,xi, pi,MB(wi)).
A factorisation tree on wis a finite ordered tree in which every node νin the tree is
labelled by a element in MA,B, denoted α(ν), such that:
•there are kleaves labelled with αw(w1), . . . , α w(wk),
•internal nodes have two or more children, and are labelled by the product of the labels
of their children: a node νwith children ν1, . . . ν mfor some m≥2, is labelled with
α(ν) =α(ν1)⊗α(ν2)⊗ ··· ⊗ α(νm). A node with two children is called a product node,
•if a node has at least three children then the children and the node are all labelled by
the same idempotent element - such a node is called an idempotent node (in particular,
α(ν) =α(νi) for all i≤m).
Note that for a word wsuch that [ [ A] ](w)̸=−∞, no node in a factorisation tree on w
can be labelled by ⊥. It is also clear that the labelling of the root of the subtree with leaves
αw(wi), . . . , α w(wj) for some i < j , corresponds to the element in the semigroup of paths
witnessing the existence of 0 or positive weights paths in AandBon the word wi···wj.
Theorem 6.1 (Simon’s Factorisation Theorem [ Sim90 ]).There exists a positive integer H
such that for all w∈Σ∗, there exist a factorisation tree on wof height at most H.
Note that Hdoes not depend on the word w, only on the size of MA,B. Further we
have that H≤3|MA,B| −1 due to the bound of [ Kuf08 ], which is tighter than the 3 |MA,B|
bound of Colcombet [Col07], and the original bound of 9 |MA,B|by Simon.
6.2.Contributors. Lettbe a factorisation tree on a word w, such that [ [ A] ](w)̸=−∞.
For each node νof the tree, we define its set of contributors Cνas follows, in a top-down
manner:
•if the root is labelled ( p, x, q, M ), the contributors of the root is the set of pairs ( i, j) such
thatiis initial in B,jis final in BandMi,j̸=−∞.
•if a node has a set of contributors C, and has two children labelled ( p, x, q, M ) and
(q, x, r, P ),
–the set of contributors of the left child is:
{(i, ℓ)| ∃j: (i, j)∈C, P ℓ,j̸=−∞, Mi,ℓ̸=−∞} ,
–the set of contributors of the right child is:
{(ℓ, j)| ∃i: (i, j)∈C, M i,ℓ̸=−∞, Pℓ,j̸=−∞} .
•if a node has a set of contributors Cand has at least three children, labelled by an
idempotent element ( p, x, p, M ), then:
–the left-most child has set of contributors:
{(i, ℓ)| ∃j: (i, j)∈C, M ℓ,j̸=−∞, Mi,ℓ̸=−∞} ,THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 15
a/parenleftbigg0−−−
−1−−
−−0−
−−−0/parenrightbiggan/parenleftbigg0−−−
−1−−
−−0−
−−−0/parenrightbigg
b/parenleftbigg00−−
−−0−
−−0−
−−−1/parenrightbigg
aν1
Fault!/parenleftbigg0−−−
−1−−
−−0−
−−−0/parenrightbigganν2/parenleftbigg0−−−
−1−−
−−0−
−−−0/parenrightbigg
b/parenleftbigg00−−
−−0−
−−0−
−−−1/parenrightbigganb/parenleftbigg00−−
−−1−
−−0−
−−−1/parenrightbigg
anbν3/parenleftbigg00−−
−−1−
−−0−
−−−1/parenrightbigganbanb ν4/parenleftbigg001−
−−1−
−−0−
−−−1/parenrightbigg(anbanb)n ν5/parenleftbigg001−
−−1−
−−0−
−−−1/parenrightbigg
Figure 2. A possible factorisation tree for the word w= (anbanb)n. Nodes
are labelled by the sub-word of wand the path-behaviour of MB. The
contributors of each node are indicated by highlighting the corresponding
matrix entries. A node with a fault is also indicated, inducing the sequence
of nodes ν1, . . . , ν 5from the fault to the root.
–the right-most child has set of contributors:
{(ℓ, j)| ∃i: (i, j)∈C, M i,ℓ̸=−∞, Mℓ,j̸=−∞} ,
–the other children have set of contributors:
{(ℓ, k)| ∃(i, j)∈C, M i,ℓ̸=−∞, Mk,j̸=−∞,
Mℓ,k̸=−∞, Mk,ℓ̸=−∞} .
Contributors indicate which elements of the matrix meaningfully contribute to a valid
run for the whole word. For example, at the root, not every entry is a weight on a run from
an initial state to a final state, so not all entries contribute to the value computed on the
word. The choices for the root and product nodes are uncontroversial, however the choice is
non-trivial for the middle children of an idempotent node. Here only entries that could be
repeated many times are taken; this is because, whilst other transitions could contribute to
a valid run, they could contribute only once, whereas the entries we consider can be used in
many of the idempotent children.
Running Example, Part 8.Fig. 2 depicts a factorisation tree for the word ( anbanb)nof height
5. Every node is depicted with the sub-word and a partial description of its α-labelling:
every node is α-labelled by ( p,1, p, M ), where Mis the matrix depicted. The contributors
are highlighted in the matrix for each node. Only a representation of the middle children is
depicted for idempotent nodes. We will return to the fault label and the sequence ν1, . . . , ν 5
after defining faults. ⌟16 L. DAVIAUD, D. PURSER, AND M. TCHENG
We will make use of the property that every node has at least one contributor, stated in
the following proposition. Given a word wsuch that [ [ B] ](w)̸=−∞, every node in any
factorisation tree on whas a non empty set of contributors.
Proof. We show that if a node has a contributor then all its children have a contributor.
Since we assume IB⊗MB(w)⊗FB̸=−∞we observe that the root in any factorisation tree
has non-empty contributors, this would imply that every element of the tree has non-empty
contributors.
First observe, that the definition of a contributor requires that for every ν, with
α(ν) = (p, x, q, M ), if ( i, j)∈Cνthen Mi,j̸=−∞. We consider two cases for both type of
internal node. Suppose ( i, j)∈CνandMi,j̸=−∞.
Case 1 (νis a product node) .Suppose α(ν) = ( p, x, q, M ) is the product of two children
ν1andν2with α(ν1) = ( p, x1, r, P 1) and α(ν2) = ( r, x2, q, P 2) then M=P1⊗P2, and
Mi,j= (P1)i,k+ (P2)k,jfor some k. Thus ( i, k)∈Cν1and ( k, j)∈Cν2.
Case 2 (νis an idempotent node) .Suppose νhas children ν1, . . . , ν kfork≥3, with
α(ν) =α(νi) = ( p, x, p, M ) for all 1 ≤i≤k. Since Mis idempotent, we have M=Md
for any choice of d≥1. Note that there is no requirement that d≤k, the equivalence
holds for alldby idempotence. In particular, let us fix a choice of some d≥ |QB|+ 3.
Choose a contributor of ν, (i, j)∈Cν, and so we have Mi,j̸=−∞. Further, since Mis
idempotent, we have Mi,j=Md
i,j. Thus there exists a sequence i=ℓ1, . . . , ℓ d+1=jsuch
thatMd
i,j=Mℓ1,ℓ2+Mℓ2,ℓ3+···+Mℓd,ℓd+1, where Mℓn,ℓn+1̸=−∞for every n≤d.
Note then that ( ℓ1, ℓ2)∈Cν1,(ℓd, ℓd+1)∈Cνk. Furthermore, by simple application of the
pigeon hole principle, there exists distinct indices n, m such that in=im(asd≥ |QB|+ 3).
Thus we have ( in, in)∈Cν2∩ ··· ∩ Cνk−1.
6.3.Faults. Given a word wsuch that [ [ A] ](w)̸=−∞and a factorisation tree on w, a node
labelled with ( p, x, q, M ), is called a fault if:
•it is the child of an idempotent node, but is neither the left-most nor the right-most child,
•x= 1,
•Mi,j= 0 for all pairs ( i, j) in its set of contributors.
Running Example, Part 9.Let us return to the factorisation tree for ( anbanb)ndepicted in
Fig. 2. Observe that the node indicated by ν1is a middle-child of an idempotent with only
zero entries in the contributors and is therefore a fault. Since the two subtrees below ν4are
identical the other node labelled by ais also a fault. In Running Example, Part 10 we will
use the indicated fault ν1to construct a (tractable) witness of non-domination. ⌟
7.No tree has a fault implies Big-O
In this section, we suppose that no word has a factorisation tree of height at most 3 |MA,B|
with a fault, and we construct a positive integer csuch that:
[ [A] ](w)≤c[ [B] ](w) +cfor all w∈Σ∗. (7.1)
Recall that we can also assume that [ [ B] ](w)̸=−∞for all words w.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 17
Letw=w1···wkwith w1, . . . , w k∈Σ such that [ [ A] ](w)̸=−∞and let:
p0w1:x1− − − → p1w2:x2− − − → p2···pk−1wk:xk− − − → pk
be its unique accepting path in A. Given a factorisation tree tonw, for a node νint, root
of the subtree with leaves αw(wi), . . . , α w(wj), we denote by:
•valA(ν) the weight xi+. . .+xjof the path in Acorresponding to the factor wi···wj,
•ValB(ν) the matrix MB(wi···wj).
Let Λ be the largest value occurring on a transition in A, and let ch= (4|QB|+ 4)hΛ
for positive integers h. We prove the following property:
Proposition 7.1. Letwbe a word such that [ [A] ](w)̸=−∞ andta factorisation tree on w
with no fault. Let νbe a node in tof height hfor some positive integer h. Then:
valA(ν)≤chmax
(i,j)∈CνValB(ν)i,j+ch
Observe that Eq. (7.1) is trivial for wsuch that [ [ A] ](w) =−∞. For wsuch that
[ [A] ](w)̸=−∞, Eq. (7.1) is a direct corollary of Proposition 7.1 choosing c=cHwhere
H= 3|MA,B|,νas the root of a factorisation tree on wof height at most H, which exists
by Theorem 6.1.
Proof. The proof is by induction on h.
Case 1 (If νis a leaf and h= 0).By definition of Λ as the largest value occurring on a
transition in A, and by definition of c0, we have:
valA(ν)≤Λ≤c0≤c0max
(i,j)∈CνValB(ν)i,j+c0.
The last inequality holds only if the set of contributors Cνis not empty, which is the case
by Section 6.2 since we assume [ [ B] ](w)≥0 for all w∈Σ∗.
Case 2 (If νis a product node) .Letν1andν2be the two children of ν. Then valA(ν) =
valA(ν1) +valA(ν2). By induction, for each child m∈ {1,2}we have:
valA(νm)≤ch−1max
(i,j)∈CνmValB(νm)i,j+ch−1
Suppose valA(ν1)≥valA(ν2) (the case valA(ν2)>valA(ν1) is symmetric). Then:
valA(ν1) +valA(ν2)≤2valA(ν1)
≤2ch−1max
(i,j)∈Cν1ValB(ν1)i,j+ 2ch−1
Consider ( d, f)∈Cν1for which this maximum is attained. Since ( d, f) is a contributor of a
left child then there exists gsuch that ValB(ν2)f,g̸=−∞and ( d, g) is a contributor of ν.
We get:
valA(ν)≤valA(ν1) +valA(ν2)
≤2ch−1ValB(ν1)d,f+ 2ch−1
≤2ch−1(ValB(ν1)d,f+ValB(ν2)f,g) + 2ch−1
≤2ch−1max
(i,j)∈CνValB(ν)i,j+ 2ch−1
≤chmax
(i,j)∈CνValB(ν)i,j+ch (asch>2ch−1.)18 L. DAVIAUD, D. PURSER, AND M. TCHENG
Case 3 (If νis an idempotent node) .Letν1, . . . , ν dbe the children of ν. By definition and
idempotency, valA(ν)=valA(νm)for all m= 1, . . . , d . IfvalA(ν)= 0, then we directly get
the result since the set of contributors Cνis not empty by Section 6.2 (because we assume
that [ [B] ](w)≥0 for all w∈Σ∗). Let’s suppose now that valA(ν)=valA(νm)= 1 for all
m= 1, . . . , d .
By inductive hypothesis, for all m= 1, . . . , d , we have:
valA(νm)≤ch−1max
(i,j)∈CνmValB(νm)i,j+ch−1.
Since there is no fault in the tree, then for all m, there is some ( i, j)∈Cνmsuch that
ValB(νm)i,j≥1, and hence:
valA(νm)≤2ch−1max
(i,j)∈CνmValB(νm)i,j. (7.2)
Let (im, jm) be a pair in Cνmon which this maximum is attained. Note that ValB(νm)
are the same for all masValB(ν), and that this is an idempotent matrix. Let us define
i∼jif and only if ValB(ν)i,j=ValB(ν)j,i̸=−∞. By idempotency, this gives an equivalence
relation, and we denote by S1, . . . ,Szits equivalence classes. Note that zis bounded by the
number of states of B. We now partition the set {1, . . . , d }(the children of the node ν) as
the union Φ of the sets {1},{d}, ΓSf,evenand Γ Sf,oddfor all f= 1, . . . , z , where:
ΓSf,even={m∈ {2, . . . , d −1} |im, jm∈ Sfandmis even }
and
ΓSf,odd={m∈ {2, . . . , d −1} |im, jm∈ Sfandmis odd}.
This gives a partition of {1, . . . , d }since ( im, jm) is in the set of contributors of νmand then
imandjmare in the same Sffor some f. We partition this way into even and odd indices
to be able to reconstruct a path: if we select for example the even indices in one of the Sf,
by definition, we can construct a path in the automaton taking the transitions corresponding
to these indices. Note that the number of sets forming Φ is bounded by 2( |QB|+ 1), where
we recall that |QB|is the number of states of B.
For each Γ in Φ, let xΓ=P
m∈ΓvalA(νm), and denote by Γ maxone for which this sum
is maximal. Observe that:
valA(ν)≤2(|QB|+ 1)xΓmax.
Sub-case 3.1 (Γ max= ΓSf,oddfor some f).We have:
valA(ν)≤2(|QB|+ 1)xΓmax
= 2(|QB|+ 1)X
m∈ΓSf,oddvalA(νm)
≤2(|QB|+ 1)X
m∈ΓSf,odd(2ch−1ValB(νm)im,jm) (by Eq. (7.2))
= 4ch−1(|QB|+ 1)X
m∈ΓSf,oddValB(νm)im,jm.
By definition of contributors, and construction of Γ Sf,odd, there exists ( i, j) inCν
andi=ℓ0, ℓ1, . . . , ℓ d=jsuch that im=ℓm−1andjm=ℓmfor all min ΓSf,oddandTHE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 19
ValB(νm)ℓm−1,ℓm̸=−∞for all m= 1, . . . , d , hence
X
m∈ΓSf,oddValB(νm)im,jm≤dX
m=1ValB(νm)ℓm−1,ℓm.
Since we also have:
max
(i,j)∈CνValB(ν)i,j= max
(i,j)∈Cνmax
i=ℓ0,ℓ1,...,ℓd=j dX
m=1ValB(νm)ℓm−1,ℓm!
we obtain:
valA(ν)≤4ch−1(|QB|+ 1)X
m∈ΓSf,oddValB(νm)im,jm
≤4ch−1(|QB|+ 1) max
(i,j)∈CνValB(ν)i,j.
Sub-case 3.2 (Γ max= ΓSf,evenfor some f).This is similar to the previous case.
Sub-case 3.3 (Γ max={1}).This is similar to the product case. We have:
valA(ν)≤2(|QB|+ 1)xΓmax
= 2(|QB|+ 1) valA(ν1)
≤4(|QB|+ 1)ch−1max
(i,j)∈Cν1ValB(ν1)i,j
≤4(|QB|+ 1)ch−1max
(i,ℓ)∈CνValB(ν)i,ℓ
(by definition of contributors of the left-most child.)
Sub-case 3.4 (Γ max={d}).This is symmetric to the previous case.
8.Construction of a witness if there is a tree with a fault
We suppose that some word has a factorisation tree of height at most 3 |MA,B|with a fault.
We are going to construct a tractable witness of non-domination in MA,B.
Letνbe a fault of maximal height in this tree. Let ν1=νand let νh+1be the direct
parent of νhforh= 2, . . . , m , where νmis the root node. Before giving the construction of
the tractable witness formally, we will see how to construct it on our running example.
Running Example, Part 10.We consider the tree depicted in Fig. 2. We define ν1, . . . , ν 5as
explained above. A tractable witness is constructed by doing the stabilisation operation on
the labelling of ν1, then doing the product on the right with the labelling corresponding to b
and on the left with the one corresponding to ab. This gets us to ν4. At this point, we take
the flattening of what we have obtained. We define the β-labelling of the nodes νh:
β(ν2) = (p,1, p,0− − −
−1− −
− − 0−
− − − 0
)♯= (p,∞, p,0− − −
− ∞ − −
− − 0−
− − − 0
)
β(ν3) =β(ν2)⊗(p,1, p,0 0− −
− − 0−
− − 0−
− − − 1
)
=(p,∞, p,0 0− −
− − ∞ −
− − 0−
− − − 1
)20 L. DAVIAUD, D. PURSER, AND M. TCHENG
a
not a fault/parenleftbigg0−−−
−1−−
−−0−
−−−0/parenrightbiggan/parenleftbigg0−−−
−1−−
−−0−
−−−0/parenrightbigg
b/parenleftbigg00−−
−−0−
−−0−
−−−1/parenrightbigganb/parenleftbigg00−−
−−1−
−−0−
−−−1/parenrightbigg
Figure 3. A factorisation tree for the word anbwith contributors highlighted.
β(ν4) =(p,1, p,0 0− −
− − 1−
− − 0−
− − − 1
)⊗β(ν3)
=(p,∞, p,0 0∞ −
− − ∞ −
− − 0−
− − − 1
)
β(ν5) =β(ν4)♭= (p,∞, p,0 0 1 −
− − 1−
− − 0−
− − − 1
)
Observe that β(ν5) is a witness of non-domination. ⌟
Running Example, Part 11.Recall that contributors are defined top down, thus whether a
node is a fault depends on the context in which it sits. Observe that ν5of Fig. 2, which is a
fault in that context, would not be fault if the tree were rooted at ν3. This is because the
contributors are different in this scenario, which is depicted in Fig. 3. In this case the node
corresponding to ahas a 1 in an entry of the contributors, and is therefore not a fault, and
does not induce a witness. ⌟
Formally, every node νin the tree is labelled by an element α(ν) ofMA,B. We now
associate nodes ν2, . . . , ν mwith elements of MA,B, which we denote by β(ν), defined by the
following:
•Ifh= 2, let β(ν2) =α(ν1)#. This means we take stabilisation of the child’s label.
•Ifνhis a product of νh−1andν′, we let β(νh) =β(νh−1)⊗α(ν′).
•Ifνhis a product of ν′andνh−1, we let β(νh) =α(ν′)⊗β(νh−1).
•Ifνhis the idempotent product, with νh−1a middle child (that is, neither the left child
nor the right) we let β(νh) =β(νh−1)♭. This means we flatten the β-label of the child.
•Ifνhis the idempotent product, with νh−1as the left child (resp. right child), we let
β(νh) =β(νh−1)⊗α(νh−1) (resp. β(νh) =α(νh−1)⊗β(νh−1)).
Note we only associate β-labels with nodes on the path ν2, . . . , ν m, and not other nodes in
the tree.
We will observe that the β-labelling of the root, β(νm), is a tractable witness of non-
domination. First, by construction, it has the correct shape: it is constructed with a single
stabilisation at β(ν2), and subsequently only products with elements of MA,Band nested
flattening operations. Since the height of the tree is bounded by 3 |MA,B|then so to is the
number of flattening operations defining β(νm). All is left is to show that it is a witness,THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 21
which we do with the following property (in which we recall Cνare the contributors of a
node ν).
Proposition 8.1. For all h∈ {2, . . . , m }, we have β(νh)=α(νh)and if β(νh) = (p, x, q, M ),
we have x=∞andMi,j≤1for all (i, j)∈Cνh.
Observe that this immediately implies that β(νm)∈MA,Bis a witness.
Proof. We proceed by induction on hstarting from h= 2.
Case 1 (Base case, h= 2).Recall that β(ν2) =α(ν)#. Due to νbeing an idempotent
fault we can assume α(ν) takes the form ( p,1, p, M ), hence β(ν2) = ( p,∞, p, N ) where
N=M⊗M′⊗M, and M′replaces diagonal elements of Mwith their stabilisation, i.e.
M′
ℓ,ℓ= (Mℓ,ℓ)#. Since νis a fault Mℓ,ℓ= 0 for ( ℓ, ℓ)∈Cν, hence M′
ℓ,ℓ= 0. Thus for
(i, j)∈Cν2Mi,j=max ℓ,kMi,ℓ+M′
ℓ,k+Mk,j≤1. Indeed for ( ℓ, k) that could contribute
to the maximum, Mi,ℓ, Mk,j≤1 by definition, and either ℓ̸=kandM′
ℓ,k≤1, or ℓ=k,
(ℓ, k)∈Cνand hence, M′
ℓ,k= 0.
Case 2 (νhis a product) .Let us assume νhis a product of νh−1andν′. We then have
β(νh) =β(νh−1)⊗α(ν′) =β(νh−1)⊗α(ν′) =α(νh−1)⊗α(ν′) =α(νh).
By induction hypothesis, β(νh−1) = ( p,∞, r, N′) for some p, r, N′. Let us denote
α(ν′) = (r, x, q, M ) for some q, M and some finite x. Then β(νh) = (p,∞, q, N′⊗M). Let
N=N′⊗M.
Consider ( i, j)∈Cνh. We have Ni,j=max ℓN′
i,ℓ+Mℓ,j. Observe that ( i, ℓ)∈Cνh−1
whenever Mℓ,j̸=−∞ andN′
i,ℓ̸=−∞. Hence N′
i,ℓ≤1 by induction and Mℓ,j≤1 by
definition, since α(ν)∈MA,B. Hence Ni,j≤1.
The case νhis a product of some ν′andνh−1is similar.
Case 3 (νhis idempotent such that νh−1is the left-most child) .First, note that we have
α(νh) =α(νh−1) =β(νh−1)by induction, and β(νh)=β(νh−1)⊗α(νh)by definition. Hence,
β(νh)=α(νh) by idempotency. By induction hypothesis, β(νh−1) = (p,∞, p, M ), for some
p, M, soβ(νh) = (p,∞, p, M ⊗M).
Let (i, j) inCνh. Then by definition of contributors, for all ℓsuch that Mi,ℓ̸=−∞and
Mℓ,j̸=−∞, we have ( i, ℓ) inCνh−1. Hence, by induction hypothesis, for such ℓ,Mi,ℓ≤1.
We then have ( M⊗M)i,j= max ℓMi,ℓ+Mℓ,j≤1.
Case 4 (νhis idempotent such that νh−1is the right-most child) .This case is symmetric to
the previous one.
Case 5 (νhis idempotent such that νh−1is a middle child) .By idempotence, note that
α(νh) =α(νh−1). Also note that for idempotent e∈MA,Bwe have e♭=e, thus e♭=e=e.
Therefore we have β(νh) =(β(νh−1))♭=α(νh−1)♭=α(νh−1) =α(νh).
By induction hypothesis, β(νh−1) = ( p,∞, p, M ), for some M, and thus we have
β(νh) = (p,∞, p, M )♭= (p,∞, p, M♭). Let N=M♭.
Consider ( i, j)∈Cνh. We have Ni,j=max ℓ,kMi,ℓ+⟨M3⟩ℓ,k+Mk,j, where ⟨M3⟩is
the matrix M3where all the non diagonal elements are replaced by their barred version.
Observe that if ℓ̸=kthen Mi,ℓ,⟨M3⟩ℓ,k,Mk,jcannot be ∞, as each entry has been replaced
by its barred version.
Thus it remains to verify Mi,ℓ+⟨M3⟩ℓ,ℓ+Mℓ,j≤1. We show that ⟨M3⟩ℓ,ℓ≤1 for ℓsuch
thatMi,ℓ̸=−∞andMℓ,j̸=−∞. Note that M3
ℓ,ℓ≤1 if and only if Mℓ,s+Ms,t+Mt,ℓ≤122 L. DAVIAUD, D. PURSER, AND M. TCHENG
for all s, t. For any such ℓ, s, t in which all three are not −∞, the pairs ( ℓ, s),(s, t) and ( t, ℓ)
are in the set of contributors Cνh−1ofνh−1. Thus by induction all three are less than or
equal to 1 and thus M3
ℓ,ℓ≤1.
9.Presence of witness implies non big-O
In this section, we assume that there is a witness of non-domination in MA,Band we
construct a sequence of words ( wi)i∈Nsuch that for all positive integer c, there is isuch that:
[ [A] ](wi)> c·[ [B] ](wi) +c.
We will prove the following property:
Proposition 9.1. For all (p, x, q, M )inMA,B, for all s∈Nthere exists a pair (ws, xs),
withwsa word over Σ∗andxs∈Nwith the following properties:
(1)pws:xs− − − → qinAwithx=xs,
(2)MB(ws) =M,
(3)ifx=∞, for all i, jsuch that Mi,j≤1, we have xs≥s(MB(ws))i,j+s.
Note that applying this property to a witness of non-domination gives the expected
result and concludes the proof.
Proof. We prove the proposition by structural induction on MA,B. Consider an element
(p, x, q, M ) inMA,B. By definition of MA,B, (p, x, q, M ) is either a generator of MA,B
representing a letter, the product of two elements of MA,B, the stabilisation or the flattening
of an element of MA,B.
Case 1 (Base case: generator representing letters) .Consider an element ( p,y, q,MB(a)) such
thata∈Σ, pa:y− − →qinA. We associate with every sthe word ws=a. Since y <∞, there is
nothing to prove for (3).
Case 2 (Product of two elements) .Suppose ( p, x, q, M ) = ( p, y, r, N )⊗(r, z, q, P ) with
(us, ys)s∈Nand ( vs, zs)s∈Ngiven by induction.
•Ify≤1 and z≤1 (and so x≤1), we define ws=usvsandxs=ys+zs. (1) and (2) are
immediate by definition and there is nothing to prove for (3).
•Ify=z=∞, we define ws=usvsandxs=ys+zs. (1) and (2) are immediate
by definition. For (3), intuitively, since both y=z=∞we can straightforwardly
bound both ysandzsthrough their respective words. Suppose Mi,j≤1, we have
MB(ws)i,j=MB(us)i,ℓ+MB(vs)ℓ,jfor some ℓ. Note that we have Ni,ℓ≤1 and Pℓ,j≤1,
otherwise Mi,j=∞. Hence s(MB(us)i,ℓ) +s≤ysands(MB(vs)ℓ,j) +s≤ys.
s(MB(ws)i,j) +s=s(MB(us)i,ℓ+MB(vs)ℓ,j) +s
≤sMB(us)i,ℓ+s+sMB(vs)ℓ,j+s
≤ys+zs=xsas required.
•Ify=∞but not z, let Θ be the maximum value appearing in the matrix MB(v0). We
define ws=us(Θ+1) v0andxs=ys(Θ+1) +z0. (1) and (2) are immediate by definition. For
(3), we will only be able to use property (3) inductively from y=∞but not z, thus we
only use the short word v0(to ensure path compatibility) with the sufficiently larger wordTHE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 23
us(Θ+1) . Suppose Mi,j≤1, we have MB(ws)i,j=MB(us(Θ+1) )i,ℓ+MB(v0)ℓ,jfor some ℓ.
Note that we have Ni,ℓ≤1, otherwise Mi,j=∞. Hence,
s(Θ + 1)( MB(us(Θ+1) )i,ℓ) +s(Θ + 1) ≤ys(Θ+1) .
s(MB(ws)i,j) +s=s(MB(us(Θ+1) )i,ℓ+MB(v0)ℓ,j) +s
≤sMB(us(Θ+1) )i,ℓ+sΘ +s (since MB(v0)ℓ,j≤Θ)
≤s(Θ + 1) MB(us(Θ+1) )i,ℓ+s(Θ + 1)
≤ys(Θ+1)≤ys(Θ+1) +z0=xs.
•The case of z=∞but not yis symmetric.
Case 3 (Stabilisation of an element) .Suppose ( p, x, p, M ) = ( p, y, p, P )♯and ( us, ys)s∈N
given by induction.
•Ify= 0 (and hence x= 0), let ws=usandxs=ys. (1) and (2) are immediate by
definition - since P♯=MasPis path-idempotent - and there is nothing to prove for (3).
•Ify=∞(and hence x=∞), let ws=usandxs=ys. (1) and (2) are immediate by
definition. Observe that if Mi,j≤1 then Pi,j≤1, thus
s(MB(ws)i,j) +s=s(MB(us)i,j) +s≤ys=xs.
•Ify= 1 (and hence x=∞), let Θ be the maximum value appearing in the matrix
MB(u0) and recall |QB|is the number of states of B. We define ws=us(Θ|QB|+1)
0 and
xs=s0s(Θ|QB|+ 1). (1) and (2) are immediate by definition. For (3), intuitively if
Mi,j≤1, then the repetition of u0cannot access a positive cycle between iandj, hence
bounding the weight of MB(ws)i,j, while iterating u0sufficiently many times will make xs
as large as needed. Formally, if Mi,j≤1, then for all ℓsuch that Pi,ℓandPℓ,jare both
different from −∞, we have Pℓ,ℓ= 0. Hence, since Pis path-idempotent and MB(u0)=P
by induction, MB(ws)i,jhas value at most Θ |QB|. On the other hand, the weight of wsin
Afrom ptopis at least s(Θ|QB|+ 1), since y= 1. Hence,
s(MB(ws)i,j) +s≤sΘ|QB|+s≤xs.
Case 4 (Flattening of an element) .Suppose ( p, x, p, M ) = (p, y, p, P )♭and ( us, ys)s∈Ngiven
by induction.
•Ifx=y≤1 let ws=usandxs=ys. (1) and (2) are immediate by definition – since
P♭=MasPis path-idempotent – and there is nothing to prove for (3).
•Otherwise, we have x=y=∞. Let Θ sbe the maximum value appearing in the matrix
MB(us),|QB|the number of states of BandKs=|QB|Θs+ 1. We define ws= (us)Ks
andxs=Ksys. (1) and (2) are immediate by definition. We prove (3).
By induction, if Pi,j≤1 then s(MB(us)i,j) +s≤ys. Let Rs=max
i,j:Pi,j≤1MB(us)i,j. In
particular,
sRs+s≤ys. (9.1)
Consider i, jsuch that Mi,j≤1. Since Pis path-idempotent and by definition of
flattening, necessarily for all ℓsuch that both Pi,ℓandPℓ,jare different from −∞, we have
Pℓ,ℓ≤1 (⋆).24 L. DAVIAUD, D. PURSER, AND M. TCHENG
We have:
MB(ws)i,j=MB(uKss)i,j
= max
i0,i1,i2,...,iKsi0=i, iKs=jMB(us)i0,i1+MB(us)i1,i2+···+MB(us)iKs−1,iKs(9.2)
Consider the path i0, i1, . . . , i Ksthat achieves the maximum in Eq. (9.2). Since we have
Ks≥ |QB|, there exists n < m such that in=imand all elements i0, . . . , i n, im+1. . . , i Ks
are distinct. By ( ⋆), we have Pin,in≤1 and furthermore, Piℓ,iℓ+1≤1 for n≤ℓ≤m−1
since Pin,im≤1. By definition of Rs, we then have MB(us)iℓ,iℓ+1≤Rs. Hence all
components of Eq. (9.2), except those between i0, . . . , i nandim, . . . , i Ks, are bounded
above by Rs, and the remaining, of which there are at most |QB|, are bounded above by
Θs. We have:
MB(ws)i,j≤ |QB|Θs+KsRs. (9.3)
So, we have:
s(MB(ws)i,j) +s≤s(|QB|Θs+KsRs) +s (by Eq. (9.3))
=s(KsRs+|QB|Θs+ 1)
=s(KsRs+Ks) (by choice of Ks)
=Ks(sRs+s)
≤Ksys (by Eq. (9.1))
=xs.
Running Example, Part 12.We compute the sequence wsfor the nodes inducing the tractable
witness in our example:
•The leaves, labelled by aandb, induce the sequences ws=afor all s, and ws=bfor all s
respectively.
•β(ν2) is generated as the stabilisation of an element with word us=ain which y= 1
(Case 3.3), hence ws=as(Θ|QB|+1)=a5s, where Θ = max i,jMB(a)i,j= 1 and |QB|= 4.
•β(ν3) is the product of elements with us=a5sandvs=b, where y=∞, but not z, and
so we have ws=us(Θ+1) v0=a10sb, where Θ = max i,jMB(b)i,j= 1.
•β(ν4) is the product of elements with us=abandvs=a10sb, where z=∞but not y,
and so we have ws=abvs(Θ+1) =aba20sb, as Θ = max i,jMB(ab)i,j= 1.
•The tractable witness β(ν5) is the flattening of an element with us=aba20sb, where y=∞,
thus (by Case 4.2) ws=u|QB|Θ+1
s = (aba20sb)4·20s+1, where Θ = max i,jMB(us)i,j= 20s.
Hence, our witness shows that for every s,ws= (aba20sb)80s+1is a contradiction to
[ [A] ]≤s[ [B] ] +s. Apart from the additional complexity introduced by the constants, the
sequence matches our expectations from Running Example, Parts 2 and 7.
Indeed, [ [ A] ](ws) = (20 s+ 3)(80 s+ 1) = 800 s2+ 260 s+ 3 increases quadratically in s,
while [ [ B] ](ws) = 160 s+ 2, maximised by counting b’s, only increases linearly in s, and in
particular:
800s2+ 260 s+ 3> s(160s+ 2) + sfor every s∈N. ⌟THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 25
10.Max-Plus automata with increasingly complex witnesses
We have defined tractable witnesses for two max-plus automata AandBas a means to
decide whether Ais big-O of B. One of the specific characteristics of tractable witnesses is
the number of nested ♭operations appearing in the expression representing the witness. In
this section, we construct a sequence of pairs of max-plus automata ( An,Bn)n≥1withAn
not big-O of Bnsuch that (1) there is a tractable witness between AnandBnthat has n−1
nested ♭operations, but (2) there is no tractable witness with strictly less than n−1 nested
♭operations. We go even further by defining the ♯♭-height of an element of MA,B(essentially
the minimal number of nested ♯and♭operations required to produce this element from the
basic elements corresponding to the letters and product) and we prove that for AnandBn
there is no witness in MAn,Bnthat are of ♯♭-height less than n.
Recall that, for Adeterministic, we have defined MA,Bas generated by the set
XA,B={(p,x, q,MB(a))|a∈Σ, pa:x− − →qinA}
and closed under product, stabilisation and flattening operations. We now define ♯♭-
expressions, these describe how an element of MA,Bis generated from XA,B.
Definition 10.1. The set of ♯♭-expressions over XA,Bis defined by induction as the minimal
set such that:
•for all x∈XA,B,xis a♯♭-expression,
•ifsandtare♯♭-expressions, then stis a♯♭-expression,
•ifsis a♯♭-expression, then s♯is a♯♭-expression,
•ifsis a♯♭-expression, then s♭is a♯♭-expression.
We map every ♯♭-expressions over XA,Bto the element in MA,B∪ {⊥} corresponding to
doing the product, ♯and♭-operations as in the expression. Additionally, the expression will
be mapped to ⊥if a♯and♭operations are applied to elements which are not path-idempotent.
Formally, we define πthe following projection from the set of ♯♭-expressions over XA,Bto
MA,B∪ {⊥} by induction:
•ifx∈XA,B, then π(x) =x,
•ifsandtare♯♭-expressions over X, then π(st) =π(s)⊗π(t),
•ifsis a♯♭-expression over X, then π(s♯) =π(s)♯ifπ(s) is path-idempotent, and ⊥
otherwise,
•ifsis a♯♭-expression over X, then π(s♭) =π(s)♭ifπ(s) is path-idempotent, and ⊥
otherwise.
Definition 10.2. The♯♭-height of a ♯♭-expression, denoted ♯♭-height (·) is defined by induction
as follows:
•for all x∈XA,B,♯♭-height( x) = 0,
•ifsandtare♯♭-expressions, then ♯♭-height( st) = max( ♯♭-height( s), ♯♭-height( t)),
•ifsis a♯♭-expression, then ♯♭-height( s♯) = 1 + ♯♭-height( s),
•ifsis a♯♭-expression, then ♯♭-height( s♭) = 1 + ♯♭-height( s),
Definition 10.3. The♯♭-height of an element zofMA,Bis defined as
♯♭-height( z) = min {♯♭-height( s)|π(s) =z}.
Consider a tractable witness of non-domination g∈MA,B; which can be described by a
♯♭-expressions of the form
g0(g1(. . .(gk−2(gk−1(gk)#g′
k−1)♭g′
k−2)♭. . .)♭g′
1)♭g′
0.26 L. DAVIAUD, D. PURSER, AND M. TCHENG
The♯♭-height of this expression is k, which shows that the ♯♭-height of gisat most k; but
there may be another ♯♭-expression for gwith lower height. The following proposition shows
that allowing general witnesses does not help in terms of ♯♭-height and tractable witnesses
have ♯♭-height as low as can be.
Proposition 10.4. For all max-plus automata AandB(withAdeterministic), if there
exist a witness of ♯♭-height nfor some n∈Nthen there exist a tractable witness of ♯♭-height
at most n.
Proof. We will say that an element of MA,Bhas a tractable witness shape if it can be written
as:
g0(g1(. . .(gk−2(gk−1(gk)#g′
k−1)♭g′
k−2)♭. . .)♭g′
1)♭g′
0,
for some k≥0, where all the giandg′
iare products of elements in XA,B.
We prove by induction that for all elements ( p,∞, q, M ) ofMA,Bof♯♭-height n, there is
an element ( p,∞, q, M′) with a tractable witness shape and ♯♭-height at most nsuch that
M′≤M(in a component-wise meaning, where −∞<0<1<∞). Applying this to a
witness leads to the expected result.
Letzbe an element ( p,∞, q, M ) ofMA,Bof♯♭-height n.
•Ifzis inXA,B, then zhas a tractable witness shape and is of ♯♭-height n= 0.
•Ifzis equal to z1z2, then z1= (p, x1, r, M 1),z2= (r, x2, q, M 2),z1andz2have ♯♭-height
at most n,M=M1⊗M2, and one of x1orx2(or both) is equal to ∞. Let’s assume
x1=∞, the other case is similar. By induction hypothesis on z1, there is an element
z′
1= (p,∞, r, M′
1) with a tractable witness shape and ♯♭-height at most nsuch that
M′
1≤M1. We deduce that the element z′
1z2= (p,∞, q, M′
1⊗M2) has a tractable witness
shape of ♯♭-height at most nandM′
1⊗M2≤M. In this context, by z2we mean the
element of MA,Bgenerated by ♯♭-expression for z2in which the stabilisation and flattening
operations are omitted.
•Ifzis equal to z♯
1, then if z1= (p,∞, q, M 1), we can directly apply the induction hypothesis
toz1and immediately get an element satisfying the conditions (without needing to ♯it).
Ifz1= (p,1, q, M 1), then z1♯= (p,∞, q,M1♯) satisfies the condition: it has a tractable
witness shape of ♯♭-height 1, so at most nandM1♯≤M♯
1≤M.
•Ifzis equal to z♭
1, then z1= (p,∞, q, M 1) and has ♯♭-height at most n−1. We can apply
the induction hypothesis to z1. There is an element z′
1= (p,∞, q, M′
1) with a tractable
witness shape of ♯♭-height at most n−1 such that M′
1≤M1. Hence, z′
1♭= (p,∞, q, M′
1♭)
has a tractable witness shape of ♯♭-height at most nwith M′
1♭≤M1♭≤M.
Remark 10.5. Our main result, Theorem 5.4, asserts four equivalencies which are proven
in a cycle, Proposition 10.4 directly proves that (2) implies (3) in Theorem 5.4.
Theorem 10.6. There exists a sequence of pairs of max-plus automata (An,Bn)n≥1such
that for all n≥1,
(1)there exists a tractable witness in MAn,Bnof♯♭-height n,
(2)there is no witness in MAn,Bnof♯♭-height strictly less than n.
In the rest of the paper, we fix a positive integer n. We give the construction of the
max-plus automata AnandBnin Section 10.1, and prove items 1. in Section 10.2 and 2. in
Section 10.3.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 27
For the rest of the paper, Σ n={a1, a2, . . . , a n}denotes an alphabet with nletters2.
10.1. Construction of AnandBn.The max-plus automata AnandBnare both defined
on alphabet Σ n. The automaton Anis defined as the deterministic max-plus automata
which computes the length of the input word, and we denote by qits only state.
qAn:0 0a1, ..., a n: 1
The automaton Bnis defined as the maximum (disjoint union) of nmax-plus automata
Bn,1,Bn,2, . . .Bn,n. Automaton Bn,1has one state, and all other Bn,mhave 3 states each
(hence Bnhas 3 n−2 states).
q1a1: 0
Bn,1:0 0a2, ..., a n: 1
For all 1 < m≤n,Bn,m:
qm,1 qm,2 qm,3Σn\ {a1, am}: 0
0
0 00 am: 0 am: 0
am+1, ..., a n: 0
am+1, ..., a n: 0am+1, ..., a n: 0a1: 1 a1, ..., a m: 0 Σn: 0
We define Bnasmax(Bn,1,Bn,2, ...,Bn,n). By definition, the matrix associated to Bnfor
each word is a block diagonal matrix: the first block is of dimension 1 ×1 (for Bn,1), and all
other blocks are of dimension 3 ×3 (for Bn,m, 2≤m≤n). Given a word w, we will denote
byM1(w),M2(w),...Mn(w) these blocks (matrices), omitting nwhich is now fixed.
Running Example, Part 13.Note that An,Bngeneralises the running example, that is, when
n= 2,An,Bnare exactly the A,Bfrom Running Example, Part 1. ⌟
2The following construction would also work with a two letter alphabet, by decomposing each transition
intoO(log(n)) successive transitions in a standard way.28 L. DAVIAUD, D. PURSER, AND M. TCHENG
10.2. Existence of tractable witnesses of ♯♭-height n.Fori= 1, . . . , n , letaidenote
the element ( q,1, q,MBn(ai)) corresponding to the letter aiinMAn,Bn.
Proposition 10.7. The element of MAn,Bn
w= (an(an−1(. . .(a3(a2(a1)#a2)♭a3)♭. . .)♭an−1)♭an)♭
is a tractable witness of non-domination between AnandBnof♯♭-height n.
Proof. First of all, it is immediate by definition that w= (q,∞, q, M ) for some M. We are
left to prove that all the coefficients in Mcorresponding to a path from an initial state to a
final state in Bnare not ∞. These coefficients are ( M1)1,1, (Mm)1,2, (Mm)1,3, (Mm)2,2and
(Mm)2,3for 2≤m≤n.
We have M1(a1) = 0, and hence ( M1)1,1̸=∞.
For 2≤m≤nand 2 ≤i < m , we have :
Mm(a1) =
0− −
−1−
− − 0
,Mm(ai) =
0− −
−0−
− − 0
, and Mm(am) =
0 0 −
− − 0
− − 0
,
which gives (path-idempotency is satisfied at every step):
Mm(a1)♯=
0− −
− ∞ −
− − 0
and ( Mm(am−1)(...)♭Mm(am−1))♭=
0− −
− ∞ −
− − 0
.
Finally,
Mm(am)(...)♭Mm(am) =
0 0 ∞
− − 0
− − 0
and ( M(am)m(...)♭M(am)m)♭=
0 0 1
− − 0
− − 0
.
Finally, using only products and ♭operations (but no ♯operation) on matrices that do
not contain any ∞cannot create ∞. Hence,
(M(an)m(. . .(M(am)m(...)♭M(am)m)♭. . .)♭M(an)m)♭
does not contain any ∞. This is true for all 2 ≤m≤n, and thus all ( Mm)1,2, (Mm)1,3,
(Mm)2,2and ( Mm)2,3are different from ∞, giving the expected result.
Running Example, Part 14.Proposition 10.7 entails that ( eb(ea)♯eb)♭is also a witness of
non-domination for A,B. ⌟
10.3. Non-existence of witnesses of ♯♭-height strictly less than n.Using Proposi-
tions 10.4, it is enough to prove that there is no tractable witness of ♯♭-height n−1 in
MAn,Bnto obtain the expected result. Note that, if there were a tractable witness of ♯♭-height
m < n −1, then there would also exist a tractable witness of ♯♭-height n−1: for any matrix
M, (M♯)♭≤M♯then by repeatedly using the ♭operation after the (only) inner-most ♯
operation we could get a tractable witness of any height higher than m.
Proposition 10.8. There is no tractable witness of ♯♭-height n−1inMAn,Bn.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 29
Letgbe an element of MAn,Bnwith the shape of a tractable witness,
g=gn(gn−1(. . .(g2(g1)#g′
2)♭. . .)♭g′
n−1)♭g′
n,
of♯♭-height n−1, where each giandg′
iis a product (possibly empty, except for g1) of some
elements ajforiranging between 1 and n. We say that gihasajas factor if it appears in
it.
Let us first start with the intuition. In any tractable witness, g1must have a1as its
only factor, otherwise, Bn,1will keep up with Anand it cannot be a witness. By using a1in
g1, we have introduced ∞into the matrix for every Bn,m(m̸= 1) and must remove this ∞
by a sequence of flattening operations. Essentially (although not exactly), the flattening
operation removes ∞’s that are not on the diagonal. Therefore the gi, g′
i(i≥2) in the
witness must be used to take ∞’s off of the diagonal, so that flattening removes the ∞’s.
However, the Bn,mare constructed in such a way that any gi, g′
ithat removes ∞’s inBn,m
cannot also remove ∞’s in any other Bn,m′(m′̸=m), resulting in the need for at least n−1
flattening operations; one for each Bn,m. We now prove the result formally, in which we
must carefully keep track of the locations of each ∞.
Letg= (q, x, q, M ) for some xandM. We are going to prove that gcannot be a
(tractable) witness. If x̸=∞, the result is immediate. Otherwise, we denote by M(1),
M(2),...M(n)the diagonal blocks (matrices) of Mof size 1 ×1 for M(1)and 3 ×3 for
M(m),m̸= 1 corresponding to the behaviours in the automata Bn,1,Bn,2, . . .Bn,n, and by
P(m)
i, P′(m)
ithe matrices corresponding to the gi,g′
isuch that:
M(m)=P(m)
n(P(m)
n−1(. . .(P(m)
2(P(m)
1)♯P′(m)
2)♭. . .)♭P′(m)
n−1)♭P′(m)
n
Note that it is enough to prove that, either M(1)= (∞) or there exist ibetween 2 and
nsuch that one of M(m)
1,2,M(m)
2,2,M(m)
1,3orM(m)
2,3is∞.
To prove this, we use the following three lemmas, their proofs follow in the following
sections.
Lemma 10.9. Let1< m≤n. If for all 1≤i < m ,gig′
ihas only factors ajforj≤ithen:
(P(m)
m−1(. . .(P(m)
2(P(m)
1)♯P′(m)
2)♭. . .)♭P′(m)
m−1)♭
2,2=∞
Lemma 10.10. Let1< m≤n. If for all 1≤i < m ,gig′
ihas only factors ajforj≤iand
gmg′
mhas factor ajfor some j > m then:
(P(m)
n−1(. . .(P(m)
2(P(m)
1)♯P′(m)
2)♭. . .)♭P′(m)
n−1)♭
2,2=∞
Lemma 10.11. Let1< m≤n. IfPis a3×3matrix such that P2,2=∞, then the matrix
P(m)
nPP′(m)
nhas∞in one of the (1,2),(2,2),(1,3)or(2,3)entries.
Before proving these three lemmas, we show how they are used to prove that gis not a
tractable witness, entailing Proposition 10.8.
Proof of Proposition 10.8. Letzbe the smallest integer between 1 and nsuch that for all
1≤i < z ,gig′
ihas only factors ajforj≤i, and gzg′
zhas factor ajfor some j > z ; and⊥if
such an integer does not exist. We are in one of the following cases:
•z=⊥: In this case, for all 1 ≤i≤n,gig′
ihas only factors ajforj≤i. By denoting
P= (P(n)
n−1(. . .(P(n)
2(P(n)
1)♯P′(n)
2)♭. . .)♭P′(n)
n−1)♭30 L. DAVIAUD, D. PURSER, AND M. TCHENG
we have, by Lemma 10.9 (applied to m=n),
P2,2=∞
and by Lemma 10.11,
M(n)=P(n)
nPP′(n)
n
has∞in one of the (1 ,2), (2 ,2), (1 ,3) or (2 ,3) entries.
•1< z≤n: By denoting
P= (P(z)
n−1(. . .(P(z)
2(P(z)
1)♯P′(z)
2)♭. . .)♭P′(z)
n−1)♭
we have, by Lemma 10.10 (applied to m=z),
P2,2=∞
and by Lemma 10.11,
M(z)=P(z)
nPP′(z)
n
has∞in one of the (1 ,2), (2 ,2), (1 ,3) or (2 ,3) entries.
•z= 1: g1has factor ajfor some j >1, and hence M(1)= (∞).
Proof of Lemmas 10.9 and 10.11.
Proof of Lemma 10.9. The proof is by induction on m. Ifm= 2, and g1has only factors
a1then:
(P(2)
1)♯
2,2=∞
Let 2 < m≤n, and suppose that for all 1 ≤i < m ,gig′
ihas only factors ajforj≤i. By
induction, we have that
(P(m−1)
m−2(. . .(P(m−1)
2 (P(m−1)
1 )♯P′(m−1)
2 )♭. . .)♭P′(m−1)
m−2)♭
2,2=∞
SinceBn,m−1andBn,mare identical when restricted to letters a1, . . . , a m−2, then:
(P(m)
m−2(. . .(P(m)
2(P(m)
1)♯P′(m)
2)♭. . .)♭P′(m)
m−2)♭
2,2=∞
Finally, since gm−1g′
m−1has only factors ajforj≤m−1:
(P(m)
m−1(. . .(P(m)
2(P(m)
1)♯P′(m)
2)♭. . .)♭P′(m)
m−1)♭
2,2=∞
Proof of Lemma 10.11. Ifgnhas factor am, then ( P(m)
n)1,2̸=−∞, otherwise ( P(m)
n)2,2̸=
−∞.
Ifg′
ndoes not have factor am, or has at least one factor amthat is later followed by a
factor ajforj > m , then ( P(m)
n)2,2̸=−∞, otherwise, if no factor amis later followed by a
factor ajforj > m , (P(m)
n)2,3̸=−∞.
In all the cases, the matrix P(m)
nPP′(m)
nhas∞in one of the (1 ,2), (2 ,2), (1 ,3) or (2 ,3)
entries.THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 31
Proof of Lemma 10.10. Given a word w, we define P(m)
was the 3 ×3 matrix of the
behaviour of the automaton Bn,mon the word w. We extend this definition to ♯♭-expressions
on Σ n:
•Ifwis a word, then P(m)
wis defined above.
•Ifw=w1w2then P(m)
w=P(m)
w1P(m)
w2.
•Ifw=u♯thenP(m)
w= (P(m)
u)♯provided P(m)
uis path-idempotent, otherwise it is undefined.
•Ifw=u♭thenP(m)
w= (P(m)
u)♭provided P(m)
uis path-idempotent, otherwise it is undefined.
Essentially, if π(w) = (q, x, q, M ), then P(m)
wis the restriction of Mto matrix for Bn,m.
We say that a 3 ×3 matrix Psatisfies condition (C) if the four following conditions are
satisfied:
C1 : P2,1̸=−∞,
C2 : P3,1̸=−∞,
C3 : P3,2̸=−∞,
C4 : P2,2=∞.
Lemma 10.12. Letvandwbe two words and ua♯♭-expression on Σnsuch that (P(m)
u)is de-
fined, (P(m)
u)2,2=∞andvwhas a letter ajfor some j > m as factor. Then (P(m)
vP(m)
uP(m)
w)♭
satisfies (C).
Lemma 10.13. Letvandwbe two words and ua♯♭-expression on Σnsuch that (P(m)
u)is
defined and satisfies (C) then (P(m)
vP(m)
uP(m)
w)♭satisfies (C).
Let us first show how we can use Lemmas 10.12 and 10.13 to conclude the proof. We
prove by induction that for all m≤k < n ,
(P(m)
k(. . .(P(m)
2(P(m)
1)♯P′(m)
2)♭. . .)♭P′(m)
k)♭
satisfies (C). If so, by applying it to k=nand considering (C4), this concludes the proof.
The base case ( k=m) is given by Lemma 10.12 applied to
P(m)
u= (P(m)
m−1(. . .(P(m)
2(P(m)
1)♯P′(m)
2)♭. . .)♭P′(m)
m−1)♭
P(m)
v=P(m)
mandP(m)
w=P′(m)
m. (P(m)
u)2,2=∞by Lemma 10.9.
The induction case is given by Lemma 10.13.
Proof of Lemmas 10.12 and 10.13. First note the following properties:
Property 1: for all ♯♭-expressions w, (P(m)
w)1,1̸=−∞.
Property 2: for all ♯♭-expressions w, one (or both) of ( P(m)
w)2,2or (P(m)
w)2,3is not −∞.
Property 3: for all ♯♭-expressions w, one (or both) of ( P(m)
w)3,2or (P(m)
w)3,3is not −∞.
Property 4: for all words wthat has a letter ajfor some j > m as factor, ( P(m)
w)2,1and
(P(m)
w)3,1are not −∞.
Property 5: for all words wthat has a letter ajfor some j > m as factor, ( P(m)
w)2,2and
(P(m)
w)3,2are not −∞. (For entry (2 ,2): Given a word wwith a letter ajfor some
j > m as factor, (1) if wdoes not have letter amas factor then there is a path looping
around qm,2onw, (2) if whas a letter amand all letters amare followed later in the
word by a letter aℓfor some ℓ > m then loop around qm,2until reading a am, then
go to qm,3, loop around qm,3until seeing a letter aℓfor some ℓ > m and go back to32 L. DAVIAUD, D. PURSER, AND M. TCHENG
qm,2. Repeat, (3) if whas a letter amand some are not followed later by a letter aℓ
for some ℓ > m , then stay in qm,2or go to qm,3as long as no aℓfor some ℓ > m is
seen. When the first one is read, go to qm,1and on the very last amgo back to qm,2.
For entry (3 ,2): Given a word wwith a letter ajfor some j > m as factor, (1) if w
does not have letter amas factor then go to qm,2when reading the first ajand loop in
qm,2on the rest of the word, (2) if whas a letter amand all letters amare followed
later in the word by a letter aℓfor some ℓ > m then loop around qm,3until reading aℓ
for some ℓ > m and go to qm,2, loop around qm,2until seeing a am, then go to qm,3,
loop around qm,3until seeing a letter aℓfor some ℓ > m and go back to qm,2. Repeat,
(3) if whas a letter amand some are not followed later by a letter aℓfor some ℓ > m ,
then stay in qm,3or go to qm,2as long as no aℓfor some ℓ > m is seen. When the first
one is read, go to qm,1and on the very last amgo back to qm,2. )
Property 6: for all ♯♭-expressions w, one (or both) of ( P(m)
w)1,2or (P(m)
w)2,2is not −∞.
Proof of Lemma 10.12. By path-idempotency, for (C1), (C2) and (C3), it is sufficient to
prove that P(m)
vP(m)
uP(m)
wsatisfies (C1), (C2) and (C3).
C1 ( P2,1̸=−∞):Ifvhas factor ajfor some j > m , then ( P(m)
v)2,1is not −∞(Property
4). Additionally, ( P(m)
u)1,1and ( P(m)
w)1,1are not −∞(Property 1).
Ifwhas factor ajfor some j > m , then neither ( P(m)
w)2,1or (P(m)
w)3,1is−∞(Property
4). Additionally, P(m)
vP(m)
u=P(m)
vuand one of ( P(m)
vu)2,2or (P(m)
vu)2,3is not −∞
(Property 2).
In all cases, ( P(m)
vP(m)
uP(m)
w)2,1is not −∞.
C2 ( P3,1̸=−∞):Ifvhas factor ajfor some j > m , then ( P(m)
v)3,1is not −∞(Property
4). Additionally, ( P(m)
u)1,1and ( P(m)
w)1,1are not −∞(Property 1).
Ifwhas factor ajfor some j > m , then neither ( P(m)
w)2,1or (P(m)
w)3,1is−∞(Property
4). Additionally, P(m)
vP(m)
u=P(m)
vuand one of ( P(m)
vu)3,2or (P(m)
vu)3,3is not −∞
(Property 3).
In all cases, ( P(m)
vP(m)
uP(m)
w)3,1is not −∞.
C3 ( P3,2̸=−∞):Ifwhas factor ajfor some j > m , then both ( P(m)
w)2,2and ( P(m)
w)3,2
are not −∞(Property 5). Additionally, P(m)
vP(m)
u=P(m)
vuand one of ( P(m)
vu)3,2or
(P(m)
vu)3,3is not −∞(Property 3).
Ifvhas factor ajfor some j > m , then both ( P(m)
w)3,1and ( P(m)
w)3,2are not −∞
(Properties 4 and 5). Additionally, P(m)
uP(m)
w=P(m)
uwand one of ( P(m)
uw)1,2or (P(m)
uw)2,2
is not −∞(Property 6).
In all cases, ( P(m)
vP(m)
uP(m)
w)3,2is not −∞.
C4 ( P2,2=∞):We need to prove that:
P(m)
vP(m)
uP(m)
w⟨(P(m)
vP(m)
uP(m)
w)3⟩P(m)
vP(m)
uP(m)
w
satisfies (C4). First, ( P(m)
vP(m)
uP(m)
w)2,2is not −∞ since vuw has a factor ajfor
some j > m (Property 5). Hence, it remains to prove that (( P(m)
vP(m)
uP(m)
w)3)2,2is
∞. We have one of ( P(m)
vP(m)
u)2,2or (P(m)
vP(m)
u)2,3is not −∞(Property 2). Then
both ( P(m)
wP(m)
v)2,2and ( P(m)
wP(m)
v)3,2are not −∞ (Property 5). By hypothesis,THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 33
we have ( P(m)
u)2,2=∞. And finally, ( P(m)
wvuw)2,2is not −∞ (Property 5). Hence,
⟨(P(m)
vP(m)
uP(m)
w)3⟩2,2=∞.
Proof of Lemma 10.13. By path-idempotency, for (C1), (C2) and (C3), it is sufficient to
prove that P(m)
vP(m)
uP(m)
wsatisfies (C1), (C2) and (C3).
C1 ( P2,1̸=−∞):One of ( P(m)
v)2,2or (P(m)
v)2,3is not −∞ (Property 2). Additionally,
(P(m)
u)2,1and ( P(m)
u)3,1are not −∞ by (C1) and (C2), and ( P(m)
w)1,1is not −∞
(Property 1). Hence ( P(m)
vP(m)
uP(m)
w)2,1is not −∞.
C2 ( P3,1̸=−∞):One of ( P(m)
v)3,2or (P(m)
v)3,3is not −∞ (Property 3). Additionally,
(P(m)
u)2,1and ( P(m)
u)3,1are not −∞ by (C1) and (C2), and ( P(m)
w)1,1is not −∞
(Property 1). Hence ( P(m)
vP(m)
uP(m)
w)2,1is not −∞.
C3 ( P3,2̸=−∞):One of ( P(m)
v)3,2or (P(m)
v)3,3is not −∞ (Property 3). Additionally,
(P(m)
u)2,1, (P(m)
u)2,2, (P(m)
u)3,1and ( P(m)
u)3,2are not −∞ by (C). Finally, one of
(P(m)
w)1,2or (P(m)
w)2,2is not −∞(Property 6). Hence, overall, ( P(m)
vP(m)
uP(m)
w)3,2is
not−∞.
C4 ( P2,2=∞):We need to prove that:
P(m)
vP(m)
uP(m)
w⟨(P(m)
vP(m)
uP(m)
w)3⟩P(m)
vP(m)
uP(m)
w
satisfies (C4). First, let’s remark that for all words xandy, (P(m)
xP(m)
uP(m)
y)2,2
is not −∞. Indeed, one of ( P(m)
x)2,2or (P(m)
x)2,3is not −∞ (Property 2). Sim-
ilarly, one of ( P(m)
y)1,2or (P(m)
x)2,2is not −∞ (Property 6). And additionally,
all of ( P(m)
u)2,1, (P(m)
u)2,2, (P(m)
u)2,1, (P(m)
u)3,2are not −∞(condition (C)). Hence,
(P(m)
xP(m)
uP(m)
y)2,2is not−∞. That gives that: ( P(m)
vP(m)
uP(m)
w)2,2is not−∞, leaving
us to prove that (( P(m)
vP(m)
uP(m)
w)3)2,2is∞. Still using the remark, we have that both
(P(m)
vP(m)
uP(m)
wv)2,2and ( P(m)
wvP(m)
uP(m)
w)2,2are not −∞, which concludes the proof,
using finally the hypothesis that ( P(m)
u)2,2=∞.
11.Conclusion
In this paper, we develop new techniques – in particular a new flattening operation – to
describe the behaviour of max-plus automata. It would be interesting to see if such insight
can be applied to other problems, particularly for min-plus automata. We also construct a
series of examples of max-plus automata requiring tractable witnesses with an increasing
number of nested flattening operations3.
3We thank Isma¨ el Jecker for interesting discussions on this.34 L. DAVIAUD, D. PURSER, AND M. TCHENG
References
[ABK11] Shaull Almagor, Udi Boker, and Orna Kupferman. What’s decidable about weighted automata?
In Tevfik Bultan and Pao-Ann Hsiung, editors, Automated Technology for Verification and
Analysis, 9th International Symposium, ATVA 2011 , volume 6996 of Lecture Notes in Computer
Science , pages 482–491. Springer, 2011. doi:10.1007/978-3-642-24372-1_37 .
[ABK22] Shaull Almagor, Udi Boker, and Orna Kupferman. What’s decidable about weighted automata?
Inf. Comput. , 282:104651, 2022. Journal version of [ABK11]. doi:10.1016/j.ic.2020.104651 .
[CD13] Thomas Colcombet and Laure Daviaud. Approximate comparison of distance automata. In 30th
International Symposium on Theoretical Aspects of Computer Science, STACS 2013 , volume 20 of
LIPIcs , pages 574–585. Schloss Dagstuhl - Leibniz-Zentrum f¨ ur Informatik, 2013. doi:10.4230/
LIPIcs.STACS.2013.574 .
[CDH10] Krishnendu Chatterjee, Laurent Doyen, and Thomas A. Henzinger. Quantitative languages. ACM
Trans. Comput. Log. , 11(4):23:1–23:38, 2010. doi:10.1145/1805950.1805953 .
[CDZ14] Thomas Colcombet, Laure Daviaud, and Florian Zuleger. Size-change abstraction and max-
plus automata. In Mathematical Foundations of Computer Science 2014 - 39th International
Symposium, MFCS 2014 , volume 8634 of Lecture Notes in Computer Science , pages 208–219.
Springer, 2014. doi:10.1007/978-3-662-44522-8_18 .
[CKMP20] Dmitry Chistikov, Stefan Kiefer, Andrzej S. Murawski, and David Purser. The big-O problem for
labelled markov chains and weighted automata. In 31st International Conference on Concurrency
Theory, CONCUR 2020 , volume 171 of LIPIcs , pages 41:1–41:19. Schloss Dagstuhl - Leibniz-
Zentrum f¨ ur Informatik, 2020. Conference version of [ CKMP22 ].doi:10.4230/LIPIcs.CONCUR.
2020.41 .
[CKMP22] Dmitry Chistikov, Stefan Kiefer, Andrzej S. Murawski, and David Purser. The big-O problem.
Log. Methods Comput. Sci. , 18(1), 2022. Journal version of [ CKMP20 ].doi:10.46298/lmcs-18(1:
40)2022 .
[CLM+22]Wojciech Czerwinski, Engel Lefaucheux, Filip Mazowiecki, David Purser, and Markus A. White-
land. The boundedness and zero isolation problems for weighted automata over nonnegative
rationals. In LICS ’22: 37th Annual ACM/IEEE Symposium on Logic in Computer Science,
Haifa, Israel, August 2 - 5, 2022 , pages 15:1–15:13. ACM, 2022. doi:10.1145/3531130.3533336 .
[Col07] Thomas Colcombet. Factorisation forests for infinite words. In Fundamentals of Computation
Theory, 16th International Symposium, FCT 2007 , volume 4639 of Lecture Notes in Computer
Science , pages 226–237. Springer, 2007. doi:10.1007/978-3-540-74240-1_20 .
[Col09] Thomas Colcombet. The theory of stabilisation monoids and regular cost functions. In Susanne
Albers, Alberto Marchetti-Spaccamela, Yossi Matias, Sotiris E. Nikoletseas, and Wolfgang Thomas,
editors, Automata, Languages and Programming, 36th Internatilonal Colloquium, ICALP 2009,
Rhodes, Greece, July 5-12, 2009, Proceedings, Part II , volume 5556 of Lecture Notes in Computer
Science , pages 139–150. Springer, 2009. doi:10.1007/978-3-642-02930-1_12 .
[DJL+21] Laure Daviaud, Marcin Jurdzinski, Ranko Lazic, Filip Mazowiecki, Guillermo A. P´ erez, and
James Worrell. When are emptiness and containment decidable for probabilistic automata? J.
Comput. Syst. Sci. , 119:78–96, 2021. doi:10.1016/j.jcss.2021.01.006 .
[DP23] Laure Daviaud and David Purser. The big-o problem for max-plus automata is decidable
(PSPACE-complete). In LICS , pages 1–13, 2023. doi:10.1109/LICS56636.2023.10175798 .
[FGKO15] Nathana¨ el Fijalkow, Hugo Gimbert, Edon Kelmendi, and Youssouf Oualhadj. Deciding the
value 1 problem for probabilistic leaktight automata. Log. Methods Comput. Sci. , 11(2), 2015.
doi:10.2168/LMCS-11(2:12)2015 .
[Has91] Kosaburo Hashiguchi. Algorithms for determining relative inclusion star height and inclusion
star height. Theor. Comput. Sci. , 91(1):85–100, 1991. doi:10.1016/0304-3975(91)90269-8 .
[KL09] Daniel Kirsten and Sylvain Lombardy. Deciding unambiguity and sequentiality of polynomially
ambiguous min-plus automata. In Susanne Albers and Jean-Yves Marion, editors, 26th Interna-
tional Symposium on Theoretical Aspects of Computer Science, STACS 2009, February 26-28,
2009, Freiburg, Germany, Proceedings , volume 3 of LIPIcs , pages 589–600. Schloss Dagstuhl -
Leibniz-Zentrum f¨ ur Informatik, Germany, 2009. doi:10.4230/LIPIcs.STACS.2009.1850 .
[KMO+13]Stefan Kiefer, Andrzej S. Murawski, Jo¨ el Ouaknine, Bj¨ orn Wachter, and James Worrell. On the
complexity of equivalence and minimisation for Q-weighted automata. Log. Methods Comput.
Sci., 9(1), 2013. doi:10.2168/LMCS-9(1:8)2013 .THE BIG-O PROBLEM FOR MAX-PLUS AUTOMATA IS DECIDABLE (PSPACE-COMPLETE) 35
[Kro94] Daniel Krob. The equality problem for rational series with multiplicities in the tropical semiring
is undecidable. Int. J. Algebra Comput. , 4(3):405–426, 1994. doi:10.1142/S0218196794000063 .
[Kuf08] Manfred Kufleitner. The height of factorization forests. In Edward Ochmanski and Jerzy
Tyszkiewicz, editors, Mathematical Foundations of Computer Science 2008, 33rd Interna-
tional Symposium, MFCS 2008 , volume 5162, pages 443–454. Springer, 2008. doi:10.1007/
978-3-540-85238-4_36 .
[Leu88] Hing Leung. On the topological structure of a finitely generated semigroup of matrices. In
Semigroup Forum , volume 37, pages 273–287. Springer, 1988. doi:10.1007/BF02573140 .
[MPR02] Mehryar Mohri, Fernando Pereira, and Michael Riley. Weighted finite-state transducers in speech
recognition. Comput. Speech Lang. , 16(1):69–88, 2002. doi:10.1006/csla.2001.0184 .
[MS72] Albert R. Meyer and Larry J. Stockmeyer. The equivalence problem for regular expressions with
squaring requires exponential space. In 13th Annual Symposium on Switching and Automata
Theory, College Park, Maryland, USA, October 25-27, 1972 , pages 125–129. IEEE Computer
Society, 1972. doi:10.1109/SWAT.1972.29 .
[Paz14] Azaria Paz. Introduction to probabilistic automata . Academic Press, 2014. doi:10.1016/
C2013-0-11297-4 .
[Sch61] Marcel Paul Sch¨ utzenberger. On the definition of a family of automata. Inf. Control. , 4(2-3):245–
270, 1961. doi:10.1016/S0019-9958(61)80020-X .
[Sim90] Imre Simon. Factorization forests of finite height. Theor. Comput. Sci. , 72(1):65–94, 1990.
doi:10.1016/0304-3975(90)90047-L .
[Sim94] Imre Simon. On semigroups of matrices over the tropical semiring. RAIRO Theor. Informatics
Appl. , 28(3-4):277–294, 1994. doi:10.1051/ita/1994283-402771 .
[SM73] Larry J. Stockmeyer and Albert R. Meyer. Word problems requiring exponential time: Preliminary
report. In Proceedings of the 5th Annual ACM Symposium on Theory of Computing, 1973 , pages
1–9. ACM, 1973. doi:10.1145/800125.804029 .
[Var85] Moshe Y. Vardi. Automatic verification of probabilistic concurrent finite-state programs. In 26th
Annual Symposium on Foundations of Computer Science, Portland, Oregon, USA, 21-23 October
1985, pages 327–338. IEEE Computer Society, 1985. doi:10.1109/SFCS.1985.12 .
This work is licensed under the Creative Commons Attribution License. To view a copy of this
license, visit https://creativecommons.org/licenses/by/4.0/ or send a letter to Creative
Commons, 171 Second St, Suite 300, San Francisco, CA 94105, USA, or Eisenacher Strasse 2,
10777 Berlin, Germany