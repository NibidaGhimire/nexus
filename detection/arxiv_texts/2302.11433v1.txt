Lower Bounds for Intersection Reporting among
Flat Objects
Peyman Afshani /envelope
Aarhus University, Aarhus, Denmark
Pingan Cheng /envelope
Aarhus University, Aarhus, Denmark
Abstract
Recently, Ezra and Sharir [ 20] showed an O(n3/2+σ)space and O(n1/2+σ)query time data
structure for ray shooting among triangles in R3. This improves the upper bound given by the
classical S(n)Q(n)4=O(n4+σ)space-time tradeoﬀ for the ﬁrst time in almost 25 years and in
fact lies on the tradeoﬀ curve of S(n)Q(n)3=O(n3+σ). However, it seems diﬃcult to apply their
techniques beyond this speciﬁc space and time combination. This pheonomenon appears persistently
in almost all recent advances of ﬂat object intersection searching, e.g., line-tetrahedron intersection
inR4[19], triangle-triangle intersection in R4[19], or even among ﬂat semialgebraic objects [5].
We give a timely explanation to this phenomenon from a lower bound perspective. We prove
that given a setSof(d−1)-dimensional simplicies in Rd, any data structure that can report all
intersections with small ( no(1)) query time must use Ω(n2(d−1)−o(1))space. This dashes the hope
of any signiﬁcant improvement to the tradeoﬀ curves for small query time and almost matches
the classical upper bound. We also obtain an almost matching space lower bound of Ω(n6−o(1))
for triangle-triangle intersection reporting in R4when the query time is small. Along the way, we
further develop the previous lower bound techniques by Afshani and Cheng [2, 3].
2012 ACM Subject Classiﬁcation Theory of Computation →Randomness, geometry and discrete
structures→Computational geometry
Keywords and phrases Computational Geometry, Intersection Searching, Data Structure Lower
Bounds
Digital Object Identiﬁer 10.4230/LIPIcs...
Funding Supported by DFF (Det Frie Forskningsråd) of Danish Council for Independent Research
under grant ID DFF −7014−00404.
1 Introduction
Given a setSof triangles in R3, how to preprocess Ssuch that given any query ray γ, we can
eﬃciently determine the ﬁrst triangle intersecting γor report no such triangle exists? This
problem, known as ray shooting, is one of the most important problems in computational
geometry with countless papers published over the last three decades [ 26,8,25,27,18,10,
29,30,11,17,20,5]. For a comprehensive overview of this problem, we refer the readers to
an excellent recent survey [28].
Recently, there have been considerable and signiﬁcant advances on ray shooting and a
numberofproblemsrelatedtointersectionsearchingontheupperboundside. Wecomplement
these attempts by giving a lower bound for a number of intersection searching problems;
these also settle a recent open question asked by Ezra and Sharir [20].
1.1 Background and Previous Results
In geometric intersection searching, the input is a set Sof geometric objects and the goal is
to preprocessSinto a data structure such that given a geometric object γat the query time,
©Peyman Afshani and Pingan Cheng;
licensed under Creative Commons License CC-BY 4.0
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, GermanyarXiv:2302.11433v1  [cs.CG]  22 Feb 2023XX:2 Lower Bounds for Intersection Reporting among Flat Objects
one can ﬁnd all the objects in Sthat intersect γ. In the reporting variant of such a query,
the output should be the list of all the intersecting objects in S. Intersection searching is a
generalization of range searching, a fundamental and core area of computational geometry [ 4].
This captures many natural classic problems e.g., simplex range reporting where the inputs
are points ( 0-ﬂats) and the queries are simplices (subsets of d-ﬂats), ray shooting reporting
among triangles in R3where the inputs are triangles (subsets of 2-ﬂats) and the queries are
rays (subsets of 1-ﬂats) and so on. See [4, 28] for more information.
Without going too much in-depth, it suﬃces to say that by now, the simplex range
searching problem is more or less well-understood. There are classical solutions that oﬀer the
space and query time trade-oﬀ of S(n)Qd(n) =˜O(nd)whereS(n)andQ(n)are the space
and query time of the data structure [ 15,23,12] and there are a number of almost matching
lower bounds that show these are essentially tight [1, 13, 16].
However, intersection searching in higher dimensions is less well-understood. The classical
technique is to lift the problem to the parametric space of the input or the query, reducing the
problem to semialgebraic range searching, a generalized version of simplex range searching,
where queries are semialgebraic sets of constant description complexity. In mid-1990s,
semialgebraic range searching could only be solved eﬃciently in four and lower dimensions by
classical tools developed for simplex range searching [ 7], resulting in a space-time trade-oﬀ
bound ofS(n)Q(n)4=O(n4+σ)for line-triangle intersection searching in R3, whereσ>0
can be any small constant.
Recently, using polynomial techniques [ 22,21], several major advances have been made
on semialgebraic range reporting. For example, near optimal small linear space and fast
query data structure were developed [ 9,24,6]. These almost match the newly discovered
lower bound bounds [ 2,3]. However, these polynomial techniques also have led to signiﬁcant
advances in intersection searching. For ray-triangle intersection reporting in R3, Ezra and
Sharir [20] showed that using algebraic techniques, it is possible to build a data structure of
spaceS(n) =O(n3/2+σ)and query time Q(n) =O(n1/2+σ)for ray shooting among triangles.
The signiﬁcance of this result is that it improves the upper bound given by the trade-oﬀ
curve ofS(n)Q(n)4=O(n4+σ)for the ﬁrst time in almost 25 years and in fact it lies on the
trade-oﬀ curve of S(n)Q(n)3=O(n3+σ). This leads to the following very interesting question
asked by Ezra and Sharir. To quote them directly: “There are several open questions that our
work raises. First, can we improve our trade-oﬀ for all values of storage, beyond the special
values ofO(n3/2+ε)storage and O(n1/2+ε)query time? Ideally, can we obtain query time of
O(n1+ε/s1/3), withsstorage, as in the case of ray shooting amid planes? Alternatively, can
one establish a lower-bound argument that shows the limitations of our technique?”
Inspired by [20], additional results for ﬂat intersection searching were discovered during
the last two years, e.g., triangle-triangle intersection searching in R4[19], line-tetrahedron
intersection searching in R4[19], curve-disk intersection searching in R3[5], and even more
general semialgebraic ﬂat intersection searching [ 5]. Similar to the result in [ 20], the improved
results are only observed for a special space-time combination and the improvement to the
entire trade-oﬀ curve is limited. This once again raises the question of whether it is possible
to obtain the trade-oﬀ curve of S(n)Q(n)d=O(nd+σ)for intersection searching in Rd.
1.2 Our Results
We give a negative answer to this question. We show that answering intersection searching
queries in polylogarithmic time when the queries are lines in Rdand input objects are subsetsP. Afshani and P. Cheng XX:3
of(d−1)-ﬂats (that we call hyperslabs) requireso
Ω(n2(d−1))space1. Our lower bound in fact
applies to “thin” (d−1)-dimensional slabs (e.g., in 3D, that would be the intersection of
the region between two parallel hyperplanes with another hyperplane). This almost matches
the current upper bound for the problem and shows that the improvement in [ 20] cannot
signiﬁcantly improve the trade-oﬀ curve when the query time is small. To be speciﬁc, we
obtain a lower bound of
S(n) =o
Ω/parenleftbiggn2(d−1)
Q(n)4(3d−1)(d−1)−1/parenrightbigg
for line-hyperslab intersection reporting in Rdand a lower bound of
S(n) =o
Ω/parenleftbiggn6
Q(n)125/parenrightbigg
for triangle-triangle intersection reporting in R4. Here,S(n)andQ(n)are the space and
query time of the data structure. Similar to the other semialgebraic range reporting lower
bounds [2,3], these lower bounds have a much larger exponent on Q(n)than onnwhich does
allow for substantial improvements when Q(n)is no longer too small; we have not opted for
optimizing the exponent of Q(n)in our bounds and using tighter arguments, these exponents
can be improved but they cannot match the exponent of n.
We believe our results are timely as ﬂat intersection searching is a hotly investigated ﬁeld
recently, and as mentioned, with many open questions that need to be answered from a lower
bound point of view.
1.3 Technical Contributions
From a technical point of view, our results require going beyond the previous attempts [ 2,3].
To elaborate, the previous general technique assumed a particular form for the polynomials
involved in deﬁning the query semialgebraic ranges, namely, of the form X1=X∆
2+
P(X1,···,Xd)where the coeﬃcients of Phad to be independent and thus could be set
arbitrarily small. Unfortunately, the problems in intersection searching cannot ﬁt this
framework and there seems to be no easy ﬁx for the following reason. The previous technique
relies heavily on the fact that if the coeﬃcients of Pis small enough, then one can approximate
X1withX∆
2and for the technique to work both conditions must hold (i.e., small coeﬃcients
forPand having degree ∆onX2).
Generally speaking, the previous techniques do not say anything about problems in which
the polynomials involved have a speciﬁc form; the only exception is the lower bound for
annuli [2] where speciﬁc approaches had to be created that could only be applied to the
speciﬁc algebraic form of circles.
Theissueisveryprominentinintersectionsearchingwherewearedealingwithpolynomials
where the coeﬃcients of the monomials are no longer independent and the polynomials
involved have speciﬁc forms; for instance, the coeﬃcient of X∆
2is zero. We introduce
techniques that allows us circumvent these limitations and obtain lower bounds for some
broader class of problems that involve polynomials with some speciﬁc forms.
1In this paper,o
Ω(·),o
Θ(·),o
O(·)hides no(1)factors; ˜Ω(·),˜Θ(·),˜O(·)hides logO(1)nfactors.XX:4 Lower Bounds for Intersection Reporting among Flat Objects
2 Preliminaries
2.1 The Geometric Range Reporting Lower Bound Framework in the
Pointer Machine
We use the pointer machine lower bound framework that was also used in the latest proofs [ 3].
This is a streamlined version of the one originally proposed by Chazelle [ 14] and Chazelle
and Rosenberg [ 16]. In the pointer machine model, the memory is represented as a directed
graph where each node stores one point as well as two pointers pointing to two other nodes
in the graph. Given a query, the algorithms starts from a special “root” node, and then
explores a subgraph which contains all the input points to report. The size of the directed
graph is then a lower bound for the space usage and then minimum subgraph needed to
explore to answer any query is a lower bound for the query time.
Intuitively, to answer a range reporting query eﬃciently, we need to store the output
points to the query close to each other. If the answer to any query contains many points and
two queries share very few points in common, many points must be stored multiple times,
leading to a big space usage.
The streamlined version of the framework is the following [3].
ITheorem 1. Suppose ad-dimensional geometric range reporting problem admits an S(n)
space andQ(n) +O(k)query time data structure, where nis the input size and kis the
output size. Let Vol(·)denote the d-dimensional Lebesgue measure. Assume we can ﬁnd
m=nc, for a positive constant c, ranges R1,R2,···,Rmin ad-dimensional hyperrectangle
Rsuch that
1.∀i= 1,2,···,m,Vol(Ri∩R)≥4cVol(R)Q(n)/n;
2.Vol(Ri∩Rj) =O(Vol(R)/(n2√
logn))for alli/negationslash=j.
Then, we have S(n) =o
Ω(mQ(n)).
2.2 Notations and Deﬁnitions for Polynomials
In this paper, we only consider polynomials on the reals. Let P(X1,···,Xd)be a polynomial
ondindeterminates of degree ∆. Sometimes we will use the notation Xto denote the set
ofdinterminates X1,···,Xdand so we can write PasP(X). We denote by Id,∆a set of
d-tuples of non-negative integers (i1,···,id)whose sum is at most ∆. We might omit the
subscriptsdand∆if they are clear from the context. For an i∈I, we use the notation Xi
to represent the monomial Πd
j=1Xij
jwhere i= (i1,···,id). Thus, given real coeﬃcients Ai,
fori∈I, we can write Pas/summationtext
i∈IAiXi.
2.3 Geometric Lemmas
We introduce and generalize some geometric lemmas about the intersection of polynomials
used in [ 2]. We ﬁrst generalize the core Lemma in [ 2] for univariate polynomials, using a
proof similar to [3]. We refer the readers to Appendix A for details.
ILemma 2. LetP(x) =/summationtext∆
i=0aixiandQ(x) =/summationtext∆
i=0bixibe two univariate (constant)
degree- ∆polynomials in R[x]and|ai−bi|≥ηfor some 0≤i≤∆.
Suppose there is an interval Iofxsuch that for every x0∈Iwe have|P(x0)−Q(x0)|≤
w, then the length of Iis upper bounded by O((w/η)1/U), whereU=/parenleftbig∆+1
2/parenrightbig
and theO(·)
notation hides constant factors that depend on ∆.
Using Lemma 2, we can show the following; See Appendix B for details.P. Afshani and P. Cheng XX:5
ILemma 3. LetP1(X) =/summationtext
i∈Id,∆AiXiandP2(X) =/summationtext
i∈Id,∆BiXibe twod-variate
degree- ∆polynomials in R[X]and|Ai−Bi|≥ηdfor some i∈Id,∆.
Suppose for each assignment Xd∈IdtoP1,P2, where Idis an interval for Xd, all the
coeﬃcients of the resulting (d−1)-variate polynomial Q1(X1,···Xd−1)andQ2(X1,···Xd−1)
diﬀer by at most ηd−1, then|Id|=O((ηd−1/ηd)1/U).
We can use Lemma 3 d−2times, and obtain the following corollary.
ICorollary 4. LetP1(X) =/summationtext
i∈Id,∆AiXiandP2(X) =/summationtext
i∈Id,∆BiXibe twod-variate
degree- ∆polynomials in R[X]and|Ai−Bi|≥ηdfor some i∈Id,∆ford≥3.
Suppose for each assignment Xi∈IitoP1,P2, where Iiis an interval for Xi, for
i= 3,4,···,d, all the coeﬃcients of the resulting bivariate polynomial Q1(X1,X2)and
Q2(X1,X2)diﬀer by at most η2, then|Ii|=O((ηi−1/ηi)1/U)for alli= 3,4,···,d.
To get the ﬁnal corollary, we would like the set each ηisuch that the length of all each
interval Iiis bounded by some parameter ϑfori= 3,···,d. We thus set ηd−i=ηd−i+1ϑU.
ICorollary 5. LetP1(X) =/summationtext
i∈Id,∆AiXiandP2(X) =/summationtext
i∈Id,∆BiXibe twod-variate
degree- ∆polynomials in R[X]and|Ai−Bi|≥ηdfor some i∈Id,∆ford≥3.
Suppose for each assignment Xi∈IitoP1,P2, where Iiis an interval for Xi, for
i= 3,4,···,d, all the coeﬃcients of the resulting bivariate polynomial Q1(X1,X2)and
Q2(X1,X2)diﬀer by at most ηdϑU(d−2), then|Ii|=O(ϑ)for alli= 3,4,···,d.
2.4 Algebra Preliminaries
In this section, we review some tools from algebra. The ﬁrst tool we will use is the linearity
of determinants from linear algebra.
ITheorem 6 (Linearity of Determinants) .LetA=/bracketleftbig
a1···an/bracketrightbig
be ann×nmatrix where
eachai∈Rnis a vector. Suppose aj=r·w+vfor somer∈Randw,v∈Rn, then the
determinant of A, denoted by det(A), is
det(A) = det(/bracketleftbig
a1···aj−1ajaj+1···an/bracketrightbig
)
=r·det(/bracketleftbig
a1···aj−1w aj+1···an/bracketrightbig
) + det(/bracketleftbig
a1···aj−1v aj+1···an/bracketrightbig
).
We will use two types of special matrices in the paper. The ﬁrst is Vandermonde matrices.
IDeﬁnition 7 (Vandermonde Matrices) .Ann×nVandermonde matrix is deﬁned by n
valuesx1,···,xnsuch that each entry eij=xj−1
ifor1≤i,j≤n.
We can compute the determinant of Vandermonde matrices easily.
ITheorem 8 (Determinant of Vandermonde Matrices) .LetVbe a Vandermonde matrix
deﬁned by parameters x1,···,xn. Then det(V) =/producttext
1≤i<j≤n(xj−xi).
We also need Sylvester matrices.
IDeﬁnition 9 (Sylvester Matrices) .LetP=/summationtext∆1
i=0aixiandQ=/summationtext∆2
i=0bixibe two univariate
polynomials over Rof degrees ∆1,∆2respectively . Then the Sylvester matrix of PandQ,XX:6 Lower Bounds for Intersection Reporting among Flat Objects
denoted by Syl (P,Q), is a (∆1+ ∆ 2)×(∆1+ ∆ 2)matrix of the following form

a∆1a∆1−1···a0 0··· 0 0
0a∆1a∆1−1···a0··· 0 0
........................
0 0···a∆1a∆1−1···a1a0
b∆2b∆2−1···b0 0··· 0 0
0b∆2b∆2−1···b0··· 0 0
........................
0 0···b∆2b∆2−1···b1b0
.
The Sylvester matrix has ∆2rows with entries from Pand∆1rows with entries from Q.
For example, the Sylvester matrx of two polynomials P=p1x+p2andQ=q1x+q2is
Syl(P,Q) =/bracketleftbiggp1p2
q1q2./bracketrightbigg
One application of Sylvester matrices is to compute the resultant, which is one of the
important tools in algebraic geometry. One signiﬁcance of the resultant is that it equals zero
if and only if PandQhave a common factor.
IDeﬁnition 10. LetP,Qbe two univariate polynomials over R. The resultant of PandQ,
denoted by Res(P,Q), is deﬁned to be the determinant of the Sylvester matrix of PandQ,
i.e., Res (P,Q) = det(Syl(P,Q)).
3 An Algebraic Geometry Lemma
In this section, we prove an important algebraic geometry lemma that will later be used in
our lower bound framework.
ILemma 11. LetFandGbe two univariate polynomials on xof degree ∆Fand∆G
respectively and the leading coeﬃcient of Gis1. LetP(x,y)≡yG(x)−F(x).
LetLbe a set of/lscript= ∆ 1+ ∆G+ 1points (xk,yk)where ∆1≥∆F−1and eachxk= Θ(1)
such that|P(xk,yk)|≤ε<1for a parameter ε,G(xi) = Θ(1).
LetVbe a vector of /lscriptmonomials consisting of monomials xifor0≤i≤∆1and
monomials yxifor0≤i≤∆G−1.
IfAis an/lscript×/lscriptmatrix where the t-th row ofAis the evaluation of the vector Von point
(xk,yk), then|det(A)|≥Ω(Res(G,F)λ/lscript2)−O(ε)whereλ= min 1≤k1<k2≤/lscript|xk1−xk2|.
Proof.Note that if Res(G,F) = 0, then there is nothing to prove and thus we can assume
this is not the case. Now observe that since G(xk) = Θ(1) , we can write yk=F(xk)
G(xk)+γk
where|γk|=O(ε).
Now consider the matrix Aand plug in this value of yk. An entry of Ais in the form of a
monomialyxibeing evaluated on a point (xk,yk)and thus we have:
ykxi
k=/parenleftbiggF(xk)
G(xk)+γk/parenrightbigg
xi
k=F(xk)
G(xk)xi
k+γi,k (1)
where|γi,k|=O(ε). We use the linearity of determinants (see Theorem 6) in a similar fashion
that was also used in [ 3]. In particular, consider a column of the matrix A; it consists of
the evaluations of a monomial yxion all the points (x1,y1),···,(x/lscript,y/lscript). Using Eq. (1), weP. Afshani and P. Cheng XX:7
can write this column as the addition of a column Cithat consists of the evaluation of the
rational functionF(x)
G(x)xion the points x1,···,x/lscriptand a column Γithat consists of all the
valuesγi,kfor1≤k≤/lscript. By the linearity of determinants, we can write the determinant
ofAas the sum of determinants of two matrices where one matrix includes the column Ci
and the other has Γi; observe that the magnitude of the determinant of the latter matrix
can be upper bounded by O(ε), with hidden constants that depend on ∆. By performing
this operation on all the columns, we can separate all the entries involving γi,kinto separate
matrices and the magnitude of sum of the determinants can be bounded by O(ε).
LetBbe the matrix that remains after removing all the γi,kterms. We bound |det(B)|.
Note thatBconsists of row vectors
U= (1x···x∆1y yx···yx∆G−1).
evaluated at some value x=xkandy=F(xk)
G(xk)at itsk-th row. This is equivalent to the
evaluation of the following vector:
(1x···x∆1F
GF
Gx···F
Gx∆G−1).
Observe that row tof matrixBwill be evaluating Uon the point xk. SinceG(xk) = Θ(1)/negationslash= 0,
we can multiply row kbyG(xk)and this will only change the determinant by a constant
factor. With a slight abuse of the notation, let Bdenote the matrix after this multiplication
step. Thus, the columns of Bnow correspond to the evaluation of the following vector.
(G Gx···Gx∆1F Fx···Fx∆G−1).
Note that we can exchange columns and it will only ﬂip the signs of the determinant of a
matrix. We will focus on bounding the determinant of
(Gx∆1Gx∆1−2···G Fx∆G−1Fx∆G−2···F).
The key observation is that there is a strong connection between the Sylvester matrix of
G,Fand matrix B. Recall that the Sylvester matrix of GandFis of the form
Syl(G,F) =
G∆GG∆G−1···G0 0··· 0 0
0G∆GG∆G−1···G0··· 0 0
........................
0 0···G∆GG∆G−1···G1G0
F∆FF∆F−1···F0 0··· 0 0
0F∆FF∆F−1···F0··· 0 0
........................
0 0···F∆FF∆F−1···F1F0
,
whereGi(resp.Fi) is the coeﬃcient of xiinG(resp.F). Observe that
(Gx∆F−1Gx∆F−2···G Fx∆G−1Fx∆G−2···F)=
Syl(G,F)·(x∆F+∆G−1x∆F+∆G−2···x1)T,
which means that by the linear transformation described by Syl(G,F)−1, which exists as
Res(G,F) = det(Syl(G,F))/negationslash= 0, we can turn the last ∆F+ ∆Gcolumns in Bto
(x∆F+∆G−1x∆F+∆G−2···x1).XX:8 Lower Bounds for Intersection Reporting among Flat Objects
Since the remaining columns are all polynomials in xand the highest degree in column iis
∆1−ifori= 0,1,···,∆F, by using column operations, we can eliminate all lower degree
terms for each column and the only term left for column iisG∆Gx∆1−i. Note that column
operations do not change the determinant.
By assumption, the leading coeﬃcients of Gis1, i.e.,G∆G= 1. Thus, this transforms
Binto a Vandermonde matrix VBof size/lscript×/lscript. By Theorem 8, |det(VB)|= Ω(λ/lscript2). Since
multiplying the inverse of Syl(G,F)scales det(B)by a factor of Θ(|det(Syl(G,F)−1)|) =
Θ(|Res(G,F)−1|), we bound|det(B)|=|det(VB)|/(1/|Res(G,F)|) = Ω(|Res(G,F)|λ/lscript2).
The claim then follows from this. J
4 Lower Bounds for Flat Intersection Reporting
We are now ready to show lower bounds for ﬂat intersection reporting. We ﬁrst establish a
reduction from special polynomial slab reporting problems to ﬂat intersection reporting.
4.1 A Reduction from Polynomial Slab Range Reporting to
Flat-hyperslab Intersection Reporting
We study the following ﬂat intersection reporting problem.
IDeﬁnition 12 (Flat-hyperslab Intersection Reporting) .In thet-ﬂat-hyperslab intersection
reporting problem, we are given a set Sofn(d−t)-dimensional hyperslabs in Rd, i.e., regions
created by a linear translation of (d−t−1)-ﬂats, where 0≤t<d, as the input, and the goal
is to preprocessSinto a data structure such that given any query t-ﬂatγ, we can output
S∩γ, i.e., the set of (d−t)-hyperslabs intersecting the query t-ﬂat, eﬃciently.
First, observe that any t-ﬂat that is not parallel to any of the axes can be formulated as

a0,1 0··· 0 0
0 1··· 0 0
...............
0 0··· 1 0
a1,1a1,2···a1,ta1,t+1
...............
ad−t,1ad−t,2···ad−1,tad−t,t+1
·
τ1
...
τt
1
=
x1
...
xd
,
whereai,j’s are the parameters deﬁning the t-ﬂat, andτ1,···,τtare the free variables that
generate points in the t-ﬂat. Note that we only need (d−t)(t+ 1)independent ai,j’s to
deﬁne at-ﬂat.
On the other hand, we consider (d−t)-hyperslabs of form

1 0··· 0b1,1b1,2···b1,d−t
0 1··· 0b2,1b2,2···b2,d−t
........................
0 0··· 1bt,1bt,2···bt,d−t
0 0··· 0bt+1,1bt+1,2···bt+1,d−t
·
x1
x2
...
xd−1
xd
=
0
0
...
0
−1 +w
,
wherebi,j’s are the parameters deﬁning a (d−t−1)-ﬂat, andw∈[0,w0]is a parameter
which adds one extra dimension to the ﬂat to make it (d−t)-dimensional; in essence, weP. Afshani and P. Cheng XX:9
will be considering all the (d−t−1)-ﬂats for all w∈[0,w0]which will turn the query into a
(d−t)-hyperslab.
Therefore, the intersection of a t-ﬂat and a (d−t)-hyperslab must be a solution to

1 0··· 0b1,1b1,2···b1,d−t
0 1··· 0b2,1b2,2···b2,d−t
........................
0 0··· 1bt,1bt,2···bt,d−t
0 0··· 0bt+1,1bt+1,2···bt+1,d−t
·
a0,1 0··· 0 0
0 1··· 0 0
...............
0 0··· 1 0
a1,1a1,2···a1,ta1,t+1
...............
ad−t,1ad−t,2···ad−1,tad−t,t+1
·
τ1
τ2
τ3
...
τt
1
=
0
0
...
0
−1 +w
.
Multiplying the two matrices, we obtain the following system

a0,1+/summationtextd−t
i=1ai,1b1,i/summationtextd−t
i=1ai,2b1,i···/summationtextd−t
i=1ai,t+1b1,i/summationtextd−t
i=1ai,1b2,i 1 +/summationtextd−t
i=1ai,2b2,i···/summationtextd−t
i=1ai,t+1b2,i
............/summationtextd−t
i=1ai,1bt+1,i/summationtextd−t
i=1ai,2bt+1,i···/summationtextd−t
i=1ai,t+1bt+1,i
·
τ1
...
τt
1
=
0
...
0
−1 +w
.
We denote this linear system by Aτ=sand assume
det(A)/negationslash= 0 (2)
which is the case when the t-ﬂat and the (d−t)-hyperslab properly intersect, and this system
has a solution iﬀ the last entry of the solution vector is 1. So by Cramer’s rule, we have
1 =/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsinglea0,1+/summationtextd−t
i=1ai,1b1,i/summationtextd−t
i=1ai,2b1,i··· 0/summationtextd−t
i=1ai,1b2,i 1 +/summationtextd−t
i=1ai,2b2,i··· 0
............/summationtextd−t
i=1ai,1bt+1,i/summationtextd−t
i=1ai,2bt+1,i··· − 1 +w/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle
/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsinglea0,1+/summationtextd−t
i=1ai,1b1,i/summationtextd−t
i=1ai,2b1,i···/summationtextd−t
i=1ai,t+1b1,i/summationtextd−t
i=1ai,1b2,i 1 +/summationtextd−t
i=1ai,2b2,i···/summationtextd−t
i=1ai,t+1b2,i
............/summationtextd−t
i=1ai,1bt+1,i/summationtextd−t
i=1ai,2bt+1,i···/summationtextd−t
i=1ai,t+1bt+1,i/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle.
By the linearity of determinant, we have
0 =/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsinglea0,1+/summationtextd−t
i=1ai,1b1,i/summationtextd−t
i=1ai,2b1,i···/summationtextd−t
i=1ai,t+1b1,i/summationtextd−t
i=1ai,1b2,i 1 +/summationtextd−t
i=1ai,2b2,i···/summationtextd−t
i=1ai,t+1b2,i
............/summationtextd−t
i=1ai,1bt+1,i/summationtextd−t
i=1ai,2bt+1,i··· 1 +/summationtextd−t
i=1ai,t+1bt+1,i−w/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle.(3)
Consider the value of the above determinant using Leibniz formula for determinants,
which is the sum of (t+ 1)!terms. Consider the terms that have at most 1 factor of bi,j; these
can only come from the diagonals. Thus, any t-ﬂat parameterized by a= (ai,j)intersects a
query (d−t)-hyperslab parameterized by b= (bi,j)if and only if
0 =a0,1+a0,1t+1/summationdisplay
j=2d−1/summationdisplay
i=1ai,jbj,i+d−1/summationdisplay
i=1ai,1b1,i+E(a,b) +f(a,b,w) =P(a,b) +f(a,b,w),XX:10 Lower Bounds for Intersection Reporting among Flat Objects
whereE(a,b)contains the sum of products of at least two distinct ai1,i2bi3,i1andf(a,b,w)
is a polynomial with factor w.
Note that after ﬁxing a,b,f(a,b,w)is a polynomial in wand we assume that
∂f(a,b,w)
∂w=/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsinglea0,1+/summationtextd−t
i=1ai,1b1,i/summationtextd−t
i=1ai,2b1,i···/summationtextd−t
i=1ai,tb1,i/summationtextd−t
i=1ai,1b2,i 1 +/summationtextd−t
i=1ai,2b2,i···/summationtextd−t
i=1ai,tb2,i
............/summationtextd−t
i=1ai,1bt,i/summationtextd−t
i=1ai,2bt,i··· 1 +/summationtextd−t
i=1ai,tbt,i/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle/vextendsingle>0.(4)
This implies the following lemma.
ILemma 13. Assuming a,bsatisfying Assumptions (2) and (4), for any ﬁxed a, there is
absuch that 0≤P(a,b)≤−f(a,b,w0)if and only if there is some w∈[0,w0]such that
P(a,b) +f(a,b,w) = 0.
Proof.This follows from f(a,b,w)is a polynomial in wand thus continuous and also
f(a,b,0) = 0aswis a factor of fand decreasing in [0,w0]as∂f
∂w>0. J
Fixing ainP(a,b), we obtain a polynomial in b. Let (P(a,b),f(a,b,w0)) ={b:
0≤P(a,b)≤−f(a,b,w0)}be a polynomial slab. This essentially establishes a reduction
between polynomial slab reporting and ﬂat intersection reporting.
ICorollary 14. Assuming a,bsatisfying Assumptions (2) and (4), for any ﬁxed a, there is
absuch that b∈(P(a,b),f(a,b,w0))if and only if a t-ﬂat parameterized by aintersects a
(d−t)-hyperslab parameterized by b.
4.2 Lower Bounds for Flat-hyperslab Intersection Reporting
We are now ready to prove the lower bounds. We show lower bounds for 1-ﬂat-hyperslab
intersection reporting in Rdand2-ﬂat-hyperslab intersection reporting in R4.
First observe by setting t= 1in Eq. (3) and using Corollary 14 a polynomial slab
reporting problem with polynomial
P1(a,b) =a0,1+a0,1d−1/summationdisplay
i=1ai,2b2,i+d−1/summationdisplay
i=1ai,1b1,i+d−1/summationdisplay
i,j=1∧i/negationslash=j(ai,1aj,2−aj,1ai,2)b1,ib2,j
=b1,1G1(b2,2) +F1(b2,2), (5)
reduces to a line-hyperslab intersection reporting problem, where to get G1, we have collected
all the monomials that have b1,1in them and then we have factored b1,1out and we are
considering it as a polynomial of b2,2(all the other variables are considered “constant”).
F1is deﬁned similarly by considering the remaining terms as a function of b2,2. Observe
that the polynomial does not have any term with degree 3. Let G1=g1,1b2,2+g1,0and
F1=f1,1b2,2+f1,0.
Similarly, polynomial slab reporting with
P2(a,b) =a0,1+a0,12/summationdisplay
j=13/summationdisplay
i=2aj,ibi,j+2/summationdisplay
j=1aj,1b1,j
+a0,12/summationdisplay
j,l=1∧j/negationslash=l(aj,2al,3−aj,3al,2)b2,jb3,l+2/summationdisplay
j,l=1∧j/negationslash=l3/summationdisplay
k=2(aj,1al,k−aj,kal,1)b1,jbk,l
=b1,1G2(b2,2) +F2(b2,2) (6)P. Afshani and P. Cheng XX:11
reduces to 2-ﬂat-hyperslab intersection reporting in R4whereG2,F2are deﬁned similar as
G1,F1.
For the moment, we focus on the case of line-hyperslab intersection reporting but the
same applies also to 2-ﬂat-hyperslab intersection reporting in R4since the polynomials F2
andG2involved in the deﬁnition of Eq. (6) are quite similar to Eq. (5).
Here, we would like to use our techniques from Section 3. The general idea is that we
will use Corollary 5, to reduce the 2(d−1)-variate polynomials P1andP2into bivariate
polynomials on b1,1andb2,2. Then, the variable b1,1will be our yvariable and b2,2will be
thexvariable in Section 3, and G1andF1here will play the same role as in that section.
We will set
a1,1=1 +a1,2a2,1
a2,2(7)
which will ensure that the leading coeﬃcient of G1is 1. This is our normalization step, since
we can divide the equations deﬁning the intersection (and thus polynomials P1andP2) by
any constant. Eventually, the resultant of the polynomials F1andG1will play an important
role. Observe that the resultant is
Res(G1,F1) =/vextendsingle/vextendsingle/vextendsingle/vextendsingle1g0
f1f0/vextendsingle/vextendsingle/vextendsingle/vextendsingle=f0−g0f1. (8)
4.3 Construction of Input Points and Queries
Now we are ready to describe our input and query construction. Assume we have a data
structure that uses S(n)space and has the query time Q(n) +O(k)wherekis the output
size; for brevity we use Q=Q(n).
We will start with a ﬁxed line and a ﬁxed hyperslab and then build the queries and
inputs very close to these two ﬁxed objects. However, we require a certain “general position”
property with respect to these two ﬁxed objects.
Recall that Eq. (5) refers to the condition of whether a (query) line described by a
variables intersects a (d−2)-dimensional ﬂat described by the bvariables (which corresponds
to setting the variable wto zero). Consider a ﬁxed ﬂat and a ﬁxed line. To avoid future
confusion, let AandBrefer to this ﬁxed line and ﬂat. We require the following.
AandBmust intersect properly (i.e., the line is not contained in the ﬂat). Observe that
it implies that when we consider P1(A,b)as a polynomial in bvariables, Bbelongs to
the zero set of P1(A,b). Note that this satisﬁes Assumption (2).
The polynomial P1(A,b)(as a polynomial in b) is irreducible. This is true as long as A
is chosen so that no coeﬃcient in P1is zero. To see this, note that P1is a polynomial
inband any variable bi,jhas degree 1. Suppose for the sake of contradiction that P1is
reducible, then the factorization must be of the form
P1(A,b) =/parenleftBigg
c10+d−1/summationdisplay
i=1c10b1i/parenrightBigg
·/parenleftBigg
c20+d−1/summationdisplay
i=1c20b2i/parenrightBigg
,
for nonzero coeﬃcients c1i,c2i. Then by Eq. (5),
1.a0,1=c10c20,
2.∀i= 1,···,d−1 :a0,1ai,2=c10b2i,
3.∀i= 1,···,d−1 :ai,1=c1ic20,
4.∀i,j= 1,2,···,d−1 :ai,1aj,2−aj,1ai,2=c1ic2i.
However, for these conditions to hold, all coeﬃcients of P1must be zero, a contradiction.XX:12 Lower Bounds for Intersection Reporting among Flat Objects
Observe that the irreducibility of P1(A,b)as a polynomial in bimplies that it has only
ﬁnitely many points where the tangent hyperplane at those points is parallel to some axis.
We assume bis not one of those points.
The irreducibility of P1(A,b)as a polynomial in bcan be used to satisfy Assumption (4)
since the corresponding polynomial of the determinant involved in Assumption (4) can
only have Θ(1)many common roots with P1(A,b).
Finally, since the polynomial P1(A,b)is irreducible and since Res(G1,F1)is also of degree
2 inbvariables, it follows that Res(G1,F1)is algebraically independent of P1(A,b). This
means that there are only ﬁnitely many places where both polynomials are zero, meaning,
we can additionally assume that Eq. (8) is non-zero (when evaluated at B).
Consider two parameters εpandεq=εp/CwhereCis a large enough constant and εp
is a parameter to be set later. Consider the parametric space of the input objects, where
the variable bdeﬁnes a single point. In such a space, Bdeﬁnes a single point. Place an
axis-aligned cube Rof side-length εpcentered around B. The input slabs are deﬁned by
placing a set of nrandom points inside R. Each point in Rdeﬁnes a (d−2)-dimensional
ﬂat. We set w= Θ(Q
n)which in turn deﬁnes a “narrow (d−1)-hyperslab”.
We now deﬁne the set of queries. Notice that P1has exactly 2(d−1)algebraically
independent coeﬃcients; these are the coeﬃcients of linear terms involved plus a0,1; recall
that by Eq. (7), a1,1was ﬁxed as a function of a1,2a2,1anda2,2but we still have a0,1as a
free parameter. These 2(d−1)coeﬃcients deﬁne another parametric space, where Adenotes
a single point. Place a 2(d−1)-dimensional hypercube of side length εqand then subdivide
it into a grid where the side-length of every cell is τ. Every grid point now deﬁnes a diﬀerent
query. LetQbe the set of all the queries we have constructed.
Notice that a query deﬁned by a point a∈Qdeﬁnes a line in the primal space, but when
considered in the parametric space R, it corresponds to a manifold (zeroes of a degree two
multilinear polynomial) that includes the set of points that correspond to (d−2)-dimensional
ﬂats that pass through the line in the primal space. The variable wallows us to turn it to a
range reporting problem where we need to output any (d−2)-dimensional ﬂat that passes
withinwvertical distance of the query line. The following observations and lemmas are the
important geometric properties that we require out of our construction.
IObservation 15. For two diﬀerent queries a1, and a2, the polynomials P1(a1,b)and
P1(a2,b)diﬀer by at least τin at least one of their coeﬃcients.
IObservation 16. Consider a line fparallel to an axis. For small enough εp, and any
a∈Q, the function P1(a,b)evaluated on the line fis such that the magnitude of its
derivative is bounded by Ω(1).
Proof.Recall that Bwas chosen such that the manifold corresponding to Adoes not have a
tangent parallel to any of the axes at point Band thus the derivate of the function P1(A,B)
is non-zero at B. The lemma then follows since εpandεqare small enough and P1(A,B)is
a continuous function w.r.t any of its variables. J
IObservation 17. The intersection volume of the range deﬁned by a query aandRis
Θ(wVol(R))ifCin the deﬁnition of εqis large enough, for w≤εp.
Proof.Observe that the query manifold deﬁned by Apasses through the center, B, ofRby
construction. Since each coordinate of adiﬀers from Aby at most εq, it thus follows that by
settingClarge enough, we can ensure that the distance between Bandais less than εp/2.
The claim now follows by integrating the volume over vertical lines using Observation 16. JP. Afshani and P. Cheng XX:13
ILemma 18. Consider a query a∈Qand let rbe the range that represents ain the
parametric space deﬁned by R. Consider an interval Ion thei-th side ofR, for some i.
Let rIbe the subset of rwhose projection on the i-th side ofRfalls inside I. Then, the
volume of rIisO(Vol(R)w|I|/εp).
In addition, for any 2D ﬂat f, the area of the intersection of fand risO(wεp).
Proof.Both claims follow through Observation 16 by integrating the corresponding volumes
over lines parallel to axes. J
4.4 Using the Framework
Observe that by the above Observation 17, setting w= Θ(Q
n)satisﬁes Condition 1 of the
lower bound framework in Theorem 1.
Satisfying Condition 2 requires a bit more work however. To do that, consider two queries
deﬁned by points a1anda2. Let r1and r2be the two corresponding ranges in the parametric
space ofR.
To satisfy Condition 2, assume for contradiction that the volume of r1∩r2is large,
i.e., larger than Vol(R)/(Qψ)whereψ= 2√
logn. We now combine Observation 15, and
Corollary 5 with parameter ϑset toε0εp
Q(n)ψwhereε0is a small enough constant and where
X1representsb1,1,X2representsb2,2and the remaining indeterminates represent the rest of
variables in b; note that the value of din Corollary 5 is β= 2(d−1)andU=/parenleftbig2+1
2/parenrightbig
= 3.
Observe that each interval Iidetermined by Corollary 5 deﬁnes a slab parallel to the i-th
axis inR; letRbadbe the union of these slabs. By Lemma 18, and choice of small enough ε0,
a positive fraction of the intersection volume of r1and r2must lie outside Rbad. In addition,
Corollary 5 allows us to pick some ﬁxed values for all variables in b, except for b1,1andb2,2
with the property the ﬁnal polynomials H1andH2(on indeterminates b1,1andb2,2) that we
obtain have the property that they have at least one coeﬃcient which diﬀers by at least
Ω/parenleftBigg
τ/parenleftbigg
ε0εp
Q(n)ψ/parenrightbigg3(β−2)/parenrightBigg
(9)
between them; we call this operation of plugging values for all bexcept forb1,1andb2,2
slicing. After slicing, we are reduced to the bivariate case; consider the set of points on which
both polynomials H1andH2have value O(w). If the 2D area of such points is o(εp/(Qψ),
then we call this a goodslice, otherwise, it is a badslice. By Lemma 18, we can observe
that there must be bad slices since if all the slices are good, by integration of the area of the
intersection of r1and r2over all the remaining variables in b, will yield that the volume of
the intersection of r1and r2smaller iso(Vol(R)/(Qψ))which is a contradiction.
We now show that we can arrive at a contradiction, assuming the existence of a bad slice.
Given a bad slice, and any constant /lscript, we can ﬁnd /lscriptpoints (x1,y1),..., (x/lscript,y/lscript)such that
|xk1−xk2|≥Ω(εp/(Qψ))for all 1≤k1< k2≤/lscriptand thatH1(xk,yk),H2(xk,yk) =O(w)
for allk∈{1,2···,/lscript}. Observe that Hi(x,y)has only monomials y,x,xyand a constant
term. The critical observation here is that the coeﬃcient of the monomial xyis always 1
since the coeﬃcient of the monomial b1,1b2,2was 1 and there was no monomial of degree
three inP1, meaning, after slicing this coeﬃcient will not change. We pick /lscript= 3and thus we
tweak all the three other coeﬃcients of H1. Tweaking H1such that ˜H1(xk,yk) =H2(xk,yk)
corresponds to solving a linear system of equations that come from evalutions of monomials
X,Y, and a constant term at points (xk,yk). We can thus use Lemma 11 with ∆1= ∆G= 1,
λ= Ω(εp/(Qψ)). Observe that Res(G,F)here is a constant by the properties of ourXX:14 Lower Bounds for Intersection Reporting among Flat Objects
construction. Also observe that by Lemma 11, the magnitude of the determinant of matrix
Adeﬁned in Lemma 11 is
Ω/parenleftBig
(εp/(Qψ)))9/parenrightBig
.
By the same argument in [ 3], this means that the tweaking operation can be done such that
each coeﬃcient of H1is changed by at most
O/parenleftBig
(εp/(Qψ)))−9w/parenrightBig
. (10)
We observe that after tweaking, ˜H1andH2must coincide since by Lemma 11, the determinant
of the relevant monomials is non-zero and thus there’s a unique polynomial that passes
through points (x1,y1),···,(x/lscript,y/lscript). Finally, to get a contradiction, we simply need to ensure
that Eq. (10) is asymptotically smaller than Eq. (9). This yields a bound for the value of τ,
τ= Θ/parenleftBig
w(Qψ)3(β−2)+9/parenrightBig
= Θ/parenleftbig
w(Qψ)3β+3/parenrightbig
(11)
where we have assumed that εp, andε0are small enough constants that have been absorbed in
theΩ(·)notation. Thus, this choice of τwill make sure that Condition 2 of the framework is
also satisﬁed. It remains to calculate the number of queries that have been generated. Observe
thatτwas the side-length of a small enough grid around the point Ain aβ-dimensional
space. Thus, the number of queries we generated is
m=o
Ω/parenleftBigg/parenleftbigg1
τ/parenrightbiggβ/parenrightBigg
=o
Ω/parenleftbiggnβ
Qβ(3β+4)/parenrightbigg
. (12)
Applying Theorem 1 yields a space lower bound of
S(n) =o
Ω(mQ) =o
Ω/parenleftbiggn2(d−1)
Q4(3d−1)(d−1)−1/parenrightbigg
(13)
for line-hyperslab intersection reporting since β= 2(d−1). One can verify that the same
argument works for triangle-triangle intersection reporting in R4, sinceP2is also a multilinear
polynomial of degree two. In this case, β= 6which yields a space lower bound of
S(n) =o
Ω/parenleftbiggn6
Q125/parenrightbigg
. (14)
To sum up, we obtain the following results:
ITheorem 19. Any data structure that solves line-hyperslab intersection reporting in Rd
must satisfy a space-time tradeoﬀ of S(n) =o
Ω/parenleftBig
n2(d−1)
Q(n)(4(3d−1)(d−1)−1/parenrightBig
.
ITheorem 20. Any data structure that solves triangle-triangle intersection reporting in R4
must satisfy a space-time tradeoﬀ of S(n) =o
Ω/parenleftBig
n6
Q(n)125/parenrightBig
.
5 Conclusion and Open Problems
We study line-hyperslab intersecting reporting in Rdand triangle-triangle intersecting report-
ing in R4. We show that any data structure with no(1)+O(k)query time must use space
o
Ω(n2(d−1))ando
Ω(n6)for the two problems respectively. This matches the classical upperP. Afshani and P. Cheng XX:15
bounds for the small no(1)query time case for the two problems and answer an open problem
for lower bounds asked by Ezra and Sharir [ 20]. Along the way, we generalize and develop
the lower bound technique used in [2, 3].
The major open problem is how to show a lower bound for general intersection reporting
between objects of tand(d−t)dimensions or for ﬂat semialgebraic objects as studied
recently in [ 5]. Many of our techniques work, however, one big challenge is that after applying
Corollary 5, the leading coeﬃcient changes and thus we can no longer guarantee big gaps
between coeﬃcients.
References
1P. Afshani. Improved pointer machine and I/O lower bounds for simplex range reporting and
related problems. In Proceedings of the Twenty-Eighth Annual Symposium on Computational
Geometry , SoCG ’12, page 339–346, New York, NY, USA, 2012. Association for Computing
Machinery.
2P. Afshani and P. Cheng. Lower bounds for semialgebraic range searching and stabbing
problems. In 37th International Symposium on Computational Geometry , volume 189 of
LIPIcs. Leibniz Int. Proc. Inform. , pages Art. No. 8, 15. Schloss Dagstuhl. Leibniz-Zent.
Inform., Wadern, 2021.
3P. Afshani and P. Cheng. On semialgebraic range reporting. In 38th International Symposium
on Computational Geometry , volume 224 of LIPIcs. Leibniz Int. Proc. Inform. , pages Paper
No. 3, 14. Schloss Dagstuhl. Leibniz-Zent. Inform., Wadern, 2022.
4P. K. Agarwal. Simplex range searching and its variants: a review. In A journey through
discrete mathematics , pages 1–30. Springer, Cham, 2017.
5P. K. Agarwal, B. Aronov, E. Ezra, M. J. Katz, and M. Sharir. Intersection queries for
ﬂat semi-algebraic objects in three dimensions and related problems. In 38th International
Symposium on Computational Geometry , volume 224 of LIPIcs. Leibniz Int. Proc. Inform. ,
pages Paper No. 4, 14. Schloss Dagstuhl. Leibniz-Zent. Inform., Wadern, 2022.
6P. K. Agarwal, B. Aronov, E. Ezra, and J. Zahl. Eﬃcient algorithm for generalized polynomial
partitioning and its applications. SIAM J. Comput. , 50(2):760–787, 2021.
7P. K. Agarwal and J. Matousek. On range searching with semialgebraic sets. Discret. Comput.
Geom., 11:393–418, 1994.
8P. K. Agarwal and J. Matoušek. Ray shooting and parametric search. SIAM J. Comput. ,
22(4):794–806, 1993.
9P. K. Agarwal, J. Matoušek, and M. Sharir. On range searching with semialgebraic sets. II.
SIAM J. Comput. , 42(6):2039–2062, 2013.
10P. K. Agarwal and M. Sharir. Ray shooting amidst convex polyhedra and polyhedral terrains
in three dimensions. SIAM J. Comput. , 25(1):100–116, 1996.
11B. Aronov, M. de Berg, and C. Gray. Ray shooting and intersection searching amidst fat
convex polyhedra in 3-space. Comput. Geom. , 41(1-2):68–76, 2008.
12T. M. Chan. Optimal partition trees. Discrete Comput. Geom. , 47(4):661–690, 2012.
13B. Chazelle. Lower bounds on the complexity of polytope range searching. J. Amer. Math.
Soc., 2(4):637–666, 1989.
14B. Chazelle. Lower bounds for orthogonal range searching. I. The reporting case. J. Assoc.
Comput. Mach. , 37(2):200–212, 1990.
15B. Chazelle. Cutting hyperplanes for divide-and-conquer. Discrete Comput. Geom. ,
9(2):145–158, Dec. 1993.
16B. Chazelle and B. Rosenberg. Simplex range reporting on a pointer machine. Comput. Geom. ,
5(5):237–247, 1996.
17M. de Berg and C. Gray. Vertical ray shooting and computing depth orders for fat objects.
SIAM J. Comput. , 38(1):257–275, 2008.XX:16
18M. de Berg, D. Halperin, M. Overmars, J. Snoeyink, and M. van Kreveld. Eﬃcient ray shooting
and hidden surface removal. Algorithmica , 12(1):30–53, 1994.
19E. Ezra and M. Sharir. Intersection searching amid tetrahedra in four dimensions. CoRR,
abs/2208.06703, 2022.
20E. Ezra and M. Sharir. On ray shooting for triangles in 3-space and related problems. SIAM
J. Comput. , 51(4):1065–1095, 2022.
21L. Guth. Polynomial partitioning for a set of varieties. Math. Proc. Cambridge Philos. Soc. ,
159(3):459–469, 2015.
22L. Guth and N. H. Katz. On the Erdős distinct distances problem in the plane. Ann. of Math.
(2), 181(1):155–190, 2015.
23J. Matoušek. Range searching with eﬃcient hierarchical cuttings. Discrete Comput. Geom. ,
10(2):157–182, 1993.
24J. Matoušek and Z. Patáková. Multilevel polynomial partitions and simpliﬁed range searching.
Discrete Comput. Geom. , 54(1):22–41, 2015.
25J. Matoušek and O. Schwarzkopf. On ray shooting in convex polytopes. Discrete Comput.
Geom., 10(2):215–232, 1993.
26M. Pellegrini. Stabbing and ray shooting in 3 dimensional space. In R. Seidel, editor,
Proceedings of the Sixth Annual Symposium on Computational Geometry, Berkeley, CA, USA,
June 6-8, 1990 , pages 177–186. ACM, 1990.
27M. Pellegrini. Ray shooting on triangles in 3-space. Algorithmica , 9(5):471–494, 1993.
28M. Pellegrini. Ray shooting and lines in space. In Handbook of discrete and computational
geometry (3rd Edition) , CRC Press Ser. Discrete Math. Appl., pages 1093–1112. CRC, Boca
Raton, FL, 2017.
29E. A. Ramos. On range reporting, ray shooting and k-level construction. In Proceedings of the
Fifteenth Annual Symposium on Computational Geometry (Miami Beach, FL, 1999) , pages
390–399. ACM, New York, 1999.
30M. Sharir and H. Shaul. Ray shooting and stone throwing with near-linear storage. Comput.
Geom., 30(3):239–252, 2005.
Appendices
A Proof of Lemma 2
ILemma 2. LetP(x) =/summationtext∆
i=0aixiandQ(x) =/summationtext∆
i=0bixibe two univariate (constant)
degree- ∆polynomials in R[x]and|ai−bi|≥ηfor some 0≤i≤∆.
Suppose there is an interval Iofxsuch that for every x0∈Iwe have|P(x0)−Q(x0)|≤
w, then the length of Iis upper bounded by O((w/η)1/U), whereU=/parenleftbig∆+1
2/parenrightbig
and theO(·)
notation hides constant factors that depend on ∆.
Proof.The proof is by contradiction. Assume for the sake of contradiction that |I|=
ω((w/η)1/U). Wepick ∆+1points (u1,v1),···,(u∆+1,v∆+1)fromy=P(x)foru1,···,u∆+1∈
Isuch that|uk1−uk2|=ω((w/η)1/U)fork1/negationslash=k2. Let (u1,v1+ξ1),···,(u∆+1,v∆+1+ξ∆+1)
be∆ + 1points ony=Q(x). By deﬁnition|ξk|≤wfor allk= 1,2,···,∆ + 1. We would
like to tweak coeﬃcient aiofP(x)byδifori= 0,1,···,∆to obtain a polynomial P/prime(x)
such thaty=P/prime(x)andy=Q(x)agree onx=u1,···,u∆+1. Observe that to do that, for
eachk, we would like to have
vk+ξk=∆/summationdisplay
i=0(ai+δi)ui
k=⇒ξk=∆/summationdisplay
i=0δiui
kXX:17
where the last follows from vk=/summationtext∆
i=0aiui
k. Thus, to perform the tweaking, each δishould
satisfy the following system

1x1···x∆
1
............
1x∆+1···x∆
∆+1
·
δ0
...
δ∆
=
ξ1
...
ξ∆+1
,
orA·δ=ξ. Note that Ais a Vandermonde matrix. So by Theorem 8, det(A) = Ω(|I|U),
since|xk1−xk2|= Ω(|I|). This shows that there exists a unique solution for δiand thus
we can perform the tweaking. In addition, it follows that |δi|=O(ξ
det(A)) =O(w
det(A)).
Now observe that if we assume I=ω((w/η)1/U), it follows that|δi|=o(η). SinceP/prime,Q
have ∆ + 1points in common, they must be equivalent. This mean |ai−bi|=o(η)for all
0≤i≤∆, a contradiction. J
B Proof of Lemma 3
ILemma 3. LetP1(X) =/summationtext
i∈Id,∆AiXiandP2(X) =/summationtext
i∈Id,∆BiXibe twod-variate
degree- ∆polynomials in R[X]and|Ai−Bi|≥ηdfor some i∈Id,∆.
Suppose for each assignment Xd∈IdtoP1,P2, where Idis an interval for Xd, all the
coeﬃcients of the resulting (d−1)-variate polynomial Q1(X1,···Xd−1)andQ2(X1,···Xd−1)
diﬀer by at most ηd−1, then|Id|=O((ηd−1/ηd)1/U).
Proof.Note that
P1=/summationdisplay
i∈IAiXi=/summationdisplay
j∈I:d−1hj(Xd)Xj
:d−1,
and
P2=/summationdisplay
i∈IBiXi=/summationdisplay
j∈I:d−1ˆhj(Xd)Xj
:d−1,
whereI:d−1stands for the set of (d−1)-tuples formed by taking the (d−1)entries of every
d-tuple inIandX:d−1= (X1,···,Xd−1), and the coeﬃcients of X:d−1are polynomials in
Xdof form
hj(Xd) =∆/summationdisplay
i=0Aj⊕iXi
d,
and
ˆhj(Xd) =∆/summationdisplay
i=0Bj⊕iXi
d,
where j⊕istands for a d-tuple formed by appending itoj. SinceP1/negationslash≡P2, there must exists
onejsuch thathj(Xd)−ˆhj(Xd)/negationslash≡0. Then by Lemma 2, the interval length for Xdin which
|hj(Xd)−ˆhj(Xd)|≤ηd−1is upper bounded by O(ηd−1/ηd)1/U). By a union bound over all
monomials, the lemma follows. J