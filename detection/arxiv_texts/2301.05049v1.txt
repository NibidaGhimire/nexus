On V oronoi visibility maps of 1.5D terrains
with multiple viewpoints?
Vahideh Keikhaa,b, Maria Saumella,c,
aThe Czech Academy of Sciences, Institute of Computer Science, Czech Republic.
bFaculty of Mathematics and Physics, Department of Applied Mathematics, Charles University, Prague, Czech Republic.
cDepartment of Theoretical Computer Science, Faculty of Information Technology, Czech Technical University in Prague, Czech Republic.
Abstract
Given an n-vertex 1.5D terrain Tand a setPofm<nviewpoints, the V oronoi visibility map V orVis (T;P) is a
partitioning ofTinto regions such that each region is assigned to the closest (in Euclidean distance) visible viewpoint.
The colored visibility map ColVis (T;P) is a partitioning of Tinto regions that have the same set of visible viewpoints.
In this paper, we propose an algorithm to compute V orVis (T;P) that runs in O(n+(m2+kc)logn) time, where kc
andkvdenote the total complexity of ColVis (T;P) and V orVis (T;P), respectively. This improves upon a previous
algorithm for this problem. We also generalize our algorithm to higher order V oronoi visibility maps, and to V oronoi
visibility maps with respect to other distances. Finally, we prove bounds relating kvtokc, and we show an application
of our algorithm to a problem on limited range of sight.
Keywords: Visibility, 1.5D terrains, V oronoi diagrams, multiple viewpoints.
1. Introduction
A 1.5D terrainTis an x-monotone polygonal chain of nvertices in R2. Two points onTarevisible if the segment
connecting them does not contain any point strictly below T.
Visibility problems in terrains are fundamental in geographical information science and have many applications,
such as placing ﬁreguard or telecommunication towers [ 4], identifying areas that are not visible from sensitive sites [ 15],
or solving problems related to sensor networks [ 17]. Although 2.5D terrains are more interesting for modelling and
forecasting, 1.5D terrains are easier to visualize and to analyze. They give insights into the di culties of 2.5D terrains
in terrain analysis, and their proper understanding is seen as an essential step towards the ultimate goal of settling the
2.5D case. For this reason, visibility problems in 1.5D terrains have been intensively studied by the computational
geometry community during the last 15 years.
In this paper, we focus on the variant where a set Pofm<nviewpoints are located on vertices of T(we refer to
the end of this section for a discussion on the assumption m<n). For each viewpoint p2P, the viewshed ofpis the
set of points ofTthat are visible from p(see Fig. 1 for an example). Our goal is to e ciently extract information
about the visibility of Twith respect toP. We continue the work initiated in [ 12], where the following structures are
introduced.
Thevisibility map Vis(T;P) is a partitioning of Tinto a visible region (containing all portions of Tthat are visible
by at least one element in P) and an invisible region (containing the portions that are not visible by any element in
P). See Fig. 2a for an example. The visible region of the visibility map is equal to the union of the viewsheds of all
viewpoints inP.
?Supported by the Czech Science Foundation, grant number GJ19-06792Y , and with institutional support RVO:67985807. V .K was also partially
supported by Charles University project UNCE /SCI/004 and by the Czech Academy of Sciences (Praemium Academiae awarded to M. Palu ˇs).
Corresponding author
Email addresses: keikha@cs.cas.cz (Vahideh Keikha), maria.saumell@fit.cvut.cz (Maria Saumell)
Preprint submitted to Elsevier January 13, 2023arXiv:2301.05049v1  [cs.CG]  12 Jan 2023pFigure 1: The viewshed of p.
pk
pj
pi
(a)
pk
(b)
pj
pi
pk
pj
pi
(c)
Figure 2: (a) Vis(T;P) (the visible region is shown in gray). (b) ColVis( T;P). (c) V orVis(T;P).
The colored visibility map ColVis (T;P) is a partitioning of Tinto regions that have the same set of visible
viewpoints. See Fig. 2b for an example.
Finally, the Voronoi visibility map V orVis (T;P) is a partitioning of Tinto regions that have the same closest visible
viewpoint, where the distance used is the Euclidean distance (not the distance along the terrain). See Fig. 2c for an
example.
Algorithms to compute these structures for both 1.5D and 2.5D terrains are proposed in [ 12]. The algorithm to
obtain V orVis (T;P) of a 1.5D terrain runs in O(n+(m2+kc)logn+kv(m+lognlogm)) time, where kcandkvdenote
the total complexity of ColVis (T;P) and V orVis (T;P), respectively. Both kcandkvhave size O(mn), and this bound
is asymptotically tight [ 12]. The algorithm ﬁrst computes ColVis (T;P), and then it spends (m) time to ﬁnd each
single region of V orVis (T;P). In this paper, we show that V orVis (T;P) can be extracted from ColVis (T;P) in a 1.5D
terrain much more e ciently, resulting in an O(n+(m2+kc)logn)-time algorithm. We use an observation related to
intersections of the terrain with bisectors of pairs of viewpoints that also allows us to prove a relationship between kc
andkv.
Let us point out that, apart from the mentioned output-sensitive algorithm for V orVis (T;P) of a 1.5D terrain, the
authors of [12] also propose a divide-and-conquer algorithm running in O(mnlogm) time, which is worst-case nearly
optimal (recall that the maximum complexity of V orVis (T;P) is(mn)). Therefore, our new algorithm does not
represent an improvement in the worst-case instances, but in instances where the original output-sensitive algorithm
is faster than the divide-and-conquer one, and kvmis the dominant term in the running time. An example of such an
instance is m= (pn),kc= (n3=4) and kv= (n3=4).
In this paper, we also provide generalizations of our algorithm to compute V oronoi visibility maps of higher order
(that is, containing the information about the kclosest visible viewpoints, for some k>1), and V oronoi visibility
maps with respect to two other distances: the Euclidean distance along the terrain and the link distance. All of these
generalizations have the same running time as the original algorithm.
Finally, the new algorithm for V orVis (T;P) also allows us to solve e ciently a problem related to limited range of
sight. These problems are motivated by the fact that, even though many visibility problems assume an inﬁnite range
of visibility, the intensity of light, signals and other phenomena modelled with viewpoints decreases over distance in
realistic environments. In this spirit, the problem of illuminating a polygonal area with the minimum total energy was
introduced by O’Rourke [ 16], and studied in [ 7,8]. We consider a related problem on terrains, namely, computing the
minimum value rsuch that, if the viewpoints can only see objects within distance r, the obtained visibility map is the
same as Vis(T;P). We show that this problem can also be solved in O(n+(m2+kc) log n) time.
Related Work. When there is only one viewpoint, computing the visibility map of a 1.5D terrain can be done in O(n)
time by converting the terrain into a simple polygon and applying the algorithm from [ 13]. One of the ﬁrst results on
the variant with more than one viewpoint is an O((n+m)logm) time algorithm to detect if there are any visible pairs
2pj
pi
q
bi;j
pj
q
bi;j
(a)
(b)
r
r
piFigure 3: Illustration of Lemma 1: (a) x(pi)>x(pj); (b) x(pi)<x(pj).
of viewpoints above a 1.5D terrain [ 2]. Later, a systematic study of Vis(T;P),V orVis (T;P) and ColVis (T;P) was
carried out in [ 12] for both 1.5D and 2.5D terrains. A problem that is very related to the construction of Vis(T;P) is
that of computing the total visibility index of the terrain, that is, the number of viewpoints that are visible from each of
the viewpoints. This problem can be solved in O(nlog2n) time [1].
The situation where the locations of the viewpoints are unknown has been thoroughly studied. It is well-known
that computing the minimum number of viewpoints to keep a 1.5D terrain illuminated is NP-complete [ 9,14], but the
problem admits a PTAS [ 9,10,11]. If the viewpoints are restricted to lie on a line, the same problem can be solved in
linear time [6].
Assumptions. As in [ 12], we assume that no three vertices of Tare aligned. For the sake of simplicity, we also assume
that no edge ofTis contained in the bisector of two viewpoints in P, and that no point on Tis at the same distance
from three or more viewpoints in P.
As mentioned earlier, we restrict to the case where the viewpoints lie on terrain vertices; the same assumption is
made in [ 12], and it has the implication that mn. Notice that no generality is lost because, if viewpoints are located
in the interior of terrain edges, we can simply add vertices to the terrain and apply our algorithms. Furthermore, placing
a superlinear number of viewpoints on the terrain does not seem to make much sense: If more than two viewpoints lie
on the same edge, it is easy to see that the union of the viewsheds of the leftmost and rightmost viewpoints contains the
viewshed of any other viewpoint on the edge. Therefore, all the intermediate viewpoints are somewhat irrelevant for
visibility purposes.
Finally let us mention that, in [ 12],kvandkcdo not only include the number of points of Tthat are on the boundary
of two distinct regions of the respective diagrams, but also the total number of vertices of T, that is, n. For the sake of
consistency, we follow the same convention in this paper.
2. Complexity of the Voronoi visibility map
In [12], it is stated that the complexity of V orVis (T;P) can be higher than, lower than, or equal to that of
ColVis (T;P). In this section, we reﬁne this statement. Recall that in both cases the complexity is O(mn), and this
bound is asymptotically tight [12].
Let us introduce some terminology. The Voronoi viewshed WT(p;P) ofpis the set of points in the viewshed of p
that are closer to pthan to any other viewpoint that is visible from them.
Since we have assumed that no edge of Tis contained in the bisector of two viewpoints, the shared boundary
between two consecutive regions of V orVis (T;P) is always a single point of T. We call such points event points
ofV orVis (T;P).Event points of ColVis (T;P) are deﬁned analogously, that is, as points on the boundary of two
consecutive regions of the map.
We denote by bi;jthe perpendicular bisector of two viewpoints pi;pj. Additionally, we denote by qi;jan event point
ofV orVis (T;P) such that a point inﬁnitesimally to the left and right of qi;jbelongs toWT(pi;P) andWT(pj;P),
respectively (notice that an event qi;jis dierent from an event qj;i). There are three (not mutually exclusive) possibilities:
(i)pibecomes invisible at qi;j1; (ii) pjbecomes visible at qi;j; (iii) piandpjare visible at qi;j, and qi;jis an intersection
1When we write that pibecomes invisible at qi;j, we mean that it is visible immediately to the left of qi;jand invisible immediately to its right.
We use the same rational when we write that pjbecomes visible at qi;j.
3pj
pi
q
bi;j
(a)
(b)
tFigure 4: (a) Illustration of the charging scheme of events of V orVis (T;Pr) at the intersection of a bisector and T(proof of Theorem 1): The event q
is charged to pibecause no point tto the right of qbelongs toWT(pi;Pr). (b) An instance where kv=kc+2m 2:ColVis (T;P) consists of three
portions (a portion visible by all viewpoints surrounded by two portions not visible by any viewpoint), while in V orVis (T;P) (illustrated in the
ﬁgure) the visible portion is subdivided into 2 m 1 parts.
point between bi;jandT.
In the following lemma, we prove the key observation of this paper: Even though a bisector bi;jmight intersect the
terrain (n) times, only two such intersections are relevant and might produce events of type (iii).
Lemma 1. Letpi2Pbe lower2than pj2P. Let qbe an intersection point between bi;jandTto the left (respectively,
right) of pi. Then any point to the left (respectively, right) of qthat is visible from piis closer to pjthan to pi. Hence,
there is no event q i;jor q j;iof type (iii) that lies to the left (respectively, right) of q.
Proof. Since piis assumed to have a smaller y-coordinate than that of pj, the region of the plane closer to pithan to pj
is the one below bi;j. But any point rthat is on bi;jor below it and to the left (respectively, right) of qis not visible from
pibecause the line segment pircontains a point (speciﬁcally, the point vertically aligned with q) that lies strictly below
the terrain surface; see Fig. 3 for an illustration.
The second part of the statement follows because visibility from piis one of the conditions of events of type
(iii).
To prove our bounds, we also use this well-known property of visibility in 1.5D terrains, known as order claim :
Lemma 2 (Claim 2.1 in [ 3]).Leta;b;c;anddbe four points onTsuch that x(a)<x(b)<x(c)<x(d). Ifaseescand
b sees d, then a sees d.
We denote by V orVis (T;P`) and ColVis (T;P`) the V oronoi and colored visibility maps of Tassuming that
viewpoints can only see themselves and to their left. Further, we denote by WT(p;P`) the V oronoi viewshed of p
under the same assumption. V orVis (T;Pr),ColVis (T;Pr) andWT(p;Pr) are deﬁned analogously using visibility to
the right. We can now prove the following:
Theorem 1. Given a terrainTwith nvertices and a set Pofmviewpoints placed on vertices of T, the following
bound holds:
kvminfkc+m2;2kc+8m 4g:
Proof. Since the vertices of Tare counted in both kvandkc, we exclude them from our analysis.
We start by proving that kvkc+m2. Notice that events of type (i) and (ii) are also events of ColVis (T;P). Let us
prove that there are at most m2events of type (iii).
Letpi;pjbe a pair of viewpoints. If piandpjare at the same height, bi;jis vertical and only intersects Tonce, so
there is at most one event of V orVis (T;P) onbi;j\T. Otherwise, we assume without loss of generality that piis lower
than pj. By Lemma 1 the only candidates for events qi;jorqj;iof type (iii) are the left-most intersection point of type
2We say that pislower (respectively, higher ) than qwhen it has a smaller (respectively, greater) y-coordinate than that of q.
4bi;j\T among all such points to the right of piand the right-most one among all points to the left. Thus, every pair of
viewpoints creates at most two events of type (iii).
We next prove the second upper bound for kv. We denote by k`
v,k`
c,kr
vandkr
cthe total complexity of all the regions
of V orVis(T;P`), ColVis(T;P`), V orVis(T;Pr) and ColVis(T;Pr), respectively.
Each event of ColVis (T;P) can be uniquely assigned to an event of either ColVis (T;P`) orColVis (T;Pr): If
the event concerns viewpoint pi(becoming visible or invisible) and it is to the left of pi, the same event appears in
ColVis (T;P`) and it is assigned to it. If the event is to the right of pi, it is assigned to the same event in ColVis (T;Pr).
If the event is on pi, it is easy to see that piis either the left-most point of T, in which case we assign it to the same
event in ColVis(T;Pr), or the right-most point of T, in which case we assign it to the same event in ColVis( T;P`).
Each event of ColVis (T;P`) orColVis (T;Pr) that did not get any event of ColVis (T;P) assigned to it lies at the
same position of some viewpoint that is not the left-most or the right-most point of T. Indeed, if pi2Pis such a
viewpoint, then, at the position where it lies, pibecomes visible in ColVis (T;Pr) and invisible in ColVis (T;P`)3,
but there are no such events in ColVis (T;P) (where there is a portion of Tvisible from picontaining pinot on its
boundary but in its interior). This proves that k`
c+kr
ckc+2m.
Next, we show a relationship between kr
vandkr
c. Suppose that we traverse V orVis (T;Pr) from left to right, and we
stop at every event that is not an event of ColVis (T;Pr), that is, the event is at the intersection of a bisector bi;jandT.
Since in V orVis (T;Pr) viewpoints can only see themselves and to their right, piandpjare to the left of the event q.
Without loss of generality, suppose that pjis to the left of pi. As in the proof of Lemma 1, if piwas higher than pj,
no point on bi;jto the right of piwould be visible from pj, contradicting the existence of the event at the intersection
ofbi;jandT. Further, piandpjare not at the same height because both are to the left of q. Hence, piis lower than
pj. Let tbe a point to the right of qthat is visible from pi(see Fig. 4a). By the Lemma 1 with a=pj,b=pi,c=q
andd=t,tis also visible from pj. By Lemma 1, tis closer to pjthan to pi. Therefore, t<WT(pi;Pr). This implies
that there is no portion of WT(pi;Pr) to the right of qand, in particular no more event caused by the intersection of a
bisector of piand another viewpoint. We charge the event qtopi, and obtain that there are at most m 1 events of this
type. Hence, kr
vkr
c+m 1.
Finally, we derive a bound for kvbased on kr
vandk`
v.
Let us take a continuous portion T0ofTthat belongs to the V oronoi viewshed of some viewpoint piin
V orVis (T;Pr), and to the V oronoi viewshed of some viewpoint pjinV orVis (T;P`). LetT0be maximal with
this property. Notice that piis to the left ofT0, while pjis to its right. Furthermore, in V orVis (T;P), every point of
T0belongs to the V oronoi viewshed of piorpj. We next show that bi;jintersectsT0at most once. The claim is clear
when y(pi)=y(pj). Otherwise, we assume without loss of generality that piis lower than pj. Let qbe the left-most
intersection point (if any) between bi;jandT0. We have that qis to the right of pi. Additionally, all points of T0to the
right of qare visible from pibecause they belong to the V oronoi viewshed of piinV orVis (T;Pr). By Lemma 1, all
points ofT0to the right of qare closer to pjthan to pi. In consequence, there is no intersection point between bi;jand
T0to the right of q, and bi;jintersectsT0at most once. This implies that T0gets split into at most two portions of the
ﬁnal diagram.
The situation where in at least one of V orVis (T;Pr) orV orVis (T;P`) a portion does not have any visible viewpoint
is trivial.
Consequently, kv2(kr
v+k`
v).
Putting everything together,
kv2(kr
v+k`
v)
2(kr
c+k`
c+2m 2)
2(kc+4m 2)=2kc+8m 4:
Regarding lower bounds, we show the following:
Example 1. There exists a terrain with nvertices and a set of mviewpoints placed on vertices of the terrain such that
kv=kc+2m 2. The construction is illustrated in Fig. 4b.
3Strictly speaking, in ColVis( T;P`)pibecomes invisible immediately to its right.
53. Computation of the Voronoi visibility map
The algorithm we propose is simple: We sweep the terrain from left to right, and maintain the set of visible points
in a balanced binary search tree, where the key of every viewpoint is the Euclidean distance to the point of the terrain
currently swept by the sweep line; the relevant viewpoint is always the closest visible one. The algorithm is based
on the observation that maintaining the whole set of viewpoints sorted by distance to Tmight be expensive (since a
bisector of two viewpoints might intersect the terrain (n) times), while, by Lemma 1, maintaining the set of the visible
ones is not (since, out of the potential (n) intersections, the two viewpoints are visible in at most two). Thanks to this
observation, new events of V orVis( T;P) are found in O(logm) time rather than O(m). We next present the details.
The algorithm sweeps the terrain from left to right and stops at points that are candidates for event points. The
candidates for events of type (i) and (ii) are the events of ColVis (T;P). We explain in Section 3.2 which are the
candidates for events of type (iii).
3.1. Events of ColVis(T;P)
We compute ColVis (T;P) using the version of the algorithm from [ 12] that returns a doubly-linked list with the
vertices of ColVis (T;P) sorted from left to right, together with the visibility information provided as follows: The
visible viewpoints are speciﬁed for the ﬁrst component of ColVis (T;P) and, for the other components, the algorithm
outputs the changes in the set of visible viewpoints with respect to the component immediately to the left.
3.2. Candidates for events of type (iii)
We next describe the candidates for events of type (iii) associated with a pair of viewpoints pi;pj2P.
Ifpiandpjare at the same height, the only intersection point of bi;jwithTlies between both viewpoints. If such
point is visible from both piandpj, we add it as a candidate for event of type (iii).
Otherwise, we may assume, without loss of generality, that piis lower than pj. By Lemma 1 the only candidates
for events of type (iii) involving piandpjare the left-most intersection point of type bi;j\T among all such points to
the right of piand the right-most one among all points to the left. For the sake of simplicity, we ﬁrst assume that bi;j
is not tangent toTat any of these intersection points. Then each of these intersection points is added to the list of
candidates for events swept by the line if and only if it is visible from both piandpj.
Finally, let qbe one of the two candidates for events of type (iii) involving piandpj. Suppose that qis to the right
ofpi(the other case is symmetric). If bi;jis tangent toTatq, points ofTinﬁnitesimally to the left or right of qare
closer to pithan to pj(while qis equidistant). Additionally, pibecomes invisible right after q. In consequence, it is not
needed to add qto the list of candidates for events of type (iii): Right before q, the algorithm knows that piis closer
to the terrain than pj. Atq, the algorithm processes that pibecomes invisible, and pj(if it is visible) automatically
gets higher priority than piin the list of candidates for the “owner” of the current V oronoi visibility region. The key
argument (there are no more candidates for events of type (iii) to the right of q) also holds in this case.
3.3. Data structures
The algorithm uses the following data structures.
We maintain a balanced binary search tree Hthat contains the viewpoints that are visible at the current point of the
sweep. These viewpoints are sorted in the tree according to their corresponding key, which is the distance from the
viewpoint to the current intersection point between the sweep line and the terrain. The keys are not stored in the tree
because they change as the sweep line moves, but each of them can be computed when needed in constant time. The
algorithm always chooses as the “owner” of the current V oronoi visibility region the viewpoint of Hwith the minimum
key.
InH, we perform insertions and deletions when viewpoints become visible and invisible, respectively. During these
operations, when at some node of the tree we need to decide whether we move to its left or right subtree, we simply
compute the key associated to the viewpoint in that node, and compare it with the key of the viewpoint that we want to
insert or delete. Therefore, insertions and deletions can be performed in the standard way in O(logm) time.
When the sweep line encounters a candidate for an event of type (iii) (let us call it q), the relative order of two
visible viewpoints with respect to their current distance to the terrain changes (formally speaking, it changes right after
q). A possible way to reﬂect this in His to delete from the tree one of the two viewpoints associated with q, and then
6'
&$
%Input:T;P;E
Output: V orVis(T;P)
1:H:=;,t`:=left-most point of T, and p:=?
2:while E,;do
3: extract the next element qofE
4: ifqis the last element of Ethen
5: output (( t`;q);p)
6: break
7: else if some viewpoint vbecomes visible at qthen
8: insert vinH
9: else if some viewpoint vbecomes invisible at qthen
10: delete vfrom H
11: else if qis an intersection point between Tandbi;jthen
12: update the positions of piandpjinH
13: end if
14: update pmin
15: ifpmin,pthen
16: output (( t`;q);p)
17: t`:=q,p:=pmin
18: end if
19:end while
Figure 5: Computation of V orVis (T;P).Eis the list of potential events, His the tree containing the viewpoints that are currently visible, t`is the
left endpoint of the current portion of T,pis the closest visible viewpoint in that portion, and pminis the viewpoint in Hwith the minimum key.
insert it again using as keys the distances from the viewpoints to a point of Tinﬁnitesimally to the right of q(and still
to the left of the next event in the list). Thus, candidates for events of type (iii) can be processed in HinO(logm) time.
Additionally, we use a data structure that allows us to answer ray-shooting queries in TinO(logn) time [ 5]. Such
queries are used to decide whether a given pair of points are mutually visible, and to ﬁnd the relevant intersections
betweenTand the bisector of a pair of viewpoints.
3.4. Description of the algorithm
Given q;ronTwith x(q)<x(r), we denote byT(q;r) andT[q;r] the open and closed portion of the terrain
between qandr, respectively.
Our algorithm, outlined in Fig. 5, takes as input T,Pand a list Eof potential events sorted from left to right
containing all events of ColVis (T;P) together with the O(m2) candidates for events of type (iii). The list Ealso
contains an event at the right-most point of the terrain.
The algorithm outputs V orVis (T;P) as a list of pairs (( q;r);pi) such that piis the closest visible viewpoint in
T(q;r) (ifT(q;r) is not visible from any viewpoint, we output (( q;r);?)). The variables t`andpin the algorithm refer
to the left endpoint of the portion of Tcurrently analyzed by the algorithm and the closest visible viewpoint in that
portion, respectively. The variable pminrefers to the viewpoint in Hwith the minimum key (if His empty, pmin=?).
Initially, H:=;,t`:=left-most point of T, and p:=?.
We repeat the following procedure until Eis empty: We extract the next element qfrom E, and proceed according
to four cases, corresponding to lines 4, 7, 9, and 11 of the pseudocode in Fig. 5. For the sake of simplicity, in the
description in Fig. 5 we deliberately ignore the situation where several events of distinct type occur at the same point
ofT, which we tackle in the next paragraph. The cases in lines 4, 7 and 9 are clear. Regarding the case starting at
line 11, in line 12 we update the positions of piandpjinHas explained in Section 3.3 (see the paragraph where we
discuss the case where the sweep line encounters a candidate for an event of type (iii)). We also point out that, if qis an
intersection point between Tand more than one bisector of type bi;j, the bisectors can be processed in any order.4
4By our general position assumptions, qis not equidistant from three or more viewpoints, so at most one of the bisectors through qmight involve
7It remains to explain how to deal with the situation where several events of distinct type occur at the same point of
T. In this case, we ﬁrst perform the modiﬁcations in Htriggered by allthe events at that point (insertions of viewpoints
becoming visible, deletions of viewpoints becoming invisible and updates of the positions of pairs of viewpoints). After
updating Hin this way, we update pmin; ifpmin,p, we output (( t`;q);p), set t`:=q, and set p:=pmin.
3.5. Correctness and running time
We ﬁrst show that the algorithm for V orVis (T;P) always selects the closest visible viewpoint. Changes in the
visibility status of the viewpoints correspond to events of ColVis (T;P), which are added to E, so the set of visible
viewpoints contained in His correct at any time of the sweep. Regarding the distances from the viewpoints to the
terrain, every time that a viewpoint is swept or becomes visible, it is inserted in Hcorrectly (according to its current
distance to the terrain). Changes in the order of the visible viewpoints with respect to their distances to Tcoincide with
intersections ofTwith the bisectors among them. As argued in the proof of Theorem 1, for every pair of viewpoints it
happens at most twice that both viewpoints are visible at an intersection point between Tand their bisector. Such an
event is precomputed and stored in E, and later processed by the algorithm.
We next analyze the complexity of the algorithm.
The map ColVis (T;P) can be computed in O(n+(m2+kc)logn) time using the algorithm in [ 12]. This map has at
most kcregions; however, due to the fact that several viewpoints might become visible or invisible at the same time,
when sweeping ColVis (T;P) from left to right, the number of times that a viewpoint becomes visible or invisible,
added over all viewpoints, can be higher; an upper bound of kc+m2is given in [ 12]. Each time that a viewpoint
changes its visibility status, we perform an insertion or a deletion in H, which takes O(logm) time. The algorithm
processes at most m2intersections between the terrain and bisectors of endpoints in O(logm) time each. Consequently,
V orVis (T;P) can be extracted from ColVis (T;P) inO((m2+kc)logm) time. The space complexity of the algorithm is
the space required to store the terrain, the events and the data structures, that is, O(n+m2+kc).
We conclude with the following:
Theorem 2. The Voronoi visibility map of a 1.5D terrain can be constructed in O(n+(m2+kc)logn)time and
O(n+m2+kc)space.
4. Extensions
In this section, we present adaptations of the previous algorithm to compute related maps.
4.1. Higher order Voronoi visibility maps
We deﬁne the kth-order V oronoi visibility map V orVis k(T;P) as a partitioning of Tinto regions that have the same
set of `closest visible viewpoints, where `is the minimum of kand the number of visible viewpoints in the region.
Observe that the mth-order V oronoi visibility map is equal to ColVis( T;P).
We can easily compute V orVis k(T;P) by adapting the algorithm from Section 3. In this case, we need to maintain
two additional variables: the total number bof viewpoints that are visible at the point currently swept by the line,
and, from the current set of `closest visible viewpoints, the furthest one, denoted pmax. Analogously to the algorithm
forColVis (T;P), for space reasons our algorithm for V orVis k(T;P) returns a doubly-linked list with the vertices of
V orVis k(T;P) sorted from left to right, together with the following information: The set of `closest visible viewpoints
is speciﬁed for the ﬁrst component of V orVis k(T;P) and, for the other components, the algorithm outputs the changes
in the set of `closest visible viewpoints with respect to the component immediately to the left.
Letqbe the next element from the list of events E, computed as in the previous section. We explain in detail the
case where one or more viewpoints become visible at q, and leave the remaining cases to the interested reader. Let P0
denote the set of viewpoints becoming visible at q. We update b. If, after this update, bk, we report vertex qtogether
with the setP0(containing the new viewpoints in the set of `closest visible viewpoints). We also insert the viewpoints
ofP0inH. Otherwise, let b0andbbe the number of visible viewpoints right before qand at q, respectively. If b0<k,
we remove fromP0the set of k b0closest viewpoints to q(obtained after sorting the viewpoints of P0according to
p.
8their distance to q), we add these viewpoints to a set P0
in, and we insert them in H. After possibly performing this
operation inP0, we proceed as follows: We extract the closest viewpoint to qofP0; if it is closer to qthan pmax, we add
this viewpoint toP0
in, we insert it in H, we add viewpoint pmaxtoPout, and we update pmax. Notice that pmaxcan be
updated by ﬁnding the predecessor in Hof the “old” pmax, that is, in O(logm) time. We repeat this process until P0is
empty or the next element in P0is farther to qthan pmax. Then we insert the remaining viewpoints of P0(if any) in
H. Finally, we report vertex qtogether with the set P0
in(containing the new viewpoints in the set of `closest visible
viewpoints) and the set Pout(containing the viewpoints that stop belonging to the set of `closest visible viewpoints).
Clearly, every change in the visibility status of a viewpoint and every intersection of Twith the bisector of two
visible viewpoints can be processed in O(logm+logn) time. Hence, we obtain:
Theorem 3. Thekth-order Voronoi visibility map of a 1.5D terrain can be constructed in O(n+(m2+kc)logn)time
and O (n+m2+kc)space.
4.2. Other distances
Given q;ronTwith x(q)<x(r), two other natural distances between qandrare the Euclidean length of the
portionT[q;r], which we will call Euclidean distance along the terrain , and the number of vertices in the portion
T(q;r), which we will call link distance .5We may deﬁne the V oronoi visibility map of Tbased on these distances.
The relevant di erence with respect to the standard case is the shape of the bisectors between two viewpoints pi
andpj. In the case of the Euclidean distance along the terrain, there is exactly one point of Tthat is equidistant to pi
andpj, and this point can be computed in O(logn) time after preprocessing Tso that the Euclidean distance along the
terrain between any pair of vertices of Tcan be computed in O(1) time.6Regarding the link distance, if there is an odd
number of vertices between piandpj, there is exactly one vertex of Tthat is equidistant to piandpj, and this vertex
can be computed in O(1) time. However, if there is an even number of vertices between piandpj, there is an open
edge ofTsuch that all of its points are at the same link distance from piandpj. In this case, we must either allow the
border between two consecutive V oronoi regions to be 1-dimensional, or, if simplicity is more desirable, we might
(artiﬁcially) select an interior point of this edge as the intersection point between Tand the bisector of piandpj.
After adding the corresponding candidates for events of type (iii) based on the explanations in the previous
paragraph, the rest of the algorithm is equal to the one for the general case. The running time remains the same because,
given a pair of points on T, in both cases the distance between them can be computed in O(1) time. Therefore, we
conclude:
Theorem 4. The Voronoi visibility map of a 1.5D terrain with respect to the Euclidean distance along the terrain or to
the link distance can be constructed in O (n+(m2+kc) log n)time and O (n+m2+kc)space.
5. Computation of r
We recall that ris the minimum value of rsuch that, if the viewpoints can only see objects that are within distance
r, the visibility map of Tdoes not change.
LetPrdenote the set of viewpoints Pwith the restriction that the visibility range of the viewpoints is r. We then
may deﬁne Vis(T;Pr),V orVis (T;Pr). . . in the natural way. Notice that, for P1, we obtain the same objects as in the
standard case.
Letd(x;y) denote the Euclidean distance between two points x;y2R2.
Lemma 3. r=max
i=1;:::;mfsup
x2WT(pi;P1)d(pi;x)g.
5For the link distance, we take the open portion of the terrain T(q;r) so that any two points on the same edge (including the endpoints) are at
(link) distance zero.
6If we store, for every vertex qofT, the Euclidean distance along the terrain qdbetween qand the left-most point of T, then the Euclidean
distance along the terrain between vertices q;rofTsuch that x(q)<x(r) isrd qd.
9Proof. Letpiandxbe a viewpoint and a point of Tachieving the maximum in the right hand expression. If r<d(pi;x),
xwould not be visible from piinVis(T;Pr). Since xbelongs to the boundary of WT(pi;P1), all other viewpoints
seeing xhave a distance to xthat is greater than or equal to d(pi;x); thus, xwould also not be visible from any of them
in Vis(T;Pr). Since xis visible in Vis(T;P1)7, we reach a contradiction. Therefore, rd(pi;x).
On the other hand, to keep Vis(T;P1) unchanged, it is enough to maintain the closure of WT(pi;P1) visible for
alli, since Vis(T;P1) is equal to the union of the closures of the regions WT(pi;P1). If we set a visibility range of
sup
x2WT(pi;P1)d(pi;x), the closure ofWT(pi;P1) indeed remains visible. Consequently, rmax
i=1;:::;mfsup
x2WT(pi;P1)d(pi;x)g.
Using this characterization of r, we can prove the following:
Theorem 5. The problem of computing the minimum value rsuch that Vis(T;Pr)=Vis(T;P1)can be solved in
O(n+(m2+kc) log n)time.
Proof. By Lemma 3, it su ces to consider the distances between the vertices of V orVis (T;P1) (that is, the points on
the boundary of the V oronoi viewsheds) and their associated viewpoints. Consequently, the problem can be trivially
solved in linear time if V orVis( T;P1) is known.
6. Final remark
As indicated in [ 12], in the running time of the algorithm to compute ColVis (T;P), the term m2logndisappears if
we assume that no two viewpoints change from invisible to visible at the same point of T. This can always be achieved
by inﬁnitesimally perturbing the terrain. However, such a perturbation does not make the same term disappear from
the running time of the presented algorithm to compute V orVis (T;P). Given that one of the bounds in Theorem 1
guarantees that kv=O(kc+m), it remains as an open problem to design an algorithm for V orVis (T;P) that is equally
faster than that for ColVis( T;P) for all possible instances.
References
[1]Afshani, P., de Berg, M., Casanova, H., Karsin, B., Lambrechts, C., Sitchinava, N., Tsirogiannis, C., 2018. An e cient algorithm for the 1D
total visibility-index problem and its parallelization. Journal of Experimental Algorithmics 23, 1–23.
[2]Ben-Moshe, B., Hall-Holt, O., Katz, M.J., Mitchell, J.S., 2004. Computing the visibility graph of points within a polygon, in: Proceedings of
the 20th Annual Symposium on Computational Geometry, pp. 27–35.
[3]Ben-Moshe, B., Katz, M.J., Mitchell, J.S., 2007. A constant-factor approximation algorithm for optimal 1.5 d terrain guarding. SIAM Journal
on Computing 36, 1631–1647.
[4]Catry, F.X., Rego, F.C., Santos, T., Almeida, J., Relvas, P., 2007. Forest ﬁres prevention in Portugal - using GIS to help improving early ﬁre
detection e ectiveness, in: Proceedings of the 4th International Wildland Fire Conference.
[5]Chazelle, B., Edelsbrunner, H., Grigni, M., Guibas, L.J., Hershberger, J., Sharir, M., Snoeyink, J., 1994. Ray shooting in polygons using
geodesic triangulations. Algorithmica 12, 54–68.
[6]Daescu, O., Friedrichs, S., Malik, H., Polishchuk, V ., Schmidt, C., 2019. Altitude terrain guarding and guarding uni-monotone polygons.
Computational Geometry: Theory and Applications 84, 22–35.
[7]Eisenbrand, F., Funke, S., Karrenbauer, A., Matijevic, D., 2008. Energy-aware stage illumination. International Journal of Computational
Geometry & Applications 18, 107–129.
[8]Ernestus, M., Friedrichs, S., Hemmer, M., Kokem ¨uller, J., Kr ¨oller, A., Moeini, M., Schmidt, C., 2017. Algorithms for art gallery illumination.
Journal of Global Optimization 68, 23–45.
[9]Friedrichs, S., Hemmer, M., King, J., Schmidt, C., 2016. The continuous 1.5D terrain guarding problem: Discretization, optimal solutions, and
PTAS. Journal of Computational Geometry 7, 256–284.
[10] Friedrichs, S., Hemmer, M., Schmidt, C., 2014. A PTAS for the continuous 1.5D terrain guarding problem, in: Proceedings of the 26th
Canadian Conference on Computational Geometry.
[11] Gibson, M., Kanade, G., Krohn, E., Varadarajan, K., 2009. An approximation scheme for terrain guarding, in: Approximation, Randomization,
and Combinatorial Optimization. Algorithms and Techniques. Springer, pp. 140–148.
[12] Hurtado, F., L ¨oer, M., Matos, I., Sacrist ´an, V ., Saumell, M., Silveira, R.I., Staals, F., 2014. Terrain visibility with multiple viewpoints.
International Journal of Computational Geometry & Applications 24, 275–306.
7It follows from our deﬁnition of visibility that the maximal visible portions of Tare closed and, hence, the points on the boundary of the V oronoi
viewsheds are visible.
10[13] Joe, B., Simpson, R.B., 1987. Corrections to Lee’s visibility polygon algorithm. BIT Numerical Mathematics 27, 458–473.
[14] King, J., Krohn, E., 2011. Terrain guarding is NP-hard. SIAM Journal on Computing 40, 1316–1339.
[15] M¨oller, B., 2006. Changing wind-power landscapes: regional assessment of visual impact on land use and population in Northern Jutland,
Denmark. Applied Energy 83, 477–494. doi: 10.1016/j.apenergy.2005.04.004 .
[16] O’Rourke, J., 2006. Open problems from CCCG 2005., in: Proceedings of the 18th Canadian Conference on Computational Geometry.
[17] Yick, J., Mukherjee, B., Ghosal, D., 2008. Wireless sensor network survey. Computer Networks 52, 2292–2330. doi: 10.1016/j.comnet.
2008.04.002 .
11