Preventing Object-centric Discovery of Unsound
Process Models for Object Interactions with
Loops in Collaborative Systems:
Extended Version
Janik-Vasily Benzin1, Gyunam Park2, and Stefanie Rinderle-Ma1
1Technical University of Munich, Germany; TUM School of Computation,
Information and Technology
fjanik.benzin,stefanie.rinderle-ma g@tum.de
2Chair of Process and Data Science, Computer Science, RWTH-Aachen University,
gnpark@pads.rwth-aachen.de
Abstract. Object-centric process discovery (OCPD) constitutes a para-
digm shift in process mining. Instead of assuming a single case notion
present in the event log, OCPD can handle events without a single case
notion, but that are instead related to a collection of objects each having
a certain type. The object types constitute multiple, interacting case no-
tions. The output of OCPD is an object-centric Petri net, i.e. a Petri net
with object-typed places, that represents the parallel execution of mul-
tiple execution ows corresponding to object types. Similar to classical
process discovery, where we aim for behaviorally sound process models as
a result, in OCPD, we aim for soundness of the resulting object-centric
Petri nets. However, the existing OCPD approach can result in viola-
tions of soundness. As we will show, one violation arises for multiple
interacting object types with loops that arise in collaborative systems.
This paper proposes an extended OCPD approach and proves that it
does not suer from this violation of soundness of the resulting object-
centric Petri nets. We also show how we prevent the OCPD approach
from introducing spurious interactions in the discovered object-centric
Petri net. The proposed extension is prototypically implemented.
Keywords: Process mining ·Object-centric Process Discovery ·Object-
centric Petri Nets ·Behavorial Soundness.
1 Introduction
Object-centric process discovery (OCPD) shifts the focus of process discovery
from classical event logs with a single case notion relating events of a single
business process execution to the often more realistic object-centric event logs
[5]. Events in an object-centric event log are not related to a single case notion,
but instead are related to multiple objects of a certain object type. Each of these
objects' execution ows is recorded in the respective events. If multiple objects
interact, the corresponding event is related to these multiple objects. Hence,arXiv:2303.16680v2  [cs.AI]  31 Mar 20232 Janik-Vasily Benzin et al.
an object-centric event log records the execution history of multiple, interacting
execution ows. Since classical process discovery techniques such as the Inductive
Miner [15] assume a single case notion, none of the existing techniques can
be directly applied to an object-centric event log. Although attening presents
an approach to extract single case notions from object-centric event logs, the
resulting simple event logs can suer from the issues of convergence , i.e., events
have to be duplicated, divergence , i.e., the actual order of events is lost, and
deciency , i.e., events are missing in the simple event log [5].
To discover holistic process models that highlight the relationship between
the various execution ows based on object-centric event logs, [5] proposes the
only existing OCPD approach that discovers holistic process models in the form
ofobject-centric Petri nets . Object-centric Petri nets are better suited than
artifact-centric process models [11,10] and Object-centric Behavioral Constraint
(OCBC) models [16,7] as starting point for analysing processes spanning multiple
object types as artifact-centric process models do not visualize the overall busi-
ness process in a single diagram and OCBC models tend to quickly become too
complex and the corresponding discovery and conformance checking approach
are not very scalable [5].
Similar to classical process discovery [1], OCPD should discover sound object-
centric Petri nets, since otherwise objects may be left at some point in their ex-
ecution ow leading to an object-centric Petri net that only accepts the empty
language or some activities can never be executed. For the existing OCPD ap-
proach, two limitations can be identied for settings in which the OCPD ap-
proach fails to discover sound process models or introduces restrictions for the
business process that are not supported by the given object-centric event log.
These settings can arise in multi-agent systems [19], service compositions ,ser-
vice orchestrations [20], and process choreographies [12], i.e., in collaborative sys-
tems characterized by collaboration between various entities whose workows
are modeled as a business process [21,14].
For collaborative systems, OCPD can discover process models by conceptu-
alizing similarly behaving agents, similarly behaving services, and business pro-
cesses in process choreographies as object types respectively. As a consequence,
object interactions in the object-centric Petri net model synchronous interaction
patterns between collaborating agents, services and business processes. These
interaction patterns can quickly become complex [14] and atypical for classic
object-centric settings due to the lack of a central controlling authority [21,20].
To handle synchronous interaction patterns in OCPD, [19] propose to specify a
set of interaction pattern models as additional input that result in sound process
models by design. Hence, the approach in [19] depends on specied interaction
pattern models as additional input to discover sound process models. As the
approach in [19] does not allow loops in the workow of an agent, the set of
discoverable process models is limited. In contrast, our proposed extensions to
overcome the two limitations of OCPD do not require models of interface pat-
terns and can handle loops.Title Suppressed Due to Excessive Length 3
Table 1. Two fragments L1; L2of event logs (separated by the horizontal line in the
table). Each event can refer to objects of a certain object type (columns retail credit
to service provider are object types). An event is represented by a row (except the
header).
id activity timestamp retail creditcorporate
creditcoordinatorservice
providercustomer
0ab63 initialize 2023-03-10T15:55:28 H H f151a3 gH H
6b0b9 receive request 2023-03-10T15:55:29 H H f151a3 gH f0a3a3 g
ddf21 delegate request 2023-03-10T15:55:30 H H f151a3 g f ec135 gH
kj875 fail on request 2023-03-11T11:00:31 H H fec135 gH
9c7f8 receive request 2023-03-11T11:00:32 H H f151a3 g f ec135 gH
207f2 escalate request 2023-03-11T11:00:33 H H f151a3 gH H
b2589 check statement 2023-03-12T15:50:25 fa0287 gH H H H
9e602 check statement 2023-03-12T15:50:26 H f677f7 gH H H
65145 report to authority 2023-03-12T15:50:37 fa0287 g f 677f7 gH H H
To illustrate the benets and limitations of applying OCPD to collaborative
systems, Table 1 contains two object-centric event log fragments L1andL2. The
rst fragment is recorded in information systems that support a \coordinator"
agent in running a marketplace that matches requests by \customer agents" with
services to full the requests oered by \service provider" agents. To discover
a process model for the multi-agent system in terms of the respective agent's
workow and the interaction patterns between agents, we conceptualize the three
agent types as object types.
The multi-agent system of matching requests results in the following inter-
action pattern. After initializing, the \coordinator" receives a request from the
\customer", i.e., event with id \6b0b9" records objects of types \coordinator"
and \customer". The \coordinator" delegates the request to a matching \service
provider" that subsequently fails on the request and, thus, gives the request back
to the \coordinator". From the point of the "coordinator", another request is
received (cf. event with id \9c7f9"). This request is at last escalated to signal
employees of the \coordinator" agent that a manual matching has to take place.
From the viewpoint of the \coordinator", the activity \receive request" repre-
sents the DO-part of a loop with the REDO-part being the \delegate request".
From the viewpoint of \service provider", the two activities \delegate request"
and \receive request" are in sequential order due to the rst \receive request"
being unrelated to \service provider". The mismatch of activity labels recorded
in the event log with the semantics of the real-world activities, namely that the
activity receiving a request is semantically dependent on further attributes, e.g.,
customer agents vs. service provider agents, and the context, e.g., the fact that
the second request was already delegated before, presents a serious problem for
the existing OCPD techniques in [5,19]. The loop for the \coordinator" agent
excludes the technique in [19]. While the technique in [5] is generic enough that
it can be applied, it discovers an object-centric Petri net depicted in Figure 1
that deadlocks after transition \t1" red, i.e., the model is unsound. As we as-
sume an event log as the only input and require handling of loops, we extend4 Janik-Vasily Benzin et al.
the OCPD approach to overcome the limitation of discovering unsound process
models in light of object interactions with loops .
escalate request
delegate request fail on request
receive request
initialize
CoordinatorCoordinator Coordinator
CoordinatorCustomer
CustomerService Provider Service ProviderService Provider
Service Providerc1p1p2p3
p4
p4p5
t1t2t5 t3t4 11
1
c2c3c4
Fig. 1. Unsound accepting object-centric Petri net AN 1discovered for the rst event
log fragment L1by the OCPD approach [5] due to object interactions with loops
contained in L1. Object types of places, e.g. coordinator, are denoted below a place
and depicted by color and nal markings are denoted as red number next to a place.
Initial markings are depicted by tokens and chosen in [5] such that the respective
agent's workow starts with its' rst activity.
report to authority check statementRetail Credit Retail CreditRetail
Credit
Corporate CreditCorporate CreditCorporate Credits1
g1g2 g3s2
s3
t1t21
1
Fig. 2. Sound accepting object-centric Petri net AN 2discovered for the second event
log fragment L2by the OCPD approach [5]. Due to the spurious interaction introduced
by the OCPD approach, the object-centric Petri net AN 2cannot replay the event log
fragment L2, as transition t1 can only re once.
The second fragment L2shows three events recorded in information systems
of a bank. These information systems support a bank's dierent business pro-
cesses \retail credit" and \corporate credit" transactions [13]. Despite the dier-
ence in business processes, every transaction has to be similarly reported in the
annual report to an authority3. Consequently, the rst two events recording the
activity of checking credit statements are only related to either \retail credit" or
\corporate credit", but an event recording the activity of reporting to an author-
ity is related to both \retail credit" and \corporate credit". Although the event
log does not record any interaction between the \retail credit" and \corporate
credit" business processes for \check statement", the OCPD approach introduces
aspurious interaction (cf. Figure 2). The spurious interaction restricts the exe-
cution of the respective business processes in the process orchestration without
support by the object-centric event log.
3https://www.ifrs.org/Title Suppressed Due to Excessive Length 5
To discover process models for collaborative systems, we formalize the two
identied limitations for the OCPD approach. For the object interactions with
loops limitation, we show that the OCPD approach discovers unsound process
models. We propose three extensions of the generic OCPD approach to overcome
the limitations. To that end, generalizations of workow nets and soundness to
the object-centric setting are dened.
The remainder is structured as follows. Section 2 introduces OCPD prelim-
inaries. Section 3 formalizes desired properties of OCPD concepts and interac-
tion patterns contained in event logs that represent problems for the OCPD
approach and identies two such patterns, i.e., two limitations of the OCPD ap-
proach. Section 4 presents three extensions of the OCPD approach to overcome
the limitations. Section 5 describes related work. Finally, Section 6 concludes
this work.
2 Preliminaries
We state basic notations and denitions (Sect. 2.1) required for OCPD (Sect. 2.2).
The existing generic OCPD approach [5] is presented in Sect. 2.2. d.
2.1 Basic Notations and Denitions
Given a function fPXÑY, we denote it's domain XasdompfqXand its
range asranpfqtyPY|DxPXfpxqyuY. Given set X1X, we denote
the restriction of function fonX1asfæX1tpx1;fpx1qq|x1PX1u4. We extend
function application to sets fpX1qtyPY|DxPX1fpxqyuforX1X, also
for n-ary functions fnPX1:::XnÑY,fpX1qfpX1:::X1qtyP
Y|Dx1;:::;x nPX1fpx1;:::;xnqyu. A partial function fPXÛYis only dened
for elements xPXthat are in the domain xPdompfq, i.e.,fpx1qis undened
forx1Rdompfq.
Atraceof lengthnoverXis an ordered collection Pt1;:::;nuÑXwith
||n. The set of all sequences over Xis denoted as X. Given a universe of
activity names Uact, asimple event log is a multiset of traces LSELPBpUactq
USEL. Traces record business process executions that are modelled as a labeled
Petri net . In the following, we use common denitions, semantics and notation
for labeled Petri nets, accepting Petri nets ,workow nets and soundness of
workow nets and refer to [5,25,1] for details. The universe of accepting Petri
nets is denoted as UAPN. Aplace-bordered fragment N1of a labeled Petri net N
is aweakly connected subnet withN1pP1;T1;FæP1T1;læT1q,P1P,T1T,
FæP1T1FXppP1T1qYpT1P1qqsuch that all vertices x1PP1YT1that are
connected to vertices xPpPYTqzpTYPqinNthat do not belong to N1are
places, i.e.,tx1|px1;tqPFzF1_pt;x1qPFzF1uP1.
A discovery technique disc is a function mapping simple event logs onto
accepting Petri nets, i.e., discPUSELÑUAPN [5]. In the following, we denote
4The restriction is similarly dened and denoted for relation RXX.6 Janik-Vasily Benzin et al.
withIMPUSELÑUAPN the Inductive process discovery technique (Inductive
miner) [15]. The Inductive miner discovers process trees that correspond to sound
accepting Petri nets [15,25], e.g., Ñ pa;öpb;cqqfor activities a;b;cPUacta
sequence of activity aand a loop with DO-part band REDO-part c.
2.2 Object-centric Event Logs, Petri Nets and Process Discovery
Events in an object-centric event log are dened with the following universes.
Denition 1 (Object-centric Event Log [5]). L pE;¨Eqis an object-
centric event log with EUevent and¨EEEsuch that:
{¨Edenes a partial order (reexive, antisymmetric, and transitive),
{@e1;e2PEeipe1qeipe2qñe1e2,
{@e1;e2PEe1¨Ee2ñtimepe1q¤timepe2q,
given the following universes:
{UeventUeiUactUtimeUomapUvmap is the universe of events.
{Ueiis the universe of event identiers,
{Utime is the universe of timestamps,
{Uotis the universe of objects types,
{Uoiis the universe of object identiers,
{typePUoiÑUotassigns precisely one object type to each object identier,
{UomaptomapPUotÛPpUoiq|@otPdompomapq@oiPomappotqtypepoiqotuis
the universe of all object mappings indicating which object identiers are
included per type5,
{Uattis the universe of attribute names,
{Uvalis the universe of attribute values, and
{UvmapUattÛUvalis the universe of value assignments.
Givenepei;act;time;omap;vmap qPUevent , we dene the following event
projections: eipeqei;actpeqact;timepeqtime;omappeqomap;
vmappeqvmap . We denote the set of event logs as UOCEL .
Hence, an event e pei;act;time;omap;vmap q PUevent is identied by
its unique event identier ei, the activity act, a timestamp time and the two
mappingsomap andvmap that reference the objects related to the event and
the attribute values. For the rst row of Table 1 describing event e0, we have
eipe0q0ab63;actpe0qinitialize;timepe0q2023-03-10T15:55:28 ;
omappe0qpcoordinatorqt 151a3u;omappe0qpCustomerq
omappe0qpservice provider qH;andvmappe0qpatqK for allatPUAN.
As stated in Section 1, a single case notion is missing in an event log LP
UOCEL , but instead each event is related to objects of certain object types that
is captured in omap . Any of these object types otcan be used to atten the event
log into a simple event log Lothaving a single case notion dened by objects of
5We assume that if otRdompomapq, then omappotqH .Title Suppressed Due to Excessive Length 7
that object type. We denote the attening of an event log as flattenotand refer
to [5] for a formal denition.
Note, that after attening, the attened event log can be used as a simple
event log such that all classical process discovery techniques can be applied on
the attened event log. As described in Section 1, attening can introduce serious
issues into the attened, simple event log in the form of divergence, convergence
and deciency. As these issues are not critical to the limitations in Section 3 and
extensions in Section 4, we refer to [4,5] for a formalization of these issues.
By typing places with a function ptPPÑUot, the respective execution ows
of objects of a certain type are distinguished in a labeled Petri net. Furthermore,
multiple objects of a given object type can be related to a single event esuch
that variable arcs connected to a transition labeled with the activity of eare
possible. Extending labeled Petri nets with place types and variable arcs results
in an object-centric Petri net.
Denition 2 (Object-centric Petri Net [5]). Anobject-centric Petri net
is a tupleON pN;pt;FvarqwhereN pP;T;F;Lqis a labeled Petri net,
ptPPÑUotmaps places onto object types, and FvarFis the subset of
variable arcs.
Without the well-formed property stated in [5], it is possible for a transition
to have a variable arc from a place of object type ot1and a non-variable arc to
another place of object type ot1, i.e., objects of type ot1disappear. As this is
not desired, well-formed object centric Petri nets exclude such structures.
In the following, we omit to say well-formed object-centric Petri net, as any
forthcoming object-centric Petri net is meant to be well-formed and refer to
[5] for a formal denition. In contrast to the markings of labeled Petri nets,
markings in an object-centric Petri net carry object identiers. Consequently,
possible tokens have to mind the respective place type. Due to variable arcs,
it is possible for a transition to consume multiple tokens at once during ring.
What tokens, i.e. what object identiers of a certain object type, are consumed
is captured in function bPUomap and denoted in a binding pt;bqfor transition
t.
Denition 3 (Marking, Binding Execution [5]). LetON pN;pt;Fvarq
be an object-centric Petri net with N pP;T;F;lq.QON tpp;oiq PP
Uoi|typepoiq ptppquis the set of possible tokens. A marking MofON is
a multiset of tokens, i.e., MPBpQONq. LetONpN;pt;Fvarqbe an object-
centric Petri net with NpP;T;F;lq.Btpt;bqPTUomap|dompbqtplptq^
@otPtplnvptq|bpotq| 1uis the set of all possible bindings. pt;bqPBis a binding
and corresponds to the execution of transition tconsuming selected objects from
the input places and producing the corresponding objects for the output places
(both specied by b).conspt;bq  rpp;oiq PQON|pP t^oiPbpptppqqsis the
multiset of tokens to be consumed given binding pt;bq.prodpt;bq  rpp;oiq P
QON|pPt^oiPbpptppqqsis the multiset of tokens to be produced given binding
pt;bq. Bindingpt;bqisenabled in marking MPBpQONqifconspt;bq¤M. The8 Janik-Vasily Benzin et al.
occurence of an enabled binding pt;bqin marking Mleads to the new marking
M1Mconspt;bq prodpt;bq. This is denoted as Mpt;bqÝ ÝÝ ÑM1.
In contrast to labeled Petri nets, the execution of a transition tPTin an
object-centric Petri net consumes objects from its pre-settand produces objects
to its post-settas tokens are objects.
Similar to the accepting Petri nets, an accepting object-centric Petri net
denes an initial and nal marking.
Denition 4 (Accepting Object-centric Petri Net [5]). An accepting
object-centric Petri net is a tuple AN pON;Minit;Mfinalqcomposed of an
object-centric Petri net ON pN;pt;Fvarq, an initial marking MinitPQON,
and a nal marking MfinalPQON. The universe of all accepting object-centric
Petri nets is denoted as UAN.
Analogous to a process discovery technique discPUSELÑUAPN that
discovers accepting Petri nets given a simple event log, OCPD techniques ocpdP
UOCELÑUANdiscover accepting object-centric Petri nets given an event log.
As the only existing OCPD technique that discovers accepting object-centric
Petri nets, the idea behind the generic OCPD approach of [5] is as follows.
As depicted in Figure 3, the generic OCPD approach ocpdbaseis decom-
posed into three general mappings. First, discOTattens the event log for each
of then |OT|object types appearing in the log and discovers accepting
Petri nets with a process discovery technique disc. Second,mergenmerges all
discovered accepting Petri nets into a single labeled Petri net by taking the
union of places, transitions, the ow relation and labeling function. The merg-
ing is dened such that only transitions having the same activity label result
in the same transition name, i.e., only transitions with the same activity la-
bel result in the same transition in the merged Petri net. Third, finalize adds
place types, variable arcs and initial and nal markings to yield an accept-
ing object-centric Petri net. All in all, the resulting object-centric Petri net
ON is characterized by the naccepting Petri nets discovered for each object
type:ONæotAPNotpNot;Tot;Fot;læTotqwithNottpPP|ptppqotu,
TotttPT|DpPtYtptppqotu, andFotFXppPotTotqYpTotPotqq(cf.
Figure 3).
Despite its exibility with respect to the employed process discovery tech-
nique and the method to identify variable arcs, the proposed OCPD approach
has two limitations for discovering process models for collaborative systems.
3 Limitations of OCPD Approach: Object Interactions
with Loops and Spurios Interactions
First, we elaborate on discovering process models for collaborative systems that
lead to the limitations of the OCPD approach in Sect. 3.1. To represent and
formalize the limitations of the OCPD approach, we propose generalizationsTitle Suppressed Due to Excessive Length 9
Object-centric
event log 
Simple 
event logs
Accepting 
Petri nets
Labeled 
Petri net
Accepting
Object-centric 
Petri net
Fig. 3. Overview of OCPD approach [5].
of desired properties for object-centric Petri nets, introduce the notion of an
interaction pattern contained in the event log that constitutes a problem for
the OCPD approach and isolate the merging and nalizing mappings as critical
for discovering desired object-centric Petri nets in a central property of OCPD
(Sect. 3.2). Then, the object interactions with loops limitations is dened as
a pattern and shown to be leading to the discovery of unsound object-centric
Petri nets by the OCPD approach (Sect. 3.3). Finally, the spurious interaction
limitation is conceptualized (Sect. 3.4).
3.1 Discovery of Process Models for Collaborative Systems
The main conceptual idea behind the discovery of process models for collabora-
tive systems, i.e., multi-agent systems, service compositions, service orchestra-
tions and process choreographies, is the interpretation of similarly behaving (=
similar workow) system entities, e.g., agents, services or partner business pro-
cesses, as object types. We can abstract from the specic entity of the respective
collaborative system, e.g., an agent or a service, as long as we have an event log
from the collaborative system and aim to discover a process model, because each
entity exhibits a workow recorded through events in the event log.
If OCPD aims to discover a business process instead of a collaborative sys-
tem process model, an object type groups objects with a similar workow, e.g.,
\orders", \items", and \packages" in [4], such that the OCPD approach discov-
ers WF-nets for each object type. For a business process, object interactions are
the result of relationships between object types in the data model of the busi-
ness process, e.g., a one-to-many relationship between the \order" object type
and the \item" object type. By conceptualizing similarly behaving entities of
collaborative systems as object types, the OCPD approach discovers a process
model of a collaborative system and the collaboration model of the collaborative
system replaces the data model of a business process.
In Figure 4, a collaboration model for the example of a multi-agent system
with a \coordinator", \customer" and \service provider" from Section 1 is de-10 Janik-Vasily Benzin et al.
public task control ﬂow message ﬂow
+Customerstart+Prepare
own
services
Receive
requestFinalize
requestService ProviderAcquire
end 
customerFulﬁl 
end 
customerend
startDelegate 
requestFail on 
request
endBundle
oﬀering
Succeed on
requestCoordinatorInitialize
startReceive
requestReceive
request
Receive
requestDelegate 
request
endFinalize
 request
Escalate
requestManual
matching
Fig. 4. Collaboration model resulting in the object interaction with loops pattern.
Activities in gray are not in the event log fragment L1in Table 1.
picted. Activities of the collaboration model correspond to activity labels of the
respective event recorded in the event log fragment L1. Activities in gray are not
part of the event log fragment. The collaboration model shows that the \coor-
dinator" models receiving requests from the \customer" with the same activity
label as receiving requests from the \service provider". Hence, the interaction
pattern depicted in the collaboration model and explained in detail in Section 1
results in the object interactions with loops pattern. The OCPD approach dis-
covers unsound process models (cf. Figure 1) for collaborative systems that ex-
hibit the object interactions with loops pattern, because it has the limitation
of expecting similar activity labels to refer to similar object interactions that is
particularly problematic for discovering process models of collaborative systems.
Collaborative systems are characterized by a lack of a central authority gov-
erning the system [21] such that activity labels have to be interpreted with more
caution than in the settings with a central authority, e.g., a business process
of a company. A controlled vocabulary cannot be assumed in these situations
[20] and interaction patterns in a collaboration model can become more complex
than data model relationships [19]. Moving to the more ne-grained attribute
equivalence [20] reveals that the activity label of receiving a request in Figure 4
from a \customer" and a \service provider" is not the same. One of our exten-
sions to the OCPD approach in Section 4 builds on the concept of attribute
equivalence.
3.2 Properties of Object-centric Petri Nets
The workow net as a structural property and its soundness as a behavior prop-
erty are central concepts in process mining [1]. In object-centric process mining,Title Suppressed Due to Excessive Length 11
these concepts are generalized to object-centric workow nets and object-centric
soundness .
Denition 5 (Object-centric Workow Net). An object-centric Petri net
ONpN;pt;Fvarqis an object-centric WF-net i:
{Everyot-type projection of the well-formed object-centric Petri net is a WF-
net, i.e., for every otPranpptq,ONæotis a WF-net. We denote the respective
source places as iotand sink places as ootof theot-type projection ONæot.
{N is weakly connected.
Hence, we require each ot-type projection to be a WF-net and we only al-
low object types to occur in an object-centric WF-net for which the event log
recorded at least one object interaction with other object types appearing in the
event log.
Denition 6 (Object-centric Soundness). An accepting object-centric WF-
netANpON;Minit;Mfinalqissound i:
{LetONæotbe theot-type projection, iotandootbe its source and sink place.
Initial and nal marking agree with the source and sink, i.e., @otPranpptq
MinitzptiotuUoiqH^MfinalzptootuUoiqH .
{Option to complete, i.e., @MPRpON;M initqMfinalPRpON;Mq, where
RpON;Mqdenotes the set of markings reachable from marking M.
{No dead transitions, i.e., @tPTDM;M1PRpON;M initqDbPUomapMpt;bqÝ ÝÝ ÑM1.
We say sound instead of object-centric sound.
Since an object-centric WF-net has as many source and sink places as it has
object types, the initial and nal marking of the accepting object-centric Petri
net is only allowed to mark these. The property of "option to complete" and "no
dead transitions" is a straightforward generalization for object-centric Petri nets
using the binding executions. In Figure 5, a sound object-centric WF-net for the
log fragment L1in Table 1 is depicted. Similar to the corresponding collaboration
model in Figure 4, the \coordinator" rst receives a request from a \customer"
and only later receives a request from the \service provider". Despite the object
interactions with loops pattern in the log fragment, Figure 5 shows that a sound
object-centric WF-net exists that can model the behavior of the collaborative
system.
As explained in Section 1, we only assume an event log as input to the OCPD
approach such that the collaboration model in Figure 4 cannot be directly used.
Nevertheless, the collaboration model denes the interaction patterns between
the entities of a collaborative system. As explained in Sect. 3.1, these interaction
patterns correspond to object interactions in the event log. Consequently, we
formalize interaction patterns of collaborative systems as object interactions on
an event log.
The notion of an object-centric event log pattern is a logical formula that is
satised i the interaction pattern of a collaboration model is contained in the12 Janik-Vasily Benzin et al.
delegate request
fail on requestreceive request
initializeCoordinator
CoordinatorCoordinator
Coordinator Coordinator CoordinatorCustomerCustomerreceive requestc1p4p5
t1t2 t5t6
t3t41
11
c2c2c3c4
c5
c6
Service ProviderService Provider
Service Providerp1p2p3escalate request
Fig. 5. Sound object-centric WF-net for the log fragment L1that corresponds to the
collaboration model of the collaborative system.
event log. Therefore, it can be checked for a given event log whether the OCPD
approach faces the corresponding interaction pattern by evaluating the logical
formula dening the pattern given events of the event log.
Denition 7 (Object-centric Event Log Pattern). An event log pattern is
a formula'in rst-order logic with variables over the universe of events Uevent
that corresponds to an interaction pattern of the collaborative system such that
the set of event logs satisfying 'is a strict subset of the universe of event logs,
i.e.,UOCELæ'tLpE;¨EqPUOCEL|DE1E'pE1quUOCEL . We say that
ifLPUOCELæ', the event log Lcontains the pattern '. We denote the universe
of event log patterns as Upt. GivenLPUOCELæ', we dene the event log L '
as the event log in which all the events that satisfy pattern 'are removed, i.e.,
L 'pE ';¨E 'qwithE 'the largest subset of Esuch that 'pE 'q.
In Figure 4, the rst interaction between the \customer" and the \coordi-
nator" corresponds to the object-centric event log pattern 'that is true for
an eventei there exist two distinct object types ot1;ot2appearing in the
event log such that the event records objects of both types, i.e. omappeqpot1q
H^omappeqpot2qH . By dening interaction patterns on event logs, we do
not require collaboration models in discovering process models of collaborative
systems with the OCPD approach. As dened, given a pattern and an event
log containing the pattern, we denote the largest event (sub)log by L 'that
does not contain the pattern anymore. This allows us to isolate the problematic
events from the other events in an event log, thus, enabling us to prove for OCPD
approach extensions that the extension discovers sound object-centric Petri nets
given event logs containing the pattern.
Denition 8 ( PT-Sound Object-centric Process Discovery Technique).
LetPTUptbe a set of event log patterns and LpE;¨EqPULbe an event
log with object types OT. LetocpdPUOCELÑUANbe an OCPD approach that
can be decomposed into three mappings ocpdfinalizemergendiscOTwith
discOTPUOCELÑUAPN:::UAPN ,mergenPUAPN 1:::UAPN nÑ
UON, andfinalizePUNÑUAN. OCPD approach ocpd isPT-sound i for ev-
ery object-centric event log pattern 'PPTand for every event log LPUOCELæ'
containing the pattern 'such thatocpdpL 'qis a sound object-centric WF-net
anddiscOTpLqis a|OT|-length tuple of sound WF-nets it holds that:
{finalizemergenpdiscOTpLqqis a sound object-centric WF-net.Title Suppressed Due to Excessive Length 13
The notion of a PT-sound OCPD technique maintains the exibility inher-
ent in the proposed generic OCPD approach and isolates potentially problematic
constructions of merging and nalizing from potential problems during the pro-
cess discovery on simple event logs. Furthermore, the patterns in focus, i.e.,
members of PT, are isolated from potential further problematic patterns in an
event log by requiring discovery of a sound object-centric WF-net for the sublog
L '. As mentioned, this isolation enables proving sound OCPD techniques for
single or multiple patterns, in particular for the object interactions with loops
pattern.
3.3 Object Interactions with Loops
As described in Section 1 for the example in Table 1, the OCPD approach
discovers unsound process models in light of the object interactions with loops
pattern. The pattern is characterized by two object types in an object-centric
event log for which a loop of length one is recorded for the rst object type and
the activities recorded in the DO-part of the loop do not match with respect to
the recorded object interactions.
Denition 9 (Object Interactions with Loops Pattern). LetLpE;¨Eq
be an object-centric event log. The object-centric event log pattern
'oiwlppe1;e2;e3;e4qis true i for events e1;e2;e3;e4it holds thatDot1;ot2PUot
Dact1;act 2PUactsuch that:
i all four events are dierent, i.e., eipe1qeipe2qeipe3qeipe4q,
ii the activities of the rst three events are a loop of length one, i.e., actpe1q
act1^actpe2q act2^actpe3q act1^e1¨Ee2¨Ee3^timepe1q  
timepe2q timepe3q,
iii the rst three events share an object of object type ot1, i.e.,
omappe1qpot1qXomappe2qpot1qXomappe3qpot1qH ,
iv only the second and third event share an object of object type ot2, i.e.,
omappe1qpot2qXomappe2qpot2qXomappe3qpot2q  H^omappe2qpot2qX
omappe3qpot2qH , and
v events with activity act1before the second event do not share objects with the
second event for object type ot2, i.e.,@oiPomappe2qpot2qe4¨Ee2^actpe4q
act1Ñomappe4qpot2qXtoiuH .
is the object interactions with loops object-centric event log pattern (object inter-
actions with loops pattern).
The log fragment L1in Table 1 contains the object interactions with loops
pattern'oiwlp, as the second row is event e1, the third row is event e2, the
fourth row is event e4and the fth row is event e3in the pattern. We conject
that both of our extensions proposed in Section 4 discover sound process models
for collaborative systems exhibiting the object interactions with loops pattern.
However, we only prove our conjecture for the following subpattern of the object
interactions with loop pattern.14 Janik-Vasily Benzin et al.
Denition 10 (Object Interactions with Loops Subpattern). LetL
pE;¨Eqbe an object-centric event log. The object-centric event log pattern
'oiwlsppe1;e2;e3;e4qis true i for events e1;e2;e3;e4it holds that
Dot1;ot2PUotDact1;act 2PUactsuch that:
i all four events are dierent, i.e., eipe1qeipe2qeipe3qeipe4q,
ii the activities of the rst three events are a loop of length one, i.e., actpe1q
act1^actpe2q act2^actpe3q act1^e1¨Ee2¨Ee3^timepe1q  
timepe2q timepe3q,
iii the rst three events share an object of object type ot1, i.e.,
omappe1qpot1qXomappe2qpot1qXomappe3qpot1qH ,
iv the rst three events do not share an object of object type ot2, i.e.,
omappe1qpot2qXomappe2qpot2qXomappe3qpot2qH ,
v the second and third event share an object of object type ot2, i.e.,
omappe2qpot2qXomappe3qpot2qH ,
vi the fourth event and no other event contains the activities act1oract2, i.e.,
actpe4qact1^actpe4qact2^Ee5PEactpe5qact1^actpe5qact2,
and
vii before the third event records the second execution of the DO-part of the ob-
ject execution workow of object type ot1, arbitrary events can be recorded
for both object types as long as they do not share activities with events "out-
side" of the loop and introduce further object interactions, i.e., eipe1q 
eipe2q eipe3q eipe4q^e1¨Ee4¨Ee3^timepe1q  timepe4q  
timepe3q^ppomappe4qpot1qXomappe1qpot1qH^omappe4qpot2qHq_
pomappe4qpot2qXomappe2qpot2qH^omappe4qpot1qHqq
^Ee5PEptimepe5q timepe1q_timepe3q timepe5qq^actpe5qactpe6q.
is the object interactions with loops object-centric event log pattern (object inter-
actions with loops pattern).
The object interactions with loops subpattern additionally requires that no
further object interactions are recorded "within" the loop of length one and that
the activities recorded "within" the loop do not occur outside of the loop. Hence,
the activity act1in the DO-part of the loop represents a clearly dened border
of the subpattern. This border allows us to show that the object-centric WF-
net discovered for the events of the subpattern is a place-bordered fragment of
the object-centric WF-net discovered for the whole event log that contains the
subpattern.
Lemma 1. Given the object interactions with loops subpattern ''oiwlspP
Upt, letLPUOCELæ'be an event log that contains the object interactions
with loops subpattern, OTbe the object types and Athe activities appearing in
event logL. LetL'pEzE ';¨EzE 'qbe the event (sub-)log containing all
events that satisfy the subpattern 'andOT'OTbe the object types appearing
inL'. IfocpdpL 'q AN 'is an object-centric WF-net, ocpdpL'q AN'
is an object-centric WF-net, and the Inductive miner IM is applied as pro-
cess discovery technique in discOT, thenAN'is a place-bordered fragment of
ocpdpLqAN.Title Suppressed Due to Excessive Length 15
Proof. From the subpattern's denition (vi) and (vii) (cf. Denition 10), it fol-
lows that the two object-centric WF-nets AN 'andAN'do not share any
activities and, thus, any transition labels. From the subpattern's denition (ii)
and (vii), every trace PLot1'starts with act1and ends with act1, whileact1
not occurring more than twice in any of the traces. Hence, the Inductive miner
nds a loop cut at rst applied on Lot1'that is also a node in the process tree
discovered for Lot1. From the subpattern's denition (ii) and (vii), every trace
PLot2'starts with act2, ends with it, and neither act1noract2occurring a
second time in any of the traces. Hence, the Inductive miner nds a sequence cut
rst applied on Lot2'that is also a node in the process tree discovered for Lot2.
Altogether, by denition of the process tree operators and their transformations
to WF-nets [25], the object-centric WF-net AN'is a place-bordered fragment
ofAN.
The place-bordered fragment AN'discovered for L'constitutes the fragment
ofANthat is critical in the following statements about PT-soundness (cf. The-
orem 1, Theorem 2 and Theorem 3).
Theorem 1. ForPTt'oiwlsputhe OCPD approach ocpdbaseisPT-unsound.
Proof. We prove the theorem by providing a counterexample for the opposite.
LetLbe an event log with the six events with event ids 0ab63, 6b0b9, ddf21,
kj875, 9c7f8 and 207f2 in Table 1. The four events with event ids 6b0b9, ddf21,
kj875 and 9c7f8 satisfy 'oiwlsp such that event log Lcontains subpattern 'oiwlsp .
L 'oiwlsp consists of events with event ids 0ab63 and 207f2, for which ocpdbase
trivially discovers a sound object-centric WF-net. As can be seen in Figure 1,
ocpdbasediscovers sound WF-nets for all three object types coordinator, Cus-
tomer and service provider, e.g. with  miner [18], Inductive miner [15], Heuris-
tics miner [22], ILP miner [24] or Region-based miner [2] for discotpLotq. The
accepting object-centric Petri net in Figure 1 shows that after transition "t1"
labeled with activity "initialize" no further transition can re, thus violating
the "no dead transitions" property required for an object-centric sound object-
centric WF-net. 
Theorem 1 shows that the existing OCPD approach discovers unsound pro-
cess models for all event logs containing the object interactions with loops sub-
patterns. In Section 4, we propose two extensions to the OCPD approach such
that the extended approaches discover sound process models for all event logs
containing the subpattern.
3.4 Spurious Interactions
The spurious interactions pattern 'siPUptis contained in an event log LP
UOCELæ'sii for two dierent object types ot1;ot2appearing in the event
log there exist at least two dierent events e1;e2with the same activity label
actpe1qactpe2qactsuch that these two events do not share objects of type
ot1;ot2, one event of the two events is related to an object of type ot1, the other16 Janik-Vasily Benzin et al.
related to an object of type ot2and there does not exist any other events e3with
the same activity label that share objects of types ot1;ot2.
Since the OCPD approach ocpdbaseexpects in the merging of accepting Petri
netsmergenfor transitions t1PdiscpLot1q;t2PdiscpLot2qwith the same activity
labellot1pt1qlot2pt2qactthat these are supported by object interactions in
the event log, all transitions with the same activity label are merged into a
single transition of the merged labeled Petri net (cf. Figure 2). In case of an
event log containing the spurious interactions pattern, this merging results in
merged transitions for activity label actthat are not supported by the event log.
Consequently, the accepting object-centric Petri net restricts the behavior of the
process model, i.e., the respective object execution workows for ot1;ot2cannot
execute the transition labeled with actindependently, but have to synchronize.
However, this restriction on the behavior in the process model is not supported by
the event log. In Sect. 4.2, the approach to overcome this limitation is presented.
4 Approaches to Overcome Limitations: Object
Interactions with Loops and Spurious Interactions
The two limitations object interactions with loops and spurious interactions are
both caused by the expectation of the merging mergenof the OCPD approach
ocpdbasethat similar activity labels indicate similar object interactions. Despite
the same cause in the OCPD approach, the result of the two limitations on
the discovered process model are dierent, as the former causes the ocpdbase
to discover unsound process models, while the latter does not aect soundness,
but restricts the behavior possible in the process model without support by the
event log. In Sect. 4.1, two extensions to ocpdbaseare proposed that overcome
the object interactions with loops pattern and it is shown for its subpattern that
these extensions discover sound process model despite the event log containing
the problematic subpattern. In Sect. 4.2, an extension to ocpdbaseis proposed
that overcomes the spurious interactions limitation by removing the restriction
introduced to the process model without support of the event log.
4.1 Object Interactions with Loops Pattern
We propose two dierent approaches, dierent activity and similar activity , of
extending the OCPD approach ocpd to overcome the limitation of discovering
unsound process models in light of event logs containing the object interactions
with loops pattern. In the following, we present the two approaches as extensions
to themergenandfinalize mappings of the OCPD approach (cf. Sect. 2.2).
Dierent Activity Extension of OCPD Approach Given an event log
L pE;¨Eqcontaining the object interactions with loops pattern. Identify
all eventsePEthat constitute the object interactions with loops pattern and
identify event e1of the pattern, i.e., the event with id \6b0b9" and activity labelTitle Suppressed Due to Excessive Length 17
\receive request" in Table 1 that records the rst execution of the receiving a
request from a \customer" (cf. collaboration model Figure 4). Relabel every
eventePEthat matches the object interaction with loops pattern in the form
ofe1to a new activity label actPUactztactpeq|ePEu. Then, apply ocpdbase.
Finally, relabel the transition tPTof the accepting object-centric Petri net that
is labeled with the new activity label actback to the original activity label act1.
The process model in Figure 5 is discovered with the OCPD approach ex-
tended with the dierent activity extension. The process model has two transi-
tions with the activity label \receive request" corresponding to act1in the object
interactions with loops pattern. The process model is a sound object-centric WF-
net, because the problematic object interaction in the loop discovered without
the extension (cf. Figure 1) is now separated into two distinct transitions.
In general, the OCPD approach extended with dierent activity ocpddabreaks
the problematic loop recorded for object type ot1up by relabeling the rst DO-
part execution such that process discovery techniques discover a sequential rela-
tionship between the relabeled activity and the subsequent activities instead of
a loop forLot1. For the Inductive miner, we prove this conjecture.
Lemma 2. Given the object interactions with loops subpattern 'oiwlspPUpt, let
LPUOCELæ'oiwlsp be an event log that contains the object interactions with loops
subpattern, OTbe the object types and Athe activities appearing in event log L.
LetL'oiwlsppEzE 'oiwlsp;¨EzE 'oiwlspqbe the event (sub-)log containing all
events that satisfy the subpattern 'oiwlsp andOT'oiwlspOTbe the object types
appearing in L'oiwlsp . Letot1;ot2POT'oiwlsp be the two object types that are
instantiated for the two variables of the same name in 'oiwlsp andact1;act 2P
Athat are instantiated for the two variables of the same name in 'oiwlsp for
satisfying the subpattern. Then, for flattenot1prelabel'oiwlsppL'oiwlspqq Lot1
the Inductive miner discovers a process tree with a sequence operator at the root
of the tree, i.e. IMpLot1qÑpact;IM 1psplitÑpLot1qq;act 1qwithactPUactzA
the new activity label6, and forflattenot2prelabel'oiwlsppL'oiwlspqq Lot2the
Inductive miner discovers a process tree with a sequence operator at the root of
the tree, i.e. IMpLot2qÑpact2;IM 1psplitÑpLot2q;act 1q.
Proof. Because of (ii), (iii) and (vi) in Denition 10 and by denition of
relabel'oiwlsp ,Lot1only contains traces that start with act, end withact1, and
do not contain act1in between, i.e., Inductive miner rst applies a sequence
cut on the directly-follows graph built for Lot1. From Denition 10 (iv) and the
denition of relabel'oiwlsp , it follows that no events are relabelled in Lot2. From
Denition 10 (ii), (iv), (v) and (vi), it follows that Lot2only contains traces
that start with act2, end withact1and do not contain neither act1noract2in
between such that the Inductive miner will rst apply a sequence cut. 
By considering the now "aligned" sequential relationship of activities (dis-
covered by the Inductive miner) for which the two object interactions between
6splitÑis the Inductive miner's split into sublog function for the sequence operator
[15,3].18 Janik-Vasily Benzin et al.
ot1andot2are recorded, the previously problematic place-bordered fragment
AN'(cf. Theorem 1) becomes sound such that ocpddabecomest'oiwlspu-sound.
Theorem 2. If the Inductive miner is used for process discovery on attened
event logs, then OCPD Approach extended with dierent activity ocpddais a
t'oiwlspu-sound OCPD technique.
Proof. Given the object interactions with loops subpattern ''oiwlspPUpt, let
LPUOCELæ'be an event log containing the subpattern with object types OT
tot1;:::;otnuUotand activities AUactappearing in the event log such that
ocpddapL 'qAN 'is a sound object-centric WF-net (I) and discOT
dapLqis a
|OT|-length tuple of sound WF-nets (II). Let L' pEzE ';¨EzE 'qbe
the event log containing all events that satisfy the subpattern '. Assume that
ocpddapLqANis an unsound object-centric WF-net (III). From (I), it follows
that object-centric soundness can only be violated through discovery on L'.
From (II), it follows that each of the object types appearing in L'result in
sound WF-nets through discovery by discda. Hence, object-centric soundness of
ocpddapLqANcan only be violated through finalizemergenpdiscOTpLqq.
From Lemma 1 and Lemma 2, it follows that the discovered object-centric Petri
netocpddapL'q AN'discovered for L'is a place-bordered fragment of the
overall object-centric Petri net ocpddapLq. From (I), (II) and (III), it follows
thatAN'is the largest place-bordered fragment of ANthat is object-centric
unsound. From Lemma 2 and by denition of finalizeda, the initial and nal
marking of AN'pON';Minit;';Mfinal;'qagree with the ot-type projections'
ON'æotsource and sink for otPOT'. From (II), Lemma 2, and by denition of
the subpattern (cf. Denition 10) and the mapping mergen
base, it follows that the
only markings MPRpON';Minit;'qthat do not have the "option to complete"
property for object-centric soundness, can be markings in which a transition tP
T'synchronizes the execution ows of two object types, i.e., tplptqtot1;ot2u
OT'and two object types ot1;ot2that were instantiated to satisfy subpattern ',
cannot re anymore (coinciding with the "no dead transition" property). From
(iii-vii) of the subpattern's denition, it follows that there are exactly two events
e2ande3in the event log L'that constitute an object interaction. Since the
only event e1inL'with the same activity label act1ase3is relabeled to an
new activity label actPUactzA, the mapping mergen
basemerges exactly two
transitions that are labeled with act1andact2, resulting in two synchronizing
transitions t1;t2PT'. Hence, for at least one of the two transitions t1andt2
it must hold, that there does not exist a marking MPRpON';Minit;'qsuch
that the transition is enabled. From Lemma 2, these two labels are sequentially
related such that the merging cannot have introduced a marking Minto the set
of reachable markings RpON';Minit;'qthat does not enable either of the two
transitions anymore, contradicting the assumption that ANis an object-centric
unsound WF-net. 
Hence, the extension construction of the OCPD approach results in a
t'oiwlspu-sound OCPD technique. Consequently, we can apply the extendedTitle Suppressed Due to Excessive Length 19
OCPD approach to event logs recorded from multi-agent systems, service com-
positions and service orchestrations for cases in which attribute equivalence in-
dicates dierent real-world activities despite the same activity label. If an object
of typeot2in evente1of subpattern 'oiwlsp with an identier also recorded for
the eventse2ande3is missing or given domain knowledge the activities of the
two events e1ande3refer to the same real-world activity, then the dierent
activity extension should not be used.
The reasoning for the similar activity interpretation, missing objects or do-
main knowledge, must be further dierentiated, since the missing object can be
added to the event e1after careful analysis of the event log such that the origi-
nal OCPD approach ocpdbasecan be used. If there is no missing object and the
activity labels recorded in e1ande3refer to the same real-world activity, then
the similar activity extension should be used.
act1
t1p1
p0p2p3p4p5p6t2
te2te1
ot1ot1 ot1ot2ot2 ot2ot2act2
N2
N4 N3
Fig. 6. Sound accepting object-centric Petri net fragment transpAN'oiwlspqdiscov-
ered by the OCPD approach extended with similar activity extension by rst apply-
ing the OCPD approach ocpd baseand then transforming the place-bordered fragment
AN'oiwlsp such that it is sound. The newly added place p1, the two new silent tran-
sitions t1; t2and the respective new arcs are highlighted in blue. N1; N2; N3are the
place-bordered fragments that are discovered for events e4in'oiwlsp .
The idea for the construction of the extension is to rst applying the original
approachocpdbase. Then, the extension transforms the unsound object-centric
WF-net such that the workow of object type ot1becomes a loop with DO-part
act1and REDO-part act2, i.e., the workow of object type ot2can "mimick" the
loop of object type ot1. Figure 6 depicts a fragment of the object-centric WF-net
that is discovered on all events that satisfy the object interactions with loops
pattern only. The fragment AN'oiwlsp is entered by marking rp0;p3s7. Without
the new silent transition t2, the transition te1labeled with act1is never en-
abled. The only enabled transition is t2such that after ring t2, transition te1
is enabled. Hence, the rst executed activity is act1. After fragment N2is exe-
cuted (corresponding to the activities of events e4in'oiwlsp ), the object types
ot1;ot2can synchronize on te2labeled with act2. Then, fragments N1andN3are
7We abstract from the object identier of the marking in an object-centric Petri net.20 Janik-Vasily Benzin et al.
executed after which ot1;ot2synchronize on te1labeled with act1again. Note,
that this exactly replays the behavior recorded in the event log L'oiwlsp . For
the "option to complete" property, object type ot1may only exit the fragment
transpAN'oiwlspqby synchronizing with ot2, thereby marking the exiting places
discovered for the object interactions with loops pattern.
Similar Activity Extension of OCPD Approach: Given an event log L
pE;¨Eqcontaining the object interactions with loops pattern. Identify all events
ePEthat constitute the object interactions with loops pattern and identify the
corresponding two object types ot1andot2. The similar activity extension of the
OCPD approach works by rst applying the original OCPD approach ocpdbase
and then transforming the resulting object-centric WF-net as follows.
Step 1. Apply the original OCPD approach ocpdbaseANwithAN
pON;Minit;Mfinal),ONpN;pt;Fvarq, andNpP;T;F;lq.
Step 2. Apply a post-transformation transPUANÑUANthat transforms the
labeled Petri net Nunderlying the accepting object-centric Petri net AN.
Step 2a. The transformation starts by adding a place p1of typeot1and by
adding two silent transitions, i.e., T1TYtt1;t2ufort1;t2RT,l1l`pt1;q`
pt2;q.
Step 2b. The ow relation is transformed by rst removing all arcs that con-
nect transition te1labeled with activity act1to places of its post-set, i.e., Fb
Fztpte1;pq|Dte1PTlpte1qact1^pPte1^ptppqot1u.
Step 2c. The transformation adds arcs to connect transition te1with the new
place, the new place with a new silent transition and the new silent transitions
with all places in the original post-set of the transition te1for object type ot1, i.e.,
FcFbYtpte1;p1q;pp1;t1quYtpt1;pq|Dte1PTlpte1qact1^pPte1^ptppqot1u.
Step 2d. The transformation adds arcs to connect the newly added silent tran-
sitiont1with the place in the original post-set of transition te1of object type
ot2, i.e.,FdFcYtpt1;pq|Dte1PTlpte1qact1^pPte1^ptppqot2u.
Step 2e. Next, the transformation connects the place in the pre-set of transition
te2labeled with act2with the newly added silent transition t1andt2andt2with
the place in the pre-set of transition te1, i.e.,FeFdYtpp;t1q;pp;t2q;pt2;p1q|
Dte2PTlpte2qact2^pPte2^ptppqot2^p1Pte2^ptpp1qot2u.
Step 2f. Then, the place in the pre-set of transition te2gets an incoming arc
from transition te1such that it can re its transition again after executing the
silent transition, i.e., FfFeYtpte1;pq|Dte1;te2PTlpte1qact1^lpte2qact2^
pPte2^ptppqot2u.
Step 2g. Finally, variable arcs are transformed such that paths of variable arcs
in the original WF-net can still be traversed by variable arcs in the transformed
WF-net, i.e. F1
varFvarXF1Ytpn1
1;n1
2qPFzF1|Dpn1;n2qPF
varn1n1
1^n2n1
2u.
Step 3. Return the transformed object-centric Petri net transpANqAN1with
AN1pON1;Minit;Mfinalq,ON1pN1;pt1;F1
varq,N1pP1;T1;F1;l1q:
Transforming the object-centric Petri net changes the workow of object type
ot2from a sequential order to a loop such that it can "participate" in each loop
cycle of object type ot1and both exit the loop by synchronizing on the silentTitle Suppressed Due to Excessive Length 21
transitiont1. Similar to the dierent activity extension, we prove the similar
activity extension to discover sound process models for event logs containing the
object interactions with loops pattern.
Theorem 3. If the Inductive miner is used for process discovery on attened
event logs, OCPD Approach extended with similar activity is a PT-sound OCPD
technique for PTt'oiwlspu.
Proof. The proof is analogous to the proof of Theorem 2 such that we only need
to prove that the place-bordered fragment AN'oiwlsp is a sound object-centric
WF-net after the post-transformation trans is applied. As aforementioned, the
place-bordered fragment transpAN'oiwlspqis sound (cf. Figure 6). 
All in all, it is proven through Theorem 2 and Theorem 3 that the two
extensions overcome the object interactions with loops limitation of the OCPD
approachocpdbase.
In general, we cannot prefer one approach over the other, as they treat the
\problematic" activity (cf. \receive request" in Table 1 and Figure 1) in the DO-
part of the loop that rst records no object interaction, but records an object
interaction in the second execution of the DO-part, fundamentally dierent.
The dierent activity approach interprets the two events recorded for the
DO-part of the loop as referring to two dierent activities in spite of the same
activity label. Cases that support the dierent activity approach are based on
information systems that record a too coarse-grained semantic granularity for ac-
tivity labels in its events such that the label equivalence becomes too imprecise.
Moving from label equivalence to attribute equivalence [20] tackles the imprecise
distinction between two events as referring to two dierent real-world activities
solely based on the activity label for event logs from those information systems.
By taking the object interactions into account, the two events recorded for the
DO-part refer to two dierent real-world activities. In contrast, the similar activ-
ity approach maintains the interpretation that the \problematic" activity is the
same despite having no object interaction recorded between the two object types
in question. Cases that support the similar activity approach are data quality
issues in the form of a missing object or additional domain knowledge that leads
to the decision that the activity label recorded in the events refers to the same
executed activity in the real world.
For example, the event log depicted in Table 1 is recorded by an information
system that uses a too coarse-grained semantic granularity for its activity labels
(cf. collaboration model in Figure 4). The rst "receive request" recorded in the
event with id 6b0b9 refers to an activity in which the coordinator receives a new
request from service provider. After delegating the request to Customer, Cus-
tomer sends the request back to the coordinator, i.e., an old request is received
from a participant that is supposed to handle the request. Hence, the event with
id 9c7f8 refers to a real-world activity that is dierent to the previously referred
real-world activity.
Depending on the interpretation of the mismatch between activity labels
and object interactions in practice, either the dierent activity or the similar22 Janik-Vasily Benzin et al.
activity extension is benecial. Both extensions are prototypically implemented
inhttps://gitlab.com/janikbenzin/ocpd/ by extending the original OCPD
approach implemented in the Python library PM4PY8
4.2 Spurios Interactions
The spurious interaction limitation can be overcome by rst relabeling one of
the two dierent events e1;e2that satisfy the pattern 'si(cf. Sect. 3.4) to a
new activity label actnewPUactzAforAthe set of activities appearing in the
event log before applying ocpdbase. After discovery of an accepting object-centric
Petri net by ocpdbasethe transition labeled with actnewis relabeled back to the
original activity label actof the two events e1;e2that satised the pattern.
This relabeling approach to overcome the spurious interactions limitations is
also prototypically implemented by extending the original OCPD approach (cf.
Sect. 4.1).
5 Related Work
For a comprehensive overview for related work on the OCPD approach in terms
of classical process discovery and object-centric process discovery, we refer to
[5]. [19] proposes a compositional object-centric process discovery technique for
multi-agent systems that takes the system architecture in terms of interaction
patterns into account. Various common synchronous and asynchronous interac-
tion patterns are dened using labeled Petri nets. Given an interface pattern,
the technique searches for a series of structural Petri net renement transfor-
mations that are soundness-preserving [9] to map parts of the given interface
pattern with parts of a process model discovered for each agent individually. If a
mapping can be found, then the overall discovered process model is guaranteed
to be sound. Due to the additional input of an interface pattern and the limited
set of transformations, the technique in [19] cannot discover process models for
the settings our extensions can handle.
[17] study properties of object-centric Petri nets without taking the discovery
technique into account. [17] propose a variant of our sound object-centric WF-
net denition that focuses on a single object oof a certain object type and
ignores the behavior of other objects that are required to complete o's workow.
Hence, our notion of a sound object-centric WF-net is stricter. [23] generalize
object-centric Petri nets to Petri nets with Identiers and prove decidability and
verication properties of the generalized class of Petri nets.
6 Conclusion and Limitations
Analogous to classical process discovery, OCPD takes an object-centric event log
as input and discovers a process model that represents the real-world business
8https://pm4py.fit.fraunhofer.de/Title Suppressed Due to Excessive Length 23
process in terms of the control-ow recorded in the event log. By conceptualizing
similarly behaving entities in a collaborative system as object types, we discover
a process model of the collaborative system instead of a business process. For the
only existing OCPD approach that discovers object-centric Petri nets, we iden-
tify the two limitations object interactions with loops and spurious interactions
for discovering process models of collaborative systems. The rst limitation is
proven to result in an unsound process model, while for the second limitation
it is demonstrated that the resulting process model restricts the behavior of the
process model without support in the event log. Both limitations are formalized
by means of a pattern contained in the event log. We propose three extensions
for the OCPD approach to overcome the two limitations. For the two extensions
that target the object interactions with loops limitation, we design the exten-
sions such that it results in sound process models given event logs containing
the pattern.
Nevertheless, our set of interaction patterns that represent a limitation of the
OCPD approach is limited to two, although there exist more interaction patterns.
Moreover, we do not provide a proven statement on discovery of sound process
models for all patterns an event log can contain. Hence, we only demonstrate
desired properties for the process model given two limitations.
Acknowledgments
This work has been supported by Deutsche Forschungsgemeinschaft (DFG),
GRK 2201 and by the Austrian Research Promotion Agency (FFG) via the
Austrian Competence Center for Digital Production (CDP) under the contract
number 881843.
References
1. van der Aalst, W.M.P., van Hee, K.M., ter Hofstede, A.H.M., Sidorova et al., N.:
Soundness of workow nets: classication, decidability, and analysis. Form. Asp.
Comput. 23(3), 333{363 (2011)
2. van der Aalst, W.M.P., Rubin, V., Verbeek, H.M.W., van Dongen et al., B.F.: Pro-
cess mining: a two-step approach to balance between undertting and overtting.
SoSyM 9(1), 87{111 (2010)
3. van der Aalst, W.M.P.: Process Mining. Springer (2016)
4. van der Aalst, W.M.P.: Object-Centric Process Mining: Dealing with Divergence
and Convergence in Event Data. In: Software Engineering and Formal Methods.
pp. 3{25. Springer (2019)
5. van der Aalst, W.M.P., Berti, A.: Discovering object-centric Petri nets. Fundam
Inform 175(1-4), 1{40 (2020)
6. van der Aalst, W.M.P., Li, G., Montali, M.: Object-Centric Behavioral Constraints
(Mar 2017), http://arxiv.org/abs/1703.05740 , arXiv:1703.05740 [cs]
7. Artale, A., Calvanese, D., Montali, M., van der Aalst, W.M.: Enriching Data Mod-
els with Behavioral Constraints. Ontology Makes Sense 316, 257{277 (2019)24 Janik-Vasily Benzin et al.
8. Artale, A., Montali, M., Tritini, S., van der Aalst, W.M.: Object-centric behavioral
constraints: Integrating data and declarative process modelling. In: Proceedings of
the 30th International Workshop on Description Logics (DL). vol. 1879. CEUR-
WS.org (2017)
9. Bernardinello, L., Lomazova, I., Nesterov, R., Pomello, L.: Property-Preserving
Transformations of Elementary Net Systems Based on Morphisms. In: Koutny,
M., Kordon, F., Moldt, D. (eds.) Transactions on Petri Nets and Other Models of
Concurrency XVI, pp. 1{23. LNCS, Springer, Berlin, Heidelberg (2022)
10. van Eck, M.L., Sidorova, N., van der Aalst, W.M.P.: Guided Interaction Explo-
ration in Artifact-centric Process Models. In: 2017 IEEE CBI. vol. 01, pp. 109{118
(Jul 2017)
11. van Eck, M.L., Sidorova, N., van der Aalst, W.M.P.: Multi-instance Mining: Dis-
covering Synchronisation in Artifact-Centric Processes. In: Daniel, F., Sheng, Q.Z.,
Motahari, H. (eds.) BPM Workshops. pp. 18{30. LNBIP, Springer International
Publishing, Cham (2019)
12. Fdhila, W., Knuplesch, D., Rinderle-Ma, S., Reichert, M.: Verifying compliance in
process choreographies: Foundations, algorithms, and implementation. Information
Systems p. 101983 (Jan 2022)
13. Jacobson, T., Lind e, J., Roszbach, K.: Credit risk versus capital requirements under
Basel II: are SME loans and retail credit really dierent? Journal of Financial
Services Research 28, 43{75 (2005), publisher: Springer
14. Jung, J.y., Hur, W., Kang, S.H., Kim, H.: Business process choreography for B2B
collaboration. IEEE Internet Computing 8(1), 37{45 (Jan 2004)
15. Leemans, S.J.J., Fahland, D., van der Aalst, W.M.P.: Discovering Block-Structured
Process Models from Event Logs - A Constructive Approach. In: Application and
Theory of Petri Nets and Concurrency. pp. 311{329 (2013)
16. Li, G., de Carvalho, R.M., van der Aalst, W.M.P.: Automatic Discovery of Object-
Centric Behavioral Constraint Models. In: Abramowicz, W. (ed.) Business Infor-
mation Systems. pp. 43{58. Springer International Publishing, Cham (2017)
17. Lomazova, I.A., Mitsyuk, A.A., Rivkin, A.: Soundness in Object-centric Workow
Petri Nets (Dec 2021), http://arxiv.org/abs/2112.14994 , arXiv:2112.14994 [cs]
18. de Medeiros, A.K.A., van der Aalst, W.M.P., Weijters, A.J.M.M.: Workow Min-
ing: Current Status and Future Directions. In: Meersman, R., Tari, Z., Schmidt,
D.C. (eds.) On The Move to Meaningful Internet Systems 2003: CoopIS, DOA,
and ODBASE. pp. 389{406. LNCS, Springer, Berlin, Heidelberg (2003)
19. Nesterov, R., Bernardinello, L., Lomazova, I., Pomello, L.: Discovering
architecture-aware and sound process models of multi-agent systems: a compo-
sitional approach. SoSyM (1), 351{375 (2023)
20. Rinderle-Ma, S., Reichert, M., Jurisch, M.: On utilizing web service equivalence for
supporting the composition life cycle. Int. J. Web Serv. Res. 8(1), 41{67 (2011)
21. Sundaramurthy, C., Lewis, M.: Control and Collaboration: Paradoxes of Gover-
nance. Acad Manage Rev 28, 397{415 (Jul 2003)
22. Weijters, A., Ribeiro, J.: Flexible Heuristics Miner (FHM). In: 2011 IEEE CIDM.
pp. 310{317 (Apr 2011)
23. van der Werf, J.M.E.M., Rivkin, A., Montali, M., Polyvyanyy, A.: Correctness
Notions for Petri Nets with Identiers (Dec 2022), http://arxiv.org/abs/2212.
07363 , arXiv:2212.07363 [cs]
24. van Zelst, S.J., van Dongen, B.F., van der Aalst, W.M.P., Verbeek, H.M.W.: Dis-
covering workow nets using integer linear programming. Computing 100(5), 529{
556 (2018)Title Suppressed Due to Excessive Length 25
25. van Zelst, S.J., Leemans, S.J.J.: Translating Workow Nets to Process Trees: An
Algorithmic Approach. Algorithms 13(11) (2020)