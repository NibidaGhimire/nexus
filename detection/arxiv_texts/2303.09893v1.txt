Moving Target Defense for Service-oriented
Mission-critical Networks
DoÀòganalp Ergenc ¬∏, Florian Schneider, Peter Kling, Mathias Fischer
Universit ¬®at Hamburg , DE
name.surname@uni-hamburg.de
Abstract ‚ÄîModern mission-critical systems (MCS) are increas-
ingly softwarized and interconnected. As a result, their complex-
ity increased, and so their vulnerability against cyber-attacks.
The current adoption of virtualization and service-oriented ar-
chitectures (SOA) in MCSs provides additional Ô¨Çexibility that can
be leveraged to withstand and mitigate attacks, e.g., by moving
critical services or data Ô¨Çows. This enables the deployment
of strategies for moving target defense (MTD), which allows
stripping attackers of their asymmetric advantage from the long
reconnaissance of MCSs. However, it is challenging to design
MTD strategies, given the diverse threat landscape, resource
limitations, and potential degradation in service availability. In
this paper, we combine two optimization models to explore
feasible service conÔ¨Ågurations for SOA-based systems and to
derive subsequent MTD actions with their time schedule based
on an attacker-defender game. Our results indicate that even for
challenging and diverse attack scenarios, our models can defend
the system by up to 90% of the system operation time with a
limited MTD defender budget.
Index Terms ‚Äîmoving target defense, game theory, service-
oriented architecture
I. I NTRODUCTION
Modern mission-critical systems (MCSs), like smart cars
and avionics, consist of interconnected services that carry out
collaborative tasks. This results in additional complexity and
thus, a broader surface for cyber-attacks. To cope with the ad-
ditional complexity, service-oriented architectures (SOA) and
virtualization are increasingly adopted in different mission-
critical domains [1]‚Äì[3]. SOA can accommodate the system
design by enabling Ô¨Çexible and isolated service deployment
on virtualized hardware. Such Ô¨Çexibility also enables a recon-
Ô¨Åguration of systems to handle failures and to withstand and
recover from cyber-attacks.
From a security perspective, attackers have an asymmetric
advantage against traditional MCSs since they can conduct a
long reconnaissance before they carry out their attacks [4].
Besides, an attacker can remain in stealth for months to make
the highest impact even after inÔ¨Åltrating a system [5]. Here,
the longer the system remains in its static conÔ¨Åguration, the
higher the probability of a successful attack is. Defenders,
however, have only a limited time to detect and mitigate it.
Moving target defense (MTD) can balance this asymmetry by
reconÔ¨Åguring critical assets [6], e.g., shufÔ¨Çing IP addresses
or changing the allocation of critical services. It renders the
attacker‚Äôs knowledge about the system obsolete and thus im-
pedes attacks. SOA and virtualization ease the development ofMTD strategies as they enable the migration and replacement
of services and reconÔ¨Åguration of their inter-communication.
However, MTD via service reconÔ¨Åguration requires ad-
ditional spare resources and induces reconÔ¨Åguration costs
for increased delay and packet loss. Furthermore, without
a precise understanding of potential attacks and failures, an
MTD strategy causes too frequent or ineffective reconÔ¨Ågura-
tions [7]‚Äì[9]. Therefore, we need an effective MTD strategy
that determines which services must be changed, how they
are changed (e.g., migrate or re-instantiate), and when they
are changed. To address those questions, various attacker-
defender games have been proposed in the context of game
theory, e.g., FlipIT [10] or the probabilistic learning attacker
and dynamic defender (PLADD) model [11]. Although they
have already derived asymptotical bounds for optimal MTD
strategies, they do not provide concrete steps to reconÔ¨Ågure
systems. Moreover, these models do not include network
design constraints for resource management and quality of
service, which is especially important for MCSs.
This paper proposes an optimization framework to deter-
mine subsequent service conÔ¨Ågurations within optimal MTD
strategies based on an attacker-defender game. Accordingly,
our contributions are:
We repurpose our linear programming model for joint
service allocation and routing (JSAR) [1], [12] to identify
a set of feasible service conÔ¨Ågurations satisfying resource
and QoS requirements of SOA-based MCSs.
We formulate a novel optimization model, PLADD-
scheduling (PLSCH) based-on the PLADD game [11], to
Ô¨Ånd optimal MTD schedules against various attacks.
We develop a composite model, PLSCH-MTD, to deploy
the resulting conÔ¨Ågurations of JSAR for each MTD action
over the time-schedule provided by PLSCH.
We create several attack scenarios reÔ¨Çecting the time char-
acteristics of recent security incidents in MCSs to evaluate
PLSCH-MTD.
In the rest of the paper, Section II introduces the prelim-
inaries for the considered attack-defender game. Section III
presents related work on SOA design and MTD. Section IV in-
troduces our optimization models JSAR, PLSCH, and PLSCH-
MTD. Section V describes the attack scenarios that are used
to evaluate PLSCH-MTD. Section VI presents the evaluation
results, and Section VII concludes the paper.arXiv:2303.09893v1  [cs.CR]  17 Mar 2023II. B ACKGROUND
In this section, we describe two essential concepts of this
study: The probabilistic learning attacker and dynamic de-
fender (PLADD) model and the PLADD-scheduling problem.
We also note our assumptions and modiÔ¨Åcations that make the
formulation of these models more convenient for this study.
A. Probabilistic Learning Attacker and Dynamic Defender
Time 
horizon Attack 1 Attack 2 Attack 3 
time-to-success 
Attack 1 is 
successful Take  Morph 
Attack 3 is 
successful Defender Defender Attacker Attacker 
t0t7t10 t22t15Capture Attack 
Scenario Events 
Fig. 1: An example of the PLADD game.
PLADD introduces an attacker-defender game that involves
(i) an attacker with learning capabilities and (ii) a defender
with various actions competing to gain control of the system
within a given time horizon that represents a certain frame of
the system‚Äôs operation time [11]. Fig. 1 shows its fundamen-
tals. An attacker can conduct successive attacks (red blocks)
that each takes a certain time to be completed, i.e., having
time-to-success . As a result of a successful attack, the attacker
captures the resources (indicated by the light red background,
e.g. fromt7tot10). When an attacker completes an attack, it
might learn about the system, and its subsequent attack takes
less time accordingly, e.g., attack 2 is shorter than attack 1.
The role of a defender is to conduct certain actions (vertical
dashed lines) to prevent an attacker from completing its attack.
Atake action usually represents an instant intervention, e.g.,
resetting a service instance, while a morph action refers to
more substantial system changes, e.g., migrating multiple
services over the system nodes with diverse conÔ¨Ågurations.
After the defender morphs the system, the attacker loses her
knowledge obtained after successful attacks and thus should
spend a longer time for its upcoming attacks (e.g., attack 3 in
Fig. 1 is longer than attack 2). Similar to the take action, the
defender captures the resources back after morph .
Both an attacker and a defender have limited budget . An
attacker can have only limited attacking opportunities, and
lengthy attacks require more effort. A defender cannot recon-
Ô¨Ågure the system too often, and the cost of a reconÔ¨Åguration
is usually proportional to the changes in the system, as they
usually cause service interruptions. Therefore, the defender
should conduct its actions within an effective time-schedule
against potential attacks within its budget.
Eventually, in the PLADD model, the goal of the attacker
is to complete a sequence of attacks and gain control over
the system after each successful attack. The defender aims to
develop a strategy that determines (i) the type of defensive
action to prevent an attack and (ii) a schedule to conduct asequence of actions against particular attack scenarios within
its limited budget.
We mainly focus on PLADD as it can model different types
of MTD actions and their effective scheduling to minimize the
attacker‚Äôs advantage. Furthermore, it can capture the time char-
acteristics of several attacks, which can vary from relatively
fast reconnaissance attempts to long-term advanced persistence
threats (APTs) in MCSs. In our formulation, we assume that
the time-to-success of an attack is independent of the previous
successful attacks, i.e., the attacker does not learn. It enables
us to develop defensive strategies against potential attack
scenarios, whose characteristics can be modeled in advance.
As a result, we consider a single type of defensive action ( take
ormorph ), referred to as the inÔ¨Ånite model in [11]. This action
corresponds to morph in the original PLADD model regarding
its impact since the service migrations over the system lead to
a signiÔ¨Åcant reconÔ¨Åguration. Lastly, we have not limited the
attacker to a certain budget and assume that it can conduct
attacks whenever the defender regains control over the system.
B. PLADD-Scheduling
PLADD-Scheduling (PLSCH) leverages the PLADD game
to provide an exact schedule for the defensive strategy, e.g.,
when to conduct take ormorph actions. Originally proposed
in [13], it formulates the attacker-defender game as a combina-
torial job assignment problem. Here, we Ô¨Årst describe the job
assignment problem and then explain how it corresponds to
the original PLADD model. It considers a system of m2N
machines over a time horizon of T2R+time units. Each
machinemcomes with a job sequence Jm= (dm1;dm2;:::)
of at mostn+ 1 jobs which it must process. The duration
dmj>0of thejth job on machine mspeciÔ¨Åes how long
it takes machine mto process its jth job. In order to start
processing the jth job ofJm, machinemmust have Ô¨Ånished
the Ô¨Årstj 1jobs. A job on any machine can only start after
astarting action , which affects all machines simultaneously,
is taken. However, the number of those actions is limited and
thus, they should be scheduled effectively to initiate several
jobs across multiple machines. The time between the end of
a job and the beginning of a subsequent job, i.e., if the jobs
cannot be scheduled adjacently, is idle machine time.
To see the connection to the PLADD game, we interpret
each machine as one of mpossible, equally likely attack
scenarios. A job jcorresponds to an individual attack within
an attack scenario, and its duration is the time-to-success
value for the respective attack. A Ô¨Ånished job means that the
attacker captured the resources. The starting action for the jobs
corresponds to the instantaneous time that the defender retakes
control of a potentially compromised system, i.e., a take
action in the PLADD model. The limitation on the number
of starting actions represents a limited defender budget. Note
that the attacker continuously conducts attacks right after each
defender action competing for the system resources.
With this interpretation, the goal in PLSCH becomes to
schedule the jobs such that the total idle time over all machines
is minimized. This time also corresponds to the durationwhen the resources are under the attacker‚Äôs control. Note that
minimizing the idle time is equivalent to maximizing the total
time any machine is active (not idle).
Scenario 1 Scenario 2 Scenario 3 
Take  Attacker 
captures Take  Take  Take  
Fig. 2: A single defensive schedule for multiple attack scenarios.
In PLSCH, a single action determines the job assignment
on multiple machines. That is, the jobs on all machines initiate
simultaneously according to a single schedule of starting ac-
tions. The reason lies in the formulation of the PLADD model:
The defender cannot know the actual attack scenario and, thus,
must develop the most effective strategy to defend against all
likely attack scenarios. Accordingly, all the jobs are generated
in advance as input to the model, reÔ¨Çecting the potential
attack scenarios against the target system. Fig. 2 illustrates the
difÔ¨Åculty of scheduling jobs over multiple machines, which
corresponds to protecting the system against various attack
scenarios simultaneously. While there is no idle time on the
Ô¨Årst machine, i.e., complete protection against the Ô¨Årst attack
scenario, the same schedule results in more idle times on the
other machines, i.e., resulting in the attacker‚Äôs success.
III. R ELATED WORK
In this section, we present the state-of-the-art on (i) SOA-
based network design, (ii) moving target defense, and (iii)
game-theoretical approaches for network security.
Service Distribution and Network Design: In SOA-based
mission-critical networks, the critical services and Ô¨Çows are
the assets to be protected. Therefore, a reconÔ¨Åguration in
the context of MTD involves a service allocation and Ô¨Çow
assignment problem. A proper service allocation [14], [15]
is important to, for instance, minimize operational costs [16]
and physical resource fragmentation [17] for the providers,
and maximize the service quality [16] and responsiveness
[18] for the user experience. It usually requires an accurate
resource orchestration regarding where, when, and how many
service instances are deployed [19], [20]. Besides, the de-
pendencies of services on each other [21], service migrations
[22], load-balancing [23], task scheduling [24], and power-
awareness [25] are some of the design constraints that are
addressed in the literature. Other studies address the service
allocation and routing problem jointly to deploy the services
on the paths aiming for optimal resource utilization [26], [27].
Recent studies include the service protection and availability
issues as well [1], [12], [28].In this work, we use our previous service allocation and
Ô¨Çow assignment scheme [1] as it directly reÔ¨Çects the SOA
requirements of the MCSs. Moreover, it offers conÔ¨Ågurability
with dynamic services and Ô¨Çows, which gives a large recon-
Ô¨Åguration space for potential MTD strategies.
Moving Target Defense: MTD is a well-studied Ô¨Åeld that
enables the development of defensive strategies by moving
the critical assets in a system. The authors of [29] implement
multiple diverse platforms with different software packages,
operating systems, and processor architectures. The system
functions are then moved among such platforms keeping the
state information. Similarly, in [30], a pool of diverse virtual
systems is orchestrated by a controller to Ô¨Çuctuate the attack
surface by switching on and off the redundant resources on
different components. In [31], it is argued that any conÔ¨Ågura-
tion parameter may impact the overall security. They propose
a genetic algorithm to Ô¨Ånd the best suitable (re)conÔ¨Åguration
to minimize the chance of a successful attack. The authors
of [32] focus on mutating the network conÔ¨Åguration, e.g., IP
addresses, ports, and destination addresses. In [8] and [9], they
circulate the virtual machines with different operating systems
as well as change network addressing schemes to prevent both
OS- and network-targeted persistent attacks.
In contrast to the related work, we consider the services
and Ô¨Çows as our critical assets in the SOA context. Although
several studies merely focus on migrating virtual instances, we
propose an optimization framework to Ô¨Ånd feasible and timely
system-wide reconÔ¨Åguration.
Game theory: Game theory offers solid analytical tools to
develop attacker and defender interactions to develop effective
defensive strategies [33], [34]. The same authors of PLADD
extend their evaluation with further insights in [35]. According
to the practical implications of the study, it is always possible
to push a rational attacker out of the PLADD game even
though it might not be cost-optimal for the defender. PLADD
has also been considered for the security modeling of various
networking areas. In [36], the authors utilize PLADD to
defend power grid infrastructure. They analyze the optimal
schedule to reset access controls of the system to minimize the
probability of a successful attack. In [37], the authors focus on
the multi-attacker and defender games for massive machine-
type communications (mMTC) in 5G. They formulate a non-
zero-sum differential game with attack and defense alliances
and propose an optimal defensive strategy algorithm. In [38],
the authors address APTs toward cloud systems. In this game
model, two parties compete to set their attack and scan
intervals based on their subjective decisions. In [39] and [40],
the authors formulate spatio-temporal Stackelberg games to
Ô¨Ånd optimal conÔ¨Ågurations for web applications over time.
In comparison to the related work, we model various attack
scenarios in terms of their time characteristics against MCSs
rather than focusing on smaller-scale web applications. We
also evaluate different types of attacks beyond speciÔ¨Åc vul-
nerabilities of their target applications. In addition, we address
the complex interdependencies of connected services regarding
their resource consumption and QoS in SOA-based MCSs.IV. PLADD-S CHEDULING MTD (PLSCH-MTD)
OPTIMIZATION MODEL
A. Solution Overview
Fig. 3 shows the steps of the overall model, PLSCH-
MTD, which consists of two optimization processes: (i) Joint
Service Allocation and Routing (JSAR) and (ii) PLADD-
Scheduling (PLSCH). While JSAR provides the possible con-
Ô¨Ågurations to be used within MTD actions (green blocks),
PLSCH Ô¨Ånds a schedule for the defender‚Äôs actions by changing
respective conÔ¨Ågurations to defend against the considered
attack scenarios (red blocks). In the rest of this section, we
discuss, Ô¨Årst, the PLSCH process for scheduling and then
present the integration of MTD to the given model accordingly.
Fig. 3: The overall optimization framework: PLSCH-MTD.
B. PLADD-Scheduling (PLSCH) Model
In this section, we formulate the PLSCH problem described
in Section II-B as an integer linear program (ILP). The idea
of such combinatorial model is introduced in [13] and we
modify and extend the model by implementing time-to-success
requirements and with further constraints. Table I shows all
related variables and parameters.
TABLE I: Variables and parameters of PLSCH.
Type Symbol Set DeÔ¨Ånition
BasemM A machine
j;kJm A job to be scheduled on machine m
t;uZDiscrete time instance
ConstantdmjZDuration of job jon machinem
ZDefender budget
VariablextZDecides if an action taken at t
ymjtZDecides ifjscheduled on mattAs explained in Section II-B, we represent each attack
scenario as a machine and individual attacks in each scenario
asjobs in the PLSCH model. The PLSCH takes (i) a number
of machines with different sequences of jobs and (ii) a
Ô¨Åxed action budget as input. It provides a schedule for the
multiple-machine job assignment problem that corresponds an
MTD schedule for the defender. Accordingly, there are two
optimization variables, xtandymjt.xtis a binary decision
variable that represents if any starting action is schedule at
the time instance t < T to initiate a job, where Tis the
system‚Äôs operational time, i.e., time horizon. ymjtis the other
binary variable to decide if a job j2Jmof machinem2M
is scheduled to start at the time instance t. Note that the
number of starting actions are limited by the action budget,
which corresponds to the defender budget in PLADD. All
other constraints are given as follows.
TX
t=0ymjt18m2M;8j2Jm (1)
Constraint 1 ensures that jcan be scheduled only once on m.
TX
t=0ymjt TX
t=0ymkt08m2M;8j;k2Jm;k=j+ 1
(2)
Constraint 2 ensures that a job kcan take place on machine
monly if its predecessor job j, i.e.,k=j+ 1, is scheduled
onmat a time instance t. It implies that a job kcannot be
scheduled on a machine mbefore all other jobs jin the job
setJms.t.,j <k are placed. Accordingly, all attacks in each
attack scenario are defended in the given order.
(dmj+t)ymjt+ (T u)ymkuT
8m2M;8j;k2Jm;k=j+ 1;8t;uT (3)
Constraint 3 ensures that two consecutive jobs jandks.t.
k=j+ 1 in a single attack scenario cannot overlap as the
successor job krestricted to start after the whole duration of
j,dmj, s.t.t+dmju, wheretanduare the starting
times ofjandk, respectively. Besides, the Ô¨Ånishing time of
jis constrained by the total operating time of the system, T,
in case there is not successor job scheduled. Note that non-
overlapping jobs in a machine in PLSCH formulation could
imply that there cannot be concurrent attacks in an attack
scenario in PLADD game. However, the PLSCH handles that
by introducing multiple machines so that the resulting strategy
can defend against multiple attack scenarios simultaneously.
X
j2Jmymjtxt8m2M;8tT (4)
X
m2MX
j2Jmymjtxt 8tT (5)
Constraints 4 and 5 represent the dependencies between two
decision variables. Constraint 4 ensures that (i) no job jcanbe scheduled at tunless there is a starting action s.t., xt= 1
and (ii) at most one job can be placed on machine mat a
given time instance t. Complementarily, constraint 5 implies
that there should be at least a job scheduled in one of the
machines if a starting action takes place at the given time.
Those constraints also model the dynamics of the PLADD
game, s.t., an attacker is expected to conduct a new attack right
after the defender takes an action and regains the control.
TX
t=0xt (6)
Lastly, constraint 6 limits the number of starting actions by .
In PLADD, it corresponds to the limited defender budget in
terms of the number of MTD actions.
The objective function 7 maximizes the occupation of a
machine with respective jobs. This corresponds to the time
spent by the attacker to conduct attacks when the defender
holds control of the system. It also implies the minimization of
the idle time of all the machines, i.e., decrease the time when
the attacker captures the system [13]. Therefore, it eventually
aims to protect the system from being occupied by the attacker
considering all (given) potential attack scenarios.
maxX
m2MX
j2JmTX
t=0ymjtdmj (7)
C. JSAR: Network ConÔ¨Åguration Model
Besides scheduling MTD actions, the defender must decide
which conÔ¨Åguration to apply to take adequate measures. A
conÔ¨Åguration consists of (i) allocating mixed-criticality ser-
vices over virtualized MCS nodes and (ii) establishing their
intercommunication within limited system resources. This
decision is highly dependent on the structure of the network.
In [1], we proposed JSAR as an optimization model for the
design of mission-critical networks according to the given
deÔ¨Ånition. Here, we utilize the model to generate a feasible
solution space, e.g., a set of sub-optimal conÔ¨Ågurations, that
can be used by the defender to change the deployment of the
network. We present the details of JSAR in this section.
The JSAR takes (i) a network of nodes with different
processing capacities and connected via links with limited
bandwidth and (ii) a service overlay with inter-connected
services with certain QoS demands. zdpandqsvare two binary
decision variables that represent if demand dis assigned to
pathpand if service sis deployed on node v, respectively. The
objective function (8) minimizes the length of selected paths,
wherejpjrepresents the path length. Minimizing the total
path length can be considered as both performance and cost
optimization by establishing low-latency communications, i.e.,
here with fewer hops, and decreasing the number of occupied
links. Depending on the various goals of the defender as a
network designer, the objective function can be easily adapted.
Constraint (9) and (10) ensure that vhas sufÔ¨Åcient resources
to hostsandsis deployed on exactly one node that is
capable to host s(e.g., equipped with the required hardware).Constraint (11) restricts that dcan be deployed on ponly if
the required services sandtare deployed on the source and
destination nodes of path p, which areuandv. This quadratic
constraint is linearized using McCormick envelopes [41].
Constraint (12) ensures that each link eofphas sufÔ¨Åcient
resources to carry the trafÔ¨Åc of dif it is assigned to p.
While constraint (13) ensures that pis selected to satisfy the
maximum tolerable latency for d, constraint (14) guarantees
thatdis assigned exactly to one path.
minX
d2DX
p2Pzdpjpj (8)
X
s2Sqsvsrv 8v2V (9)
X
v2Vosvqsv= 1 8s2S (10)
zdpqsvqtu+qtvqsu8d2D;8u;v2V;
8p2Puv;(s;t)2d (11)
X
d2DX
p2P;
e2pzdphdce 8e2E (12)
X
e2pzdpl
eld8d2D;8p2P (13)
X
p2Pzdp1 8d2D (14)
D. PLSCH-MTD: Integrating PLSCH and JSAR
In this section, we propose the integrated model, PLSCH-
MTD, to make use of a set of feasible network conÔ¨Ågurations
according to their eligibility together with PLADD schedules.
We extend PLSCH to set suitable conÔ¨Ågurations obtained via
JSAR for each scheduled action of the defender. An action
represents the replacement of services and re-routing, consum-
ing the limited budget of the defender. At the same time, we
enforce a minimum amount of changes between successive
conÔ¨Ågurations. Note that changing the whole conÔ¨Åguration
may force the attacker to perform a complicated attack once
more, but it comes with a certain cost to re-design the network.
Eventually, the distance between two conÔ¨Ågurations deduces
a trade-off between reconÔ¨Åguration overhead and defensive
capabilities, e.g., creating a degree of obscurity.
Having a large set of conÔ¨Ågurations, a defender should
decide which conÔ¨Ågurations can be set after a particular con-
Ô¨Åguration, e.g., which are eligible to be the next conÔ¨Åguration.
To quantify the eligibility, we propose the following metric,
distance between two conÔ¨Ågurations. It is calculated between
two conÔ¨Ågurations candeas
jc ej=P
s2SP
v2Vjqc
sv qe
svj+P
d2DP
p2Pjzc
dp ze
dpj
jSj+jDj
(15)
whereqc
svandzc
dprepresent the service deployment and
demand assignment variables (cf. JSAR) for the conÔ¨Åguration
c, respectively. The distance between two conÔ¨Ågurations candeis proportional to (i) the number of service migrations,
i.e., services migrated to different nodes than the previous
conÔ¨Ågurations, and (ii) reroutings, i.e., trafÔ¨Åc streams moved
to different paths. Eq. 15 can also be used to calculate the
migration overhead that may cause a certain delay and conÔ¨Åg-
uration effort for each reconÔ¨Ågured component. We evaluate
its effectiveness further in Section VI.
TABLE II: Extended variables and parameters of PLSCH-MTD.
Type Symbol Set DeÔ¨Ånition
Base c;eC A conÔ¨Åguration
ConstantZDistance threshold
ceZIndicates ifecan be conÔ¨Ågured after c
Variable actZDecides if conÔ¨Åguration cset att
In PLSCH-MTD, we calculate the eligibility of each combi-
nation of potential conÔ¨Ågurations c2Cin advance, consider-
ing a threshold distance given as input. Two conÔ¨Ågurations
can be set consecutively only if there is a sufÔ¨Åcient amount of
changes in-between s.t., jc ej>, which is represented as
ce= 1. Table II shows the new parameters and variables
introduced with PLSCH-MTD. Accordingly, constraint 16
ensures that any consecutive MTD actions involve two eligible
conÔ¨Ågurations satisfying the given threshold distance.
ymjt+ymkf 1X
c2CX
e2Cactaefce
8m2M;8j;k2Jm;k=j+ 1;8t;fT (16)
actis a binary decision variable representing if the system
is reconÔ¨Ågured with conÔ¨Åguration cat time instance t. The
quadratic expression in constraint 16 is linearized by using
McCormick envelopes [41] to solve the problem easily with
state-of-the-art linear optimization tools. Constraint 17 ensures
that a respective conÔ¨Åguration is assigned at tif there is a
defensive action taken s.t. xt= 1.
X
c2Cactxt8tT (17)
Lastly, Constraint 18 avoids the reuse of the same conÔ¨Ågura-
tion for the given system duration Tto prevent an attacker to
deduct a reconÔ¨Åguration pattern.
TX
t=0act18c2C (18)
Note that PLSCH-MTD is an ofÔ¨Çine solution in which
the defender develops a strategy in advance against several
potential attack scenarios. Therefore, an increasing variety
of considered attack scenarios could offer better strategies
against broader threats. Besides, it does not require attack
detection but can still prevent ongoing attacks by changing the
service conÔ¨Åguration. It also forces an attacker to rediscover
the system with a new conÔ¨Åguration. In this sense, it is also
a complementary security solution to reactive security mech-
anisms such as intrusion detection and prevention systems.V. A TTACK SCENARIOS
Several authors of related work tackle single attack scenar-
ios conducted via real security tools. However, they cannot
provide an optimal MTD schedule against multiple potential
attack patterns [8], [9]. More theoretical related work does
not reÔ¨Çect realistic attacks well since they only use proba-
bility distribution functions for attack generation [11], [35].
Moreover, data on actual attacks against MCSs is limited to
public reports and white papers that partially include attack
durations and lack details regarding a complete attack time-
line [42]. Although we know rough estimations on the time
required for detecting advanced persistent threats [5], [43] and
detailed technical analysis of some infamous cyber-attacks and
malware [44], [45], it is difÔ¨Åcult to obtain the complete picture
of speciÔ¨Åc attack paths and the duration of advanced attacks.
Accordingly, we model different attack types and scenarios
considering the recent security incidents in MCSs. An attack
scenario is the combination of several individual attack steps
as modeled in Section II-B. Those scenarios are then used to
evaluate the defensive strategies that PLSCH-MTD provides.
A. Time Characteristics of Individual Attacks
We deÔ¨Åne three attack types in terms of their duration: long,
medium-length, and short attacks. The length of an attack
represents its time-to-success value in the PLSCH model.
Moreover, we introduce a new variable, , the attack scale , to
set the relative lengths of different attacks in proportion to a
common design parameter. It is deÔ¨Åned in a similar scale with
the time horizon T(see Section II-B) for a consistent repre-
sentation of time-related variables. Accordingly, the length of
each attack is uniformly sampled from an interval proportional
to. The attack types are characterized as follows:
Long attack: It represents the longest phases of an attack
scenario, e.g., reconnaissance, developing necessary tools,
and executing relatively complicated attack steps. The length
of long attacks is sampled from the range of [0:1;0:3],
s.t., it lasts 20% of a scenario with 10% deviation for  =T.
Medium-length attack: It represents a certain number of
successive attack steps that require signiÔ¨Åcant time, e.g.,
encrypting a large amount of data or doing lateral movement
across different network components. A medium-length
attack is sampled from the interval [0:05;0:15] , s.t. it
typically takes 10% of a scenario with 5% time deviation.
Short attack: It represents a combination of successive
attack steps with short execution time, e.g., changing the
conÔ¨Åguration of a component, modifying log Ô¨Åles, etc. Their
length is sampled from the interval [0:0025;0:075] taking
on average 5% of an attack scenario.
B. Composition of Attack Scenarios
We in the following deÔ¨Åne four attack scenarios that
reÔ¨Çect recent security incidents targeting critical networked
systems [4], [44], [46], [47]. They are composed of the attacks
described above in dependence on different attacker goals as
illustrated in Fig. 4. The duration of an attack scenario, i.e.,
the total lengths of its individual attack steps, is limited by thetime horizon Tas it is also considered as the operational time
of the system in the PLSCH model.
Calibrated attacks: Calibrated attacks target speciÔ¨Åc com-
ponents, technologies, and protocols in an MCS, e.g., al-
though Stuxnet only damages a particular software that
operates nuclear centrifuges [4]. Therefore, they require
detailed system-speciÔ¨Åc knowledge and special exploits that
induce long reconnaissance and development times. After
acquiring access to the system, the attacker conducts a
well-targeted sequence of attacks to potentially multiple
components. Depending on the target, such attack steps can
take different duration to reconnaissance and can be repeated
several times [44]. Accordingly, we compose calibrated
attack scenarios of (i) an initial long attack and then (ii)
randomly selected medium-length andshort attacks as many
as their total duration stays under T.
Lateral movement: After gaining access to the system,
an attacker can move laterally through the network to Ô¨Ånd
critical services or sensitive data. While this still requires
an initial reconnaissance time, the attacker should also
discover further vulnerabilities to continue its lateral move-
ment [46], which imposes relatively shorter discovery cam-
paigns. Meanwhile, gaining access to the other components
potentially requires conducting more spontaneous attacks,
e.g., acquiring credentials, patching legitimate software, etc.
Accordingly, we compose lateral movement scenarios of (i)
an initial long attack for reconnaissance, (ii) several short
attacks for exploitation (between one to three attacks in
our model), (iii) medium-length discovery periods to move
laterally, and (iv) repeating (ii) and (iii) steps through the
movement until their total duration reaches to T.
Ransomware: Ransomware attacks spread a generic mal-
ware to encrypt Ô¨Åles on the target systems and make them
inaccessible. These attacks usually start with a phishing at-
tempt, malvertising, or exploiting vulnerabilities in widely-
used software [47]. Then, the attacker can wait a long time to
discover the most sensitive data or cause the most damage
to the target system at the right time. Lastly, it requires
several operations for encrypting and copying the respective
data. Accordingly, we compose these scenarios of (i) a
medium-length penetration time using one of the mentioned
techniques, (ii) a long(er) discovery and activation time, and
(iii)short operations for obtaining encrypted data as many
as their total duration stays under T.
Zero-day: Lastly, zero-day scenarios represent the threats
that have not been encountered and thus not analyzed yet.
They are composed of randomly-selected long,medium-
length , and short attacks with a total duration of T.
Note that only sets the proportion of time-to-success
for individual attacks, and its value is not dependent on or
limited byT. While higher values provide a higher number
of shorter attacks, the opposite results in fewer but longer
attacks. This enables us to specify attack scenarios for the
desired time duration (depending on T) but still varying timing
characteristics (depending on ) independently.
Fig. 4: Different attack scenarios.
For all scenarios, service reconÔ¨Åguration within MTD ac-
tions helps to invalidate the attacker‚Äôs knowledge about the
system. For instance, service migrations can misorient at-
tackers‚Äô movements in lateral movement scenarios. Similarly,
against calibrated attacks, service reinitiations can recover
the infected services and thus prevent their repetitive ma-
licious behaviors. Finally, in ransomware scenarios, moving
the backup data within database services, which is potentially
discovered by the attacker, can prevent losing the sensitive
data permanently and even disrupt the copying and the en-
cryption processes. These changes also require establishing
communication between reconÔ¨Ågured services and the rest of
the system, i.e., rerouting data trafÔ¨Åc over the network. In
this sense, depending on the attack scenarios, the scope of the
service reconÔ¨Ågurations can be speciÔ¨Åed for an MTD strategy.
VI. E VALUATION
PLSCH-MTD provides (i) feasible service conÔ¨Ågurations
in terms of resource management and QoS for SOA-based
MCSs via JSAR and (ii) optimal MTD schedules on the basis
of these conÔ¨Ågurations to minimize the chance of a successful
attack via PLSCH. Accordingly, in this section, we evaluate
PLSCH-MTD by answering two main research questions:
RQ1: How to Ô¨Ånd a sequence of effective service
conÔ¨Ågurations that utilize the available conÔ¨Åguration
space efÔ¨Åciently and render the attacker‚Äôs previous effort
obsolete?
RQ2: To which extent can an MTD schedule, which is
restricted by a limited defender budget, protect the system
against several potential attack scenarios?
In the remainder of this section, we present our evaluation
setup, the evaluation metrics, and the experimental results.
A. Evaluation Setup
We implemented our optimization models in CPLEX 12.7.0.
All experiments were conducted on a server with 64-core
Intel Xeon 2.10GHz CPU and 256GB RAM. We generated
random network topologies with jVj= 20 and an averageconnectivity of 1.7, and service overlays with jDj= 15
for each experiment as input to the JSAR. The default time
horizonTand attack scale values are set to 60. Since we
calculated the average number of attacks per scenario as 12 for
theT=  = 60 , and the time characteristics of attacks (see
Section V-A), we set the defender budget to 12 as well, i.e.,
sufÔ¨Åcient budget to prevent all attacks in an ideal scenario.
The inter-conÔ¨Åguration distance is set to 15% in the joint
model, PLSCH-MTD. All other parameter values are given
within the respective experiment below. Lastly, we perform
20 iterations per scenario to compute the average results with
95% conÔ¨Ådence interval.
B. Evaluation Metrics
We evaluate JSAR and PLSCH-MTD with different metrics:
Percentage of eligible conÔ¨Ågurations (PoEC): This is
the percentage of conÔ¨Ågurations that satisfy the minimum
amount of required changes between two conÔ¨Ågurations,
i.e., the inter-conÔ¨Åguration distance. It indicates how Ô¨Çexible
we can use the conÔ¨Åguration space for successive MTD
reconÔ¨Ågurations.
Probability of retain (PoR): It is the probability that a
service instance or a data Ô¨Çow is not migrated after a
reconÔ¨Åguration. It represents whether an attacker can retain
access to the same service or the data trafÔ¨Åc keeping its
position, e.g., on the same node or link.
Average attacker capture time (ACT): It is measured by
the ratio of the sum of all gaps between consecutive jobs
across all machines in PLSCH to the total length of time
horizons, i.e., TjMj. The ACT represents the percentage
of the total time that the attacker controls the system after
a successful attack until the defender takes an MTD action.
While the PoEC and the PoR measures the effective use
of the conÔ¨Åguration space regarding RQ1, the average at-
tacker capture time (ACT) measures the effectiveness of MTD
scheduling to examine RQ2.
C. Experimental Results
In this section, we present our numerical results. For our
experiments, we use several attack scenarios described in
Section V. Multiple instances of a particular scenario type vary
due to the randomness in timing characteristics of each attack
in a scenario, but still show similar scenario-speciÔ¨Åc patterns
in terms of the order and length distribution of attacks. Then,
PLSCH-MTD takes the generated scenarios for each type as
input and provides an optimal MTD strategy against them.
Alternatively, it is possible to defend against different scenario
types at once, e.g., generating several instances per scenario
simultaneously, which is referred to as mixed scenarios in
Section VI. However, note that the length of individual attacks
is selected consistently only within a respective scenario type.
For instance, while a long attack in calibrated attack scenarios
can take months, it might be only days in a ransomware
scenario. Therefore, it requires selecting a time scale for 
andTthat reasonably models all scenarios.
10 15 20 25 30
Distance (%)020406080100PoEC (%) |V|=20,|D|=10
|V|=28,|D|=15
|V|=35,|D|=20(a) The impact on the PoEC
10 15 20 25 30
Distance (%)051015202530PoR (%)|V|=20,|D|=10
|V|=28,|D|=15
|V|=35,|D|=20 (b) The impact on the PoR
Fig. 5: The impact of inter-conÔ¨Åguration distance.
1) Effective use of the conÔ¨Åguration space: We Ô¨Årst evalu-
ate the effective use of the potential conÔ¨Ågurations for MTD
actions in terms of PoEC and PoR to answer the RQ1.
The utilization of conÔ¨Åguration space: Fig. 5a shows
PoEC for a changing percentage of the minimum inter-
conÔ¨Åguration distance ( ). The Ô¨Ågure contains different graphs
for the increasing size of network ( jVj) and service overlays
(jDj). An increased minimum distance reduces the PoEC
for each network size since it is getting harder to Ô¨Ånd
conÔ¨Ågurations that are different enough, i.e., with a high
inter-conÔ¨Åguration distance due to stricter resource utilization.
For small networks (blue, star), the percentage converges
to nearly 0% at 30% minimum distance requirement. For a
larger network (green, dot), in contrast, still around 60% of
the potential conÔ¨Ågurations can be used to reconÔ¨Ågure the
service distribution and routing. The results in Fig. 5a indicate
that the distance parameter is decisive on (i) having several
potential conÔ¨Ågurations with fewer differences in between or
(ii) fewer conÔ¨Ågurations with more substantial changes. On
the one hand, the former enables a defender to utilize distinct
conÔ¨Ågurations for a longer time frame and thus it is harder
to detect a reconÔ¨Åguration pattern for an attacker. On the
other hand, a defender should use the same conÔ¨Ågurations
repetitively in the latter scenario, which makes an MTD
strategy easier detectable by attackers.
The impact of MTD reconÔ¨Åguration on attackers:
Fig. 5b shows the PoR for an increasing inter-conÔ¨Åguration
distance and different network sizes. While the 10% distance
threshold () gives the attacker on the average a 20-25%
chance to access the same service or data that he attacked
before the reconÔ¨Åguration, it converges to nearly 0% for small
networks with 30% minimum inter-conÔ¨Åguration distance. For
larger networks, the PoR is still as low as 10% with a large
conÔ¨Ådence interval. The reason is, that although the solution
space is larger, we do not select particular conÔ¨Ågurations, e.g.,
with the maximum distance, but arbitrarily select any two
conÔ¨Ågurations that satisfy the minimum distance requirement.
Although an arbitrary selection makes the next conÔ¨Åguration
less predictable for the attacker, the selection strategy can be
adapted, e.g., selecting the conÔ¨Åguration with the kth highest
distance, to increase his reconnaissance effort. Consequently,
a higher inter-conÔ¨Åguration distance leads to further changes
and enforces the attacker to rediscover the new conÔ¨Åguration.3 6 9 12 15
Number of attack scenarios1015202530Avg. attacker capture time (%)calibrated
lateral
ransomwarezeroday
mixed(a) Increasing number of scenarios
910111213
Avg. number of attacks per scenario10152025303540Avg. attacker capture time (%)calibrated
lateral
ransomwarezeroday
mixed (b) Increasing number of attacks
Fig. 6: The impact of varying attack scenarios on the ACT.
However, it may also cause service interruptions.
2) Effectiveness of MTD scheduling: We measure the im-
pact of various parameters on the ACT to answer RQ2, i.e.,
how protective an optimal MTD schedule is.
The impact of variety in attack scenarios: We evaluate
PLSCH-MTD for each type of attack scenario as well as
formixed scenarios that include randomly-selected scenarios
simultaneously. Fig. 6a shows the impact of an increasing
number of attack scenarios on the ACT. Regardless of the
scenario, we observe only a subtle increase from 1% to 3% in
ACT. However, defending against multiple scenarios imposes
a base challenge that results in 15-25% ACT. The results
indicate that although an MTD strategy remains protective
against an increasing number of attack scenarios, it is still
difÔ¨Åcult to defend against even few concurrent scenarios.
The impact of the type of attack scenarios on ACT is
more substantial than the impact of their quantity. In Fig. 6a,
defending against ransomware is the most challenging with
25% ACT since it consists of several short attacks that can be
accomplished. Other scenarios are similarly threatening with
15-18% ACT. Therefore, the effectiveness of PLSCH-MTD is
highly dependent on the actual attack scenario.
To evaluate the impact of the number of attacks per scenario,
we setT= 60 and2[90;50](in a reversed order). Decreas-
ingshortens the length of individual attacks and increases
their number per scenario, which results in 9-13 attacks for the
given range of values. Accordingly, Fig. 6b shows the ACT
measurements for increasing attacks per scenario. In the Ô¨Ågure,
the ACT does not signiÔ¨Åcantly change for 9 to 12 attacks
within each attack scenario as there is enough defender budget
(= 12 ). This also afÔ¨Årms the results regarding the base
challenge (15-25%) of defending against multiple scenarios in
Fig. 6a. However, the attacker‚Äôs success increases by 5-10%
for 13 attacks due to the insufÔ¨Åcient defender budget.
The impact of defender budget: Fig. 7 shows the impact
of an increasing defender budget on the ACT for different
numbers of attacks per scenario, i.e., for 18 and 12 attacks
by setting  =f60;90gandT= 90 . As seen in the Ô¨Ågure,
more budget strengthens the defender to hold control of the
resources with a decreasing ACT regardless of attack counts.
When the defender budget is less than the number of attacks
per scenario, i.e., for = 12 16and = 60 (solid, blue
line), we can observe that a gradual increase in the budgetdecreases the ACT from 35% to 20%.
12 16 20 24 28
Defender budget (# action )0510152025303540A#g. attacker capture time (%)Œõ=60 (18 attack )
Œõ=90 (12 attack )
Fig. 7: The impact of defender budget on the ACT.
Theoretically, any defender budget Tshould guarantee
a complete defender occupation. This enables moving the
system at every possible time instance tT(which is
infeasible in practice due to its high overhead) and thus leaves
the attacker no chance to accomplish an attack. However, as
shown in Fig. 7, it is not possible to obtain that level of
protection quickly with a linear increase in the budget after
the ACT has converged to 10-12% due to the challenges in
defending against multiple attack scenarios.
Note that a single successful attack step may not give
the attacker total control over the system as assumed in
the PLADD game, but it requires several attack steps to be
accomplished. In this sense, our ACT measurements represent
the worst case that each attack is equally effective. As a result,
PLSCH-MTD can still achieve protection of up to 90% of the
system operational time with a defensive budget T.
VII. C ONCLUSION
Service-oriented architecture (SOA) enables the Ô¨Çexible
design of mission-critical systems (MCSs) by dynamically
distributing virtual services and establishing their inter-
communication. This Ô¨Çexibility can also be utilized to imple-
ment moving target defense (MTD) strategies for the security
of MCSs. By reconÔ¨Åguring the critical services and data
trafÔ¨Åc periodically within MTD strategies, it is possible to
protect MCSs against advanced cyber-attacks. In this work,
we propose an optimization framework (PLSCH-MTD) by
combining a joint service allocation and routing model (JSAR)
with an attack-defender game (PLSCH) to Ô¨Ånd effective MTD
strategies for SOA-based MCSs. While PLSCH provides an
optimal schedule of subsequent MTD actions against potential
threats, JSAR generates feasible service conÔ¨Ågurations for
each action. Furthermore, we model several attack scenarios
inspired by the security incidents in MCSs to evaluate PLSCH-
MTD. The experiments reveal that the PLSCH-MTD can
utilize the service conÔ¨Åguration space efÔ¨Åciently to force
attackers to rediscover the system. Moreover, it can protect
an MCS for up to 90% of its operational time.REFERENCES
[1] D. Ergenc, J. Rak, and M. Fischer, ‚ÄúService-Based Resilience for
Embedded IoT Networks,‚Äù in 50th Annual IEEE/IFIP Int. Conf. on
Dependable Systems and Networks (DSN) , pp. 540‚Äì551, 2020.
[2] J. Villaneueva, J. Migge, and N. Navet, ‚ÄúQoS-Predictable SOA on TSN:
Insights from a Case-Study,‚Äù in Automotive Ethernet Congress , 2021.
[3] T. Cucinotta, A. Mancina, G. F. Anastasi, G. Lipari, L. Mangeruca,
R. Checcozzo, and F. Rusina, ‚ÄúA Real-Time Service-Oriented Archi-
tecture for Industrial Automation,‚Äù IEEE Transactions on Industrial
Informatics , vol. 5, no. 3, pp. 267‚Äì277, 2009.
[4] T. M. Chen and S. Abu-Nimeh, ‚ÄúLessons from Stuxnet,‚Äù Computer ,
vol. 44, no. 4, pp. 91‚Äì93, 2011.
[5] M. . FireEye, ‚ÄúM-Trends Special Report,‚Äù tech. rep., Mandiant &
FireEye, 2020. https://content.Ô¨Åreeye.com/m-trends/rpt-m-trends-2020.
[6] S. Sengupta, A. Chowdhary, A. Sabur, A. Alshamrani, D. Huang, and
S. Kambhampati, ‚ÄúA Survey of Moving Target Defenses for Network
Security,‚Äù IEEE Communications Surveys and Tutorials , vol. 22, no. 3,
pp. 1909‚Äì1941, 2020.
[7] H. Zhang, K. Zheng, X. Wang, S. Luo, and B. Wu, ‚ÄúEfÔ¨Åcient Strategy
Selection for Moving Target Defense Under Multiple Attacks,‚Äù IEEE
Access , vol. 7, pp. 65982‚Äì65995, 2019.
[8] M. Thompson, N. Evans, and V . Kisekka, ‚ÄúMultiple OS rotational envi-
ronment an implemented Moving Target Defense,‚Äù in 7th International
Symposium on Resilient Control Systems (ISRCS) , 2014.
[9] M. Thompson, M. Mendolla, M. Muggler, and M. Ike, ‚ÄúDynamic
Application Rotation Environment for Moving Target Defense,‚Äù in
Resilience Week (RWS) , pp. 17‚Äì26, 2016.
[10] M. Van Dijk, A. Juels, A. Oprea, and R. L. Rivest, ‚ÄúFlipIt: The game
of stealthy takeover,‚Äù Journal of Cryptology , vol. 26, no. 4, 2013.
[11] S. T. Jones, A. V . Outkin, J. L. Gearhart, J. A. Hobbs, J. D. Siirola,
C. A. Phillips, S. J. Verzi, D. Tauritz, S. A. Mulder, and A. B. Naugle,
‚ÄúEvaluating moving target defense with PLADD,‚Äù tech. rep., Sandia
National Lab.(SNL-NM), 2015.
[12] D. Ergenc ¬∏, J. Rak, and M. Fischer, ‚ÄúService-Based Resilience via Shared
Protection in Mission-Critical Embedded Networks,‚Äù IEEE Trans. on
Net. and Service Manag. , vol. 18, no. 3, pp. 2687‚Äì2701, 2021.
[13] O. D. Parekh, C. A. Phillips, V . Powers, N. Sakr, and C. Stein, ‚ÄúA
Scheduling Problem Motivated by Cybersecurity and Adaptive Machine
Learning,‚Äù tech. rep., Sandia National Lab.(SNL-NM)), 5 2018.
[14] X. Li and C. Qian, ‚ÄúA Survey of Network Function Placement,‚Äù in 13th
IEEE Annual Consumer Communications and Networking Conference
(CCNC) , pp. 948‚Äì953, 2016.
[15] B. Yi, X. Wang, K. Li, S. k. Das, and M. Huang, ‚ÄúA Comprehensive Sur-
vey of Network Function Virtualization,‚Äù Computer Networks , vol. 133,
pp. 212‚Äì262, 2018.
[16] B. Addis, D. Belabed, M. Bouet, and S. Secci, ‚ÄúVirtual Network
Functions Placement and Routing Optimization,‚Äù in IEEE Int. Conf. on
Cloud Networking, CloudNet , pp. 171‚Äì177, IEEE, 2015.
[17] M. F. Bari, S. R. Chowdhury, R. Ahmed, R. Boutaba, and O. C. M. B.
Duarte, ‚ÄúOrchestrating Virtualized Network Functions,‚Äù IEEE Trans. on
Net. and Service Manag. , vol. 13, no. 4, pp. 725‚Äì739, 2016.
[18] J. Liu, W. Lu, F. Zhou, P. Lu, and Z. Zhu, ‚ÄúOn Dynamic Service Function
Chain Deployment and Readjustment,‚Äù IEEE Trans. on Net. and Service
Manag. , vol. 14, no. 3, pp. 543‚Äì553, 2017.
[19] J. Chenni Kumaran and M. Aramudhan, ‚ÄúA Survey on Resource
Allocation Strategies in Cloud,‚Äù International Journal of Reasoning-
based Intelligent Systems , vol. 10, no. 3-4, pp. 328‚Äì336, 2018.
[20] N. K. Pandey, S. Chaudhary, and N. K. Joshi, ‚ÄúResource Allocation
Strategies used in Cloud Computing: A Critical Analysis,‚Äù in IEEE Conf.
on Communication, Ctrl. and Intelligent Syst. (CCIS) , 2017.
[21] D. Espling, L. Larsson, W. Li, J. Tordsson, and E. Elmroth, ‚ÄúModeling
and Placement of Cloud Services with Internal Structure,‚Äù IEEE Trans-
actions on Cloud Computing , vol. 4, no. 4, pp. 429‚Äì439, 2016.
[22] D. Breitgand, A. Marashini, and J. Tordsson, ‚ÄúPolicy-driven service
placement optimization in federated clouds,‚Äù IBM Research Division,
Tech. Rep , vol. 9, pp. 11‚Äì15, 2011.
[23] L. Pu, L. Jiao, X. Chen, L. Wang, Q. Xie, and J. Xu, ‚ÄúOnline Resource
Allocation, Content Placement and Request Routing for Cost-efÔ¨Åcient
Edge-caching in Cloud Radio Access Networks,‚Äù in IEEE Journal on
Selected Areas in Communications , vol. 36, pp. 1751‚Äì1767, 2018.
[24] M. B. Gawali and S. K. Shinde, ‚ÄúTask Scheduling and Resource
Allocation in Cloud Computing using a Heuristic Approach,‚Äù Journal
of Cloud Computing , vol. 7, no. 1, 2018.[25] A. Varasteh, B. Madiwalar, A. Van Bemten, W. Kellerer, and C. Mas-
Machuca, ‚ÄúHolu: Power-Aware and Delay-Constrained VNF Placement
and Chaining,‚Äù IEEE TNSM , vol. 18, no. 2, pp. 1524‚Äì1539, 2021.
[26] M. C. Luizelli, L. R. Bays, L. S. Buriol, M. P. Barcellos, and L. P.
Gaspary, ‚ÄúPiecing Together the NFV Provisioning Puzzle: EfÔ¨Åcient
Placement and Chaining of Virtual Network Functions,‚Äù in IFIP/IEEE
Int. Symp. Integrated Netw. Mgmt. (IM) , pp. 98‚Äì106, 2015.
[27] G. Lee, M. Kim, S. Choo, S. Pack, and Y . Kim, ‚ÄúOptimal Flow Distri-
bution in Service Function Chaining,‚Äù in ACM International Conference
Proceeding Series , pp. 17‚Äì20, 2015.
[28] L. Askari, M. Tamizi, O. Ayoub, and M. Tornatore, ‚ÄúProtection Strate-
gies for Dynamic VNF Placement and Service Chaining,‚Äù in Int. Conf.
on Computer Comm. and Networks (ICCCN) , 2021.
[29] H. Okhravi, A. Comella, E. Robinson, and J. Haines, ‚ÄúCreating a
cyber moving target for critical infrastructure applications using platform
diversity,‚Äù International Journal of Critical Infrastructure Protection ,
vol. 5, no. 1, pp. 30‚Äì39, 2012.
[30] Y . Huang and A. K. Ghosh, ‚ÄúIntroducing diversity and uncertainty
to create moving attack surfaces for web services,‚Äù in Moving Target
Defense , pp. 131‚Äì151, Springer, 2011.
[31] M. Crouse and E. W. Fulp, ‚ÄúA moving target environment for com-
puter conÔ¨Ågurations using Genetic Algorithms,‚Äù in 4th Symposium on
ConÔ¨Åguration Analytics and Automation (SAFECONFIG) , 2011.
[32] E. Al-Shaer, ‚ÄúToward network conÔ¨Åguration randomization for moving
target defense,‚Äù in Moving Target Defense , pp. 153‚Äì159, Springer, 2011.
[33] B. Alese, O. Ibidunmoye, D. Haruna, A. Thompson, and I. Otasowie,
‚ÄúGame-based Analysis of the Network Attack-Defense Interaction,‚Äù
Lecture Notes in Engineering and Computer Science , vol. 1, 07 2014.
[34] F. Liu, H. Gao, and Z. Wei, ‚ÄúResearch on the game of network secu-
rity attack-defense confrontation through the optimal defense strategy,‚Äù
Security and Privacy , vol. 4, no. 1, p. 136, 2021.
[35] S. T. Jones, A. V . Outkin, J. L. Gearhart, J. A. Hobbs, J. D. Siirola,
C. A. Phillips, S. J. Verzi, D. Tauritz, S. A. Mulder, and A. B. Naugle,
‚ÄúPLADD: Deterring Attacks on Cyber Systems and Moving Target
Defense,‚Äù in INFORMS Computing Society Conference , 1 2017.
[36] Y . C. Chen, V . J. Mooney, and S. Grijalva, ‚ÄúGrid cyber-security strategy
in an attacker-defender model,‚Äù Cryptography , vol. 5, no. 2, 2021.
[37] Q. Gao, H. Wu, J. Zhang, Y . Zhang, N. Zhang, and X. Tao, ‚ÄúMulti‚Äì
Attacker Multi‚ÄìDefender Interaction in mMTC Networks via Differen-
tial Game,‚Äù in IEEE/CIC International Conference on Communications
in China (ICCC) , pp. 1250‚Äì1255, 2020.
[38] D. Xu, L. Xiao, N. B. Mandayam, and H. V . Poor, ‚ÄúCumulative prospect
theoretic study of a cloud storage defense game against advanced
persistent threats,‚Äù in IEEE INFOCOM Workshops , pp. 541‚Äì546, 2017.
[39] H. Li, W. Shen, and Z. Zheng, ‚ÄúSpatial-Temporal Moving Target
Defense: A Markov Stackelberg Game Model,‚Äù in 19th Int. Conf. on
Autonomous Agents and Multiagent Systems , p. 717‚Äì725, 2020.
[40] S. Sengupta, S. G. Vadlamudi, S. Kambhampati, A. Doup ¬¥e, Z. Zhao,
M. Taguinod, and G.-J. Ahn, ‚ÄúA Game Theoretic Approach to Strategy
Generation for Moving Target Defense in Web Applications,‚Äù in 16th
Int. Conf. on Autonomous Agents and Multiagent Systems , p. 178‚Äì186,
2017.
[41] G. P. Mccormick, ‚ÄúComputability of Global Solutions to Factorable
Nonconvex Programs: Part I ‚Äì Convex Underestimating Problems,‚Äù
Math. Program. , vol. 10, p. 147‚Äì175, Dec. 1976.
[42] P. Pols, ‚ÄúThe uniÔ¨Åed kill chain,‚Äù Cyber Security Academy (CSA) Thesis,
Hague , 2017. https://www.uniÔ¨Åedkillchain.com/.
[43] Mandiant, ‚ÄúAPT1: Exposing One of China‚Äôs Cy-
ber Espionage Units,‚Äù tech. rep., Mandiant, 2021.
https://www.mandiant.com/sites/default/Ô¨Åles/2021-09/mandiant-apt1-
report.pdf.
[44] D. Albright, P. Brannan, and C. Walrond, ‚ÄúStuxnet malware and natanz,‚Äù
tech. rep., Institute for Science and International Security, 2011.
[45] X. Zhang, O. Upton, N. L. Beebe, and K.-K. R. Choo, ‚ÄúIoT Botnet
Forensics: A Comprehensive Digital Forensic Case Study on Mirai
Botnet Servers,‚Äù Forensic Science International: Digital Investigation ,
vol. 32, p. 300926, 2020.
[46] F. Wilkens, S. Haas, D. Kaaser, P. Kling, and M. Fischer, ‚ÄúTowards
EfÔ¨Åcient Reconstruction of Attacker Lateral Movement,‚Äù in 14th Int.
Conf. on Availability, Reliability and Security (ARES) , 2019.
[47] M. N. Olaimat, M. Aizaini Maarof, and B. A. S. Al-rimy, ‚ÄúRansomware
anti-analysis and evasion techniques: A survey and research directions,‚Äù
in3rd International Cyber Resilience Conference (CRC) , 2021.