1
Reactive Landing Controller for Quadruped Robots
Francesco Roscia1, Michele Focchi1,2, Andrea Del Prete3, Darwin G. Caldwell4, and Claudio Semini1
Abstract —Quadruped robots are machines intended for chal-
lenging and harsh environments. Despite the progress in lo-
comotion strategy, safely recovering from unexpected falls or
planned drops is still an open problem. It is further made more
difficult when high horizontal velocities are involved. In this work,
we propose an optimization-based reactive Landing Controller
that uses only proprioceptive measures for torque-controlled
quadruped robots that free-fall on a flat horizontal ground,
knowing neither the distance to the landing surface nor the flight
time. Based on an estimate of the Center of Mass horizontal
velocity, the method uses the Variable Height Springy Inverted
Pendulum model for continuously recomputing the feet position
while the robot is falling. In this way, the quadruped is ready to
attain a successful landing in all directions, even in the presence
of significant horizontal velocities. The method is demonstrated
to dramatically enlarge the region of horizontal velocities that
can be dealt with by a naive approach that keeps the feet still
during the airborne stage. To the best of our knowledge, this is
the first time that a quadruped robot can successfully recover
from falls with horizontal velocities up to 3 m/sin simulation.
Experiments prove that the used platform, Go1, can successfully
attain a stable standing configuration from falls with various
horizontal velocities and different angular perturbations.
I. I NTRODUCTION
LEGGED robots are designed to traverse rough terrains.
Thanks to the progress of the last decades, they have
become lighter and stronger, enabling agile locomotion. Many
types of gaits, such as trotting or crawling, have been inves-
tigated and successfully developed for quadrupedal robots. In
contrast to advances in locomotion, relatively little research
has been done on safely recovering after unexpected falls or
planned drops. These abilities can be beneficial for navigating
harsh environments and preventing significant damage. High
horizontal velocity makes the landing problem much more
challenging. There are many situation where this is not negli-
gible, e.g., when a quadruped trots almost at its maximal speed
and must do a leap without first stopping the motion. So, for
a robot to be able to attains a stable standing posture after
a fall, the control framework should estimate and deal with
both the vertical and horizontal velocity components. Animals
with righting reflexes have inspired many previous works on
improving robotic landing capabilities, such as cats [1] and
squirrels [2]. These works focus on dorso-ventrally reorienting
This work was supported by the co-financing of the European Union FSE-
REACT-EU, PON Research and Innovation 2014-2020 DM1062/2021. The
authors are with:
1Dynamic Legged Systems (DLS), Istituto Italiano di Tecnologia (IIT),
Genoa, Italy. firstname.lastname@iit.it
2Department of Information Engineering and Computer Science (DISI),
University of Trento, Trento, Italy. michele.focchi@unitn.it
3Industrial Engineering Department (DII), University of Trento, Trento, Italy.
andrea.delprete@unitn.it
4Advanced Robotics (ADVR), Istituto Italiano di Tecnologia (IIT), Genoa,
Italy. darwin.caldwell@iit.it
Fig. 1. Based only on proprioceptive measures, during a fall the proposed
LC adjusts the limbs posture in order to drive the robot to stable standing
configuration after TD, avoiding bounces, feet slippage and undesirable
contacts with the ground.
the main body so that the limbs point toward the ground,
e.g., mimicking cats with a flexible spine [3]. Some authors
explored the inertial effects of flywheels, tails, and limbs for
reorienting the robot when it falls. The work presented in
[4] used a flywheel to control the tilt angle effectively; [5]
proved that two flywheels with intersecting rotational axes can
actuate both roll and pitch, allowing for non-planar jumps and
landings. Many researchers have introduced a tail, which is
an additional link that rotates about an axis that does not pass
through the robot Center of Mass (CoM) [6]–[8]. However, a
tail can only perform limited corrections due to its restricted
range of motion and it adds weight and complexity to the
robot. In [9] Mini Cheetah was provided with heavy boots
to improve the influence on torso rotation. Purely vertical
falls with large rotations on the sagittal plane are handled
by a combination of off-line optimization and supervised
machine learning. The drawback of increasing the limbs’
inertia is that the robot becomes tailored for the specific task
of landing since planning problems can no longer rely on the
assumption of mass-less legs. There is copious literature on
approaches based on Trajectory Optimization (TO) to perform
airborne maneuvers. Many of these techniques neglect the
landing phase and assume perfect tracking of the optimized
trajectory. Minor errors in timing can complicate the execution
of the landing task. Using optimized joint torques as feed-
forward commands and Proportional Derivative (PD) joint
feedback for tracking the optimized joint trajectories, flips
were accomplished by Mini Cheetah in [10]. [11] and [12]
introduced a framework for performing highly dynamic jumps
by combining off-line contact timings, off-line whole-body
TO, and high-frequency tracking controller. Despite the rele-
vant results shown, those approaches may struggle in differentarXiv:2305.07748v3  [cs.RO]  12 Sep 20232
(a)
 (b)
Fig. 2. (a) Overview of the LC framework. When the robot is in the flying phase, the virtual foot location is continuously re-optimized using the template
model VHSIP, and the feet are shifted accordingly. Once landing is detected, the last computed trajectory for the CoM and trunk orientation is tracked. The
dashed branches are active only after TD is detected. (b) The 3D VHSIP model used to describe the robot dynamics after TD.
occasions. E.g., if the controller does not track exactly the
references before the take off, the actual aerial stage may last
more/less than planned, resulting in a landing trajectory that
is not feasible. Moreover, these methods require to compute
in advance the whole references, that depend on the take off
conditions. For on-line optimization, such data may not be
available if the robot is running and it is requested to jump
without stopping. The MIT Mini Cheetah can perform a rich
set of aerial movements, as shown in [13]. Motions are planned
via centroidal momentum-based nonlinear optimization and
then tracked using a variational-based optimal controller [14].
Landing is accomplished using a simple joint PD controller
stabilizing a fixed landing position. Therefore, only small
heights are considered. Several works based on Reinforcement
Learning (RL) and Model Predictive Control (MPC) present
interesting landing strategies. Using a deep RL algorithm
and performing sim-to-real transfer via domain randomization,
Rudin et al. show Spacebok performing consecutive 2D jumps
in a micro-gravity environment [15]. Even if the method is
tailored to uneven terrains, tests are conducted on flat and rigid
ground. A Vicon system provides measures for the robot’s
absolute position and orientation. How to extend the results
to real-world 3D conditions with more dramatic impacts and
inertial effects is unclear. Also [16] addresses the problem
of landing on celestial bodies. It proposes a model-free RL
controller with an auto-tuning reward function to address
attitude and landing control on Near-Earth asteroids for which
gravity cannot be supposed to be a central force. In [17],
MIT Mini Cheetah is dropped with a CoM height of 1 m
above the ground. The heuristics-guided MPC allows the
robot to push onto the ground enough to arrest its downward
momentum and return to a stable standing state within two
steps. A recent work [18] implements heuristics to shift the
feet posture for landing based on physical intuitions. However,
the approach lacks feasibility guarantees grounded on a model
of the system. In [19], a complete control framework can
select optimal contact locations and timings in real-time. The
controller consists of a Neural Network (NN) providing warm-
start trajectories to a kino-dynamic TO problem, solved on-line in an MPC fashion. The robot safely recovers from drops
with different orientations, but involving only vertical falls.
The bottleneck of this framework is the NN: if a solution
is not found within 300 ms , a new request is made and the
optimization restarts. However, such time span represents an
extensive flying phase: it corresponds to a height of about
0.5 m , starting with zero velocity. Therefore, falls from
reduced heights may not be addressed with this approach.
A. Proposed Approach
This paper addresses the problem of landing on a flat
horizontal surface for a quadruped robot. Specifically, the
objective is to define a control strategy that satisfies the
following requirements once the robot touches the ground:
(R1) no bounces after landing;
(R2) the trunk must not hit the ground;
(R3) the robot must reach a stable standing state;
(R4) once landed, the feet must not slip.
To meet these requirements, we model the dynamics of the
quadruped after the touch down as a VHSIP. The use of a
spring model is not novel in the literature [20]–[22]. Despite
its low complexity, the template model captures the linear dy-
namics of the robot with sufficient accuracy and is inherently
suitable for damping impacts with the terrain. It allows us to
design a control architecture with a short computation time,
keeping it adequately reactive to change the control strategy
at TD promptly. Our approach relies only on proprioceptive
measurements, so a motion capture or visual perception system
is not required.
B. Contributions and Outline
The main contributions of this work are as follows.
•We introduce a real-time omni-directional LC framework
(Fig. 2a), which can handle horizontal velocity, is tolerant
to TD timing uncertainties, and does not need an estimate
of the robot absolute position.
•We demonstrate successful landings in both a simulation
environment and with real hardware from various heights3
and significant horizontal velocity, up to 3 m/sdropping
the robot from a height of 1 m. To our best knowledge,
this is the first time a quadruped robot can recover
from a fall with such horizontal velocity relying only on
proprioceptive measures.
•We present a detailed analysis showing advantages and
limitations of our LC. We verify that it outperforms a
naive approach that does not move the feet when the robot
is falling. Although the template model neglects angular
dynamics, our approach can tolerate drops starting with
non-negligible orientations, e.g., with roll between −40◦
and30◦, or pitch rate from −440◦/sto210◦/s.
Even though the approach was developed and tested for four-
legged robots, it is generic enough to be easily extended to
robots with any number of legs.
The remainder of this manuscript is organized as follows.
In Section II, we discuss the VHSIP template model and
formally state the landing problem. The structure of the
landing framework is detailed in Section III, and the motion
control in Section III-G. Finally, we present implementation
details and results in Section IV and we draw the conclusions
in Section V.
II. M ODELING AND PROBLEM FORMULATION
The fall of a legged robot can be decomposed in two
phases: a flying phase, in which the robot is subjected only
to gravity, and a landing phase, which begins when limbs
(typically the feet) come into contact with the environment
and generate Ground Reaction Forces (GRFs). The switching
instant between the two phases is named TD. In this section,
we derive the VHSIP model that we use as a template to
formalize and address the landing problem.
A. Derivation of the VHSIP Model
Let us introduce an inertial coordinate frame W: theZ–axis
is orthogonal to a flat ground and the XY−plane lies on it.
In this frame, the robot can be seen as a single rigid body of
mass m∈R+, lumped at its CoM c=cxcyczT∈R3,
having inertia IC C∈R3×3. When the robot is falling,
the balance of moments constrains the linear dynamics to
follow the ballistic trajectory while conserving the angular
momentum L∈R3. If the robot has nccontact points with
the ground, the balance of linear and angular moments can be
written as
m(¨c+g) =ncX
i=1fi˙L=ncX
i=1(pi−c)×fi (1)
being g∈R3the (constant) gravity acceleration vector, and
pi∈R3is the position of the i-th contact point on which the
environment exerts the force fi∈R3. Under the assumptions
of horizontal ground ( pz
i= 0,∀i= 1, . . . , n c) and negligible
variation of the angular momentum ( ˙L≈0), we obtain the
relationship (for further details, see [23])
¨cx, y=ω2(t) (cx, y−u), (2)where u∈R2is the Center of Pressure (CoP), defined as
u≜Pnc
i=1fz
ipx,y
iPnc
i=1fz
i.
The dynamics in the horizontal directions of the CoM are
decoupled, but they depend on the vertical motion through
ω2≜(gz+ ¨cz)/cz.
Let us assume the CoP to be constant, as a virtual foot . The
vector− →cucan change its length and rotate about udue only
to the gravity force mgand the initial CoM velocity ˙cx, y
0
(for our case it equals the TD velocity ˙cx, y
TD, see Fig. 2b). If
the CoM height is constant, (2) simplifies to the well-known
Linear Inverted Pendulum (LIP) model [24]. Nevertheless,
such assumption is too restrictive. Indeed, to achieve a smooth
landing and dissipate the impact energy effectively, it is
convenient to enforce the vertical CoM dynamics after TD
to behave as a Mass-Spring-Damper (MSD) system:
m¨cz+d˙cz+k(cz−l0) =Fz, (3)
in which l0is the spring rest position, and k, d∈R+are the
virtual stiffness andvirtual damping coefficients, respectively.
If the joint controller already implements a gravity compen-
sation strategy, one may assume Fz= 0. In this way, the
vertical CoM dynamics is an autonomous system, depending
only on the state at TD: cz
TDand˙cz
TD. We will refer to (2)–(3)
as the VHSIP model. Since the CoM dynamics of the VHSIP
in the two horizontal directions are equivalent and decoupled,
we analyze only the motion along the X−axis, keeping in
mind that the arguments are valid also along the Y−axis.
After TD the system is associated with a conserved quantity,
the so-called Orbital Energy E(cx−ux,˙cx)[25]:
E=1
2˙rx2h2(rx) +gzrx2f(rx)−3gzZrx
0f(ξ)ξdξ
withrx=cx−ux,fis a twice-differentiable function1for
which it holds cz=f(rx)andf′is its derivative. Additionally,
we define h(rx) =f(rx)−f′(rx)rx. If the CoM is moving
toward the virtual foot with E > 0, then orbital energy is
sufficient to let the CoM to pass over uand continue on
its way. If E < 0, then the CoM will stop and reverse
the direction of motion before getting over the virtual foot.
IfE= 0, then the CoM converges to rest above u, [26].
Therefore, robot configurations in equilibrium can be reached
by selecting uso that at TD the following condition holds
E(cx
TD−ux,˙cx
TD) = 0 . (4)
In the capturability framework, such uis named Capture Point
(CP). Whereas for the LIP model it is possible to explicitly
compute it, for our VHSIP model this is not the case. In the
following, we show how we overcome this complexity.
1The scalar function fmaps horizontal displacements to heights. It exists
as long as cx(t)is a bijective function of time. As a matter of fact, in this case
cx(t)admits an inverse which would allow us to write cz(t)as a function
ofcx(t). The trajectory cx(t)is bijective if the virtual foot uxis constant
andω2(t)>0. The former clause is already taken as an assumption. The
latter occurs whenever the CoM does not penetrate the ground ( cz>0) and
there is no pulling force from the ground ( ¨cz>−gz): this clause is always
verified for the problem we are considering.4
B. Landing Problem
Now, we can state the problem more formally.
Problem Statement. Consider a robot that is free falling on a
flat horizontal ground with negligible angular velocity. Without
knowing the distance between the robot and the ground, find
the parameters for the template VHSIP model (i.e., k,dand
u), that fulfill the requirements (R1),(R2),(R3), and (R4).
Then, compute the joint torques that realize the CoM motion
obtained with the selected template model.
III. M ETHODOLOGY
In this section, the structure of our LC is introduced and
discussed. At any sampling instant, we suppose that the TD is
about to occur and use the template VHSIP model to compute
a new CoM reference trajectory for landing. In this way, we
can avoid estimating the robot’s absolute position when no
contact is active. During the flying phase, the system has to
prepare to dissipate the kinetic energy throughout the landing
phase. The robot should adjust its limbs to be able to place
the virtual foot u(i.e., the CoP) on the CP at TD. Notice
that (2)–(3) are defined in an inertial frame, but our LC is
designed to be independent of absolute position estimates.
We circumvent this limitation by introducing the terrain frame
T. First, we denote the robot CoM frame with Chaving the
origin on the CoM, the XC–axis along the forward direction
of the main body of the robot and the YC–axis orthogonal to it,
pointing towards the left side (see Fig. 3). The terrain frame is
a horizontal frame [27], hence the XTYT–plane is orthogonal
to gravity and XTandXClie on the same plane. We will refer
to the distance between OTandOCduring the flying phase as
l0, which is a user-modifiable parameter. For a given control
interval, the frame Tis fixed and can be employed to compute
the new CoM reference trajectory. At the subsequent control
interval, one of the following two alternative conditions will
arise:
•TD is detected. Thus, the CoM reference will be tracked,
stabilizing the system.
•TD is not detected. A kinematic adjustment (detailed in
Section III-D) is performed, in order to keep the feet
aligned with the ground, i.e., on the XTYT–plane. Then,
a new terrain frame is set and the process repeats.
The benefits of continuous re-computation are two-fold: to
make the robot reactive and to avoid the need of state
estimation2. Since all the quantities in the remainder of this
section are expressed in the terrain frame, henceforth, we will
omit the frame for the sake of readability.
A. Vertical Motion Reference
In the context of the VHSIP model, the requirement (R1)
is equivalent to having a critically-damped oscillator in (3).
This can be achieved setting the damping equal to d=
2√
km. Thus, the two system poles are real and coincident in
λ=−p
k/m . The kinematic adjustment module guarantees
2We still have to estimate the linear velocity, but the implementation
described in Section III-F mitigates the influence of accelerometer biases.
Fig. 3. The CoM frame Chas the origin at the robot CoM and encapsulates
the trunk orientation. The terrain frame Tis the horizontal reference frame for
which the CoM has coordinates c=0 0 l0Twhen the robot is in air.
After TD, Tis kept fix. Respectively, red, green and blue segments denote the
X,Y, and Zaxes. The robot is performing the kinematic adjustment since
its orientation is not horizontal and ˙chas a non-null horizontal component.
that when the TD occurs, the CoM is always at distance l0
from the floor. Then, the reference trajectory for the CoM
in the vertical direction depends only on the TD velocity
˙cz
TD<0. The evolution of a critically-damped system can
be computed in closed form:
˙cz(t) =eλ(t−tTD)(λ(t−tTD) + 1) ˙ cz
TD (5a)
cz(t) =eλ(t−tTD)(t−tTD) ˙cz
TD+l0 (5b)
The stiffness kmust be selected to ensure the minimum value
forcz(t)is above the ground, preventing undesired collisions
between trunk and ground (requirement (R2) ). Having a
critically-damped system, this minimum is unique for t > t TD.
Therefore, denoting with ∆zthe minimum terrain clearance,
the requirement cz(t)≥∆zfort≥tTDcan be translated in
a lower-bound for the stiffness coefficient:
k≥k1=m
 
e(∆z−l0)2(˙cz
TD)2.
We set a maximum for the convergence time to prevent long
dynamic evolution when TD velocity is low. Being (3) a
stable second-order system with coincident eigenvalues, it is
at steady-state for t≥ −7/λ. Choosing the maximum time of
convergence tc, another limitation for the stiffness comes out:
k≤k2=m(tc/7)2.
At every control instant, we fix the virtual stiffness to k=
max{k1, k2}and update the virtual damping accordingly.
Then, a new CoM reference trajectory is computed.
B. Horizontal Motion Reference
To prevent the robot from tipping over during landing and
to stabilize it into a standing configuration (R3) , we seek for
the (constant) virtual foot location uxthat drives the CoM
above it with zero linear velocity when the system reaches
steady-state, i.e., that attains zero orbital energy (4). Equation
(2) can be rewritten in state-space form:
˙cx(t)
¨cx(t)
|{z}
˙x(t)=0 1
ω2(t) 0
|{z}
A(t)cx(t)
˙cx(t)
|{z}
x(t)+0
−ω2(t)
|{z}
B(t)ux(6)
showing its nature of Linear Time Varying (LTV) system,
withω(t)evolving in time. Even if the dynamics is linear, its5
integration does not admit a closed-form solution because the
matrix A(t)does not commute with its integralRt
tTDA(σ)dσ,
[28]. Then, we set up an Optimal Control Problem (OCP) to
find the optimal CoP position ux
othat makes the CoM converge
above it with null velocity over a finite horizon. Hereafter,
when a time-varying variable appears with as subscript, e.g.,
k, it must be interpreted as evaluated at time kTs, for instance
xk=x(kTs), being Tsthe sampling time. Our OCP relies on
forward Euler integration and it is formulated as
min
xk, uxwp|CpxN−ux|2+wv|CvxN|2+wu|ux|2
s.t.xk+1=¯Akxk+¯Bkuxk= 0,1, . . . , N −1(7)
having set ¯Ak=I2×2+TsAkand¯Bk=TsBk.I2×2is the
2×2identity matrix, and Cp=1 0
andCv=0 1
are selection matrices that pick out position and velocity from
the state x, respectively. Moreover, wp, wv, wu∈R+are
weights that penalize the final CoM deviation from the virtual
foot, the final CoM velocity, and the virtual foot distance from
OT. The horizon Nshould be large enough to guarantee that
at time NTsthe system is at steady-state. We solve (7) with
a single shooting approach. For doing so, the knowledge of
ω2(t),0≤t≤NTs,is needed. Thus, (3) must be forward
integrated up to NTs. Recursively applying (2), we express
the state trajectory as a function of the virtual foot and the
initial conditions. This results in an unconstrained Quadratic
Program (QP) in the scalar optimization variable ux:
min
uxJ(x0, ux)≜xT
0Qxx0+uxTQuux+ 2xT
0Qxuux(8)
Qx,QuandQxuare real matrices of dimensions 2×2,1×1
and2×1, respectively. For the sake of conciseness, we do not
report their expression here. Zeroing the partial derivative of
the cost J(·), the optimal virtual foot location is found:
ux
o=−QxuT
Qux0.
Notice that the minimization of J(·)corresponds to minimiz-
ing the Orbital Energy. Repeating the same argument for the
lateral component of the CoM, the coordinates of the virtual
foot in the terrain frame are obtained. If a TD occurs, the
robot must track the CoM reference trajectory. This is obtained
by plugging uointo (2) and forward integrating along the
horizon to get the horizontal components, while keeping the
vertical component previously computed as described in (3).
Conversely, if a TD does not occur, the kinematic adjustment
described in Section III-D is performed, shifting the feet
according to the optimal virtual foot location. Additionally,
the terrain frame is updated and a new reference is computed.
C. Angular Motion Reference
Even though the VHSIP does not capture the angular
dynamics of the robot, it is still valid within a range of
orientations and angular rates. Suppose the robot lands with
a non-horizontal trunk. In that case, we plan the Euler angles
ϕd∈R3to reach a horizontal configuration while the second-
order system in (3) attains the steady state:
ϕd(t) =eλ(t−tTD)(t−tTD)˙ϕTD. (9)Euler rates can be used since the robot operates far enough
from singular configurations.
D. Kinematic Adjustment
During the flying phase, the robot limbs must prepare to
realize the optimal CoP at TD. We call such motion kinematic
adjustment [27]. Fig. 3 shows the robot while performing the
kinematic adjustment. It consists in placing the robot feet pi
on the vertices of a rectangle parallel to the landing surface,
even if the robot trunk is not horizontal. The rectangle lies
on the XTYT−plane and it is shifted such that its centroid is
placed onto the optimal CoP uo:
pi, d(t) =pi,0+α(t)uo, (10)
where pi,0is the position of the i-th foot when the robot is
in the homing configuration. To avoid abrupt changes in the
reference that would affect the orientation of the base, we per-
form a linear interpolation with α:t→[0,1]. Denoting with
RC T∈SO(3)the rotation matrix describing the orientation of
the terrain frame with respect to the trunk, we can express feet
positions in the C−frame pCi, d=RC T 
pi, d−0 0 l0T
.
Feet motions can be realized with joint-space control. Desired
joint configurations can be computed solving an Inverse Kine-
matic (IK) problem for each foot assuming mass-less legs:
qi, d= IK( pCi, d), where qi, dcontains the desired angles of
the joints on the i−th leg. The mechanical structure of our
robot allows us to employ closed form IK at the position
level and qi, d∈R3. Desired joint velocities are computed
considering the Cartesian-space error eCi=pCi, d−pCi:
˙qi, d= 
Ji(q) +εI3×3−1kveCi
being Ji(qd)∈R3×3the Jacobian matrix associated to the
i-th foot, I3×3is the 3×3identity matrix, ε∈R+a
regularization parameter, and kv∈R+a scaling factor. The
joint trajectory is tracked with a joint-space PD controller
τfb=Kj
P(qd−q) +Kj
D(˙qd−˙q) +τg(q). (11)
with the gravity compensation τg(q)as feedforward term. We
tuned off-line the diagonal matrices of positive gains Kj
Pand
Kj
D, executing tasks with the feet not touching the ground.
E. Touch Down Detection
We define the transition between flying and landing phases,
the TD, as the first time instant when all feet are in contact
with the ground. Mechanical switches or contact sensors could
be employed, but these devices are typically expensive and
suffer from impacts. Since torque estimates based on the motor
current are available on our robot, we identify the contact
status of the i-th foot from an estimate of the Ground Reaction
Forces (GRFs) ˆfiexerted on it:
ˆfi=Ji(q)−TSi 
C(q)˙q+g(q)−τ
(12)
where q,˙qandτare the measured joint positions, velocities
and torques, respectively, C(q)˙qis the centrifugal and Cori-
olis term, g(q)is the vector of gravitational effects, Siis the
matrix picking out torques associated to the i-th leg. Because
of the flat horizontal ground assumption, a contact is detected
ifˆfz
i≥fz
th, with fz
tha (small) robot-dependent threshold.6
F . State Estimation
Because of the terrain frame definition and of the kinematic
adjustment performed in the flying phase, we do not need to
estimate the position of the CoM at TD: we can assume it to
becTD=0 0 l0T. Our robot is equipped with an Inertial
Measurement Unit (IMU) that outputs rotation matrix RW C ,
angular velocity Cωand linear acceleration Ca(referred to
the robot base frame). The linear acceleration in the inertial
frame is retrieved considering the accelerometer bias Cb∈R3
as:a=RW C (Ca−Cb)−g. During the flying phase, we
reconstruct the base linear velocity v∈R3making use of a
leaky integrator, equally to [29]:
ˆvk+1= (I3×3−ΓTs)ˆvk+I3×3Tsak (13)
where Γ= diag ( γx, γy, γz)is a diagonal matrix of positive
discount factors in the three directions. Since the flying phase
has a short time duration, the leaky integrator achieves satisfac-
tory performances in mitigating the drift due to inaccuracies of
bias estimation. The estimate ˆvkis plugged into the robot full
model for computing the CoM velocity during the flying phase.
Conversely, after TD we rely on leg odometry to estimate the
CoM position and velocity, as in [30].
G. Motion Control During Landing Phase
In this section, we discuss the projection-based Whole Body
Control (pWBC) we employ to track in the landing phase.
First, we design a Cartesian impedance, attached at the CoM,
to track the CoM reference after TD, stabilize the orientation,
and reject disturbances on both linear and angular directions.
The control law will generate a wrench wd∈R6that we map
into desired GRFs fi, d∈R3, at the robot’s feet [30].
1) Feedback Wrench: A PD feedback term is computed to
track the CoM reference and the base orientation:
wlin
fb=Klin
P(cd−c) +Klin
D(˙cd−˙c),
wang
fb=Kang
Pe 
RW C , dRT
W C
+Kang
D(ωd−ω)
where RW C , dis the rotation matrix associated to ϕd,
e:SO(3)→R3maps a rotation matrix to the associated
rotation vector and ωis the actual angular velocity. The
desired angular velocity are obtained with ωd=T(ϕd)˙ϕd.
2) Feed-forward Wrench: We annihilate the effects of the
gravity force on the CoM through the feed-forward component
wg=
mgT03×1T.
To improve the tracking performances, desired accelerations
enter the controller with a feed-forward term
wlin
ff=m¨cd,wang
ff=RT C IC CRC T ˙ωd.
where ˙ωdis deduced from the desired Euler angles and rates.
3) Whole Body Controller: After TD, the robot has all the
feet in contact with the ground and we map the desired wrench
wd=wfb+wg+wff
to the stack of desired GRFs fd∈R3ncby solving the QP
fd= argmin
fd1
2∥Gfd−wd∥2
s.t.|fx, y
i, d| ≤µfz
i, d, fz
i, d>0i= 1, . . . , n c(14)that enforces (R4) by means of the linearized friction cone
constraints. We set the friction coefficient µ∈R+to be equal
for all the contacts. G∈R6×3ncdenotes the grasp matrix
G=
···I3×3
[pi−c]×···
,
where [·]×is the skew-symmetric operator associated to the
vector product. Finally, the desired torque to be exerted by the
joints of the i-th leg is τi, d=SiC(q)˙q−Ji(q)fi, d.
IV. R ESULTS
A. Implementation details
The robot we use to demonstrate the validity of our ap-
proach is the torque-controlled quadruped Unitree Go1 Edu
[31]. To visualize, simulate and interact with the robot, we
use Locosim [32], a platform-independent software framework
designed for fast code prototyping3. We implemented both the
pWBC and the LC in a Python ROS node, which relies on
Pinocchio [33] for the computation of robot kinematics and
dynamics and closes the loop at 500 Hz. The firmware of Go1
supports external inputs via User Datagram Protocol (UDP)
through an Ethernet connection. To increase computational ef-
ficiency, we coded the VHSIP dynamics in C++ and provided
Python bindings. References are computed with a frequency
of250 Hz and linearly interpolated to match the controller
frequency of 500 Hz . Since Python is not real-time compliant,
monitoring the loop frequency in simulation is essential before
running the framework with the real hardware.
A number of tests are reported in the accompanying video
available at youtu.be/wiuedeHfSEY. For all the cases, we set
the parameters of Sec. III-A as follow: the nominal height l0=
0.27 m (robot height in home configuration), the clearance
∆z= 0.10 m , the maximum settling time tc= 1.2 s.
B. Limits on the Horizontal Velocity
To emphasize the advantages of the proposed LC, we first
compared it in simulation with a naive approach that keeps
the feet at a constant position on the XTYT–plane during the
flying phase. The two controllers have the same reference for
the CoM in the vertical direction, the same joint PD gains
and the same pWBC gains. The main difference relies on the
absence, in the naive approach, of the correction due to the
horizontal component of the CoM velocity, that it is present in
our LC. Here, we consider the landing task achieved only if
the feet make contact with the ground and the robot reaches a
standing still configuration, i.e., joint velocities below a thresh-
old, without bouncing. Our goal is to show that the modulation
of the virtual foot uois crucial to achieve a successful landing.
By executing thousands of automated drops with varying the
initial conditions of (2)-(3), we detected the ranges of TD
horizontal velocities that can be handled using either our LC
or the naive controller, that are reported in the polar chart in
Fig. 4a. We tested dropping horizontal velocities in the form
˙cx, y
0=νcosψsinψT, with ν= 0.0,0.1, . . . , 4.0 m/s
3The code to replicate the results is open source and can be downloaded
at github.com/iit-DLSLab/reactive landing controller/.7
(a)
 (b)min max unit
Roll angle -40 35 [◦]
Pitch angle -45 15 [◦]
Roll rate -460 455 [◦/s]
Pitch rate -365 215 [◦/s]
Yaw rate -3035 3000 [◦/s]
(c)
Fig. 4. Simulation results. (a) Polar plot of the limit magnitudes of ˙cx, y
0for our LC (solid lines) and for the naive approach (dashed lines) with different
drop heights. The angles represent the direction of ˙cx, y
0with respect to the XT-axis, i.e., atan2 
˙cy
0,˙cx
0
. (b) Success rates dropping the Go1 robot from
0.80 m with various initial horizontal velocities. White noise affects measured joint velocities, measured joint torques and initial horizontal velocities. (c)
Angular perturbations limits dropping Go1 from 0.6 m height and with 1.0 m/sforward velocity. The asymmetry of the robot inertia causes the roll angle
and rate bounds to be not symmetric.
andψ= 0, π/6, . . . , 2πrad. For all the tested dropping
heights, the LC can handle larger initial horizontal velocities
in all the directions, up to 3.0 m/s. Notice that the maximum
trotting speed of Go1 is 3.7 m/s, confirming our interest
for landings with high horizontal velocity. The asymmetry
of the polytopic regions results from the asymmetric mass
distribution and joint limits. As the naive approach often fails
in simulations, we decided not to test it with any experiment
because it would weaken the robot’s structure.
C. Robustness to Noise
When dealing with real hardware it is common to have noisy
measures and uncertain parameters. To understand the robust-
ness of our controller in simulation, we added white noise
to measured joint velocities, measured actuation torques and
initial horizontal velocity. The values for the standard deviation
areσ˙q= 0.05 rad /s,στ= 0.2 Nm andσ˙cx, y= 0.2 m/s,
respectively. We throw the robot from a height of 0.80 m .
In order to produce a statistical analysis, we execute a batch
of 10 simulations for each true value of the initial horizontal
velocity. Within each batch, we compute the success rate as
the percentage of achieved landing tasks, see the colour map
in Fig. 4b. Despite the noise, the overall success rate is 0.875.
D. Angular perturbations
Here, we want to evaluate how tolerant our method is to
angular perturbations, despite the fact that our template model
does not describe the angular motion (see Section III-C). In
simulation, we tested the robustness of our LC with respect to
non-zero initial angular velocity and non-horizontal orientation
of the trunk. We drop the robot from a height of 0.60 m
(about 2.5times its standing height) with a forward velocity
of1.0 m/s. One at a time, we vary the initial values of angles
and rates. The discretization step is 5◦for the angles and 5◦/s
for the rates. The limit values for which our LC is able to
achieve the landing task are listed in Table 4c.
E. Experiments
We performed an extensive experimental study to assess
the performance of our LC. All the tests are visible in theaccompanying video. We dropped the 12 kg Go1 robot from
various heights with different manually induced horizontal
velocities in all the directions (forward, backwards, left, right).
Fig. 1 shows a drop from about 0.8 mwith non-zero horizontal
velocity in the forward direction. Plots in Fig. 5 are associated
to this experiment. They illustrate that, using only propriocep-
tive measures, the robot can be successfully stabilized to a
standing configuration thanks to both the kinematic adjustment
and the GRFs exerted after landing. Notice that in all the tests
joint velocities and torques never reach their limits.
V. C ONCLUSIONS
In this work, we presented a model-based approach for
quadruped robot landing after unexpected falls or planned
drops. A successful landing entails dissipating all the kinetic
energy, stopping the robot without hitting the ground with the
trunk and keeping the feet in contact. Tracking an impedance
model turned out to be a suitable candidate to dissipate the
excess of kinetic energy avoiding rebounds. The approach is
reactive enough ( 500 Hz ) to cope with heights lower than
0.5 m as in [19] and it makes use only of proprioceptive
measurements, being therefore independent of an external
motion capture system. Furthermore, it can achieve omni-
directional landing with significant horizontal velocity, up to
3.0 m/s. Our landing controller was extensively bench-marked
in simulation and demonstrated to dramatically outperform
a naive landing strategy that tracks the vertical impedance
but does not adjust the feet locations during the fall. Despite
employing a simplified model that assumes horizontal orienta-
tion, the approach was demonstrated to tolerate a large range
of orientation errors. An extensive experimental evaluation
of omni-directional landing on the real robot Go1 was also
presented, randomly dropping the robot in different ways.
Future research directions could increase the model descrip-
tiveness, relaxing the assumption of negligible variation of the
angular momentum, extending the region of feasible horizontal
velocities and tolerable angular perturbations. We also want
to introduce a backup plan for situations in which a large
horizontal velocity causes the optimal CoP to lie outside of
either the kinematic region or the convex hull of the feet.8
Fig. 5. Experimental results. Desired and actual CoM and pitch trajectories
expressed in T-frame (top); desired and estimated GRFs exerted on the left
front foot (left center) and on the left hind foot (right center); measured
torques for the left legs (bottom). The upper actuation limit for both hip
abduction/adduction (haa) and hip flexion/extension (hfe) mechanisms is τ1,
for knee flexion/extension (kfe) one is τ2. Lower limits are mirrored. The
vertical lines denote the detection of the TD.
Finally, we want to extend the approach for landing onto non-
horizontal surfaces and soft terrains.
REFERENCES
[1] T. R. Kane and M. Scher, “A dynamical explanation of the falling cat
phenomenon,” International journal of solids and structures , vol. 5,
no. 7, pp. 663–670, 1969.
[2] N. H. Hunt, J. Jinn, L. F. Jacobs, and R. J. Full, “Acrobatic squirrels
learn to leap and land on tree branches without falling,” Science , vol.
373, no. 6555, pp. 697–700, 2021.
[3] B. Shields, W. S. Robertson, N. Redmond, R. Jobson, R. Visser,
Z. Prime, and B. Cazzolato, “Falling cat robot lands on its feet,” in
Proceedings of the Australasian Conference on Robotics and Automa-
tion, 2013, pp. 74–82.
[4] H. Kolvenbach, E. Hampp, P. Barton, R. Zenkl, and M. Hutter, “Towards
jumping locomotion for quadruped robots on the moon,” in International
Conference on Intelligent Robots and Systems (IROS) . IEEE, 2019, pp.
5459–5466.
[5] F. Roscia, A. Cumerlotti, A. Del Prete, C. Semini, and M. Focchi,
“Orientation control system: Enhancing aerial maneuvers for quadruped
robots,” Sensors , vol. 23, no. 3, 2023.
[6] G. Wenger, A. De, and D. E. Koditschek, “Frontal plane stabilization
and hopping with a 2dof tail,” in International Conference on Intelligent
Robots and Systems (IROS) . IEEE, 2016, pp. 567–573.
[7] X. Chu, C. H. D. Lo, C. Ma, and K. W. S. Au, “Null-space-avoidance-
based orientation control framework for underactuated, tail-inspired
robotic systems in flight phase,” IEEE Robotics and Automation Letters ,
vol. 4, no. 4, pp. 3916–3923, 2019.
[8] Y . Tang, J. An, X. Chu, S. Wang, C. Y . Wong, and K. S. Au, “Towards
safe landing of falling quadruped robots using a 3-dof morphable inertial
tail,” in International Conference on Robotics and Automation (ICRA) .
IEEE, 2023, pp. 1141–1147.[9] V . Kurtz, H. Li, P. M. Wensing, and H. Lin, “Mini cheetah, the falling
cat: A case study in machine learning and trajectory optimization
for robot acrobatics,” in International Conference on Robotics and
Automation (ICRA) . IEEE, 2022, pp. 4635–4641.
[10] B. Katz, J. D. Carlo, and S. Kim, “Mini cheetah: A platform for pushing
the limits of dynamic quadruped control,” in International Conference
on Robotics and Automation (ICRA) , 2019, pp. 6295–6301.
[11] Q. Nguyen, M. J. Powell, B. Katz, J. Di Carlo, and S. Kim, “Optimized
jumping on the mit cheetah 3 robot,” in International Conference on
Robotics and Automation (ICRA) . IEEE, 2019, pp. 7448–7454.
[12] C. Nguyen and Q. Nguyen, “Contact-timing and trajectory optimization
for 3d jumping on quadruped robots,” in International Conference on
Intelligent Robots and Systems (IROS) . IEEE, 2022, pp. 11 994–11 999.
[13] M. Chignoli and S. Kim, “Online trajectory optimization for dynamic
aerial motions of a quadruped robot,” in International Conference on
Robotics and Automation (ICRA) . IEEE, 2021, pp. 7693–7699.
[14] M. Chignoli and P. M. Wensing, “Variational-based optimal control of
underactuated balancing for dynamic quadrupeds,” IEEE Access , vol. 8,
pp. 49 785–49 797, 2020.
[15] N. Rudin, H. Kolvenbach, V . Tsounis, and M. Hutter, “Cat-like jumping
and landing of legged robots in low gravity using deep reinforcement
learning,” IEEE Transactions on Robotics , vol. 38, pp. 317–328, 2021.
[16] J. Qi, H. Gao, H. Yu, M. Huo, W. Feng, and Z. Deng, “Integrated attitude
and landing control for quadruped robots in asteroid landing mission
scenarios using reinforcement learning,” Acta Astronautica , 2022.
[17] G. Bledt, “Regularized predictive control framework for robust dynamic
legged locomotion,” Ph.D. dissertation, Massachusetts Institute of Tech-
nology, 2020.
[18] Y . L. Jingwen Zhang, Junjie Shen and D. Hong, “Design of a
jumping control framework with heuristic landing for bipedal robots,”
https://arxiv.org/pdf/2304.00536.pdf , 2023.
[19] S. H. Jeon, S. Kim, and D. Kim, “Online optimal landing control of
the mit mini cheetah,” in International Conference on Robotics and
Automation (ICRA) . IEEE, 2022, pp. 178–184.
[20] M. H. Raibert, Legged robots that balance . MIT press, 1986.
[21] R. Blickhan, “The spring-mass model for running and hopping,” Journal
of biomechanics , vol. 22, no. 11-12, pp. 1217–1227, 1989.
[22] X. Xiong and A. D. Ames, “Bipedal hopping: Reduced-order model
embedding via optimization-based control,” in International Conference
on Intelligent Robots and Systems (IROS) , 2018, pp. 3821–3828.
[23] P.-B. Wieber, R. Tedrake, and S. Kuindersma, “Modeling and control of
legged robots,” in Springer handbook of robotics . Springer, 2016, pp.
1203–1234.
[24] S. Kajita and K. Tani, “Study of dynamic biped locomotion on rugged
terrain-derivation and application of the linear inverted pendulum mode,”
inInternational Conference on Robotics and Automation (ICRA) . IEEE,
1991, pp. 1405–1406.
[25] J. E. Pratt and S. V . Drakunov, “Derivation and application of a con-
served orbital energy for the inverted pendulum bipedal walking model,”
inInternational Conference on Robotics and Automation (ICRA) . IEEE,
2007, pp. 4653–4660.
[26] J. Pratt, J. Carff, S. Drakunov, and A. Goswami, “Capture point: A step
toward humanoid push recovery,” in 2006 6th IEEE-RAS international
conference on humanoid robots . IEEE, 2006, pp. 200–207.
[27] V . Barasuol, J. Buchli, C. Semini, M. Frigerio, E. R. De Pieri, and D. G.
Caldwell, “A reactive controller framework for quadrupedal locomotion
on challenging terrain,” in International Conference on Robotics and
Automation (ICRA) . IEEE, 2013, pp. 2554–2561.
[28] C.-T. Chen, Linear system theory and design , 3rd ed. Oxford University
Press, 1999, ch. 4, pp. 106 – 117.
[29] A. Herzog, L. Righetti, F. Grimminger, P. Pastor, and S. Schaal, “Bal-
ancing experiments on a torque-controlled humanoid with hierarchical
inverse dynamics,” in International Conference on Intelligent Robots
and Systems (IROS) . IEEE, 2014, pp. 981–988.
[30] M. Focchi, A. Del Prete, I. Havoutis, R. Featherstone, D. G. Caldwell,
and C. Semini, “High-slope terrain locomotion for torque-controlled
quadruped robots,” Autonomous Robots , vol. 41, pp. 259–272, 2017.
[31] Unitree. Go1 - accompany you to the world. [Online]. Available:
https://www.unitree.com/en/go1/
[32] M. Focchi, F. Roscia, and C. Semini, “Locosim: an open-source
cross-platform robotics framework,” arXiv preprint arXiv:2305.02107v2 ,
2023.
[33] J. Carpentier, G. Saurel, G. Buondonno, J. Mirabel, F. Lamiraux,
O. Stasse, and N. Mansard, “The pinocchio c++ library: A fast and
flexible implementation of rigid body dynamics algorithms and their
analytical derivatives,” in 2019 IEEE/SICE International Symposium on
System Integration (SII) . IEEE, 2019, pp. 614–619.