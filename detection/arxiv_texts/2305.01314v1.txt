Two-sets cut-uncut on planar graphs∗
Matthias Bentert†Pål Grønås Drange†Fedor V. Fomin†Petr A. Golovach†
Tuukka Korhonen†
Abstract
We study the following Two-Sets Cut-Uncut problem on planar graphs. Therein, one is
given an undirected planar graph Gand two sets of vertices SandT. The question is, what is the
minimum number of edges to remove from G, such that we separate all of Sfrom all of T, while
maintaining that every vertex in S, and respectively in T, stays in the same connected component.
We show that this problem can be solved in time 2|S|+|T|nO(1)with a one-sided error randomized
algorithm. Our algorithm implies a polynomial-time algorithm for the network diversion problem on
planar graphs, which resolves an open question from the literature. More generally, we show that
Two-Sets Cut-Uncut remains ﬁxed-parameter tractable even when parameterized by the number
rof faces in the plane graph covering the terminals S∪T, by providing an algorithm of running time
4r+O(√r)nO(1).
1 Introduction
We consider the following variant of the cut-uncut problem . Acutin a graphG= (V,E)is a partition-
ing(A,B)ofV, and we denote by cutG(A)thecut-set, that is, the set of edges with one endpoint in A
and the other in B=V\A. For two disjoint sets of vertices SandT,(A,B)is anS-T-cutifS⊆A
andT⊆B.
Input: A graphG, two disjoint terminal sets S,T⊆V(G), and an integer k≥0.
Task: Decide whether there exists an S-T-cut (A,B)ofGwith|cutG(A)|≤ksuch
that the vertices of Sare in the same connected component of G[A]and the
vertices ofTare in the same connected component of G[B].Two-Sets Cut-Uncut
Our interest in Two-Sets Cut-Uncut is two-fold. First, Two-Sets Cut-Uncut is a natural
optimization variant of the 2-Disjoint Connected Subgraphs problem that received considerable
attention from the graph-algorithms and computational-geometry communities [ 13,24,31,40,44,45]. In
this problem, one asks whether, for two given disjoint sets S,T⊆V(G), one can ﬁnd disjoint sets A1⊇S
andA2⊇Tsuch that the subgraphs of Ginduced by Ai,i= 1,2, are connected. In Two-Sets
Cut-Uncut we not only want to decide whether there are disjoint connected sets containing terminal
setsSandT, but also minimize the size of the corresponding cut (if it exists). Van ’t Hof et al. [ 45]
showed that 2-Disjoint Connected Subgraphs isNP-complete in general graphs, even if |S|= 2, and
Gray et al. [ 24] proved that the problem is NP-complete on planar graphs. This implies that Two-Sets
Cut-Uncut is also NP-complete on planar graphs.
Second, Two-Sets Cut-Uncut is closely related to the Network Diversion problem, which has
been studied extensively by the operations research and networks communities [ 8,10,11,18,20,30,37].
In this problem, we are given an undirected graph G, two terminal vertices sandt, an edgeb=uv,
and an integer k. The task is to decide whether it is possible to delete at most kedges such that the
∗The research leading to these results has received funding from the Research Council of Norway via the project BWCA
(grant no. 314528). Matthias Bentert is supported by the European Research Council (ERC) under the European Union’s
Horizon 2020 research and innovation programme (grant agreement No. 819416).
†Department of Informatics, University of Bergen, Norway. Emails: matthias.bentert@uib.no ,pal.drange@uib.no ,
fomin@ii.uib.no ,petr.golovach@uib.no ,tuukka.korhonen@uib.no
1arXiv:2305.01314v1  [cs.DS]  2 May 2023edgebwill become a bridge with son one side and ton the other. Equivalently, the task is to decide
whether there exists a minimals-t-cut of size at most k+ 1containing b. While this problem seems
very similar to the classic s-t-Minimum Cut problem, the complexity status of this problem ( Pvs.NP)
is widely open. Let us observe that a polynomial-time algorithm for the special case of Two-Sets
Cut-Uncut with|S|=|T|= 2implies a polynomial time algorithm for Network Diversion : There
are two cases, either sis in the same component as u, orsis in the same component as v, and these
correspond to instances of Two-Sets Cut-Uncut withS={s,u}andT={t,v}, and respectively,
S={s,v}andT={t,u}.
Network Diversion has important applications in transportation networks and has therefore also
been studied on planar graphs. Cullenbine et al. [ 10] gave a polynomial time algorithm for Network
Diversion on planar graphs for the special case when both terminals sandtare located on the same
face. They posed as an open problem whether this polynomial-time algorithm can be generalized to
work on arbitrary planar graphs [ 10]. Duan et al. put out a preprint [ 17], which among other results,
claims an algorithm resolving Network Diversion on planar graphs in polynomial time, but without
a description of the algorithm. We were not able to verify the correctness of the result due to several
missing details. The result, however, is an immediate consequence of our main contribution, Theorem 1,
establishing the ﬁxed-parameter tractability of Two-Sets Cut-Uncut on planar graphs parameterized
by|S|+|T|. Theorem 1 also establishes a more general result about ﬁxed-parameter tractability of the
problem parameterized by the minimum number of faces rof the graph containing all terminals. (Notice
thatrnever exceeds|S|+|T|.)
Theorem 1. There is a one-sided error randomized algorithm solving Two-Sets Cut-Uncut on planar
graphs in time 2|S|+|T|·nO(1). Moreover, there is a one-sided error randomized algorithm solving the
problem in time 4r+O(√r)·nO(1), whereris the number of faces needed to cover S∪Tin a given plane
graph.
Theorem 1 provides the ﬁrst polynomial time algorithm for Two-Sets Cut-Uncut on planar graphs
for non-singleton SandT. Duan and Xu [ 18] showed how to solve Two-Sets Cut-Uncut on planar
graphs for|S|= 1and|T|= 2. This was later extended by Bezáková and Langley [ 4], who present
anO(n4)-time algorithm for |S|= 1and arbitrary Ton planar graphs. However, the polynomial time
solvability of the case |S|=|T|= 2(which is a generalization of Network Diversion ) remained open.
The main tool we develop for showing Theorem 1 is a new algorithmic result about computing shortest
paths in group-labeled graphs. We believe that this new result is interesting on its own. The group that
we consider is the Boolean group (Zd
2,+), consisting of length- dbinary vectors, where the operation +is
the component-wise exclusive or (xor). Our algorithm ﬁnds a shortest s-t-path in a graph, whose edges
are labeled by elements of (Zd
2,+)such that the sum of the labels assigned to the edges of the path equals
a given value. Furthermore, we impose the constraint that the path can visit certain sets of vertices only
once. Formally, we consider the following problem.
Input: A graphG, two vertices sandt, an edge labeling function g:E(G)→Zd
2, a
valuec∈Zd
2, andpsets of vertices X1,...,X p⊆V.
Task: Find ans-t-pathPinGthat satisﬁes
(i)/summationtext
e∈E(P)g(e) =c, and
(ii) for each i∈[p],|V(P)∩Xi|≤1,
and among such paths minimizes the length.Xor Constrained Shortest Path
In Section 3, we give an algorithm for Xor Constrained Shortest Path , that in fact works for
general graphs instead of only planar graphs. The result is the following theorem.
Theorem 2. Xor Constrained Shortest Path can be solved in 2d+p·(n+m)O(1)time by a one-sided
error randomized algorithm.
We call the problem variant where we replace path by cycle in the above problem deﬁnition Xor
Constrained Shortest Cycle . Observe that Theorem 2 directly implies also an algorithm for solving
Xor Constrained Shortest Cycle within the same running time.
2The proof of Theorem 2 is based on enhancing the technique introduced by Björklund, Husfeldt, and
Taslaman [ 6] for theT-cycleproblem. In T-cycle, the task is to ﬁnd a shortest cycle that visits a list of
speciﬁed vertices T⊆V(G)1, and Björklund et al. gave a 2|T|nO(1)-time algorithm for it. Our algorithm
generalizes the algorithm of Björklund et al., because T-cyclecan be reduced to Xor Constrained
Shortest Cycle withd=|T|andp= 0as follows. We assign each vertex v∈Tto one dimension
ofZd
2, and to enforce that the cycle passes through v, we add a true twin uofvto the graph and assign
the edgeuvthe vector in Zd
2that has 1at only the dimension assigned to v. All other edges are assigned
the zero vector 0. Clearly, a cycle evaluating to the all-one vector corresponds to a cycle that visits all
vertices inT.
Related work. Besides the closely related work on Network Diversion ,2-Disjoint Connected
Subgraphs , and Two-Sets Cut-Uncut that we already have mentioned above, let us brieﬂy go
through other relevant work.
Two-Sets Cut-Uncut is a special case of Multiway Cut-Uncut , where for a given equivalence
relation on the set of terminals, the task is to ﬁnd a cut (or node-cut) separating terminals according
to the relation. This problem is well-studied in parameterized complexity [ 7,12,41]. However, all the
previous work in parameterized algorithms on Multiway Cut-Uncut was focused on parameterization
by the size of the cut. Multiway Cut is also one of the closest relatives of our problem. Here for a given
set ofkterminals, one looks for a minimum number of edges separating allterminals. On planar graph,
the seminal paper of Dahlhaus et al. [ 14] provides an algorithm of running time nO(k). Klein and Marx
in [33] improve the running time to nO(√
k)and Marx in [ 38] shows that this running time (assuming the
Exponential Time Hypothesis (ETH)) is optimal.
The second part of Theorem 1 concerns the parameterization by the number of faces covering the
terminal vertices. Such parameterization comes naturally for optimization problems about connecting or
separating terminals in planar graphs. In particular, parameterization by the face cover was investigated
forMultiway Cut [39],Steiner Tree [3, 32], and various ﬂow problems [19, 21, 36].
Our Theorem 2 belongs to the intersection of two areas around paths in graphs. The ﬁrst area is about
polynomial time algorithms computing shortest paths in group-labeled graphs [ 15,25,34]. Recently,
Iwata and Yamaguchi [ 29] gave an algorithm for shortest non-zero paths in arbitrary group-labeled paths.
However, for our purposes, we need an algorithm computing a shortest path whose labels sum to a speciﬁc
element of the group.
The second area is about FPTalgorithms for ﬁnding paths in graphs satisfying certain properties
[5,6,22,35,46]. As we already mentioned, our algorithm for Xor Constrained Shortest Path
could be seen as an extension of the algorithm of Björklund, Husfeldt, and Taslaman [ 6] for theT-cycle
problem to a group labeled setting.
Organization. The remainder of the article is organized as follows. We start with a general overview
of how we achieve our two main results. We then present some notation and necessary deﬁnitions in
Section 2. Afterwards, we we show how to solve Xor Constrained Shortest Path in Section 3.
In Section 4, we apply this algorithm to develop a (randomized) FPT-time algorithm for Two-Sets
Cut-Uncut parameterized by the minimum number of faces such that each terminal vertex is incident to
at least one such face. Section 5 is devoted to showing that the W[1]-hardness of Two-Sets Cut-Uncut
parameterized by the number of terminals. Finally, we present two applications of our FPT-time algorithm
to generalize known results from the literature in Section 6 and conclude with some remaining open
problems in Section 7.
1.1 Outline of Theorems 1 and 2
We outline the proofs of Theorems 1 and 2. We ﬁrst outline the 2|S|+|T|·nO(1)-time algorithm for planar
Two-Sets Cut-Uncut , and then discuss the setting when S∪Tcan be covered by at most rfaces.
We observe that any optimal solution to Two-Sets Cut-Uncut is an (inclusion-wise) minimal cut in
the graphG. Our algorithm is based on the correspondence between minimal cuts in a planar graph and
cycles in its dual graph (see Figure 1). In particular, a set of edges C⊆E(G)is a cut-set of minimal cut
inGif and only if in the dual graph G∗, the corresponding set C∗⊆E(G∗)is a cycle. Now, to translate
1This implies that the algorithm can also take a list of edges by subdividing each target edge and add the new vertex
toT.
3Figure 1: An example of a plane graph (blue) and its dual (multi)graph (dashed/red). Notice that there
are bijections between the faces and the vertices, and also between the edges, that is, there is exactly one
blue vertex in each red face, one red vertex in each blue face, and each red edge intersects exactly one
blue edge, and vice versa.
Two-Sets Cut-Uncut into a problem about ﬁnding a cycle C∗inG∗, we wish to understand, based on
C∗, whether two terminal vertices uandvare on the same side of the cut CinGor on diﬀerent sides.
For this, we observe that if P⊆E(G)is the set of edges of an (arbitrary) u-v-path inGandP∗is the
corresponding set of edges in G∗, thenuandvare on diﬀerent sides of Cif and only if|C∗∩P∗|is odd.
It follows that a constraint stating that uiandvishould be on the same/diﬀerent side of the cut Cin
Gcan be expressed as a constraint stating that |C∗∩P∗
i|should be even/odd for some P∗
i⊆E(G∗). By
selecting one vertex vin the set of terminals Sand writing a “same side” constraint with every other
terminal vertex in Sand a “diﬀerent side” constraint with every terminal vertex in T, theTwo-Sets
Cut-Uncut problem reduces to the problem of ﬁnding a shortest cycle C∗inG∗that satisﬁes|S|+|T|−1
given constraints, each requiring that |C∗∩P∗
i|≡bi(mod 2)for someP∗
i⊆E(G∗)andbi∈{0,1}.
This problem can be equivalently phrased as the Xor Constrained Shortest Cycle problem with
d=|S|+|T|−1, and therefore Theorem 2 indeed implies a 2|S|+|T|·nO(1)time algorithm for Two-Sets
Cut-Uncut on planar graphs. Note that here we did not use the condition (ii) in the statement of
theXor Constrained Shortest Path problem; this condition will be used only for the algorithm
parameterized by face cover.
We then outline the algorithm of Theorem 2 for Xor Constrained Shortest Path . This algorithm
works not only on planar graphs but also on general graphs, and it is a generalization of the algorithm
by Björklund, Husfeldt, and Taslaman [ 6] for theT-cycle problem. Our algorithm, like many previous
parameterizedalgorithmsforﬁndingpathsingraphs[ 5,6,22,35,46]exploitsthecancellationofmonomials
in polynomials over ﬁelds of characteristic two and randomized polynomial identity testing [42, 47].
The idea of our algorithm is to associate with the input a polynomial over a ﬁnite ﬁeld of characteristic
two, and argue that (1) this polynomial is non-zero if and only if a solution exists, and (2) given an
assignment of values to variables of the polynomial, the value of the polynomial can be evaluated in time
2d+p·nO(1)2. By the DeMillo–Lipton–Schwartz–Zippel lemma [ 42,47], the problem can then be solved in
time 2d+p·nO(1)by evaluating the polynomial for a random assignment of values. Note that solving the
decision version also allows to recover the solution by self-reduction.
In more detail, the polynomial associated with the input is deﬁned as follows. Let us assume that the
input graph is a simple graph, as the problem on multigraphs can be easily reduced to simple graphs.
For each edge e∈E(G)of the input graph we associate a variable f(e), and then for an s-t-walk3
W=e1,e2,...,e /lscriptof length/lscriptwe associate a monomial f(W) =/producttext/lscript
i=1f(ei). Then, for an integer /lscript, we let
C/lscriptdenote the set of all s-t-walks of length /lscriptthat satisfy the conditions (i) and (ii) of the statement of
Xor Constrained Shortest Path , and ﬁnally let f(C/lscript) =/summationtext
W∈C/lscriptf(W)be the polynomial associated
with the input. As the monomials of f(C/lscript)correspond to walks instead of paths, it is not complicated to
design a 2d+p·nO(1)time dynamic programming algorithm for evaluating the value of f(C/lscript). A more
2Recall that pis the number of constraints for the condition (ii) in the Xor Constrained Shortest Path problem.
3A walk is like a path, but it can contain repeated vertices and edges.
4technical part of the proof is to argue that the polynomial f(C/lscript)is non-zero if and only if a solution
exists, in particular, that monomials corresponding to walks that are not paths cancel each other out.
This argument is a generalization of the argument used by Björklund et al. [6].
We then turn to the setting when S∪Tcan be covered by rfaces in a given plane embedding of G.
First, we observe that it can be assumed without loss of generality that the input graph is 2-connected.
This assumption simpliﬁes arguments because the boundary of each face of a plane 2-connected graph is a
cycle [16]. Given a plane graph Gwith terminal sets SandT, we can ﬁnd a minimum face cover of S∪T
by reducing the task to solving an auxiliary instance of the Red-Blue Dominating Set problem which
can be solved in parameterized subexponential time on planar graphs by the results of Alber et al. [2].
Suppose that fis a face ofGthat covers some terminals and let C/primebe the cycle forming the frontier of
f. We use the following crucial observation: for the cut-set C⊆E(G)of any minimal cut in Gseparating
SandT, it holds that (i) if C/primecontains vertices of both sets of terminals, then C∩E(C/prime)separatesC/prime
into two connected components (paths) such that each component contains the vertices of exactly one set
of terminals, and (ii) if C/primecontains vertices of one set, then either C∩E(C/prime) =∅orC∩E(C/prime)separates
C/primeinto two connected components (paths) such that the terminals are in the same component. We
use this observation to restrict the behavior of the cycle C∗inG∗corresponding to a potential solution
cut-setC. In case (i), we simply delete the edges of G∗that correspond to the edges of C/primethat should
not participate in C(see Figure 2). Case (ii) is more complicated. Suppose that C/primecontainsqterminals.
We ﬁndqinternally vertex disjoint paths P1,...,P qinC/primewhose end-vertices are the terminals. Then we
“split” the vertex fofG∗intoqverticesf1,...,f qin such a way that each fiis incident to the edges of
G∗corresponding to the edges of Pi(see Figure 3). However, this splitting would allow a cycle in the
dual graph to visit the face fseveral times. To forbid it, we deﬁne Xf={f1,...,f q}that will be used in
constraint (ii) of Xor Constrained Shortest Path and this is the reason why we need constraint (ii)
in the problem.
We perform the modiﬁcations of G∗for all the faces in the cover. This allows us to restrict the number
of terminals that we should separate. We pick representatives for each face fin the cover. If the frontier
cycleC/primeoffcontains terminals from both sets, we chose one representative from each set from the
terminals on C/prime. IfC/primecontains terminals from one set, we choose one representative. Then we apply the
same algorithm as for the parameterization by |S|+|T|. The diﬀerence is that we work only with the
representatives and add constraint (ii) to the auxiliary instance of Xor Constrained Shortest Path
given by the sets constructed for the faces from the cover.
2 Preliminaries
For integers aandb, we use [a,b]to denote the set {a,a+ 1,...,b}and[b]to denote the set [1,b].
Graphs. In this paper, we consider undirected multigraphs, that is, we allow multiple edges and self-
loops. We use the standard graph-theoretic notation and refer to [ 16] for undeﬁned notions. Let G= (V,E)
be an undirected graph. We use V(G)andE(G)to denote the set of vertices and the set of edges of G,
respectively. We use nandmto denote the number of vertices and edges in G, respectively. A pathPis
a graph with vertex set {v0,v1,...,v /lscript}and edge set{vi−1vi|i∈[/lscript]}. The vertices v0andv/lscriptare called
the endpoints of P. AcycleCis a path with an additional edge between the two endpoints. The length
of a path or a cycle in an edge-weighted graph is the sum of weights of its edges and in unweighted graphs
the length is the number of edges in it. For a vertex subset U⊆V, we useG[U]to denote the subgraph
ofGinduced by the vertices in UandG−Uto denoteG[V\V/prime]. For a set of edges S⊆E, we write
G−Sto denote the graph obtained from Gby deleting the edges of S.
We are mostly interested in planarinput graphs. We refer the reader to the textbooks of Diestel [ 16]
and Agnarsson and Greenlaw [ 1] for rigorous introductions. Informally speaking, a graph is planar if
it can be drawn on the plane such that its edges do not cross each other. Such a drawing is called a
planar embedding of the graph and a planar graph with a planar embedding is called a planegraph. We
note that the planarity check and ﬁnding a planar embedding can be done in linear time by the classical
algorithm of Hopcroft and Tarjan [ 28]. Thefacesof a plane graph are the regions bounded by a set of
edges and that do not contain any other vertices or edges. The vertices and edges on the boundary of a
face form its frontier.
5Given a plane graph G= (V,E)with facesF, itsdualgraphG∗= (F,E∗)(see Figure 1) is deﬁned as
follows. The vertices of G∗are the faces of Gand for each e∈E(G),G∗has thedualedgee∗whose
endpoints are either two faces having eon their frontiers or e∗is a self-loop at fifeis in the frontier
of exactly one face f(i.e.,eis a bridge of G). Observe that G∗is not necessarily simple even if Gis a
simple graph as the example in Figure 1 shows. We note that G∗is a planar graph that has a plane
embedding where each vertex of G∗corresponding to a face fofGis drawn inside fand each dual
edgee∗intersectseonly once and e∗does not intersect any other edge of G. Throughout this paper, we
assume that G∗has such an embedding.
It is crucial for our results that for a connected plane graph G, each minimal cut in Ghas a one-to-one
correspondence to a cycle in G∗. To be more precise, recall that each cycle on the plane has exactly two
faces. Then (A,B)is a minimal cut of a plane graph Gif and only if there is a cycle C∗inG∗such that
the vertices of Aare inside one face of C∗and the vertices of Bare inside the other face. Furthermore,
C∗is formed by the edges e∗that are dual to the edges e∈cut(A)and the length of C∗is|cut(A)|.
LetGbe a plane graph and let G∗be its dual. We say that a path P(a cycleC) inGcrossesa cycle
C∗ofG∗ine∈E(P)(e∈E(C), respectively) if C∗contains the edge e∗∈E∗that is dual to e. The
number of crosses ofPandC∗is the number of edges of PwherePandC∗cross. We use the following
observation.
Observation 1. LetGbe a plane graph, let s,t∈V, and letPbe ans-t-path. For any cycle C∗ofG∗,
sandtare in distinct faces of C∗if and only if the number of crosses of PandC∗is odd.
Lastly, given a subset U⊆Vof vertices in a plane graph Gwith faces F, aface cover ofUis a
subsetF/prime⊆Fof faces such that each vertex in Uis on the frontier of some face in F/prime.
Groups. The group (Zd
2,+)consists of the set of all length- dbinary strings, and the sum of two strings is
deﬁned as the bitwise xor of the strings (or addition without carry). In this regards, it can be seen as the
d-dimensional bitwise xor vector space Fd
2. It is easy to see that this is indeed an (abelian) group: (1) The
closure property is trivial, since it by deﬁnition contains every length- dbinary string. (2) Associativity
can be seen by a simple case analysis, i.e., (a⊕b)⊕c=a⊕(b⊕c)is bitwise 1 if and only if there is
an odd number of 1s in the bit’s position. (3) The identity element is the all 0vector, i.e. a⊕0=a.
(4) The inverse element of aisaitself, i.e.,a⊕a=0.
3 Shortest paths under xor constraints
In the Xor Constrained Shortest Path problem, we are given a graph G, two vertices sandt, an edge
labeling function g:E(G)→Zd
2, a valuec∈Zd
2, andpsets of vertices X1,...,X p⊆V(G). The problem
is to ﬁnd an s-t-pathPthat satisﬁes (i)/summationtext
e∈E(P)g(e) =cand (ii) for each i∈[p],|V(P)∩Xi|≤1, and
among such paths minimizes the number of edges in P.
In this section we prove Theorem 2, which we restate here.
Theorem 2. Xor Constrained Shortest Path can be solved in 2d+p·(n+m)O(1)time by a one-sided
error randomized algorithm.
As a corollary, we obtain an algorithm for Xor Constrained Shortest Cycle by guessing one
vertexvin a solution, adding a false twin uofvto the input graph such that all edges incident to uare
assinged value zero, and then asking for a shortest u-v-path satisfying conditions (i) and (ii).
Corollary 1. Xor Constrained Shortest Cycle can be solved in 2d+p·(n+m)O(1)time by a
one-sided error randomized algorithm.
3.1 The algorithm
In the remainder of this section we assume that the input graph Gis a simple graph. Note that an input
n-vertexm-edge multigraph can be turned into an (n+m)-vertex 2m-edge simple graph by ﬁrst removing
self-loops, and then subdividing each edge once, giving the label of the edge to one of the subdivision
edges and labeling the other subdivision edge with zero. This exactly doubles the length of the solution.
We also assume without loss of generality that s/negationslash=t.
6Let us next introduce some notation. We say that a sequence (v0,v1,...,v /lscript−1,v/lscript)of/lscript+ 1vertices is
ans-t-walk of length /lscriptifv0=s,v/lscript=t, andvi−1vi∈E(G)for eachi∈[/lscript]. Note that unlike a path, a
walk can contain a vertex more than once. We say that an s-t-walk isfeasibleif it satisﬁes analogies of
the contraints (i) and (ii), in particular, if
1./summationtext/lscript
i=1g(vi−1vi) =c, and
2. for each i∈[p], there is at most one j∈[0,/lscript]such thatvj∈Xi.
For an integer /lscript≥1, letC/lscriptdenote the set of all feasible s-t-walks of length (exactly) /lscript. We associate
withC/lscripta polynomial as follows.
Letq= 2⌈log2n⌉+1, and recall that GF(q)is a ﬁnite ﬁeld of characteristic 2 and order q. We deﬁne a
polynomial over GF(q)as follows. For each edge uv∈E(G)we associate a variable f(uv). Then, for an
s-t-walkW= (v0,...,v /lscript)of length/lscript, we associate the monomial
f(W) =/lscript/productdisplay
i=1f(vi−1vi), (1)
and for the setC/lscriptof all feasible s-t-walks of length /lscript, we associate the polynomial
f(C/lscript) =/summationdisplay
W∈C/lscriptf(W).
Note that the degree of f(C/lscript)is/lscript. Now, our algorithm will be based on the following lemma, which will
be proved in Section 3.2.
Lemma 1. The length of the shortest s-t-path satisfying (i) and (ii) is equal to the smallest integer /lscript
such thatf(C/lscript)is a non-zero polynomial. If no such /lscriptexists, then no such s-t-path exists.
Given Lemma 1, it remains to design an algorithm for testing if f(C/lscript)is a non-zero polynomial. For
this, we use the DeMillo–Lipton–Schwartz–Zippel lemma.
Lemma 2 ([42,47]).Letp(x1,...,x n)be a non-zero polynomial of degree dover a ﬁeld F, and letSbe a
subset of F. If eachxiis independently assigned a uniformly random value from S, thenp(x1,...,x n) = 0
with probability at most d/|S|.
By Lemma 2 to probabilistically test if f(C/lscript)is non-zero it suﬃces to evaluate f(C/lscript)on a random
assignment of values from GF(q)to the variables f(uv). Because the degree of f(C/lscript)is/lscript≤nand the
order of GF(q)isq≥2n, this test is correct with probability at least 0.5wheneverf(C/lscript)is non-zero.
Note that if f(C/lscript)is the zero polynomial, this test is always correct. Next we show that this evaluation
can be done eﬃciently.
Lemma 3. Given an assignment of values to the variables f(uv)for alluv∈E(G), the value of the
polynomial f(C/lscript)can be evaluated in time O(2d+pn2/lscript).
Proof.We evaluate the polynomial by dynamic programming on walks. For u∈V(G),l∈[0,/lscript],y∈Zd
2,
andT⊆[p], let us denote by C(u,l,y,T )the set ofs-u-walks (s=v0,v1,...,v l=u)of lengthlthat have
•/summationtextl
i=1g(vi−1vi) =y,
•for eachi∈[p]\T, it holds that{v0,v1,...,v l}∩Xi=∅, and
•for eachi∈T, there exists exactly one j∈[0,l]so thatvj∈Xi.
Then, wedenoteby f(C(u,l,y,T ))thevalue/summationtext
W∈C(u,l,y,T )f(W), wheref(W)isdeﬁnedasinEquation(1),
with the empty product interpreted as being equal to 1. Now, we have that f(C/lscript) =/summationtext
T⊆[p]f(C(t,/lscript,c,T )).
It remains to show that the values f(C(u,l,y,T ))can be computed by dynamic programming.
LetTv={i∈[p]|v∈Xi}for eachv∈V(G). Then, the values for l= 0are computed by setting
f(C(s,0,0,Ts)) = 1and all other values with l= 0to0. Then, when l≥1, the values f(C(u,l,y,T ))are
computed by dynamic programming from the values for smaller las follows.
7•IfTu⊆T, thenf(C(u,l,y,T )) =/summationtext
uw∈E(G)f(uw)·f(C(w,l−1,y−g({u,w}),T\Tu)).
•Otherwise, f(C(u,l,y,T )) = 0.
This clearly computes the values correctly, and runs in overall O(2d+pn2/lscript)time.
Now, our algorithm works by using Lemma 3 to evaluate f(C/lscript)for random assignments of values to
variablesf(uv)for increasing values of /lscript≤n, and once it evaluates to non-zero, reports that /lscriptis the
length of the shortest s-t-path satisfying (i) and (ii). If no such /lscript≤nis found, the algorithm reports that
no suchs-t-path exists. Note that the correctness of the algorithm depends only on the randomness on
the evaluation with the correct /lscript, and therefore the algorithm is correct with probability at least 0.5, and
never reports a length shorter than the length of a shortest solution. This probability can be exponentially
improved by running the algorithm multiple times. To recover the solution, it suﬃces to use the algorithm
to test which edges can be removed from the graph GuntilGturns into an s-t-path. Clearly, to both
recover the solution and to have an exponentially small error probability it suﬃces to run the algorithm a
polynomial number of times, so this ﬁnishes the proof of Theorem 2, modulo the proof of Lemma 1 that
will be given in the next subsection.
3.2 Proof of correctness
This section is devoted to the proof of Lemma 1. We ﬁrst prove the direction that the existence of a
solution of length /lscriptimplies that f(C/lscript)is non-zero.
Lemma 4. If ans-t-path of length /lscriptsatisfying (i) and (ii) exists, then f(C/lscript)is a non-zero polynomial.
Proof.LetW= (s=v0,v1,...,v /lscript=t)be the sequence of vertices on an s-t-path of length /lscriptsatisfying
conditions (i) and (ii). Note that Wis a feasible s-t-walk andW∈C/lscript. Because each vertex occurs in the
walkWat most once, we observe that Wcan be determined uniquely from its set of edges, and therefore
Wis the only walk in C/lscriptwith the monomial f(W) =/producttext/lscript
i=1f(vi−1vi). Thus, the monomial f(W)occurs
in the polynomial f(C/lscript)with coeﬃcient 1, and therefore f(C/lscript)is non-zero.
It remains to prove that if no solutions of length at most /lscriptexists, then f(C/lscript)is the zero polynomial.
For this, let us state our main lemma, but delay its proof until the end of this subsection.
Lemma 5. If nos-t-path of length at most /lscriptsatisfying conditions (i) and (ii) exists, then there exists a
functionφ:C/lscript→C/lscriptsuch that for every W∈C/lscriptit holds that
1.φ(φ(W)) =W,
2.φ(W)/negationslash=W, and
3.f(φ(W)) =f(W).
Now, assuming Lemma 5, the proof of Lemma 1 can be ﬁnished as follows.
Lemma 6. If nos-t-path of length at most /lscriptsatisfying conditions (i) and (ii) exists, then f(C/lscript)is the
zero polynomial.
Proof.Letφbe the function given by Lemma 5. By properties 1 and 2, the set C/lscriptcan be partitioned
into pairs{W,φ(W)}. Now, property 3 states that f(W) =f(φ(W))and since GF(q)is a ﬁeld of
characteristic 2, it holds that f(W) +f(φ(W)) = 0. Thus,/summationtext
W∈C/lscriptf(W) = 0.
Putting Lemmas 4 and 6 together implies Lemma 1. It remains to prove Lemma 5.
Proof of Lemma 5. Assume that no s-t-path of length at most /lscriptsatisfying (i) and (ii) exists. We will
deﬁne the function φ:C/lscript→C /lscriptexplicitly and show that it satisﬁes all of the required properties.
LetW= (v0,v1,...,v /lscript)be ans-t-walk inC/lscript. The idea of the deﬁnition of φwill be to locate a
subwalk (vi,vi+1,...,v j−1,vj)ofWwhere 0≤i<j≤/lscript, and reverse the subwalk, i.e., map the walk
W= (v0,v1,...,v i−1,vi,vi+1,...,v j−1,vj,vj+1,...,v /lscript)
8into the walk
W←−−[i,j] = (v0,v1,...,v i−1,vj,vj−1,...,v i+1,vi,vj+1,...,v /lscript).
In particular, we will have that φ(W) =W←−−[i,j]for a carefully chosen pair i,jwith 0≤i<j≤/lscript. This
pair will be chosen so that vi=vj, which ensures that W←−−[i,j]∈C/lscriptandf(W←−−[i,j]) =f(W)since the
multiset of pairs of adjacent vertices in the walk does not change.
It remains to argue that such a pair i,jcan be chosen so that the properties φ(φ(W)) =W
andφ(W)/negationslash=Whold. Observe that the property φ(W)/negationslash=Wholds if and only if the subwalk from itoj
is not apalindrome , i.e., a sequence that is the same when reversed. Now we deﬁne a process that outputs
a pairi,jso that 0≤i<j≤/lscript,vi=vj, and the subwalk from itojis not a palindrome.
The process starts by setting i=j= 0. Then, it repeats the following: It ﬁrst selects ito be the
smallest integer i>jso that the vertex vioccurs in the walk in the indices greater than jmore than once.
If no suchiexists, it outputs FAIL. Then, it sets jto be the largest integer so that vi=vj, in particular,
the index of the last occurrence of viin the walk. At this point it is guaranteed that 0≤i<j≤/lscriptand
vi=vj. Now, if the subwalk from itojis not a palindrome, it outputs the pair i,j. Otherwise, the
process repeats.
Observe that the process always outputs either FAILor a pairi,jwith 0≤i<j≤/lscriptandvi=vjsuch
that the subwalk from itojis not a palindrome. We prove that it actually never outputs FAIL.
Claim 1. The process deﬁned above never outputs FAIL.
Proof of claim. Suppose that the process outputted FAIL, and leti1<j1<i2<j2<...<i t<jtbe the
sequenceofpairs i,jconsideredduringtheprocess. Wedeﬁnethe contracted walk W/primetobethesubsequence
ofW= (v0,...,v /lscript)obtained by removing the vertices on the indices in [i1+1,j1]∪[i2+1,j2]∪...∪[it+1,jt]
fromW. In particular, W/primeis obtained from Wby contracting each palindrome vik,...,v jkconsidered in
the process into a single vertex vik.
Now, we claim that W/primeis a feasible s-t-walk of length at most /lscript, and moreover that no vertex occurs
more than once in W/prime. This is a contradiction, because in that case W/primewould be in fact an s-t-path
of length at most /lscriptthat satisﬁes conditions (i) and (ii), but assumed that no such s-t-path exists. We
observe that the contracted walk W/primeis indeed an s-t-walk, because it was obtained from an s-t-walk by
contracting subwalks that each start and end in a same vertex. It also clearly has length at most /lscript, and it
satisﬁes the condition (ii) because the multiset of vertices in W/primeis a subset of the multiset of vertices in
W. For condition (i), we observe that if a subwalk vi,...,v jis a palindrome, then/summationtextj
k=i+1g(vk−1vk) = 0,
because each pair of adjacent vertices occurs an even number of times and we are working in the group Zd
2.
Thus, contracting the palindromes does not change the sum of the edge labels on W, and thusW/primesatisﬁes
condition (ii).
Lastly, we argue that no vertex occurs more than once in W/prime. For the sake of contradiction, suppose
that some vertex occurs more than once in W/prime, which in particular implies that there are indices i/prime,j/prime
with 0≤i/prime<j/prime≤/lscriptandvi/prime=vj/primethat are not in [i1+ 1,j1]∪[i2+ 1,j2]∪...∪[it+ 1,jt]. Ifi/prime<i1, then
this would contradict the choice of i1, and ifi/prime=i1, then this would contradict the choice of j1. Similarly,
ifjk<i/prime≤ik+1for some 1≤k<t, then this would contradict either the choice of ik+1orjk+1, and if
i/prime>jt, then this would contradict the fact that it,jtwas the last pair considered by the algorithm.
Now, the function φ:C/lscript→C/lscriptis deﬁned as φ(W) =W←−−[i,j], wherei,jis the pair outputted by the
process described above. We have already proved that φ(W)/negationslash=Wandf(φ(W)) =f(W), so it remains
to prove that φ(φ(W)) =W. For this, it remains to observe that the operation W←−−[i,j]does not change
how the process for selecting i,jbehaves, because it does not change the walk before the index iand it
does not change the fact that the last occurrence of viis at the index j.
This ﬁnishes the proof of Theorem 2.
4 Two-Sets Cut-Uncut parameterized by face cover
In this section, we show that Two-Sets Cut-Uncut isFPTwhen parameterized by the minimum
number of faces in a plane embedding of the input graph covering the terminals. We use the following
crucial observations. First, we observe that a minimum face cover can be found in FPTtime when
9parameterized by the size of a cover. For this, we use the known results about the Red-Blue Dominating
Setproblem on planar graphs. The task of this problem is, given a bipartite graph Gwhose vertices are
partitioned into two sets RandB(redandbluevertices, respectively) and an integer r≥1, to decide
whether there is a set Dof at mostrred vertices that dominates the blue vertices, that is, each v∈Bis
adjacent to at least one vertex of D. It was proved by Alber et al. [ 2] that this problem can be solved
in2O(√r)·ntime on planar graphs.
Lemma 7. It can be decided in 2O(√r)·nO(1)time whether a set of vertices Uof a plane graph Ghas a
face cover of size at most r. Furthermore, if such a cover exists, it can be found in the same time.
Proof.LetGbe a plane graph with faces Fand letU⊆V(G). We construct the instance of Red-Blue
Dominating Set by settingR=F,B=U, and making f∈Radjacent to v∈Uifvis in the frontier
of the face f. Then,Ucan be covered by at most rfaces if and only if the set of blue vertices can be
dominated by at most rred vertices. Note that the constructed red-blue graph is planar. Then the results
of Alber et al. [2] imply the claim of the lemma.
Second, we note the following connection.
Observation 2. Let(G,S,T,k )be an instance of Two-Sets Cut-Uncut whereGis a connected graph.
Then (G,S,T,k )is a yes-instance if and only if there is a minimal cut (A,B)ofGwith|cut(A)|≤k
such thatS⊆AandT⊆B.
Proof.IfGhas a minimal cut (A,B)with|cut(A)|≤ksuch thatS⊆AandT⊆B, then (G,S,T,k )is
a yes-instance because G[A]andG[B]are connected. For the opposite direction, let (A,B)be a cut of G
of minimum size such that the vertices of Sare in the same connected component of G[A]and the vertices
ofTare in the same connected component of G[B]. We claim that (A,B)is minimal. Assume towards a
contradiction that (A,B)is not minimal, that is, G[A]orG[B]is disconnected. We assume without loss
of generality that G[B]is disconnected. Then, there is a subset R⊆Bsuch thatG[R]is a connected
component of G[B]andR∩T=∅. Consider the cut (A/prime,B/prime)whereA/prime=A∪RandB/prime=B\R. We
have that the vertices of Sare in the same connected component of G[A/prime]and the vertices of Tare in the
same connected component of G[B/prime]. However, because Gis connected, Ghas an edge with one endpoint
inAand the other in R. Thus,|cut(A/prime)|<|cut(A)|contradicting the choice of (A,B). This proves the
observation.
This observation implies that to solve Two-Sets Cut-Uncut on a plane graph G, we have to ﬁnd
a shortest cycle C∗in the dual graph G∗such that the vertices of SandTare in distinct faces of C∗.
First, we observe that we can assume without loss of generality that the input graph is 2-connected.
This assumption simpliﬁes arguments because the frontier of each face of a plane 2-connected graph is a
cycle [16].
Lemma 8. There is a polynomial-time algorithm that, given an instance (G,S,T,k )ofTwo-Sets
Cut-Uncut , either solves the problem or outputs an equivalent instance (G/prime,S/prime,T/prime,k)ofTwo-Sets
Cut-Uncut whereG/primeis a2-connected induced subgraph of G. Furthermore, given a planar embedding
ofGsuch thatS∪Tcan be covered by at most rfaces,S/prime∪T/primecan be covered in the induced embedding
ofG/primeby at most rfaces.
Proof.Suppose that Gis disconnected. Then, (G,S,T,k )is a trivial no-instance if either vertices of S
occur in distinct connected components of Gor, symmetrically, vertices of Toccur in distinct connected
components. Also, we have that (G,S,T,k )is a trivial yes-instance if the vertices Sand the vertices of T
are in distinct connected components of G. It remains the case when the vertices of SandTare in the
same connected component of G. Then, we can remove all other connected components. Hence, we may
assume that Gis connected.
The claim of the lemma is trivial if Gis 2-connected. Assume that Ghas a cut-vertex v. Then,
there is a separation (X,Y )ofGwith the separator v, that is, there are subsets X,Y⊆V(G)such that
X∪Y=V(G),X∩Y={v}, andGhas no edge xywithx∈X\Yandy∈Y\X. Observe that
if(A,B)is a minimal cut of Gwithv∈A, then either X⊆AorY⊆Bbecause, otherwise, G[B]is
disconnected. Thus, for any minimal cut (A,B)ofG,cut(A) =cut(A/prime)where (A/prime,B/prime)is a minimal cut
of eitherG[X]orG[Y]. This observation leads to the following four cases (up to the symmetry). First,
we consider the case when all the terminals are in one part of the separation.
10Case 1. (X\Y)∩(S∪T) =∅. Then, for any minimal cut (A,B)ofGwithv∈Asuch thatS
andTare in distinct parts, X⊆Aand(G,S,T,k )is equivalent to (G[Y],S,T,k ), that is, we can reduce
the input instance by deleting the vertices of X\Y.
Next, we assume that each part of the separation contains terminals from both SandT.
Case 2.X∩S/negationslash=∅,X∩T/negationslash=∅,Y∩S/negationslash=∅, andY∩T/negationslash=∅. Because for any minimal cut (A,B)of
Gwithv∈A, eitherX⊆AorY⊆B, we have that there is no minimal cut separating SandT. Thus,
(G,S,T )is a no-instance. We report that there is no solution and stop.
Now, we assume that one set of the separation contains terminals from both SandTand the other
includes terminals only from one of the sets SandT.
Case 3. (X\Y)∩S/negationslash=∅,X∩T=∅,Y∩S/negationslash=∅, andY∩T/negationslash=∅. Then, for any minimal cut (A,B)
ofGwithv∈Asuch thatSandTare in distinct parts, X⊆A. Furthermore, S⊆AandT⊆B. This
implies that (G,S,T,k )is equivalent to (G[Y],S/prime,T,k )whereS/prime= (S\X)∪{v}. This allows us to
reduce the input instance by deleting the vertices of X\Yand modifying S.
Finally, we consider the case when each set of the separation contains terminals only from one of the
setsSandT.
Case 4. (X\Y)∩S/negationslash=∅,X∩T=∅,Y∩S=∅, and (Y\X)∩T/negationslash=∅. Consider a minimal cut (A,B)
ofGwithv∈Asuch thatSandTare in diﬀerent parts. If X⊆A, then cut(A) =cut(A/prime)for a minimal
cut(A/prime,B/prime)ofG[B]such that{v}∈AandT⊆B. The case Y⊆Ais symmetric. This allows us to
solve the problem in polynomial time by making use of the result of Bezáková and Langley [ 4]. By this
result, the problem when |S|= 1is solvable in polynomial time. We apply the algorithm of Bezáková and
Langley for (G[Y],{v},T,k )and(G[X],S,{v},k)and conclude that (G,S,T,k )is a yes-instance if at
least one of these instances is a yes-instance.
Because the cut-vertices of Gcan be listed in linear time by the classical algorithm by Tarjan [ 43],
we conclude that in a polynomial time, we either solve the problem or reduce the input instance to
an equivalent instance (G/prime,S/prime,T/prime,k)whereG/primehas no cut-vertices. If the obtained graph G/primehas two
vertices, the problem is trivial because |S/prime|=|T/prime|= 1and the minimum cut is unique. Otherwise, G/primeis a
2-connected induced subgraph of G.
To show the second claim of the lemma, assume that Gis embedded on the plane and S∪Tis covered
by a set of faces F/prime. Consider the induced embedding of G/prime. BecauseG/primeis an induced subgraph of G,
for each face fofG, there is a face f/primeofG/primesuch that each vertex covered by finGis covered by f/prime
inG/prime. We construct the set of faces F/prime/primeofG/primefromF/primeby including each such face f/primefor each face f∈F/prime.
We claim that F/prime/primecoversS/prime∪T/prime. By the deﬁnition of F/prime, we have that every x∈(S∪T)∩(S/prime∪T/prime)
is covered by F/prime/prime. Hence, we have to prove that every x∈(S/prime∪T/prime)\(S∪T)is covered as well. Note
that new terminals are introduced only in Case 3. Assume that (X\Y)∩S/negationslash=∅,X∩T=∅,Y∩S/negationslash=∅,
andY∩T/negationslash=∅. Then, there is a face f∈F/primethat covers a vertex of (X\Y)∩S. Sincevis a cut-vertex,
we have that the face f/primecoversv. This implies that F/prime/primecoversS/prime∪TwhereS/prime= (S\X)∪{v}. This
concludes the proof.
From now on, we assume that the graph of the considered instances of Two-Sets Cut-Uncut is
2-connected. We remind that the frontier of each face of a plane 2-connected graph Gis a cycle. Moreover,
the dual graph G∗has no loops. Also, since loops are irrelevant for Two-Sets Cut-Uncut , we assume
that the input graph has no loops.
We use the following separation properties for vertices on the frontier of the same face of a graph.
Lemma 9. LetGbe a plane graph and let XandYbe disjoint nonempty sets of vertices of the cycle C
which forms the frontier of a face fofG. LetC∗be any cycle in G∗. Then the vertices of Xand the
vertices ofYare in distinct faces of C∗if and only if f∈V(C∗)andCcrossesC∗in two edges e1ande2
such that (i) the vertices of Xare in the same connected component of C−{e1,e2}, (ii) the vertices of Y
are in the same connected component of C−{e1,e2}, and (iii) the vertices of Xand the vertices of Yare
in distinct connected components of C−{e1,e2}.
11Proof.Suppose that the vertices of Xand the vertices of Yare in distinct faces of C∗. Then,fis a
vertex ofC∗. Lete∗
1ande∗
2be the edges of C∗incident to fand lete1ande2be the dual edges of e∗
1
ande∗
2, respectively. Note that Ccontains both e1ande2andCcrossesC∗only in these two edges. We
have thatC−{e1,e2}has two connected components P1andP2that are paths. Since C∗separatesX
andY, we have that Xis fully contained in P1or fully contained in P2andYis fully contained in the
respective other path. Thus, conditions (i)–(iii) are fulﬁlled.
For the opposite direction, assume that CcrossesC∗in two edges e1ande2such that conditions (i)–(iii)
are fulﬁlled. Consider an x-y-pathPinCfor arbitrary x∈Xandy∈Ycontaininge1and excluding e2
that exists by (i)–(iii). The number of crosses of PandC∗is one. Hence, xandyare in distinct faces
ofC∗by Observation 1. This concludes the proof.
Lemma 10. LetGbe a plane graph and let Xbe a non-empty set of vertices of the cycle Cforming the
frontier of a face fofG. LetC∗be any cycle in G∗. Then, the vertices of Xare in the same face of C∗
if and only if either f /∈V(C∗)andCdoes not cross C∗orf∈V(C∗)andCcrossesC∗in two edges e1
ande2such that the vertices of Xare in the same connected component of C−{e1,e2}.
Proof.Suppose that the vertices of Xare in the same face of C∗and assume that CcrossesC∗. Then,
fis a vertex of C∗andC∗has two edges e∗
1ande∗
2incident to f. We have that CcrossesC∗in the
edgese1ande2that are dual to e∗
1ande∗
2, respectively. Since Cis a cycle,C−{e1,e2}has two connected
components P1andP2that are both paths. We show that either X⊆V(P1)orX⊆V(P2). For the
sake of contradiction, assume that there are x,y∈Xsuch thatx∈V(P1)andy∈V(P2). Then, there is
anx-y-pathPinCthat contains e1but excludes e2. The number of crosses of PandC∗is one andx
andyare therefore in distinct faces of C∗by Observation 1; a contradiction. Hence, the vertices of Xare
in the same connected component of C−{e1,e2}.
For the opposite direction, assume that either Cdoes not cross C∗orCcrossesC∗in two edges e1
ande2such that the vertices of Xare in the same connected component of C−{e1,e2}. In both cases,
for any two vertices x,y∈X, there is an x-y-pathPthat does not cross C∗. Then by Observation 1, the
vertices ofXare in the same face of C∗. This concludes the proof.
We are now in a position to present the main result of this section.
Theorem 1. There is a one-sided error randomized algorithm solving Two-Sets Cut-Uncut on planar
graphs in time 2|S|+|T|·nO(1). Moreover, there is a one-sided error randomized algorithm solving the
problem in time 4r+O(√r)·nO(1), whereris the number of faces needed to cover S∪Tin a given plane
graph.
Proof.We show the claim for the parameterization by the size of a face cover of the terminals and then
explain how a simpliﬁed version of the algorithm can be used for the parameterization by the number of
terminals.
Let(G,S,T,k )be an instance of Two-Sets Cut-Uncut where we are given an embedding of Gon
the plane. We remind that Gis assumed to be 2-connected. We use the embedding of Gto construct the
dual graph G∗together with its embedding. By Observation 2, our task is to ﬁnd a cycle C∗inG∗of
length at most ksuch thatSandTare in distinct faces of C∗. We ﬁnd such a cycle using the algorithm
forXor Constrained Shortest Cycle from Corollary 1.
We use Lemma 7 to verify whether there is a set of faces F/primeof size at most rthat coverS∪T. If
such a cover does not exist, we stop. From now on, we assume that F/primeis given. We partition F/primeinto two
sets whereF1⊆F/primeis the set of faces having vertices from both SandTon their frontiers and F2⊆F/prime
consists of the faces f∈F/primesuch that the frontier of fcontains ether only vertices of Sor only vertices
ofT. We modify G∗by analyzing each face f∈F/prime. The ultimate aim of the modiﬁcation is to reduce
the number of considered terminals.
Modiﬁcations for F1.Letf∈F1and letCbe the cycle of Gforming the frontier of f. Recall that
S/prime=S∩V(C)/negationslash=∅andT/prime=T∩V(C)/negationslash=∅. If there are no two edges e1,e2∈E(C)such that the vertices
ofS/primeandT/primeare in distinct connected components of C−{e1,e2}, then by Lemma 9, there is no cycle C∗
such that the vertices of S/primeand the vertices of T/primeare in distinct faces of C∗. This implies that (G,S,T,k )
is a no-instance. Hence, we assume that this is not the case and select two inclusion-minimal disjoint
pathsP1andP2inCsuch thatS/prime⊆V(P1)andT/prime⊆V(P2). We modify G∗by deleting each edge e∗
incident to fthat is dual to an edge e∈E(P1)∪E(P2)(see Figure 2).
12P2f
P1
P2f
P1
Figure 2: The modiﬁcation for f∈F1. The vertices of S/primeare shown by white circles, the vertices of T/prime
are shown by black squares, and the other vertices of Gare shown by black circles. The edges of G∗are
shown by dashed lines. The paths P1andP2are shown by thick lines.
P4P1P2P3
P4f1f2f3
f4f
P1P2P3
Figure 3: The modiﬁcation for f∈F2. The vertices of Rare shown by white circles and the other vertices
ofGare shown by small black circles. The vertex fofG∗and the vertices f1,f2...,f 4are shown by
large black circles and the edges of G∗and the constructed new edges are shown by dashed lines.
Modiﬁcations for F2.Letf∈F2, letCbe the cycle of Gforming the frontier of f, and let
L=V(C)∩(S∪T). Note that by deﬁnition of F2, eitherL⊆SorL⊆T. We split the vertex fof
G∗intoq=|L|verticesf1,f2,...,f qas follows. If q≥2, thenCcontainsqinternally vertex disjoint
pathsP1,P2,...,P qwhose end-vertices are in L(and whose internal vertices are not in L). We then
•deletefand construct a set Xf={f1,f2,...,f q}ofqnew vertices,
•for eachj∈[q]and edgeeinPj, we replace the dual edge e∗ofG∗by an edge incident to fjwhose
second endpoint is the same as for e∗unlesse∗was deleted by some modiﬁcation for F1.
Forq= 1, we formally set Xf={f}andf1=f, that is, we do not perform any modiﬁcation. The
construction is shown in Figure 3. Notice that the vertices f1,f2,...,f qcan be embedded in the face f
ofGsuch that the resulting graph H∗is plane. For each edge e∗∈E(H∗), there is an edge e∈E(G∗)
such thate∗was constructed from the edge that is dual to einG∗. Slightly abusing notation, we do not
distinguish the edges of H∗andG∗. In particular, we say that e∗is dual toe.
Our next aim is to assign labels to the edges of H∗fromZd
2for some appropriate d. For this, we
greedily pick a set Rofrepresentatives fromS∪Tfor eachf∈F/prime. From each f∈F1, we select two
terminals from SandT, respectively, that are on the frontier of the face fofG. For eachf∈F2, we pick
one terminal from the frontier of the face of f. Then, we construct an arbitrary inclusion minimal tree Q
inGthat spans R. This can be done in linear time using standard tools (see, e.g., [ 9]). We select an
arbitrary vertex u∈R∩Sand setd=|R|−1. Observe that|R|≤2|F1|+|F2|andd≤2|F1|+|F2|−1.
Denote by v1,...,v dthe vertices of L\{u}and letQibe theu-vi-path inQfor eachi∈[d]. We
deﬁneg:E(G)→Zd
2by settingg(e) = (δ1,...,δ d)|where for each i∈[d],δi=/braceleftBigg
1ife∈E(Qi),
0ife /∈E(Qi).
Moreover, let g∗:E(H∗)→Zd
2be deﬁned by setting g∗(e∗) =g(e)for eache∗∈E(H∗)that is dual
toe∈E(G)and letc= (c1,...,c d)|∈Zd
2where
ci=/braceleftBigg
0ifvi∈S,
1ifvi∈Tfori∈[d].
13We show the following claim.
Claim 2. The graph G∗contains a cycle C∗of length at most ksuch that the vertices of Sand the
vertices of Tare in distinct faces of C∗if and only if the instance (H∗,g∗,c,{Xf|f∈F2})ofXor
Constrained Shortest Cycle has a solution and the length of a solution cycle is at most k.
Proof of Claim 2. Suppose that C∗is a cycle in G∗of length at most ksuch thatSandTare in distinct
faces ofC∗. Note that C∗corresponds to a cycle ˆC∗inH∗by replacing each vertex corresponding to a
facef∈F2by a certain vertex fjobtained by splitting f.
Formally, let f∈V(C∗)∩F2. Sincef∈F2, the frontier cycle C/primeoffcontains either only vertices of
Sor only vertices of T. We assume without loss of generality that it contains only vertices from S. Since
the vertices of Sand the vertices of Tare in distinct faces of C∗, we have that the vertices of S/primeare in
the same face of C∗. By Lemma 10, C/primecrossesC∗in exactly two edges e1ande2such that the vertices
ofS/primeare in the same connected component of C/prime−{e1,e2}. This implies that e1ande2are edges of
some path PjinC/primewith end-vertices in S/primewhose internal vertices are not in S/prime. Recall that H∗has a
vertexfjthat is incident to the same edges as the vertex f∈V(C∗). Thus, we can replace finC∗byfj.
To argue that every edge of ˆC∗is an edge of H∗, note that each edge e∈E(G∗)that is not an edge
ofH∗is incident to some vertex fsuch that the face f∈F1. Suppose that there is f∈V(C∗)such
thatf∈F1. LetC/primebe the frontier cycle of f. Note that S/prime=S∩V(C/prime)/negationslash=∅andT/prime=T∩V(C/prime)/negationslash=∅.
Since the vertices of S/primeand the vertices of T/primeare in distinct faces of C∗, by Lemma 9, C/primecrossesC∗in
two edgese1ande2such that (i) the vertices of S/primeare in the same connected component of C/prime−{e1,e2},
(ii) the vertices of T/primeare in the same connected component of C/prime−{e1,e2}, and (iii) the vertices of S/primeand
the vertices of T/primeare in distinct connected components of C/prime−{e1,e2}. For the inclusion-minimal disjoint
pathsP1andP2inC/primesuch thatS/prime⊆V(P1)andT/prime⊆V(P2), we have that e1,e2/∈E(P1)∪E(P2). Thus,
the edgese∗
1ande∗
2that are incident to finC∗are edges of H∗. This concludes the proof that ˆC∗is a
cycle inH∗.
Clearly, ˆC∗has the same length as C∗. Also, the construction implies that ˆC∗contains at most one
vertex ofXifor everyi∈[p]. Leti∈[d]and consider ciand thei-th coordinate g∗(e∗)[i]ofg∗(e∗)for
somee∗∈E(ˆC∗). Suppose that for the representative terminal vi∈R, it holds that vi∈S. Sinceu∈S
andvi∈S, we have that uandviare in the same face of C∗and the number of crosses of the path Qi
andC∗is even by Observation 1. The construction of ˆC∗implies that the number of crosses of Qi
and ˆC∗is even as well. Then,/summationtext
e∗∈E(ˆC∗)g∗(e∗)[i] = 0 =ci. Similarly, if vi∈T, we obtain that the
number of crosses of Qiand ˆC∗is odd and/summationtext
e∗∈E(ˆC∗)g∗(e∗)[i] = 1 =ci. Thus,/summationtext
e∗∈E(ˆC∗)g∗(e∗) =c.
We conclude that ˆC∗is a cycle satisfying the constraints of Xor Constrained Shortest Cycle . Thus,
the instance (H∗,g∗,c,{Xf|f∈F2})ofXor Constrained Shortest Cycle has a solution cycle
whose length is at most k.
For the opposite direction, suppose that (H∗,g∗,c,{Xf|f∈F2})ofXor Constrained Shortest
Cyclehas a solution cycle ˆC∗whose length is at most k. Observe that since ˆC∗contains at most one
vertex ofXffor eachf∈F2,ˆC∗corresponds to the cycle C∗inG∗obtained by replacing each vertex fj
constructed for a face f∈F2by the vertex f∈F. Trivially, C∗has the same length as ˆC∗. We also
have that/summationtext
e∗∈E(C∗)g∗(e∗) =/summationtext
e∗∈E(ˆC∗)g∗(e∗) =c. Consider any dimension i∈[d]. Ifvi∈S, then/summationtext
e∗∈E(C∗)g∗(e∗)[i] =ci= 0. Hence,uandviare in the same face of C∗by Observation 1. If vi∈T,
then/summationtext
e∗∈E(C∗)g∗(e∗)[i] =ci= 1anduandviare in distinct faces of C∗. This proves that the vertices
ofS/prime=S∩RandT/prime=T∩Rare in distinct faces of C∗.
We claim that the vertices of Sand the vertices of Tare in distinct faces of C∗. To show this, consider
a vertexv∈(S∪T)\R. By symmetry, we assume without loss of generality that v∈S. Since the vertices
ofS/primeand the vertices of T/primeare in distinct faces of C∗, it is suﬃcient to show that there is some s∈S/prime
such thatsandvare in the same face of C∗. Letf∈F/primebe a face that covers v.
Suppose ﬁrst that f∈F1. Then,Rcontains two representative vertices s∈Sandt∈Tfrom the
cycleC/primeforming the frontier of f. Sincesandtare in distinct faces of C∗, by Lemma 9, f∈V(C∗)
andC/primecrossesC∗in two edges e1ande2such thatsandtare in distinct connected components of
C/prime−{e1,e2}. By the construction of H∗, there is a path P1inC/primesuch that all vertices in Sincident
tofare contained in P1ande∗/∈E(H∗)for each edge einP1. Hence,P1is a path in C/prime−{e1,e2}
becausee∗
1,e∗
2∈E(H∗). By Lemma 9, the vertex tand the vertices of Sincident to fare in distinct
faces ofC∗. In particular, vis a diﬀerent face of C∗thantand it is therefore in the same face of C∗ass.
14Assume now that f∈F2. Then,Rcontains a representative s∈Ssuch thatsis in the frontier of f.
Iff /∈V(C∗), thensandvare in the same face of C∗by Lemma 10. Suppose that f∈V(C∗). Then,
the frontier cycle C/primeoffcrossesC∗in two edges e1ande2. We remind that C∗is constructed from the
cycle ˆC∗. By the construction of H∗, there is a path Pjwhose internal vertices do not belong to Sand the
edgese1ande2are contained in Pj. Thus,sandvare in the same connected component of C/prime−{e1,e2}.
By Lemma 10, sandvare in the same face of C∗. This concludes the proof of the claim.
ByClaim2, solving Two-Sets Cut-Uncut for(G,S,T,k )isequivalenttosolving Xor Constrained
Shortest Cycle for(H∗,g∗,c,{Xf|f∈F2}). For this, we use the algorithm from Corollary 1.
To evaluate the running time, observe that a face cover F/prime(if it exists) of size at most rcan be
constructed in 2O(√r)·nO(1)time. Given such a cover, the graph H∗together with the sets Xffor
f∈F2can be constructed in polynomial time. Because d≤2|F1|+|F2|−1≤2r, the lableling g∗
andc∈Zd
2also can be constructed in polynomial time. Finally, because d≤2|F1|+|F2|−1and
p=|{Xi|f∈F2}|=|F2|, we have that p+d≤2r−1and the algorithm from Corollary 1 runs in
4r·nO(1)time. We conclude that the overall running time is 4r+O(√r)·nO(1). This completes the proof.
The above algorithm for the parameterization by the size of a face cover uses a planar embedding of
Gbecause we have to ﬁnd a set of faces covering the terminals. However, if we parameterize Two-Sets
Cut-Uncut by/lscript=|S|+|T|, then an embedding is not needed and we can use a simpliﬁed variant of
the algorithm. Given an instance (G,S,T,k )ofTwo-Sets Cut-Uncut whereGis a planar graph, we
use the classical algorithm of Hopcroft and Tarjan [ 28] to ﬁnd a plane embedding of G. Then we use the
variant of the algorithm where we do not modify G∗, that is, we set H∗=G∗, and where we assume
that all the terminals are representatives, that is, we set R=S∪T. The labeling g∗:E(H∗)→Zd
2
andcare deﬁned in the same way as in the algorithm for the parameterization by the size of a face
cover. By Observation 1, solving Two-Sets Cut-Uncut for(G,S,T,k )is equivalent to solving Xor
Constrained Shortest Cycle for(H∗,g∗,c,∅). Sinced=|R|−1 =|S|+|T|−1, we conclude that
we can solve the problem in 2|S|+|T|·nO(1)time by the algorithm from Corollary 1.
5 Hardness
It is known that Two-Sets Cut-Uncut is NP-complete [ 24] in planar graphs and that it is NP-complete
in general graphs even if |S|= 2[45]. We strengthen the latter result by showing that Two-Sets Cut-
Uncutremains W[1]-hard parameterized by |T|even if|S|= 1by providing a polynomial-time reduction
fromRegular Multicolored Clique parameterized by solution size k—a variant of Multicolored
Clique where each vertex has the same degree d—such that|T|=k. This problem is known to be
W[1]-hard and assuming ETH, it cannot be solved in f(k)·no(k)time.
Proposition 1. Two-Sets Cut-Uncut isW[1]-hard when parameterized by |T|even if|S|= 1.
Moreover, this restricted version cannot be solved in f(|T|)·no(k)time unless the ETH breaks.
Proof.Let(G,k)be an instance of Regular Multicolored Clique . LetV(G) ={v1,v2,...,v n},
let(V1,V2,...,V k)be thekpartition of V(G), and letdbe the degree of each vertex in G. We construct
an equivalent instance (H,S,T,/lscript )ofTwo-Sets Cut-Uncut as follows. The graph HcontainsGas
an induced subgraph. Moreover, it contains new vertices s,t1,t2,...,t kandvj
ifor each combination
ofi∈[n]andj∈[n+2m]. The vertex sis connected to vj
ifor each combination of i∈[n]andj∈[n+m].
Moreover, for each i∈[n], each vertex viis connected to each vertices vj
iwithj∈[n+ 2m]. Finally,
for eachi∈[k], the vertex tiis connected to all vertices in Vi. We setS={s},T={t1,t2,...,t k}
and/lscript=n−k+k(n+ 2m) +k(d−k+ 1). This concludes the construction. Note that |T|=kand that
the reduction takes polynomial time.
It only remains to show that the two instances are equivalent. To this end, assume that there is a
multicolored clique of size kinG. For the sake of notational ease, let us assume that the clique consists
of verticesC={v1,v2,...,v k}and letvi∈Vifor eachi∈[k]. We delete /lscriptedges as follows. For each Vi,
we delete all edges between vertices in Vi\{vi}andti. We also delete all edges between viandvj
ifor
each combination of i∈[k]andj∈[n+ 2m]. Finally, we delete all edges in Gthat have exactly one
endpoint in C. Overall, we have removed n−k+k(n+ 2m) +k(d−k+ 1)edges as each vertex in C
hasdincident edges and (k−1)of those have the other endpoint also in C. Note that the resulting graph
15contains two connected components, one containing all vertices in T∪Cand the other containing all
other vertices. Thus the resulting instance of Two-Sets Cut-Uncut is also a yes-instance.
Coversely, assume that there is a set of /lscriptedges whose removal disconnects SfromTwhile maintaining
connectivity between the vertices in T. Note that in order to maintain connectivity between the vertices
inT, at least one edge between tiand some vertex in Vihas to be maintained. Again, we will assume for
notational ease that the edge between tiandviremains in the graph. Note that in order to disconnect ti
froms, now vertex vineeds to be disconnected from sand thus at least one of the edges svj
iorvj
ivi
has to be deleted for each i∈[k]and eachj∈[n+ 2m]. Moreover, if there are at least k+ 1vertices
inVthat do not belong to the connected component of sin the solution, then we need to delete at
leastk+ 1·(n+ 2m)> /lscriptedges. The inequality holds since k(d−k+ 1)≤kd < nd = 2m. We show
that the set C={vi|i∈[k]}of vertices forms a multicolored clique. First, by construction each vertex
inCis connected to a diﬀerent vertex tiandCis therefore a multicolored set of vertices. Second, note
that we need to remove all edges between vertices in the connected component of sand the selected
verticesviwithi∈[k]. Since we have already removed n−k+k·(n+ 2m)edges, we can remove at
mostk(d−k+ 1)edges. Moreover, since each vertex has degree dinG, we have to remove d−xedges
incident to each vertex vi∈Cwherexis the number of neighbors of viinC. Note that since there are
onlykvertices inC, the minimum number of edges to remove is d−k+ 1and this bound can only be
achived ifviis connected to all other vertices in C. Since we assumed that there is a solution which
removes only /lscriptedges, we can infer that each pair of vertices in Cis pairwise adjacent, that is, Cis a
multicolored clique. This concludes the proof.
6 Applications
In this section, we show how to use our result to generalize two known results from the literature. We
also complement the FPT-time algorithms with NP-hardness results. First, we show that a generalization
ofNetwork Diversion with more than one bridge can be solved in (randomized) FPT-time when
parameterized by the number of bridges. The problem Generalized Network Diversion is deﬁned
as follows.4
6.1 Generalized Network Diversion
Input: A graphG, two vertices sandt, a setBof edges of G, and an integer k≥0.
Task: Decide whether there exists a minimal s-t-cut (U,W )ofGwith|cut(U)|≤k
andB⊆cut(U).Generalized Network Diversion
As a simple corollary of Theorem 1, we get also an FPT-time algorithm for Generalized Network
Diversion . We show that this problem is indeed NP-complete in the appendix of this article, in
Proposition 3.
Corollary 2. Generalized Network Diversion can be solved in 8|B|·nO(1)time on planar graphs
by a randomized algorithm with one-sided error.
Proof.Let(G,s,t,B,k )be an instance of Generalized Network Diversion . We consider all possible
sets of terminals SandTby guessing which endpoint of each edge in Bis on the same side of a solution
cut ass. Initially,S:={s}andT:={t}. Then we have 2|B|possibilities to include one endpoint of each
edgee∈BinSand the other in T. For each choice of SandT, we run the algorithm from Theorem 1.
Since|S|+|T|≤2|B|+ 2, the overall running time is 8|B|·nO(1).
Complementing the algorithm above, we show that the FPTrunning time can probably not be
improved to a polynomial running time in the appendix of this article, in Proposition 3.
4We mention in passing that a problem where one only wants to remove a certain number of edges to ensure that each
remaining s-t-path contains at least one edge in Bhas been considered before. However, it has been noted by Cintron–Arias
et al. [8] that this problem reduces to (weighted) the case with only a single bridge. We therefore believe that it makes more
sense to demand everyedge in Bto become a bridge, that is, to require that Bis contained in the minimal cut.
166.2 Location Constrained Shortest Path
Our second application regards the problem Location Constrained Shortest Path studied by Duan
and Xu [18].
Input: A plane graph G, two vertices sandton the outer face and an interior face F
Task: Find a shortest interior s-tpathbelowF.Location Constrained Shortest Path
Aninterior path is a path in which only the endpoints can be on the outer face. Given an interior s-t-
pathP, we can extend it to a simple cycle Cby appending the path on the outer face from ttoswhich is
on the lower side of the graph. This is a simple cycle since Pdoes not use any exterior vertices except s
andt. A faceFis now said to be belowPifFis insideC. Duan and Xu [ 18] give a polynomial time
algorithm for Location Constrained Shortest Path .
We consider a generalization of Location Constrained Shortest Path which we call Gen-
eralized Location Constrained Shortest Path . Given a plane graph Gand two setsFA=
FA
1,FA
2,...,FA
pAandFB=FB
1,FB
2,...,FB
pBof faces of G, the task is to ﬁnd a shortest interior s-t-
pathPsuch that all faces in FAareabovePand all faces inFBarebelowP.
Input: A plane graph G, two vertices sandton the outer face and interior faces FA
andFB
Task: Find a shortest interior s-tpathPsuch thatFAis abovePandFBis belowP.Generalized Location Constrained Shortest Path
We generalize the result by Duan and Xu by showing that Generalized Location Constrained
Shortest Path is ﬁxed-parameter tractible when parameterized by |FA|+|FB|.
Proposition 2. Generalized Location Constrained Shortest Path can be solved in random-
ized2|FA∪FB|·nO(1)time with one-sided error.
Proof.We show that Generalized Location Constrained Shortest Path is a special case of
Two-Sets Cut-Uncut . Let (G,s,t,FA,FB)be the input to Generalized Location Constrained
Shortest Path , withOthe vertices on the outer face except sandt. Notice that in the graph G−O,
sandtmust be in the same connected component, otherwise we have a trivial no-instance. Let G/primebe the
graphG−O+{s,t}, i.e., the graph where we add one additional edge between sandtwhere we draw
this edge in the embedding above the rest of the graph. We call the new (non-outer) face Aand the new
outer faceB. Now, letS/prime=FA∪{A}andT/prime=FB∪{B}and letG∗be the dual graph of G/prime. LetSbe
the vertices corresponding to the faces of S/primeandTthe vertices corresponding to the vertices of T/prime. We
show next that (G∗,S,T,k )is a yes-instance for Two-Sets Cut-Uncut if and only if (G,s,t,FA,FB)
has an interior s-t-path of length k−1.
Since the algorithm for Two-Sets Cut-Uncut ﬁnds a minimal cut in G∗of size at most k, this
corresponds to a simple cycle of length at most kinG/prime. Note that the two faces AandBare incident to
each other, hence the edge between the corresponding two vertices in G∗must be part of the cut. This
means that the new edge {s,t}is part of the cycle, which means that the rest of the cycle is an interior
s-t-path of length at most k−1.
We defer the NP-completeness of Generalized Location Constrained Shortest Path to the
appendix.
These two problems, Generalized Network Diversion andGeneralized Location Constrained
Shortest Path are just two applications that is solved directly by our Two-Sets Cut-Uncut algorithm
from Theorem 1. We assume there are many more applications.
7 Conclusion
In this paper, we showed that Two-Sets Cut-Uncut isFPTon planar graphs parameterized by the
number of terminals. We also prove a more general result that the problem remains FPT parameterized
17by the minimum number of faces required to cover the terminals. Our result implies a polynomial time
algorithm solving Network Diversion on planar graphs. We complement this result by showing that
Two-Sets Cut-Uncut parameterized by the number of terminals ( |S|+|T|) is W[1]-hard in general
graphs even when |S|= 1.
First, let us remark that the algorithm in Theorem 1 for Two-Sets Cut-Uncut parameterized
by the number of faces is given for plane graphs because the minimum number of faces covering the
terminals depends on the embedding. However, the standard techniques based on SPQR trees [ 26,27]
can be used to show that it is FPTto decide, given a planar graph G, a set of vertices X, and an integer
r≥1, whetherGadmits a plane embedding such that Xcan be covered by at most rfaces. Thus, the
result can be extended (with worse running time) to planar graphs admitting embeddings such that the
terminals can be covered by at most rfaces.
We conclude with a few open problems.
1.First we repeat the long-standing open question, whether Network Diversion is polynomial-time
solvable in general graphs. Similar question is valid even for a graph embeddable in a torus.
2.A natural extension of the Two-Sets Cut-Uncut is to extend it to a larger number of sets. Since
on general graphs, 3-Way Cut isNP-complete [ 14], the same holds for Three-Sets Cut-Uncut
even when all sets are of size one. However, for planar graphs, k-Way Cut is solvable in polynomial
time for ﬁxed k[14,33,39]. As a very concrete open question, we ask whether Three-Sets
Cut-Uncut is solvable in polynomial time on planar graphs when two sets are of size one and one
set is of size two.
3.Our algorithm is randomized and works only on unweighted graphs; can we get rid of either of these
restrictions?
References
[1]G. Agnarsson and R. Greenlaw ,Graph theory: Modeling, applications, and algorithms , Prentice-
Hall, Inc., 2006. 5
[2]J. Alber, H. L. Bodlaender, H. Fernau, T. Kloks, and R. Niedermeier ,Fixed parameter
algorithms for dominating set and related problems on planar graphs , Algorithmica, 33 (2002),
pp. 461–493. 5, 10
[3]M. Bern ,Faster exact algorithms for steiner trees in planar networks , Networks, 20 (1990), pp. 109–
120. 3
[4]I. Bezáková and Z. Langley ,Minimum planar multi-sink cuts with connectivity priors , in
Proceedings of the 39th International Symposium on Mathematical Foundations of Computer Science
(MFCS ’14), Springer, 2014, pp. 94–105. 2, 11
[5]A. Björklund, T. Husfeldt, P. Kaski, and M. Koivisto ,Narrow sieves for parameterized
paths and packings , J. Comput. Syst. Sci., 87 (2017), pp. 119–139. 3, 4
[6]A. Björklund, T. Husfeldt, and N. Taslaman ,Shortest cycle through speciﬁed elements , in
Proceedings of the Annual ACM-SIAM Symposium on Discrete Algorithms (SODA ’12), Society for
Industrial and Applied Mathematics, 2012, pp. 1747–1753. 3, 4, 5
[7]R. Chitnis, M. Cygan, M. Hajiaghayi, M. Pilipczuk, and M. Pilipczuk ,Designing FPT
algorithms for cut problems using randomized contractions , SIAM J. Comput., 45 (2016), pp. 1171–
1229. 3
[8]A. Cintron-Arias, N. Curet, L. Denogean, R. Ellis, C. Gonzalez, S. Oruganti, and
P. Quillen ,A network diversion vulnerability problem , 2001. 1, 16
[9]T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein ,Introduction to Algorithms , MIT
Press, 2009. 13
18[10]C. A. Cullenbine, R. K. Wood, and A. M. Newman ,Theoretical and computational advances
for network diversion , Networks, 62 (2013), pp. 225–242. 1, 2
[11]N. D. Curet ,The network diversion problem , Military Operations Research, 6 (2001), pp. 35–44. 1
[12]M. Cygan, P. Komosa, D. Lokshtanov, M. Pilipczuk, M. Pilipczuk, S. Saurabh, and
M. Wahlström ,Randomized contractions meet lean decompositions , ACM Trans. Algorithms, 17
(2021), pp. 6:1–6:30. 3
[13]M. Cygan, M. Pilipczuk, M. Pilipczuk, and J. O. Wojtaszczyk ,Solving the 2-disjoint
connected subgraphs problem faster than 2n, Algorithmica, 70 (2014), pp. 195–207. 1
[14]E. Dahlhaus, D. S. Johnson, C. H. Papadimitriou, P. D. Seymour, and M. Yannakakis ,
The complexity of multiterminal cuts , SIAM J. Comput., 23 (1994), pp. 864–894. 3, 18
[15]U. Derigs ,An eﬃcient Dijkstra-like labeling method for computing shortest odd/even paths , Infor-
mation Processing Letters, 21 (1985), pp. 253–258. 3
[16]R. Diestel ,Graph Theory , Springer, 2012. 5, 10
[17]Q. Duan, H. Jafarian, E. Al-Shaer, and J. Xu ,On DDoS attack related minimum cut problems ,
2015. 2
[18]Q. Duan and J. Xu ,On the connectivity preserving minimum cut problem , Journal of Computer
and System Sciences, 80 (2014), pp. 837–848. 1, 2, 17
[19]R. E. Erickson, C. L. Monma, and A. F. J. Veinott ,Send-and-Split Method for Minimum-
Concave-Cost Network Flows , Mathematics of Operations Research, 12 (1987), pp. 634–664. Publisher:
INFORMS. 3
[20]O. Erken ,A Branch-and-bound Algorithm for the Network Diversion Problem , Master’s thesis
ADA411769, Naval Postgraduate School Monterey Ca, Dec. 2002. Section: Technical Reports. 1
[21]A. Filtser ,A face cover perspective to /lscript1embeddings of planar graphs , in Proceedings of the 2020
ACM-SIAM Symposium on Discrete Algorithms (SODA), Proceedings, Society for Industrial and
Applied Mathematics, Dec. 2019, pp. 1945–1954. 3
[22]F. V. Fomin, P. A. Golovach, T. Korhonen, K. Simonov, and G. Stamoulis ,Fixed-
parameter tractability of maximum colored path and beyond , in Proceedings of the 2023 ACM-SIAM
Symposium on Discrete Algorithms, SODA 2023, Florence, Italy, January 22-25, 2023, N. Bansal
and V. Nagarajan, eds., SIAM, 2023, pp. 3700–3712. 3, 4
[23]M. R. Garey and D. S. Johnson ,Computers and Intractability, A Guide to the Theory of
NP-Completeness , W.H. Freeman and Company, New York, 1979. 21
[24]C. Gray, F. Kammer, M. Löffler, and R. I. Silveira ,Removing local extrema from imprecise
terrains, Comput. Geom., 45 (2012), pp. 334–349. 1, 15
[25]M. Grötschel and W. R. Pulleyblank ,Weakly bipartite graphs and the Max-cut problem ,
Operations Research Letters, 1 (1981), pp. 23–27. 3
[26]C. Gutwenger and P. Mutzel ,A linear time implementation of spqr-trees , in Graph Drawing,
8th International Symposium, GD 2000, Colonial Williamsburg, VA, USA, September 20-23, 2000,
Proceedings, J. Marks, ed., vol. 1984 of Lecture Notes in Computer Science, Springer, 2000, pp. 77–90.
18
[27]J. E. Hopcroft and R. E. Tarjan ,Dividing a graph into triconnected components , SIAM J.
Comput., 2 (1973), pp. 135–158. 18
[28] ,Eﬃcient planarity testing , Journal of the ACM, 21 (1974), pp. 549–568. 5, 15
[29]Y. Iwata and Y. Yamaguchi ,Finding a Shortest Non-Zero Path in Group-Labeled Graphs ,
Combinatorica, 42 (2022), pp. 1253–1282. 3
19[30]B. S. Kallemyn ,Modeling Network Interdiction Tasks , doctoral thesis, Department Of The Air
Force Air University Air Force Institute Of Technology, Wright-Patterson Air Force Base, Ohio, 2015.
1
[31]F. Kammer and T. Tholey ,The complexity of minimum convex coloring , Discret. Appl. Math.,
160 (2012), pp. 810–833. 1
[32]S. Kisfaludi-Bak, J. Nederlof, and E. J. v. Leeuwen ,Nearly ETH-tight Algorithms for
Planar Steiner Tree with Terminals on Few Faces , ACM Transactions on Algorithms, 16 (2020),
pp. 1–30. 3
[33]P. N. Klein and D. Marx ,Solving planar k-terminal cut in O(nc√
k)time, in Proceedings of the
39th International Colloquium on Automata, Languages, and Programming (ICALP), vol. 7391 of
Lecture Notes in Computer Science, Springer, 2012, pp. 569–580. 3, 18
[34]Y. Kobayashi and S. Toyooka ,Finding a Shortest Non-zero Path in Group-Labeled Graphs via
Permanent Computation , Algorithmica, 77 (2017), pp. 1128–1142. 3
[35]I. Koutis ,Faster algebraic algorithms for path and packing problems , in Automata, Languages and
Programming, 35th International Colloquium, ICALP 2008, Reykjavik, Iceland, July 7-11, 2008,
Proceedings, Part I: Tack A: Algorithms, Automata, Complexity, and Games, 2008, pp. 575–586. 3, 4
[36]R. Krauthgamer, J. R. Lee, and H. I. Rika ,Flow-Cut Gaps and Face Covers in Planar
Graphs, in Proceedings of the 2019 Annual ACM-SIAM Symposium on Discrete Algorithms (SODA),
Proceedings, Society for Industrial and Applied Mathematics, Jan. 2019, pp. 525–534. 3
[37]C. Lee, D. Cho, and S. Park ,A combinatorial benders decomposition algorithm for the directed
multiﬂow network diversion problem , Military Operations Research, 24 (2019), pp. 23–40. 1
[38]D. Marx ,A tight lower bound for planar multiway cut with ﬁxed number of terminals , in Proceedings
of the 39th International Colloquium on Automata, Languages, and Programming (ICALP), vol. 7391
of Lecture Notes in Computer Science, Springer, 2012, pp. 677–688. 3
[39]S. Pandey and E. J. van Leeuwen ,Planar Multiway Cut with Terminals on Few Faces , in
Proceedingsofthe2022AnnualACM-SIAMSymposiumonDiscreteAlgorithms(SODA),Proceedings,
Society for Industrial and Applied Mathematics, Jan. 2022, pp. 2032–2063. 3, 18
[40]D. Paulusma and J. M. M. van Rooij ,On partitioning a graph into two connected subgraphs ,
Theor. Comput. Sci., 412 (2011), pp. 6761–6769. 1
[41]A. Rai, M. S. Ramanujan, and S. Saurabh ,A parameterized algorithm for mixed-cut , in
Proceedings of the 12th Latin American Symposium (LATIN), vol. 9644 of Lecture Notes in
Computer Science, Springer, 2016, pp. 672–685. 3
[42]J. T. Schwartz ,Fast probabilistic algorithms for veriﬁcation of polynomial identities , Journal of
the ACM, 27 (1980), pp. 701–717. 4, 7
[43]R. E. Tarjan ,Depth-ﬁrst search and linear graph algorithms , SIAM J. Comput., 1 (1972), pp. 146–
160. 11
[44]J. A. Telle and Y. Villanger ,Connecting terminals and 2-disjoint connected subgraphs , in
Graph-Theoretic Concepts in Computer Science - 39th International Workshop, WG 2013, Lübeck,
Germany, June 19-21, 2013, Revised Papers, vol. 8165 of Lecture Notes in Computer Science, Springer,
2013, pp. 418–428. 1
[45]P. van ’t Hof, D. Paulusma, and G. J. Woeginger ,Partitioning graphs into connected parts ,
Theor. Comput. Sci., 410 (2009), pp. 4834–4843. 1, 15
[46]R. Williams ,Finding paths of length kinO∗(2k)time, Inf. Process. Lett., 109 (2009), pp. 315–318.
3, 4
[47]R. Zippel ,Probabilistic algorithms for sparse polynomials , in Proceedings of the International
Symposiumon Symbolic and Algebraic Computation (EUROSAM ’79), Springer, 1979, pp. 216–226.
4, 7
20vu1u2
u3u1u2
u3ev
Figure 4: Reduction from Hamiltonian Cycle on cubic planar graphs to Generalized Network
Diversion . On the left side, a vertex vin the input graph is depicted with its three neighbors. On the
right side, the Net graph corresponding to vis shown. Notice that there is a path between any pair of
neighbors of vthat passes through the edge evin the gadget.
A Proofs from the applications section
A.1 Generalized Network Diversion is NP-complete
We begin this section by recalling the problem deﬁnition:
Input: A graphG, two vertices sandt, a setBof edges of G, and an integer k≥0.
Task: Decide whether there exists a minimal s-t-cut (U,W )ofGwith|cut(U)|≤k
andB⊆cut(U).Generalized Network Diversion
Proposition 3. Generalized Network Diversion isNP-complete, even when restricted to subcubic
planar graphs.
First, note that Generalized Network Diversion on planar graphs is equivalent to ﬁnding a
shortest simple cycle in the dual graph that visits all dual edges B∗of edges in Bwhere the faces s∗
andt∗lie in diﬀerent faces of the cycle. We call this problem fs-ft-separating Rural Postman
Problem , or simply RPP. We show that RPPisNP-hard via a reduction from Hamiltonian Cycle
on cubic planar graphs [23]. Containment in NPis trivial, so we address only the hardness.
Proof of Proposition 3. LetGbe an instance of Hamiltonian Cycle whereGis a cubic planar graph.
We will build an equivalent instance (G/prime,fs,ft,B/prime,k/prime=n)ofRPPas follows. To build G/prime, we start
withGand replace every vertex with a Net graph and connect its three neighbors to the three pendant
vertices, respectively. See Figure 4 for an illustration of a Net graph and an example of the described
construction. We then pick any one of the three edges in the triangle of the Netto be contained in B/prime.
Then we take one arbitrary edge b∈B/primeand letfsandftbe the two diﬀerent faces on each side of b
(these faces exist regardless of embedding). Observe that in any cycle Cthat traverses b, the two faces fs
andftwill lie in diﬀerent faces of C.
LetCbe a Hamiltonian cycle in a cubic planar graph. If u,v,wis a subpath of C, then we can
construct the corresponding subpath in G/primeby going from utoev(the chosen edge of the triangle in the
Netcorresponding to v) and then to w. SinceCis a Hamiltonian cycle, the corresponding C/primeinG/primeis
clearly a shortest (simple) cycle.
LetC/primebe a cycle that visits all the edges in B/prime. Sinceev∈B∗is an edge in the triangle of a Net, the
path has to come in through a pendant vertex of the Netand leave through a diﬀerent pendant vertex of
theNet. Construct the cycle Cin which for each edge evtraversed in C/prime, we pickvtoC.
Claim 3.Cis a Hamiltonian cycle in G, i.e., 1.Cis a closed walk, 2. CspansV(G), and 3.Cdoes
not have repeated vertices.
Proof of claim.
1.Suppose that uvis an edge in C. Then this was constructed because in C/primewe visiteuand thenev.
Buteuandevare then neighboring Net graphs , henceuvis an edge in G.
21vvinvup
vdnvoutFA(v)
FB(v)
Figure 5: Reduction from Directed Planar Hamiltonian s-t-PathtoGeneralized Location
Constrained Shortest Path .
2. Every vertex is traversed (since for each vertex, we pick some triangle edge to go into B/prime)
3. SinceC/primeis a simple cycle, we do not visit any edge evtwice, hence in C, no vertex is repeated.
Finally, we merely note that since Net graph is subcubic and planar, the constructed graph G/primeis a
subcubic planar graph (the connection between two Net graphs is by identifying two pendant vertices,
resulting in a single degree-2 vertex).
A.2 Generalized Location Constrained Shortest Path is NP-complete
We show that Generalized Location Constrained Shortest Path isNP-complete.
Proposition 4. Generalized Location Constrained Shortest Path isNP-complete.
Proof.The decision version of the problem is clearly in NP. For showing NP-hardness, we reduce from
Directed Planar Hamiltonian s-t-Path. Let (D= (V,A),s,t)be the input instance.
Our reduction simply replaces every vertex v∈V\{s,t}with the following gadget. See Figure 5 for
an illustration. The gadget for vconsists of four vertices vin,vout,vup, andvdnand the set of edges
EG(v) ={{vin,vout},{vin,vup},{vin,vdn},{vup,vout},{vdn,vout}}.
We denote by FA(v)the new face incident to vupand byFB(v)the new face incident to vdn. We
embedd all gadgets in the plane in such a way that {vin,vout}is a horizontal line with vinon the left
side andFA(v)above{vin,vout}. To ﬁnish the graph of the constructed instance of Generalized
Location Constrained Shortest Path , we replace each arc (u,v)in the original graph with
the undirected edge {uout,vin}. Finally, we complete the construction by setting FA=/uniontext
v∈VFA(v)
andFB=/uniontext
v∈VFB(v). The vertices sandtremain the same in both instances and we assume without
loss of generality that shas no incomming arcs and thas no outgoing arcs in the original instance.
Since the reduction can clearly be computed in polynomial time, it only remains to show that (D,s,t )
is a yes-instance for Directed Planar Hamiltonian s-t-Pathif and only if (G,s,t,FA,FB)is a
yes-instance for Generalized Location Constrained Shortest Path . To this end, note that for
any edgeewith incident faces F1andF2, ifF1∈FAandF2∈FB, then any solution has to traverse e
such thatF1on the left-hand side.
⇒:LetPbe a directed Hamiltonian s-t-path inD. We construct P/primeby replacing every vertex vinP
(except forsandt) with vertices vinandvoutand with the edge {vin,vout}and replace each arc (u,v)inP
with the edge{uout,vin}. SincePis a simple path, so is P/prime. Moreover, by construction of FAandFB,
FA(v)will always be on the left-hand side of P/primeandFB(v)will always be on the right-hand side of P/prime.
⇐:LetP/primebe a shortest interior s-t-path in the constructed graph. Since P/primeseparates each FA(v)
from its corresponding FB(v), the edge{vin,vout}must be contained in P/prime. Sinceshas no incomming
arcs, the ﬁrst edge in P/primemust be between sand some vertex vin. Since the edge{vin,vout}is contained
inP/primeand sinceP/primeis a simple path, this edge must be the second edge in P/prime. It is easy to prove via
induction that the edges in P/primenow alternate between {vout,uin}and{uin,uout}for some vertices u,v∈V.
Hence, we can construct a path from P/primeby replacing the two edges and the three incident vertices by the
arc(v,u)and the vertex u. Since the path P/primecontains each edge {vin,vout}, starts ins, ends int, and is
a simple path, it follows that the constructed path is a directed Hamiltonian s-t-path inD.
22