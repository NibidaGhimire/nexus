XXX -X-XXXX -XXXX -X/XX/$XX.00 ©20 20 IEEE  
 Implementation of Digital Circuits on Three -
Dimensional FPGAs Using Simulated Annealing  
Hemin Rahimi  
department of electrical engineering  
university of kurdistan  
Sanandaj, Iran  
hemn.rahimi@ uok.ac.ir  
 Hadi jahanirad  
department of electrical engineering   
university of kurdistan   
Sanandaj, Iran  
h.jahanirad@uok.ac.ir
Abstract—3D FPGAs have recently been produced  as the 
next generation of the FPGA family to continue the integration 
of more transistors on a single chip seamlessly . In this paper, we 
propose a complete CAD flow to  implement an arbitrary logic 
circuit on the 3D FPGA . The partitioning and place ment stages 
of the flow are based on the simulated annealing  algorithm . 
Furthermore , the routing stage is a modified version of the 
Pathfinder  algorithm. The simulation results indicate that  the 
comparison  between 2D FPGA  and 3D FPGA (including 2 -tier) 
shows that the circuit speed increase s by 28.6 6% and minimum 
channel width decrease by 29.92 %, while the total area raise s by 
8.86%. Finally, the results of the comparison between 2 -tier and 
4-tier in 3D  FPGA show  that circuit speed and minimum 
channel width increase  by 15.95% and 15.92% in 4 -tier, 
respectively . Meanwhile, the total area increases  only by 1.96% . 
Keywords —3D FPGA,  Partitioning,  Place and route,  
Simulated Annealing  
I. INTRODUCTION  
The conventional 2D integration circuits implementation 
reache s its maximum capabilities , as well as the current 
technologies , are facing  new challenges in terms of speed, 
area, power consumption, and reliability  [3-5]. Moreover, 
Moore's law [2] is no longer applicable due to the  physical 
limitat ions in scaling down the transistor feature size . Three 
dimensional integrated circuits are an attractive technology to 
overcome these problems. The main idea in 3D integration is 
stacking the dies and connect ing them using vertical 
interconnections , which  are called TSVs (Through Silicon 
Vias) . The potential benefits of 3D integration include 
reduction in power consumption, delay, IC’s footprint , and 
cost compared to conventional 2D integration  [6].  
FPGAs (Field Programmable Gate Arrays)  have been 
widely used in electronic boards of various engineering 
systems , Due to their re-configurability . But the gap between 
ASICs  (Application Specific Integrated Circuits ) and FPGAs 
with current technology  (conventional 2D integration)  is large  
(over ten times less ef ficient in logic density, over three times 
worse in delay, and over three times higher in power 
consumption ) [7]. The most significant reason for this  large 
gap is programmable routing elements in the FPGA , which 
makes the reconfigurability for the user to implement the 
required circuit on the FPGA .  On the other hand, by stacking 
several dies in 3D FPGA, another connection type would be 
added to the routing network: vertical interconnection  . 
The size of the TSV pitch is much bigger than the width of 
the other wires and logic gates . Consequently, the number of 
TSVs must be restricted to control the related area overhead . 
On the other hand, TSVs are used to transfer heat trapped 
between layers very efficiently,  so the IC designers must place 
a sufficient number of the  TSVs inside the chip . In this paper , we present an efficient computer aided 
design (CAD) tool for the implementation of logic circuits on 
3D FPGAs. The major parts of the proposed CAD tool are 
partitioning , place ment,  and rout ing. In the partitioning phase , 
the logic circuit would be partitioned into several parts , each 
of them is implemented on a layer. T hen each part is placed 
and routed on a single layer , along with the interconnections 
among partitions that are realized using TSVs. Our developed 
tool is inspired by the  versatile place and route flow (VTR) 
which is used for  the circuit’s implementation o n 2D FPGAs  
[8]. Authors in [1] proposed a three -dimensional place and 
route (TPR) CAD flow for FPGAs wherein hMetis  [9] is 
applied for circuit partitioning . The TPR consider s a 
symmetric 3D architecture for all switch boxes , which  means 
there is an equal n umber of wire tracks on the x-axis, y-axis, 
and z -axis. The tracks in the z-axis are realized using TSVs 
with a very large size in comparison to x and y wire tracks. On 
the other hand, only a low fraction of TSVs are used to 
implement vertical interconnect ion in practice. Consequently, 
using 3D switch boxes would result in a large area overhead 
along with a high cost for the fabrication of a large number of 
unnecessary TSVs . This feature makes the chip not optimal in 
terms of cost, area, latency,  and power consumption.  
Moreover, the TPR router does not support timing -driven .  
 SA (Simulated Annealing) is one of the key meta -
heuristic algorithms to approximate global optimization in a 
large search space  and nonlinear problems [10]. The SA 
algorithm has been efficiently applied to solve some important 
problems such as T ravelling Salesman Problem  [11], the 
packing problem [12], Timetabling Problem  [13], and Supply 
Chain Management  [14]. Due to the implemen tation of very 
complex circuits on digital ICs, the typical optimization 
problems in this field are related to a very large search space , 
which makes SA an efficient tool for such problems . There are 
many  academic types of  research , in the field of IC desi gn, 
that exploit SA  [15-19].  
In our proposed CAD tool, we have applied the SA 
algorithm in the partitioning and placement stages to find the 
optimum partitions and optimally place the partitions on 3D 
FPGA layers, respectively . Moreover, the routing stage  in our 
proposed flow is accomplished using a modified Pathfinder 
routing algorithm. Pathfinder  [22] uses an iterative algorithm 
that converges to a possible solution in which all signals are 
routed . This algorithm is used in related commercial (Altera, 
Xilinx) and academic CAD tools  [1], [8], [21], [22].  
The rest of this paper is organized as follows: Section II 
presents the preliminaries of this paper . Section III presents 
our proposed flow , and the experimental results are provided 
in Section IV. Finally, Section V summarizes the respective 
conclusions of this wor k. II. PRELIMINARIES  
In this section, we review the basic concepts related to the 
architecture of 2D FPGAs and the new concepts which are 
arisen in 3D FPGAs , such as 3D Switch Boxes and TS Vs. 
Then the optimization problems related to partitioning, 
placement, and routing stages would be defined for 3D 
FPGAs.  
A. 2D FPGA: architecture and components  
Fig. 1 presents  a top view of a 2D FPGA architecture 
which is called  mesh -based  architecture. Its main  components 
are Configurable Logic Blocks (CLBs), Switch Boxes (SBs), 
Connection Blocks (CBs) , and I/O Pads which are 
implemented on a regular grid. In the following, we briefly 
describe the structure of each of these components . 
CLB
Switch -box
Connection -
block
IO_Pads
Routing channel
 
Fig. 1.  A typical mesh -based 2D architecture with its main  
The logical function of the implemented logic circuit 
would be realized using CLBs. Each CLB contains a cluster 
of BLEs (Basic Logic Element s) for which the local rout ing 
resources connect their input/output pins to the related CLB’s 
ports.  A BLE consists of an LUT (Look -Up Table) and a 
DFF.  Fig 2. shows a typical BLE architecture.  
CLKDFF
D QS16
OutInp 0-Inp 3
S0-S15
 
Fig. 2. A typical BLE structure  (lut-4) 
The routing network  consists of wire tracks, Connection 
Blocks (CBs) , Switch Boxes (SBs)  and routing channels . 
Each CLB’s input and output ports would be connected to the 
neighbor routing channels through adjacent CBs. On the 
other hand, an SB is inserted in the intersection  of two 
horizontal and vertical channels, so that a wire track that 
belongs to one of these adjacent routing channels could be 
connected to the wires of the other channels using the SB 
[21].  
Fig. 3a shows a 2D switch box along with its adjacent 
routing cha nnels. FS and pip junction  are two related concepts 
which are defined as follows; The flexibility ( Fs) of a switch 
box is the total number of output tracks that connect to an 
input track  and pip junction  represents the sum of the entire 
pins at all sides of  the switch box . The 2D SB of Fig. 3a has 
Fs = 3 and pip junction =16.  
To compare the 2D switch box with the 3D switch box, 
suppose that pip junction  in each side to be Wmin (minimum 
channel width) along with the  pass transistor is used to 
connect the tracks of the adjacent routing channels. the total 
number of switches (pass transistors) in 2D and 3D SBs 
would be Wmin × (3/2)  and Wmin × (5/2) , respectively  [22]. Furthermore, the fabrication of W min TSVs in upper and 
lower faces of SB results in a significant area overhead.  
FS = 5
a)b)yxz
Pip 
junction 
Pip 
FS = 3
 
Fig. 3.  FPGA Switch Box overview: a) 2D SBs, b) 3D SBs  
B. 3D FPGA  Structure  
Fig. 4.b shows an excellent  overview of a  stacked 3D  
FPGA architecture  in four active tiers that t he adjacent tiers 
are connected to each other . As illustrated  in Fig. 4.b, within  
the 3D stacked model, the interconnection between the active 
tiers is accomplished using vertical connections  called 
Through Silicon V ias or TSVs.  As the first direct result of 
this action , the critical path  length is potentially reduce d. To 
better comprehend this , suppose a 2D chip in Fig. 4.a with 
Manhattan distance 2X. Currently , divide this chip into four  
equal  tiers and stack them tier by tier  to produce  a 4-tier chip 
(Fig. 4.b). 
TSV
XX
hTS V
X/2 + Delta
a) b)CLB SB SBSB SB
CLBCLB CLB
 CLB SB SBSB SB
CLBCLB CLB
 CLB SB SBSB SB
CLBCLB CLB
CLB SB SBSB SB
CLBCLB CLB SB SB
SB SB CLB CLBSB SB CLB CLBSB SB CLB CLBSB SB CLB CLBX/2
 
Fig. 4.  a) 2D FPGA structure,  b) 3D FPGA structure  
 Consider hTSV as the TSV height ( It will be explained in 
the following subsection s)  and the chip  dimension ( length 
and width ) was X/2 + Delta  wherein, Delta  is a parameter due 
to TSVs area overhead. Hence, the maximum Manhattan 
distance ( Dmax) is: 
Dmax = 2 × (X/2 + Delta) + 3.h TSV  (1) 
In general, maximum Manhattan distance during a 3D chip 
with n tiers and chip dimension X and Y (length and width) 
is:  
Dmax = (X + Y) + (n - 1).h TSV  (2) 
Where it is assumed that area overhead due to TSVs ( Delta ) 
is embedded in X and Y. From Eq. (2), as expected, we will 
conclude that in 3D integration the critical path and 
wirelength decreases , and its direct effect is to reduce chip 
delay . Also, the area occupied by the chip is reduced  and 
logic density increas ed. 
C. Through Silicon Via  (TSV)  
TSVs have low er power loss and circuit delay as well as 
higher  bandwidth, in compar ison with standard wire bond s 
[23].  Recent  researches are focused on designing reliable and 
cost effective TSVs. The major factors which affec t the 
design of TSV architecture  are filler material (it is a material 
used to filling TSV), height, diameter, and shape. Cooper (Cu), tungsten, and polycrystalline silicon are the most 
common filler materials .  In modern designs, the TSV shape 
can be circ ular, annular, square, tapered, or rectangular and 
yet this is one of the critical challenges that currently exist as 
to which shape and for what use is most useful. Finally, to 
obtain an overview of the important dimensions of TSVs, 
consider TSV roadmaps on ITRS 2015.   According to this 
roadmap, TSV diameter is 2 -4µm, TSV pitch is 4 -8µm and 
TSV height is 30 -50µm in  the time frame 2015 -2018.  
Ultimately, the number of TSVs in 3D FPGA chips must be 
controlled efficiently to restrict the related area overhead as 
low as possible.  
D. Partitioning, Place and Route problem  
In the preliminary step of a circuit implementation, the 
circuit graph is generated wherein the gates and 
interconnection are transformed to vertices and edges, 
respectively. Assuming that the circu it graph is represented 
by G = (V, E),  wherein  V = {v 1, v2, …, v n} is the set of vertices 
and E = {e 1, e2, …, e n} is the set of edges. In partitioning 
problem, we want to divide V into  k different subsets V1, V 2, 
V3, …, V k; Where:  
|V1| = |V 2| = … = |V k|, Vi ∩ V j = Φ,   i ≠ j  
⋃ 𝐕𝐢  = 𝐤
𝐢=𝟏 V 
There are several solutions for graph partitioning but to 
reach the optimum solution a cut -size based cost function is 
used generally. For k resulted partitions, the cut -size would 
be the number of edges that interconnect two vertices of two 
different part s. In our 3D FPGA related problem, each 
partition consists of the gates which would be implemented 
on a tier. So, the cut -size roughly represents the number of 
necessary TSVs. Consequently, reducing the cut -size based 
cost function leads to reduction of re quired TSVs. In this 
paper , we propose an SA based partitioning algorithm that is 
both efficient and scalable . Note that the acceptable 
partitioning runtime  must be achieved for nowadays very 
large integrated  circuits.  
The subsequent stages after the partitioning step, are 
placement and routing. The optimum locations for the 
circuit’s gates are determined in the placement phase . The 
placement approaches which widely used in the literature 
could be categorized as  timing -driven placement  (that is 
focused on maximizing circuit speed), wirelength -driven 
placement (Minimize overall circuit wiring), and routability -
driven placement (balancing the wiring density and 
congestion controlling). As mentioned in the first section, the 
most popular a nd widely used algorithm in FPGAs is 
pathfinder  [21]. The routing stage depends heavily on how 
the placement performs in the previous step . In other words, 
the overall quality of the layout, in terms of area and 
performance is principally determined within  the placement 
phase  [24]. In this paper, we develop the SA -based 
approaches for placement as well as a modified routing 
algorithm for 3D FPGA.  
III. PROPOSED  FLOW  
The overall flow of our proposed method has been 
illustrated in Fig 5. The 3D FPGA architecture i s presented 
as an .xml file to the flow. Moreover, the circuit that is 
described in Verilog HDL would be the other input to the 
flow.  In the first step, the Verilog description of the circuit is 
synthesized, optimized, and technology -mapped based on the 
architecture file. We used odin_II [25] and ABC [26] for  the 
accomplishment of this essential step. The result of this step 
is a gate -level description of the circuit in BLIF (Berkeley 
Logic Interchange Format) file format. In the 2nd step, the 
BLIF file is partitioned into some parts equal to the 3D 
FPGA’s tiers. In the last step, appropriate placement and 
routing processes would be performed based on the proposed 
three -dimensional architecture.  
Arch .xml
Synthesizing,
Optimizing,
Mapping Circuit .v 
PartitioningNetlist
Tiers
Place     Route
 .place
 route
 
Fig. 5.    Our proposed flow for 3 D FPGA design  
A. Proposed  3D architecture  
our proposed architecture contains a mixture of  2D and 
the 3D switch boxes . Number of the 3D Switch boxes  is about 
33% of all programmable switches and this pattern is 
repeated  in all tiers . The CBs and CLBs (contain ing an LUT 
with size K = 6) are fully 2D modules as well as wire segment 
lengths are assumed  Single, Double , and Quad. The vertical 
channel width and the horizontal channel width (W min) are 
properly selected by the router (minimum channel width 
required to route the circuit) . The TSVs are in square shape 
and the related model parameters, according to [6] and [27], 
are shown in Table. I. 
Table I.  TSV parameters  
Resistance                    0.35 Ω 
Capacitance                  3 fF  
Diameter                      2 µm 
Pitch                             4 µm 
Height                          20 µm 
B. Partitioning algorithm  
The first step toward circuit implementation on  3D FPGA 
is the partitioning in which for all tiers it would be determined 
which circuit gates must be placed and routed. As mentioned 
before, the interconnections among partitions are realized by 
TSVs which are restricted in our proposed 3D FPGA 
architect ure to reduce the related area overhead. So, we have 
selected the cut -size as the cost function of our proposed 
partitioning algorithm. This cost function results in minimum 
TSV utilization. Furthermore, the size of the partitions in our 
proposed algorithm is balanced that means all partitions 
contain approximately equal number of gates.  Our proposed 
algorithm ( Algorithm. I ) is based on simulated annealing 
wherein  both runtime and minimum cut -size problems  are 
handled properly . Algorithm . I gets the circuit graph (G (V, E)) as its input, and 
outputs an optimized partitioning which includes n sub-
circuit graphs . In the first step, the circuit graph randomly is 
partitioned into n equal -sized subgraphs ( Line 1 ). Then based  
on Setup()  function the initial gain would be constructed. The 
gain of a graph vertex is computed according to (3), wherein 
Ei and Ii are the external and external costs, respectively.  
Di = E i – Ii (3) 
The edges which are connected to a vertex ( v) in the tier 
j’s graph are grouped into external and internal edges. The 
connection between v and any vertex in the same tier is 
realized by the internal edge. On the other hand, an external 
edge would connect this vertex ( v) to a vertex in the other 
tiers. The number of external and internal edges of a vertex 
would be the External and Internal costs, respectively.  
In the main loop of the algorithm (Lines 6 -28), for each 
temperature (T), an N number of local moves would be 
applied. In every local move, two  vertices from different tiers 
are selected then these vertices are swapped and the new cost 
function would be calculated for this configuration. If the new 
configuration reduces the cost, then the local move would be 
accepted otherwise the basic SA algori thm’s approach would 
be applied for acceptance or rejection of the local move (Line 
16-20). The related local parameters (α and N) are set using 
Setting local parameters() function as well as the pair of 
vertices selection for every local move would be don e using 
V_Selection(S’)  function.  
The main loop  is repeated until a stall occurs in the cost 
function or T reaches its minimum value (Tmin ). The stall 
happens when the cost function value does  not change 
sufficiently or remains unchanged for an outsized number of 
local moves.  
In each iteration,  the temperature is updated according to the 
cooling schedule. The cooling schedule is presented in Eq. 4. 
T(k+1) = T (k) . α (4) 
Where, k is iteration number and α is the cooling coefficient 
(0 < α < 1).  
In this algorithm, the cost function is presented in (5).  
Cost = (I i + I j) – (Ei + E j) + (2 . C ij) (5) 
Where Ii and Ij are the internal costs, E i and E j are the 
external cost of  vi and v j vertices respectively and Cij is the 
number of direct interconnections between those vertices.  
when a geometric cooling  schedule  is employed, the high 
initial temperature does not  considerably improve the 
optimization process . On the o ther hand, if a low value is 
assigned thereto, the algorithm might not achieve the optimal 
solution.  In our algorithm, the initial temperature (T 0) is the 
cut-size of the initial solution.  
Moreover, Tmin is set to 0.5 and α is : 
α = 𝑪𝒐𝒔𝒕 _𝒇𝒊𝒏𝒂𝒍
𝑪𝒐𝒔𝒕 _𝒊𝒏𝒊𝒕𝒊𝒂𝒍 
where, Cost_initial  is the first accepted local cost in each 
temperature (T), when ∆Cost < 0. Also, Cost_final is the last 
accepted local cost in each temperature when ∆Cos < 0. C. Placement  
The placement problem is defined as finding an optimal 
assignment of each vertex V i to a location such that there 
would be no more than one vertex in every location [24]. T he 
more precise and better placement leads to a  circuit  routing 
with better quality . 
The placement is an NP-hard  problem , consequently, in the 
CAD tools, metaheuristic methods are utilized to accomplish 
this step [28]. In this paper, we develop an SA -based 
approach for the 3D FPGA placement phase. In this 
algorithm, first of all, a random pla cement is generated (for 
each tier), then for each temperature, a fixed number of local 
moves (swap the locations of two randomly selected gates) 
are performed. The acceptance or rejection of a local move 
would be done similar to the basic SA algorithm.  
D. Routing  
In the last step, the required gates would be done using 
routing resources . Similar to VTR and TPR CAD tools, we 
employ the Pathfinder  algorithm to accomplish the routing 
process . The main issue in 3D FPGA routing which should 
be handled properly is  how to includes the vertical 
interconnections in the Pathfinder algorithm . In contrast to 
TPR which only minimizes the wirelength in the routing step,  
our proposed algorithm is both timing -driven and wirelength -
driven.  
In the proposed routing algorithm, for each net (a source 
and the related sinks), a directed graph is constructed.  The set 
of vertices V in G (V, E) , represent s the I/O terminals of 
internal blocks (logic elements, I/O Pads, etc.) and the routing 
wires in th e routing regions. Also, an edge between a pair of 
vertices represents a route  between th e related modules.  
In our proposed routing algorithm, at the first iteration, all 
the nets (one by one) are routed using Dijkstra’s shortest path 
algorithm. After this  iteration, some routing resources are Algorithm I. Simulated Annealing -based partitioning  
Input: G (V, E)  
Ensure : Optimized partitioned Graph to l tiers 
 
1: Randomly_partitioning( )  
2: Setup( )  
3: Setting parameters (T, T min) 
4: S       S init 
5: Cost Current         Number of TSVs  
6: while  T > T min 
7:      Setting local parameters (alpha, N) 
8:      for i = 0: N 
9:          V_Selection(S ’) 
10:        Calculate Cost function  
11:        Calculate ∆Cost  
12:        if (∆Cost < 0)  
13:            S       S ’          //  updating  
14             Cost Current        Cost current + ΔCost 
15:        else 
16:            r        Rand (0,1)  
17:            if (r < exp( -∆Cost/T))  
18:                S       S ’     // updating  
19:                Cost Current        Cost current + ΔCost  
20:            end if  
21:         end if  
22:     end for  
23:    if (stall) 
24:         break;  
25     else 
26:         T = G (T, K)  
27:    endif  
28: end while  
shared among multiple nets.   In the next iterations, the related 
nets would be ripped -up and re -routed to solve the resource 
sharing problem.  
IV. RESULTS  
In this section, we have used MCNC benchmarks circuits 
for our exper iments. Furthermore, the developed algorithms 
have been implemented using C++ language on a Linux 
(Ubuntu) platform with four CPU cores (2.9 GHz) and 8GB 
RAM. The parameters of 2D FPGA and 3D FPGA  (such as 
timing parameters and layouts)  have been extracted  from 
SPICE simulations based on the 22nm PTM technology [29].  
Authors in [30] have developed  a partitioning -based  
placement  (Parti -SA) for 3D FPGAs in 2 -tier. We compared 
our proposed partitioning  algorithm with Parti -SA in terms of 
the t otal TSVs. As rep resented in Fig. 6, our proposed 
algorithm is more efficient and its quality (in terms of TSV 
reduction) improved by 9.89%.  
 
 
Fig. 6.  Comparison between Parti -SA and the proposed algorithm in terms 
of TSV number.  
In Table. II, we compare our algorithm with TPR CAD 
tool in terms of TSV Count, Circuit speed and total 
wirelength.  
As can be seen (in the last row), the TSV number is 
improved by 5.34%, the circuit speed is increased by 31.14% 
and total wirelength is improved by 5.16%.  
Table. III represents the simulation results  for the 
comparison between  2D Design  (VPR 8.0)  with the results of 
our CAD flow for 3D Design . As can be seen in the 
“IMPROVEMENT ” row, the critical path delay (CPD) 
improved by 28.6 6% in 3D Design. The total number of 
track s (W min) is reduced in 3D FPGA by 29.92% in average. 
Also, t he average number of transistors that are added to a 
three -dimensional design compared to a two -dimensional 
design is just 8.86%. The Area term in Table. III is the total 
area of all tiers.  We com pared ou r method (in 2 tiers)  to 
virtex -7 (xc7vx1140tflg1930 -1) in synthesis  stage  (vivado 
xilinx ) in terms of circuit speed. In our method the circuit 
speed is improved by 26.72% . 
In Fig. 7, we compare critical path delay in 2 -tier and 4 -
tier 3D FPGA. In addition, we do this comparison for the 
minimum channel width (Fig. 8) and transistor count (Fig. 9) 
parameters. As can be seen in related charts along with Table. 
4, the critical path delay  in the 4-tier chip decreases  by 
15.95% compared to the 2-tier. The enhancement is 15.92% 
for channel width. In this transition, the area just increases by 
1.96% in 4 -tier, which is negligible in comparison to the gap 
between two -dimensional and 2 -tier three -dimensional 
FPGAs.   
Table. II.  Comparison between TPR  and proposed CAD flow  in 
terms of TSV count, critical path delay and total wirelength ( WL)  
 TPR  Proposed  
Circuit  TSV#       Delay        WL TSV#       Delay         WL 
ex5p  116           4.26          12361       109           2.58           11657  
misex3  175           3.82          12894     153           4.31           11561  
apex2  192           5.71          18653  168           3.92           17319  
apex4  182           5.43          17069  146           5.01           18235  
alu4 124           5.67          11364  109           2.68           9987  
seq 203           4.92          17246  172           3.62           16023  
des 126           3.09          19143  112           1.93           17462  
pdc 526           6.88          73649  542           4.07           71482  
ex1010  340           6.34          56173  314           4.02           54320  
elliptic  391           7.58          38195  409           3.84           36412  
clma  637           7.96          103742  617           5.79           97378  
Average  273.82       5.51         34589  259.18      3.79            32894  
Imp(%)  +5.34      + 31.14       +5.16  
 
Fig. 7. comparing circuit delay between 2 -tier and 4 -tier 
 
Fig. 8. comparing track number in routing channels between 2 -tier and 4-
tier 
 
Fig. 9. Comparing transistor count between 2 -tier and 4 -tier 
 
02004006008001000TSV#
Parti-SA
 Proposed
01234567CPD(ns)
2-tier
 4-tier
010203040Channel width
2-tier
 4-tier
010203040Area( ×106)
2-tier
 4-tierV. CONCLUSION  
In this paper, a complete flow has been developed for 
implementation of logic circuits on the 3D FPGAs. The 
results show that in comparison to 2D FPGA with 2 -tier 3D 
FPGA, th e important properties such as circuit delay and 
minimum channel width are improved by 28.6 6% and 
29.92 %, respectively. Meanwhile, the total area (all tiers) 
only increases by 8.86%. Also, in the comparison between 
3D FPGA with 2 -tier and 4 -tier, the resul t shows that the 
circuit speed increases by 15.95% and the channel width 
decrease by 15.92% while the increase in total area is 
negligible . Our results show three -dimensional FPGA with 
four tiers is better than two tiers. 
 
Table. III.  Comparison between 2D and 3D FPGA  
Circuit  ex5p  apex2  alu4 seq ex1010  elliptic  clma  
2D CPD (ns) 
 
Wmin 
 
Area  
(×106) 3.44 
 
24 
 
3.16 5.18 
 
34 
 
6.38 3.41 
 
28 
 
4.79 4.78 
 
36 
 
5.67 6.27 
 
48 
 
13.96  6.08 
 
36 
 
11.43  7.92 
 
48 
 
30.94  
3D CPD (ns) 
 
Wmin 
 
Area  
(×106) 2.58 
 
18 
 
3.41 3.92 
 
26 
 
7.01 2.68 
 
18 
 
4.96 3.62 
 
22 
 
6.17 4.02 
 
36 
 
15.39  3.84 
 
26 
 
12.64  5.79 
 
32 
 
34.17  
IMPROVEMEN T:        DELAY  =  +28.66%         W MIN = +29.92%          AREA = -8.86%  
REFERENCES  
[1] C. Ababei et al., "Placement and routing in 3D integrated circuits," in 
IEEE Design & Test of Computers, vol. 22, no. 6, pp. 520 -531, Nov. -
Dec. 2005, doi: 10.1109/MDT.2005.150.  
[2] G. E. Moore, " Cramming More Components On to Integrated 
Circuits ," in Electronics Magazine , vol. 38, no. 8, pp. 114 -117. Apri l 
1965  
[3] H. Jahanirad, "CC -SPRA: Correlation Coefficients Approach for 
Signal Probability -Based Reliability Analysis," in IEEE Transactions 
on Very Large Scale Integration (VLSI) Systems, vol. 27, no. 4, pp. 
927-939, April 2019, doi: 10.1109/TVLSI.2018.28860 27. 
[4]  H. Jahanirad, " Efficient reliability evaluation of combinational and 
sequential logic circuits ", in J Comput Electron 18, 343 –355, 2019, 
https://doi.org/10.1007/s10825 -018-1288 -4 
[5] M. Savari, H. Jahanirad , " NN-SSTA: A deep neural network approach 
for statistical static timing analysis  ," in Expert Systems with 
Applications, 149, 113309 , 2020  
[6] International Technology Roadmap for Semiconductors (ITRS). 2015 
edition. [online], available:  
https://www.dropbox.com/sh/3jfh5fq634b5yqu/AADYT8V2Nj5bX6
C5q764kUg4a?dl=0  
[7] I. Kuon and J. Rose, "Measuring the Gap Between FPGAs and ASICs," 
in IEEE Transactios on Compu ter-Aided Design of Integrated Circuits 
and Systems, vol. 26, no. 2, pp. 203 -215, Feb. 2007, doi: 
10.1109/TCAD.2006.884574.  
[8] K. E. Murray, O. Petelin, S. Zhong, J. M. Wang, M. ElDafrawy, J. -P. 
Legault, E. Sha, A. G. Graham, J. Wu, M. J. P. Walker, H. Zeng, P. 
Patros, J. Luu, K. B. Kent and V. Betz "VTR 8: High Performance 
CAD and Customizable FPGA Architecture Modelling", ACM 
TRETS, 2020  
[9] G. Karypis, R. Aggarwal, V. Kumar and S. Shekhar, "Multilevel 
hypergraph partitioning: applications in VLSI domain," in IE EE 
Transactions on Very Large Scale Integration (VLSI) Systems, vol. 7, 
no. 1, pp. 69 -79, March 1999, doi: 10.1109/92.748202.  
[10] N. Siddique and H. Adeli, “Simulated Annealing, Its Variants and 
Engineering Applications,” International Journal on Artificial 
Intelligence Tools, vol. 25, no. 06, p. 1630001, 2016.  [11] X. Geng, Z. Chen, W. Yang, D. Shi, K. Zhao, “Solving the traveling 
salesman problem based on an adaptive simulated annealing algorithm 
with greedy search”, Appl. Soft Comput. 11(4)(2011)3680 –3689  
[12] E. Hopp er, B. Turton, A review of the application of meta -heuristic 
algorithms to 2d  strip packing  problems,  Artif.  Intell.  
Rev.16(4)(2001)257 –300. 
[13] N. Leite, F. Melício, & A. C. Rosa, “A fast simulated annealing 
algorithm for the examination timetabling problem ”. Expert Systems 
with Applications. doi:10.1016/j.eswa.2018.12.048 , 2018.  
[14] P. Subramanian,  N. Ramkumar,  T. T. Narendran,   & K. Ganesh, 
“PRISM: PRIority based SiMulated annealing for a closed loop supply 
chain network design problem ”. Applied Soft Computing, 13(2), 1121 –
1135. doi:10.1016/j.asoc.2012.10.004 , 2013.  
[15] M. Z. Allahyari , & A. Azab, “Mathematical modeling and multi -start 
search simulated annealing for unequal -area facility layout problem,” 
in Expert Systems with Applications, 91, 46 –62. 
doi:10.1016/j.eswa.2017.07.049, 2018.  
[16] H. Y. Zhu, M. S. Zhang, Y.  F. He, & Y.  H. Huang, “Floorplanning for 
3D-IC with Through -Silicon via co -design using simulated annealing , 
” 2018 IEEE International Symposium on Electromagnetic 
Compatibility and 2018 IEEE Asi a-Pacific Symposium on 
Electromagnetic Compatibility (EMC/APEMC). 
doi:10.1109/isemc.2018.8393839  
[17] G. Sergey, Z. Daniil and C. Rustam, "Simulated Annealing Based 
Placement Optimization for Reconfigurable Systems -on-Chip," 2019 
IEEE Conference of Russian Youn g Researchers in Electrical and 
Electronic Engineering (EIConRus), Saint Petersburg and Moscow, 
Russia, 2019, pp. 1597 -1600, doi: 10.1109/EIConRus.2019.8657251.  
[18] K. Miyazaki et al., "General -Purpose Clocked Gate Driver IC With 
Programmable 63 -Level Drivabil ity to Optimize Overshoot and 
Energy Loss in Switching by a Simulated Annealing Algorithm," in 
IEEE Transactions on Industry Applications, vol. 53, no. 3, pp. 2350 -
2357, May -June 2017, doi: 10.1109/TIA.2017.2674601.  
[19] A. Fakheri Tabrizi, L. Behjat, W. Swartz , & L. Rakai,  “A fast force -
directed simulated annealing for 3D IC partitioning  Integration, ” in the 
VLSI Journal, 55, 202 –211. doi:10.1016/j.vlsi.2016.06.003 . 2016 . 
[20] E. Nasiri, J. Shaikh, A. Hahn Pereira and V. Betz, "Multiple Dice 
Working as One: CAD Flo ws and Routing Architectures for Silicon 
Interposer FPGAs," in IEEE Transactions on Very Large Scale 
Integration (VLSI) Systems, vol. 24, no. 5, pp. 1821 -1834, May 2016, 
doi: 10.1109/TVLSI.2015.2478280.  
[21] V. Pangracious , Z. Marrakchi, H. Mehrez , “Field Progr ammable 
Gate Arrays: An Overview , three -dimensional design methodologies 
for tree -based FPGA architecture ”. Springer, New York . 2015  
[22] M. Morshedzadeh, A. Jahanian, & P. Pourashraf,  “Three -dimensional 
switchbox multiplexing in emerging 3D -FPGAs to reduce chip 
footprint and improve TSV usage , ” Integration, the VLSI Journal, 50, 
81–90. 2015  
[23] B. K. Kaushik, M. K. Majumder, A. and Kumari, “Fabrication and 
Modelling of Copper and Carbon Nanotube Based Through -Silicon 
Via, Design of 3D Integrated Circuits  and Systems”. CRC Press/Taylor 
& Francis Group, Boca Raton, FL.  2014.  
[24] N. Sherwani , “Algorithms for VLSI Physical Design Automation ”, pp. 
219-286, 2002 . 
[25] P. Jamieson, K. B. Kent, F. Gharibian and L. Shannon, "Odin II - An 
Open -Source Verilog HDL Synthesis T ool for CAD Research," 2010 
18th IEEE Annual International Symposium on Field -Programmable 
Custom Computing Machines, Charlotte, NC, 2010, pp. 149 -156, doi: 
10.1109/FCCM.2010.31.  
[26] Berkeley Logic Synthesis and Verification Group. (2018). ABC: A 
system for se quential synthesis and verification. Release, 3, 26.  
[27] S. Gupta,  M. Hilbert, S. Hong, R. Patti, “Techniques for Producing 3D 
ICs with High -Density Interconnect“ in VLSI Multi -Level 
Interconnection Conference, 2004.  
[28] H. Jahanirad, “Co-evolutionary Approach to Reduce Soft Error Rate of 
Implemented Circuits on SRAM_based FPGA ,” in  International 
Journal of Computer Applications , 180, 42-49, 2018.  
[29] Predictive technology model, available [online] : 
http://ptm.asu.edu/latest.html  
[30] S. Chtourou, M. Abid, Z. Marrakchi, E. Amouri and H. Mehrez, "On 
Exploiting Partitioning -Based Placement Approach for Performances 
Improvement of 3D FPGA," 2017 International Conference on High 
Performance Computing & Simulation (HPCS), Genoa, 2017, pp. 572 -
579, doi: 10.1109/HPCS.2017