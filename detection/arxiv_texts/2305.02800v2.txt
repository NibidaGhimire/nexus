arXiv:2305.02800v2  [cs.CC]  27 Nov 2023On the Parameterized Complexity of the Perfect
Phylogeny Problem
Jorke M. de Vlas
Utrecht University, the Netherlands; Link¨ oping Universi tet, Sweden
Abstract. This paper categorizes the parameterized complexity of the
algorithmic problems Perfect Phylogeny andTriangulating Col-
ored Graphs when parameterized by the number of genes and colors,
respectively. We show that they are complete for the paramet erized com-
plexity class XALP using a reduction from Tree-chained Multicolor
Independent Set and a proof of membership. We introduce the prob-
lemTriangulating Multicolored Graphs as a stepping stone and
prove XALP-completeness for this problem as well. We also sh ow that,
assuming the Exponential Time Hypothesis, there exists no a lgorithm
that solves any of these problems in time f(k)no(k), wherenis the input
size,kthe parameter, and fany computable function.
Keywords: Perfect phylogeny ·Triangulated graphs ·XALP ·Param-
eterized complexity ·W-hierarchy.
Acknowledgements. This paper was written as a master thesis at
Utrecht University. I wish to thank my supervisors Hans L. Bo dlaender
and Carla Groenland for the discussions and guidance.
1 Introduction
A phylogeny is a tree that describes the evolution history of a set Sof species.
Every vertex corresponds to a species: leafs correspond to spe cies from S, and
internal vertices correspond to hypothetical ancestral specie s. Species are char-
acterized by their gene-variants, and the quality of a phylogeny is d etermined
by how well it represents those variants. In particular, a phylogen y isperfectif
each gene-variant was introduced at exactly one point in the tree. That is, the
subset of vertices that contain the variant is connected. Perfect Phylogeny
is the algorithmic problem of determining the existence of a perfect e volutionary
tree. It has large implications on determining the evolutionary histor y of genetic
sequences and is therefore of major importance. This application is not limited
to biology: it can also be used to determine the history of languages o r cultures.
The concept of phylogenies as an algorithmic problem has been well re -
searched since the 60s. The ﬁrst formal deﬁnition of Perfect Phylogeny
was given by Estabrook [10]. In 1974, Buneman showed that the pro blem can
be reduced to the more combinatorial Triangulating Colored Graphs [6]2 J.M. de Vlas
which by itself has also become an important, well-studied problem. An inverse
reduction, andthus equivalence, wasgivenbyKannanand Warnow[1 2]. In 1992,
Bodlaender et al showed that Perfect Phylogeny is NP-complete [3].
After Downey and Fellows introduced parameterized complexity [8], p eople
have tried to determine the complexity of Perfect Phylogeny when seen as a
parameterized problem. There are two main ways to parameterize t he problem:
either byusingthe numberofgenesorbyusingthe maximumnumber o fvariants
for each gene. In the second case, the problem becomes FPT [13]. In the ﬁrst
case,the parameterizedcomplexitywasunknown.Therearesome partialresults:
On one hand, it was shown that the problem is W[t]-hard for every t[2]. On
the other hand, there exists an algorithm that runs in O(nk+1) time and space
(wherenis the input size and kthe parameter) which implies that the problem
is contained in XP [14].
In this paper we will close this gap and show that Perfect Phylogeny
is complete for the complexity class XALP, which is a relatively new para m-
eterized complexity class that was introduced by Bodlaender et al in [5]. We
will show XALP-completeness by giving a reduction from the XALP-co mplete
problem Tree-chained Multicolor Independent Set ,usingTriangulat-
ing Multicolored Graphs as a stepping stone. This makes Perfect Phy-
logeny the ﬁrst example of a “natural” problem that is XALP-complete and
allows it to be used as a starting point for many other XALP-hardnes s proofs.
Finally, we use the same reduction to give some lower bounds depende nt on the
Exponential Time Hypothesis.
2 Deﬁnitions and Preliminary Results
All problems in this paper are parameterized. This means that the inp ut con-
tains a parameter separate from the rest of the input which allows u s to analyze
the runtime as a function of both the input and the parameter. If a parame-
terized problem with input size nand parameter kcan be solved in O(f(k)nc)
time (with fany computable function and cany constant), we say that it is
Fixed Parameter Tractable (FPT). A parameterized reduction is an algorithm
that transforms instances of one parameterized problem into inst ances of an-
other parameterized problem, runs in FPT time, and whose new para meter is
only dependent on the old parameter. A log-space reduction is a parameterized
reduction that additionally only uses O(f(k)log(n)) space. These reductions
form the base of all parameterized complexity classes: all classes a re deﬁned up
to equivalence under one of these reductions.
We use the following deﬁnition of Perfect Phylogeny , which is a param-
eterized version of the original deﬁnition from Estabrook [10].On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 3
Perfect Phylogeny (PP)
Input:A setGof genes, for each gene g∈Ga setVgof variants, and a set
Sof species, where each species is deﬁned as a tuple of gene-variant s (exactly
one per gene)
Parameter: The number of genes
Question: Does there exist a tree Tof species (not necessarily from S) that
containsallspeciesfrom Sandwherethesubtreeofspeciescontainingaspeciﬁc
gene-variant is connected?
Triangulated and Colored Graphs. A graph is coloredif every vertex is
assigned a color. The graph is properly colored if there are no edges between
vertices ofthe same color.For anycycle Cin a graph,a chordis an edge between
two vertices of Cthat are not neighbors on C. A graph is triangulated if every
cycle of length at least four contains a chord. A triangulation of a graph is a
supergraph that is triangulated. We now deﬁne the problem Triangulating
Colored Graphs , which was ﬁrst given by Buneman [6].
Triangulating Colored Graphs (TCG)
Input:A colored graph G
Parameter: The number of colors used
Question: Does there exist a properly colored triangulation of G?
We now introduce a multicolored variant of this problem. A graph is multi-
coloredif every vertex is assigned a (possibly empty) set of colors. The gra ph is
properly multicolored if there are no edges between vertices which share a color.
This gives us the following problem:
Triangulating Multicolored Graphs (TMG)
Input:A multicolored graph G
Parameter: The number of colors used
Question: Does there exist a properly multicolored triangulation of G?
This problem is equivalent to Triangulating Colored Graphs under
parameterized reductions. The general idea is to replace every mu lticolored ver-
tex with a clique of normally colored vertices. A full proof is given in app endix
section A. We now deﬁne a tree decomposition and state some well-kn own prop-
erties of triangulated colored graphs.
Deﬁnition 1 (Tree Decomposition). Given a graph G= (V,E), a tree de-
composition is a tree Twhere each vertex (bag) is associated with a subset of
vertices from T. This tree must satisfy three conditions:
–For each vertex v∈V, there is at least one bag that contains v.
–For each edge e∈V, there is at least one bag that contains both endpoints
ofe.
–For each vertex v∈V, the subgraph of bags that contain vis connected.
Proposition 1. LetGbe a (multi)colored graph and Cbe a cycle.4 J.M. de Vlas
(i) Suppose there exist two colors such that every vertex fro mCis colored with
at least one of these colors. Then Gadmits no properly (multi)colored trian-
gulation.
(ii) Letvbe any vertex from C. In every triangulation of Gthere is either an edge
betweenv’s neighbors (in C) or a chord between vand some non-neighbor
vertex from C.
(iii)Gadmits a properly colored triangulation if and only if Gadmits a tree
decomposition where each bag contains each color at most onc e.
Proof.Omitted from main text. See appendix section C. ⊓ ⊔
XALP. AnewcomplexityclassinparameterizedcomplexitytheoryisXALP[5].
Intuitively, it is the natural home of parameterized problems that a reW[t]-hard
for every tand contain some hidden tree-structure. For Perfect Phylogeny ,
this tree-structure is the required phylogeny. For Triangulating Colored
Graphs, it is the tree decomposition arising from Proposition 1(iii).
Formally, XALP is the class of parameterized problems that are solva ble
on an alternating Turing machine using O(f(k)log(n)) memory and at most
O(f(k) + log(n)) co-nondetermenistic computation steps, where nis the input
size and kis the parameter. It is closed under log-space reductions. On Down ey
and Fellows’ W-hierarchy, it lies between W[t] and XP: XALP-hardness implies
W[t]-hardness for every tand XALP membership implies XP-membership.
An example of an XALP-complete problem is Tree-chained Multicolor
Independent Set [5]. It is deﬁned as a tree-chained variant of the well-known
Multicolor Independent Set problem.
Multicolor Independent Set (MIS)
Input:A colored graph G
Parameter: The number of colors used
Question: DoesGcontain an independent set consisting of exactly one vertex
of each color?
Tree-Chained Multicolor Independent Set (TCMIS)
Input:A binary tree T, for each vertex (bag) B∈Ta colored graph
GB= (VB,EB) which we view as an instance of Multicolor Independent
Set, and for each edge e∈Ta set of extra edges Eebetween the graphs cor-
responding to the endpoints of e.
Parameter: The maximum number of colors used in each instance of MIS
Question: Does there exist a solution to each instance of MIS such that for
each of the extra edges at most one of the endpoints is contained in the solu-
tion?
3 Main Results
In this section we will state the main result and explore some of its cor ollaries.
We postpone the proof to the next sections.On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 5
Theorem 1. Triangulating Colored Graphs is contained in XALP.
Theorem 2. There exists a log-space reduction from Tree-chained Multi-
color Independent Set toTriangulating Multicolored Graphs . This
reduction has a linear change of parameter.
We will prove Theorem 1 in section 4. For Theorem 2, we describe the r eduction
in section 6 and prove correctness of this reduction in appendix sec tion B.
Theorem 3 (Main Result). The problems Perfect Phylogeny ,Trian-
gulating Colored Graphs andTriangulating Multicolored Graphs
are all XALP-complete.
Proof.CombineTheorem 1,Theorem 2andtheequivalencesbetweenthese three
problems. ⊓ ⊔
We now use these complexity results to show some lowerbounds on th e space
and time usage of Perfect Phylogeny . In the remainder of this section, let
nbe the input size, kthe parameter, fany computable function and cany
constant. We start with a bound on the runtime based on the Expon ential Time
Hypothesis.
Proposition 2. Assuming ETH, the problems Perfect Phylogeny ,Trian-
gulating Colored Graphs andTriangulating Multicolored Graphs
cannot be solved in f(k)no(k)time.
Proof.We use as a starting point that, assuming ETH, the problem Multi-
color Independent Set cannot be solved in f(k)no(k)time [7]. A trivial
reduction to Tree-chained Multicolor Independent Set using a single-
vertex tree then shows the same for that problem. Since the redu ction given in
Theorem 2 has a linear change in parameter we obtain the same lower b ound
forTriangulating Multicolored Graphs . Finally, using the equivalences
proven in section A and the known equivalences between TCG and PP ( all with
no change in parameter), the result follows. ⊓ ⊔
We now bound the space usage based on the Slice-wise Polynomial Spa ce
Conjecture (SPSC). This conjectures that Longest Common Subsequence
cannot be solved in both nf(k)time and f(k)ncspace [15].
Corollary 1. Assuming SPSC, the problems Perfect Phylogeny ,Trian-
gulating Colored Graphs orTriangulating Multicolored Graphs
cannot be solved in both nf(k)time and f(k)ncspace.
Proof.This proof uses the parameterized complexity class XNLP, which is de -
ﬁned as the class of parameterized problems that are solvable on a d etermenistic
Turing machine using O(f(k)log(n)) memory. Comparing this with the deﬁni-
tionofXALPshowsthatXALP-hardnessimpliesXNLP-hardness.Sin ceLargest
Common Subsequence is XNLP-complete [9], SPSC applies to all XNLP-hard
problems and consequently also to all XALP-hard problems such as t he three
problems from this corollary. ⊓ ⊔
Comparedwiththeexistingalgorithmthatrunsin O(nk+1)timeandspace[14],
these are close but not tight gaps.6 J.M. de Vlas
4 XALP Membership of Triangulating Colored Graphs
In this section we will prove Theorem 1.
Recallthat Triangulating Colored Graphs asksustodeterminewhether
a colored graph can be triangulated. Because of Proposition 1(iii), t his is equiv-
alent to ﬁnding a tree decomposition where each bag contains each c olor at most
once. We claim that it is equivalent to ﬁnd a tree decomposition where e ach bag
contains each color exactlyonce.
Lemma 1. A colored graph admits a tree decomposition where each bag co ntains
each color at most once, if and only if it admits a tree decompo sition where each
bag contains each color exactly once.
Proof.Omitted. See appendix section C. ⊓ ⊔
We can now prove XALP membership.
Proof (of Theorem 1). Weconstructan alternatingTuringmachine(ATM) that,
given an instance of Triangulating Colored Graphs , determines whether
there exists a tree decomposition that contains each color exactly once. As a
refresher, an ATM is a Turing machine that has access to both nond etermenistic
and co-nondeterministic branching steps. A nondetermenistic ste p leads to AC-
CEPTifatleastonesuccessorstateleadstoACCEPTandaco-nond etermenistic
step leads to ACCEPT if all successor states lead to ACCEPT.
Our Turing machine is based on the XP-time algorithm we mentioned be-
fore [14]. We use the following claim without proof: given a graph G, a determin-
istic Turing machine can determine the whether two vertices belong t o the same
connected component in logarithmic space and polynomial time [16]. R epeated
application of this result allows us to branch on all connected compon ents of a
graph using several co-nondeterministic steps.
LetGbe any colored graph. The Turing machine will use nondeterminis-
tic steps to determine how to modify each bag compared to its paren t and
co-nondeterministic steps to simultaneously verify all subtrees. A precise formu-
lation is given below:
–Usingknondeterministic steps, determine an initial bag Swhich contains
one vertex of each color. During computations that lead to ACCEPT , each
Swill be a bag from the tree decomposition.
–Keep track of some vertex ithat is initially NULL. This will signify the
parent of the current bag S.
–Repeat the following until an ACCEPT or REJECT state is reached:
•Determine all components of G\S. Using a co-nondeterministic step, we
branchintoeverycomponentexcepttheonethatcontains i.Ifthisresults
in zero branches (e.g. when there are no other components), ACC EPT.
•LetCbe the component our current branch is in. We determine a vertex
v∈Cwith a nondeterministic step.
•Determine the vertex w∈Sthat has the same color as v. SinceS
contains one vertex of every color, wexists.On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 7
•Ifwis adjacent to any vertex from C, REJECT. This means that the
current guess for how to modify Sis incorrect.
•ModifySby adding vand removing w. Setitow.
Overall, this alternating Turing machine constructively determines a rooted tree
decompositionifoneexistsandthussolves Triangulating Colored Graphs .
It also satisﬁes the memory requirement: the only memory usage is t he setS,
a constant number of extra vertices, and the memory needed to b ranch on con-
nected components. Since memory of a vertex uses O(log(n)) space and |S|=k,
we need O(klog(n)) space. We also use polynomial time: the time usage in the
computation of each bag is a constant plus the time needed to ﬁnd th e connected
components which results in polynomial time overall.Finally, we require at most
O(n) co-nondeterministic computation steps: each co-nondeterminis tic step cor-
respondstobranchingintoasubtreeofthe eventual(rooted) t reedecomposition.
Since each subtree introduces at least one vertex that is used now here else in
the tree, there are at most O(n) subtrees.
Overall, we conclude that Triangulating Colored Graphs is contained
in XALP. ⊓ ⊔
5 Zipper Chains and Gadgets
In this section we will introduce two multicolored graph components, thezipper
chainand the zipper gadget . Their most important property is Proposition 4
which says that a zipper gadget has a ﬁxed number of triangulations . This will
be used in the XALP-hardness proof to represent a choice.
Deﬁnition 2. A zipper chain is a multicolored graph that consists of two pa ths
PandQ, not necessarily of the same length. The vertices of PandQare re-
spectively labeled as p1,p2,...andq1,q2,....
The vertices are colored in 7 colors, with 2 colors per vertex . For ease of
explanation, the colors are grouped in three groups with siz es 1, 2, and 4. The
ﬁrst group contains one color awhich is added to odd-labeled vertices from Pand
even-labeled vertices from Q. The second group contains the color bPwhich is
added to even-labeled vertices of Pand the color bQwhich is added to odd-labeled
vertices of Q. The third group contains four colors c1,c2,c3andc4whereciis
added to vertices in Pwhose index is equivalent to i(mod 4) and vertices in Q
whose index is equivalent to i+2(mod 4).
To summarize:the colorson path Pareac1,bPc2,ac3,bPc4,ac1,...and those
ofQarebQc3,ac4,bQc1,ac2,bQc3,.... This is visualized in Figure 1.
This color pattern repeats every four vertices. We call such a rep etition a
toothof the zipper chain. If a triangulation of the zipper chain contains an edge
between some tooth of Pand some tooth of Qand at least one endpoint of this
edge contains the color a, we say that these two teeth are locked together .
Proposition 3. LetGbe a graph containing a zipper chain (P,Q)and assume
that there is a cycle that fully contains both PandQ. Any triangulation of G8 J.M. de Vlas
satisﬁes the following properties. Because of symmetry, al l properties also hold
withPandQreversed.
(i) There is no edge between two non-adjacent vertices of P.
(ii) If there exist two edges between PandQwhich share an endpoint in P, then
the common endpoint in Pis connected to all vertices of Qthat lie between
the other two endpoints.
(iii) If(pi,qj)is an edge, then either (pi+1,qj)or(pi,qj+1)is also an edge (as
long as either pi+1orqj+1exists).
(iv) If(pi,qj)is an edge and picontains the color a, then(pi+1,qj+1)is also an
edge (as long as both pi+1andqj+1exist). Here, qj+1contains the color a.
(v) If the i-th tooth of Pand thej-th tooth of Qare locked together, then the
i+1-th tooth of Pand thej+1-th tooth of Qare also locked together.
(vi) Each tooth from Pis locked together with at most one tooth from Q.
Proof.We prove the statements in order.
(i) If, to the contrary, such an edge does exist, then this edge to gether with the
rest ofPforms a cycle whose vertices alternate between the colors aandbP.
Because of Proposition 1(i) such a cycle cannot be triangulated.
(ii) Becauseofpart(i),thecycleformedbythesetwoedgesandth epathbetween
the two endpoints on Qcan only be triangulated by adding edges with an
endpoint in P.
(iii) If (pi+1,qj) is not an edge then Proposition 1(ii) shows that pimust be
connected to another vertex in the cycle. Because of part (i) this neighbor
is a vertex from Q. Because of part (ii) pimust then also be connected to
qj+1.
(iv) Without loss of generality, say that pialso contains the color c1. Then,qj
must have the colors bQandc3: all other color combinations share a color
withpi. Sinceqj+1andpiboth contain the color athere is no edge between
them so part (iii) implies that there is one between pi+1andqj. Sincepi+2
andqjshare the color c3, the same argument implies that there is an edge
between pi+1andqj+1.
ac1 bPc2ac3 bPc4ac1 bPc2ac3 bPc4
bQc3ac4bQc1ac2bQc3ac4bQc1ac2P:
Q:a tooth from P another tooth from P
a tooth from Q another tooth from Q
Fig.1.A zipper chain.On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 9
ac1 bPc2ac3 bPc4ac1 bPc2ac3 bPc4
bQc3ac4bQc1ac2bQc3ac4bQc1ac2P:
Q:
Fig.2.A possible triangulation of a zipper chain.
bPbPac1 bPc2ac3 bPc4ac1 bPc2ac3
bQc3ac4bQc1ac2bQc3ac4bQc1ac2bQc3ac4bQc1ac2P:
Q:
Fig.3.A zipper gadget of size 2 and skew 1.
(v) Apply part (iv) four times to the edge connecting the i-th andj-th teeth of
PandQ(respectively) to obtain an edge connecting the i+1-th and j+1-th
teeth ofPandQ(respectively).
(vi) Suppose to the contrary that a tooth from Pis locked together with two
teeth from Q. After some applications of parts (iii) and (iv) we ﬁnd that the
last vertex from the tooth from P(which has colors bPandc3) is connected
tothe lastvertexfromboth teeth from Q.Becauseofpart(ii),it isconnected
to all four vertices of the tooth from Qwith the higher index. At least one
of these also contains the color c3so this is a contradiction.
⊓ ⊔
Zipper Gadgets. We now introduce the zipper gadget . It is a zipper chain with
a speciﬁc length and a head and tail. An example is given in Figure 3.
Deﬁnition 3. A zipper gadget of size nand skew s(satisfying n >0,s≥0) is
a zipper chain with the following modiﬁcations:
–The path Pcontains 4n−1vertices, and thus nteeth. The last tooth misses
one vertex.
–The path Qcontains 4(n+s)vertices, and thus n+steeth.
–There are two additional vertices with just the color bP: a head hand a tail
t. The head is connected to the ﬁrst vertices of PandQand the tail to the
last vertices of PandQ.
Proposition 4. There are exactly s+1ways to triangulate a zipper gadget with
skews. These ways are identiﬁed by the oﬀset at which the teeth lock together.
Proof.Observe that the entire gadget forms a cycle, so Proposition 3 app lies.
Consider a vertex from Pthat contains the color a. Its neighbors share the color10 J.M. de Vlas
bPbPac1 bPc2ac3 bPc4ac1 bPc2ac3
bQc3ac4bQc1ac2bQc3ac4bQc1ac2bQc3ac4bQc1ac2P:
Q:
Fig.4.One of the two triangulations of the zipper gadget from Figur e 3. This one has
oﬀset 0.
bP, so Proposition 1(ii) shows that this vertex must be connected to s ome other
vertex from the cycle. This cannot be h,tor another vertex from Psince that
would introduce a cycle containing only the colors aandbP. Hence, the other
endpoint must be a vertex from Q. This shows that each tooth from Pis locked
together with at least one tooth from Q.
Proposition 3(vi) now shows that each tooth from Pis locked together with
exactly one tooth from Q. Let∆be the index of the tooth locked together with
the ﬁrst tooth of P. Proposition 3(v) now shows that any tooth with index i
must be connected to tooth i+∆. SinceQhassmore teeth than P, the oﬀset
∆must be between 0 and s. We conclude that there are at most s+1 ways to
triangulate a zipper gadget with oﬀset sand that these ways are identiﬁed by
the oﬀset.
To complete the proof, we now show that each case can actually be e xtended
into a triangulation of the zipper gadget. Let ∆be the target oﬀset. We add the
following edges:
–An edge between the head hand every vertex from the ﬁrst ∆teeth from
Q.
–Edges between the i-th tooth from path Pand thei+∆-th tooth from Q
according to the pattern described in parts (iii) and (iv) of Proposit ion 3.
This includes one overlap edge between the last vertex of each toot h fromP
and the ﬁrst vertex from the next tooth from Q.
–An edge between the tail tand every vertex from the last s−∆teeth from
Q.
An example of such a triangulation is given in Figure 4. One can observe that
this construction indeed triangulates the zipper gadget. ⊓ ⊔
6 XALP-hardness of Triangulating Multicolored Graphs
In this section we describe the reduction from Theorem 2. The intuit ion is as
follows. We want to reduce from Tree-chained Multicolor Independent
Set, which comes down to selecting a vertex from each color for each ins tance of
Multicolor Independent Set . These choices must be compatible: we mayOn the Parameterized Complexity of the Perfect Phylogeny Pr oblem 11
not choose two vertices which share an edge. The selection of a ver tex will be
done by creating zipper gadgets and interpreting each possible tria ngulation as a
choiceofavertex.Thecompatibilitycheckswillbe donebycombiningt wozipper
gadgets in a way that makes it impossible to simultaneously triangulate both
zipper gadgets in the respective choices. This construction borro ws a technique,
namely on how to create and combine gadgets from the TCMIS tree, from the
XALP-completeness proof for Tree Partition Width from [4]. The actual
gadgets and their combination procedure are new.
Let an instance of TCMIS be given. Let Tandkbe the (binary) tree and
parameterfromthisinstance.Foranynode n∈T,wehaveanassociatedinstance
ofMulticolor Independent Set consisting of a set of vertices Scfor each
colorc. Without loss of generality, we can assume that all sets Schave the same
size, say r+1: if not, then we can add extra vertices to Scthat are connected
to all other vertices and thus never occur in an independent set. W e also assume
thatScis ordered in some way. This allows us to refer to vertices as vn,c,iwhere
nis the node from T,cis the color, and iis the index in Sc(which, for ease
of explanation, is zero-based). We also have a set of edges E, which we again
assume to be ordered in some way. Each edge connects two vertice svn1,c1,i1and
vn2,c2,i2wheren1andn2are either the same node or neighbors in Tand where
c1andc2are distinct if n1=n2. Letm:=|E|be the total number of edges.
First, we transform Tinto a rooted tree T′by choosing any node u∈T,
adding two new nodes vandwand two edges ( u,v) and (v,w), and setting w
as the root. This way, each node from the original tree Thas a parent and a
grandparent in T′. We now construct a graph Gwhich will be an instance of
TMG. It will consist of several zipper gadgets in which some vertices have been
identiﬁed with each other: that is, where some vertices with distinct colors are
merged into one vertex with the combined set of colors. For each no deninT
and each color cin its associated instance of Multicolor Independent Set ,
we add a zipper gadget zn,cof size 2mr+ 1 and skew r. The middle tooth of
pathP(with index mr+1) is special: we call it the middle. We now say that
this zipper gadget starts in n, passes through the parent of nand ends in the
grandparent of n. This is supported with some vertex identiﬁcations: for each
nodeninT′, we identify the heads of all zipper gadgets starting at n, the tails
of all zipper gadgets ending at n, and the last vertex of the middles (with colors
c4andbP) of all zipper gadgets that pass through n. Observe that the path P
of each zipper gadget now consists of msets ofrteeth between its head and
middle, and also msets ofrteeth between its middle and tail.
Each zipper gadget is assigned its own set of 7 colors such that no tw o zipper
gadgets which start, pass through, or end in a common node share a color. We
claim that this can be done using at most 7 ksets of 7 colors. Assign colors to
nodes in order of distance to the root of T′(closest to the root ﬁrst). Let nbe
the current node. All zipper gadgets that have already been assig ned colors and
intersect with zipper gadgets starting from nare those that start at either: n’s
parent, the other child of n’s parent ( n’s sibling), n’s grandparent, the other
child ofn’s grandparent ( n’s uncle), or any of the two children from that vertex12 J.M. de Vlas
(n’s cousins). In total, this is at most 6 kother zipper gadgets. To color the k
zipper gadgets starting at n, we can thus use the remaining 7 k−6k=ksets of
7 colors.
In a triangulation of G, each zipper gadget will represent a choice of a vertex
fromSc: if the zipper gadget is triangulated with oﬀset ∆, then we choose the
vertex with index ∆fromSc. Each of the msets ofrteeth between head and
middle or between middle and tail will represent a restriction regardin g one of
the edges. For each edge ei(with index i) with endpoints vn1,c1,i1andvn2,c2,i2
we want to exclude the possibility of simultaneously triangulating the z ipper
gadgetzn1,c1with oﬀset i1and the zipper gadget zn2,c2with oﬀset i2. This is
done as follows.
Let (P1,Q1) and (P2,Q2) be the paths which form the zipper gadgets. We
now identify two vertices from P1andP2and add a new color dto some vertices
fromQ1andQ2. This is visualized in Figure 5. The idea is that if we would
triangulate both zipper gadgets in a way that adds edges between t he vertices
withcolor dandthemergedvertex,thenanytriangulationofbothzippergadg ets
together forces an edge between the verticeswith the color dwhich is impossible.
We now describe exactly which vertices should be modiﬁed.
We consider two cases: either n1andn2are the same node or they are
neighbors in T. In the ﬁrst case, we consider the tooth with index irfrom both
P1andP2and identify the ﬁrst vertex from these teeth with each other. We also
consider tooth ir+i1fromQ1and tooth ir+i2fromQ2and add a new color
dto the ﬁrst vertex of these teeth. In the second case, we assum e without loss
of generality that n1is the parent of n2. We do almost the same as in the ﬁrst
case, except that we use the second half of the zipper gadget zn2,c2: we identify
the ﬁrst vertex of tooth irfromP1and tooth mr+1+irfromP2, and we add
colordto the ﬁrst vertex of tooth ir+i1fromQ1and tooth mr+1+ir+i2
fromQ2.
This completes the construction. Observe that this construction uses 49k+1
colors(7ksetsof7colorsforthe zippergadgetsand oneforthe extracolor d) and
thus that the change in parameter is linear. Also observe that the c onstruction
can be performed in logarithmic working space since the creation and merging
of the zipper gadgets only require local information from the origina l TCMIS
instance. This shows that we indeed have a logspace reduction.
The proof that this TMG instance admits a triangulation if and only if th e
original TCMIS instance admits a solution is a direct result of the intuit ive
insights mentioned during the construction and thus omitted from t he main
text. A full proof is given in appendix section B.
7 Future Research
Letnbe the input size, kthe parameter, fany computable function, cany con-
stant, and ǫany small positive constant. We have shown that Perfect Phy-
logeny andTriangulating Colored Graphs are XALP-complete and that
(assuming ETH) there exist no algorithms that solve any of them in f(k)no(k)On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 13
dd
P1:
Q1:P2:Q2:
Fig.5.How two zipper gadgets are combined: two vertices from P1andP2are merged
into one vertex and two vertices from Q1andQ2are given the extra color d.
time. This increases the number of “natural” problems in the complex ity class
XALP and gives more reason to determine properties of this complex ity class.
Additionally, these problems can be used as a starting point for XALP -hardness
reductions for other parameterized problems.
Another future research direction might be to close or reduce the gaps be-
tween the current upper and lower bounds on space and time usage . For the
time gap, there is a lower bound of f(k)no(k)(assuming ETH) and an upper
bound of O(nk+1) [14]. For the space gap on algorithms that run in nf(k)time,
there is a lower bound of f(k)nc(assuming SPSC) and an upper bound of again
O(nk+1) [14]. One way to close the time gap could be by assuming the Strong
ExponentialTimeHypothesis (SETH). We expect that,assumingSE TH,a lower
bound like f(k)nk−ǫshould be possible.
We also rule out a research direction. Triangulating a colored graph c omes
down to ﬁnding a tree decomposition where each bag contains each c olorat most
once. A similar problem would be to instead look for a pathdecomposition where
each bag contains each color at most one. This problem, known as Intervaliz-
ing Colored Graphs , is already NP-complete for the case k= 4 [1].
References
1. Bodlaender, H.L., de Fluiter, B.: On intervalizing k-col ored graphs for
dna physical mapping. Discrete Applied Mathematics 71(1), 55–77 (1996).
https://doi.org/10.1016/S0166-218X(96)00057-1
2. Bodlaender, H.L., Fellows, M.R., Hallett, M.T., Wareham , H., Warnow, T.J.: The
hardness of perfect phylogeny, feasible register assignme nt and other problems
on thin colored graphs. Theoretical Computer Science 244(1), 167–188 (2000).
https://doi.org/10.1016/S0304-3975(98)00342-9
3. Bodlaender, H.L., Fellows, M.R., Warnow, T.J.: Two strik es against perfect phy-
logeny.In:Kuich,W.(ed.)19thInternationalColloquium o nAutomata, Languages
and Programming, ICALP 1992. pp. 273–283. Springer Berlin H eidelberg, Berlin,
Heidelberg (1992)14 J.M. de Vlas
4. Bodlaender, H.L., Groenland, C., Jacob, H.: On the parame terized complex-
ity of computing tree-partitions. In: Dell, H., Nederlof, J . (eds.) 17th Interna-
tional Symposium on Parameterized and Exact Computation, I PEC 2022. LIPIcs,
vol. 249, pp. 7:1–7:20. Schloss Dagstuhl — Leibniz-Zentrum f¨ ur Informatik (2022).
https://doi.org/10.4230/LIPIcs.IPEC.2022.7
5. Bodlaender, H.L., Groenland, C., Jacob, H., Pilipczuk, M ., Pilipczuk, M.: On the
complexity of problems on tree-structured graphs. In: Dell , H., Nederlof, J. (eds.)
17th International Symposium on Parameterized and Exact Co mputation, IPEC
2022. LIPIcs, vol. 249, pp. 6:1–6:17. Schloss Dagstuhl — Lei bniz-Zentrum f¨ ur In-
formatik (2022). https://doi.org/10.4230/LIPIcs.IPEC. 2022.6
6. Buneman,P.: Acharacterisation ofrigid circuit graphs. Discrete Mathematics 9(3),
205–212 (1974). https://doi.org/10.1016/0012-365X(74) 90002-8
7. Chen, J., Chor, B., Fellows, M., Huang, X., Juedes, D., Kan j, I., Xia, G.: Tight
lower bounds for certain parameterized NP-hard problems. I n: 19th IEEE An-
nual Conference on Computational Complexity. vol. 19, pp. 1 50– 160 (2004).
https://doi.org/10.1109/CCC.2004.1313826
8. Downey, R.G., Fellows, M.R.: Fixed-parameter tractabil ity and complete-
ness I: Basic results. SIAM Journal on Computing 24(4), 873–921 (1995).
https://doi.org/10.1137/S0097539792228228
9. Elberfeld, M., Stockhusen, C., Tantau, T.: On the space an d circuit
complexity of parameterized problems: Classes and complet eness. Algo-
rithmica 71(3), 661–701 (2015). https://doi.org/10.1007/s00453-01 4-9944-y,
https://doi.org/10.1007/s00453-014-9944-y
10. Estabrook, G., Johnson, C., McMorris, F.: A mathematica l foundation for the
analysis of cladistic character compatibility. Mathemati cal Biosciences 29(1), 181–
187 (1976). https://doi.org/10.1016/0025-5564(76)9003 5-3
11. Gavril, F.: The intersection graphs of subtrees in trees are exactly the
chordal graphs. Journal of Combinatorial Theory, Series B 16(1), 47–56 (1974).
https://doi.org/10.1016/0095-8956(74)90094-X
12. Kannan, S., Warnow, T.: Inferring evolutionary history from DNA sequences. In:
31st Annual Symposium on Foundations of Computer Science, F OCS 1990. pp.
362–371 vol.1 (1990). https://doi.org/10.1109/FSCS.199 0.89555
13. Kannan, S., Warnow, T.: A fast algorithm for the computat ion and
enumeration of perfect phylogenies. SIAM Journal on Comput ing
26(6), 1749–1763 (1997). https://doi.org/10.1137/S009753 9794279067,
https://doi.org/10.1137/S0097539794279067
14. McMorris, F.R., Warnow, T.J., Wimer, T.: Triangulating vertex-colored
graphs. SIAM Journal on Discrete Mathematics 7(2), 296–306 (1994).
https://doi.org/10.1137/S0895480192229273
15. Pilipczuk, M., Wrochna, M.: On space eﬃciency of algorit hms working on struc-
tural decompositions of graphs. ACM Trans. Comput. Theory 9(4), 18:1–18:36
(2018). https://doi.org/10.1145/3154856
16. Reingold, O.: Undirected connectivity in log-space. Jo urnal of the ACM 55(4), 1–
24 (2008). https://doi.org/10.1145/1391289.1391291
A Triangulating Multicolored Graphs
In this appendix section we will prove the equivalence of Triangulating Col-
ored Graphs (TCG) and Triangulating Multicolored Graphs (TMG).
We begin with two lemmas.On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 15
Lemma 2. LetGbe a graph and Ta tree decomposition of G. Then for each
cliqueCthere is a bag in Twhich fully contains C.
Proof.We use induction on the size of C. For|C|= 1 and |C|= 2, the result
follows directly from the deﬁnition of tree decomposition. Now suppo se that
|C|>2 and let vbe a vertex from C. By induction hypothesis, there must be
a bagBrthat contains C\ {v}. Consider Tas a rooted tree with Bras root.
LetTvbe the subtree of bags that contain v, and let Bvbe the lowest common
ancestor of all bags in Tv. Because Tvis connected, v∈Bv.
For any w∈C\ {v}, (v,w) is an edge so there must be a bag Bw∈Tv
that contains both vandw. Now,wis contained in both a descendant ( Bw)
and ancestor ( Br) ofBv, sow∈Bv. Since this holds for any w∈C\ {v}, we
conclude that C⊂Bvwhich completes the induction. ⊓ ⊔
Some notation: for a graph G= (V,E), tree decomposition T, and vertex set
C⊂V, we deﬁne TCas the subset of bags in Tthat contain C.
Lemma 3. LetTbe a tree where each vertex (bag) is associated with a subset
of vertices from G. ThenTis a tree decomposition of Gif and only if: for each
cliqueCinG,TCis nonempty and connected.
Proof.(⇒): LetTbe a tree satisfying this condition. All three conditions to
being a tree decomposition follow directly from the fact that single ve rtices and
edges are cliques.
(⇐): LetTbe a tree decomposition. Let Cbe any clique. Lemma 2 shows
thatTCis nonempty. We now show that it is connected. Let B1,B2be two bags
that fully contain C. For any vertex v∈C, we know that T{v}is connected, so
every bag on the path between B1andB2contains v. Since this holds for any
v∈C, the bags between B1andB2fully contain C. It follows that TCcontains
every bag between B1andB2. Since this holds for any B1andB2, we conclude
thatTCis connected. ⊓ ⊔
We now prove the equivalence.
Theorem 4. The problems Triangulating Colored Graphs andTrian-
gulating Multicolored Graphs are equivalent under parameterized reduc-
tions. The parameter does not change under these reductions .
Proof.The right implication is trivial: each instance of TCG is also an instance
of TMG and each corresponding solution to TMG is also a solution to the TCG
instance. We focus on the left implication. Let G= (V,E) be an instance of
TMG (with kcolors). Construct a graph G′as follows. For each vertex v∈V
(withkvcolors) we create a clique Cvcontaining kvvertices, each colored in one
of the colors of v. For each edge ( v,w)∈Ewe add an edge between each pair
of vertices from CvandCwto turnCv+Cwinto a large clique. The resulting
graphG′= (V′,E′) is now an instance of TCG. We claim that it has a solution
if and only if the original TMG instance has a solution.16 J.M. de Vlas
First Direction. LetTbe atreedecomposition of Gthat respectsthe multicol-
oring. For each vertex v, we replace each occurrence of vin bags of Twith all the
verticesfrom Cv. Call the result T′. We ﬁrst showthat T′is a tree decomposition
ofG′using Lemma 3.
Let a clique C′⊂V′be given. For any vertex v∈V, we know that a bag of
T′contains either all vertices from Cvor none. This implies the following: if C′
contains some (but not all) vertices from Cv, then the set of bags that contain
C′is the same as the set of bags that contain C′∪Cv. Hence, without loss of
generality we may assume that C′contains either all vertices from Cvor none.
Now, let Cbe the set of vertices v∈Vsuch that Cv⊂C′. By construction
ofT′, we have that any bag in Tcontains Cif and only if the corresponding bag
inT′contains C′. SinceTCis a nonempty subtree, we ﬁnd that T′
C′must also
be a nonempty subtree. As this holds for any C′, we conclude that T′is a tree
decomposition.
Additionally, T′respects the coloring: each vertex from Vsplits into a clique
Cv⊂V′which contains the same colors. Hence, each bag in Tcontains precisely
the same colors as the corresponding bag in T′which implies that T′cannot
contain a color more than once. This completes the ﬁrst direction.
Second Direction. LetT′be a tree decomposition of G′that respects the
coloring. We now construct the tree Tas follows: Thas the same shape as T′,
and a bag in Twill contain a vertex vif and only if the corresponding bag in T′
contains every vertex from Cv. We ﬁrst show that Tis a tree decomposition.
Let a clique C⊂Vbe given. A bag in Tnow contains Cif and only if
the corresponding bag in T′contains Cvfor each vertex v∈C. This set C′:=/uniontext
v∈CCvis a clique: each Cvis a clique itself and for each two cliques Cv,Cwwe
have that vandware connected in G(sinceCis a clique) and consequently that
every vertex from Cvis connected to every vertex from Cw. Now, the alternate
deﬁnition of tree decomposition shows that T′
C′is a nonempty subtree. This
implies that TCis one as well. Since this holds for any clique C, we conclude
thatTis a tree decomposition.
Additionally, Trespects the coloring: each bag in Tcorresponds to a bag in
T′that contains the same colors (and possibly some more). Since T′respects
the coloring, Tmust do so as well. This completes the second direction.
We have now shown that the constructed instance of TCG is equivale nt to
the original instance of TMG. Each vertex in Gsplits into at most kvertices in
G′, and each edge splits into at most k2edges in G′. Hence, G′contains at most
nkvertices, mk2edges and kcolors. Since this is polynomially many more than
the original instance and since the parameter kdid not change, the reduction is
polynomial. This completes the proof. ⊓ ⊔On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 17
B Full Proof of XALP-hardness
In this section we will show that the construction given in section 6 ad mits a
triangulation if and only if the original TCMIS instance admits a solution . This
completes the proof of Theorem 2.
First Direction. We will ﬁrst show that if the TMG instance can be triangu-
lated, then there is a solution to the TCMIS instance. Suppose that the TMG
instance admits a triangulation. Because of Proposition 1(iii) this tria ngulation
corresponds with a tree decomposition.
We ﬁrst introduce some lemmas on tree decompositions.
Lemma 4 ([3, Proposition 4]). LetGbe a graph and Pa path between two
verticesv,w. In any tree decomposition TofG, letB1andB2be two bags such
thatv∈B1andw∈B2. Now, each bag on the path from B1fromB2inT
contains at least one vertex from P.
Lemma 5. LetGbe a multicolored graph and Pa path between two vertices
v,wwhose vertices alternate between two colors. In any tree dec omposition Tof
G, letB1andB2be two bags such that v∈B1andw∈B2. Now, each vertex
fromPis contained in at least one bag on the path from B1fromB2inT.
Proof.Omitted. See section C. ⊓ ⊔
Because of Proposition 4, each zipper gadget zn,cis triangulated with some
oﬀsetin,cbetween 0 and r. We now claim that, for each node nand color c,
choosing the in,c-th vertex of Scforms a solution to the TCMIS instance. To
show this, we only need to show that we have chosen at most one end point for
each edge from the TCMIS instance. Let ejbe an edge with endpoints vn1,c1,i1
andvn2,c2,i2, let (P1,Q1) and (P2,Q2) be the paths of the corresponding zipper
gadgetszn1,c1andzn2,c2, and suppose to the contrary that zn1,c1andzn1,c1are
triangulated with oﬀsets i1andi2(respectively). We consider two cases, either
n1=n2or they are neighbors in T.
In the ﬁrst case, the head, the middle and the ﬁrst vertex of toot hjrof the
pathsP1andP2are pairwise identiﬁed with each other. We label these vertices
ash,m, andurespectively. Let BhandBmbe (any) bags that contain hand
m(respectively). Note that there are four paths on Gbetween handm: each
zipper gadget introduces two paths. Also, each of these paths alt ernates in color.
Because of Lemma 5, there must be a bag B′on the path between BhandBm
that contains u. Because of Lemma 4, B′must contain a vertex from both Q1
andQ2, sayv1andv2.
We now claim that v1andv2both contain the color d. First consider v1, the
other case is analogous. Since P1was triangulated with oﬀset i1, the vertex u
must be connected to some vertex from tooth ir+i1fromQ1. Sinceuhas colors
aandc1, the vertex from Q1can not have those colors. That leaves only one
option: the ﬁrst vertex (with colors bQandc3). This is precisely the vertex that
was given the color din the construction, which completes the claim.18 J.M. de Vlas
We now have a contradiction: B′contains two vertices with color d(one from
each zipper gadget). This shows that we cannot have chosen both endpoints of
ejand completes the ﬁrst case.
The second case is almost analogous. We assume without loss of gene rality
thatn1is a parent of n2. We now have that the head, middle, and ﬁrst vertex
of tooth ir+i1fromzn1,c1are (respectively) identiﬁed with the middle, tail,
and ﬁrst vertex of tooth mr+1+ir+i2fromzn2,c2. We now apply the same
reasoning as in the ﬁrst case on these vertices. Overall, this comple tes the ﬁrst
direction.
Second Direction. We will now show that if the TCMIS instance has a so-
lution, then the TMG instance can be triangulated. For each node nand color
c, the TCMIS solution consists of a choice of some vertex in,c. In the TMG
instance, this will correspond to a triangulation of the zipper gadge tzn,cwith
oﬀsetin,c. This alone is not enough to obtain a triangulation; we need to add
more edges. We will do this by creating a colored tree decomposition, which
corresponds to a triangulation because of Proposition 1(iii).
We describe the tree decomposition in three steps. In the ﬁrst ste p, we add
a bagBnfor each node nofT′. This bag contains the shared vertex from all
zipper gadgets that start, pass through, or end in n. It also contains a vertex of
the path Qfrom each of those zipper gadgets: the ﬁrst vertex for each zipp er
gadget that starts in n, the last vertex for each zipper gadget that ends in n,
and the ﬁrst vertex of tooth rm+ 1 +∆(where∆is the oﬀset of this zipper
gadget) for each zipper gadget that passes through n.
In the second step we will add m−1 bags between each pair of bags from
the previous step. Let n1andn2be two adjacent nodes from T′and letB1and
B2be the corresponding bags from the previous step. Without loss of general-
ity, we assume that n2is the parent of n1. We now create a sequence of bags
B′
0,B′
1,...,B′
mwithB′
0:=B1andB′
m:=B2. The path between B′
i−1andB′
i
will correspond to the edge i.
Each bag B′
iwill contain the ﬁrst vertex from the ir-th tooth of the path P
for every zipper gadget that starts at B1and passes through B2. Additionally,
it will contain the ﬁrst vertex of the ir+∆-th tooth of the path Qfor those
zipper gadgets. Similarly, for zipper gadgets that pass through B1and end at
B2, it will contain the ﬁrst vertex from the mr+1+ir-th tooth of Pand the
ﬁrst vertex from the mr+1+ir+∆-th tooth of Q. This completes the second
step.
Note that all the bags we have added so far do not contain any color more
than once: each two zipper gadgets that share a common start, e nd, or middle
vertex have distinct colors. Furthermore, each bag contains the extra color dat
most once: each bag B′
ionly contains the color difn1contains an endpoint of
edgeiand if the zipper gadget corresponding to the color of that endpoin t was
triangulated with the proper oﬀset. That is, if we chose the endpoin t. Since the
TCMIS instance chooses at most one endpoint for each edge, B′
icontains the
extra color dat most once.On the Parameterized Complexity of the Perfect Phylogeny Pr oblem 19
Recall that in the construction of the TMG instance, each edge iresulted in
merging a vertex from two paths Pfor the zipper gadgets that correspond to its
endpoints. In the bags we have added so far, this merged vertex d oes not cause
a problem: it ends up in the same bag when viewed from both zipper gad gets.
In the third step, we add more bags between two adjacent bags fr om the
previous step. Let B′
iandB′
i+1be two adjacent bags that correspond to the
edgei. Recall that these bags each contain the ﬁrst vertex of some too th for
some set of zipper gadgets. Also, the vertices between them do no t contain any
merged vertices; those where all handled in the previous steps.
For each zipper gadget on its own, we could easily complete the tree d ecom-
position between these bags using the tree decompositions that co rrespond to
the triangulations of the zipper gadgets (note that these are pat hs). For the set
of zipper gadgets as a whole, we need some care to avoid adding the c olordto
the same bag twice. We do this by “sliding along” the zipper gadgets on e by
one: we start with some bags where we partially follow the triangulatio n of one
zipper gadget, then add some bags where follow the triangulation of a second
zipper gadget, and so on. We may also slide a bit further along the sam e zipper
gadget multiple times. The exact order is described below.
–First, ifB′
icontains the color dbecause of some zipper gadget, slide along
that zipper gadget for 1 tooth. This way, the current bag no longe r contains
the extra color d.
–Now, loop over every zipper gadget one by one except possibly the o ne that
causesB′
i+1to contain the color d. For each such zipper gadget, slide along
it until we arrive at the tooth contained in bag B′
i+1. During this, there may
have been some bags which contain the color dbut it will not be in the
current bag when we continue to the next zipper gadget.
–Finally, handle the zipper gadget that causes B′
i+1to contain the color d(if
it exists). We slide over it until we reach the vertex contained in B′
i+1. Here,
the ﬁnal bag will contain the color d.
This completes the third step and thus also the construction of the tree de-
composition. Because of the arguments given during the construc tion, each bag
contains each color at most once. Since all bags consist of an interlo cking of
sliding along the zipper gadgets, we have that each vertex is contain ed in a con-
nected subtree and that the endpoints of each edge are containe d in some bag.
This proves that the above construction is indeed a tree decompos ition. We con-
clude that a tree decomposition exists, and consequently that the TMG instance
has a solution. This completes the second direction.
Overall, we have now shown that the original TCMIS instance admits a
solution if and only if the constructed TMG instance does. This comple tes the
proof of Theorem 2. ⊓ ⊔
C Remaining Proofs
This section includes some proofs that were omitted from the main te xt.20 J.M. de Vlas
Proof (of Proposition 1). We prove the parts in order.
(i) Consider a triangulation of G. We use induction on the size of C. If|C|= 3,
then one of the two colors must occur at least twice, hence one of t he edges
fromCconnects two vertices sharing a color. If |C| ≥4, thenCcontains a
chord. This chord splits Cinto two smaller cycles which share the chord as
a common edge. Applying the induction hypothesis on one of these cy cles
shows that Gcannot be triangulated into a properly colored graph.
(ii) Consideratriangulationof Gand supposetothe contrarythat both theedge
and the chord do not exist. We use induction on the size of C. If|C|= 3,
thenv’s neighbors are connected. If |C| ≥4, thenCcontains a chord. This
chord cannot connect v’s neighbors or have vas an endpoint. Hence, it splits
Cinto two smaller cycles (which share the chord as a common edge) suc h
that both vand its neighbors are contained in one of them. Applying the
induction hypothesis on this cycle completes the proof.
(iii) For colored graphs, the left implication was shown in [6] and the righ t im-
plication in [11]. The proof for multicolored graphs is very similar to the
colored version and thus omitted.
⊓ ⊔
Proof (of Lemma 1). The right implication is trivial. We focus on the left im-
plication. Let Tbe a tree decomposition. If there is a color that is contained
in some but not all bags, then there must exist two adjacent bags B1,B2such
thatB1does not contain a vertex with this color and B2does. We can then
add this vertex from B2toB1and observe that the result is still a valid tree
decomposition where each bag contains each color at most once. By repeating
this argument, we must eventually reach a state where every bag c ontains all
colors. ⊓ ⊔
Proof (of Lemma 5). Letube a vertex from Pand suppose to the contrary
that no bag on the path from B1andB2contains u. We split Pinto two parts:
P1fromvtouandP2fromutow. LetB3be (any) bag that does contain
u. Because of Lemma 4, each bag on the path from B1toB3contains some
vertex from P1. Analogously, each bag on the path from B3toB2contains
some vertex from P2. SinceTis acyclic, the paths between B1,B2andB3
must intersect in some point, so there is a bag Bwhich lies on all three paths.
This bag then contains a vertex from P1, a vertex from P2, and it does not
containu. In particular, it contains two non-adjacent vertices from P. That
means that, in the corresponding triangulation of G, there is an edge between
two non-adjacent vertices of P. This edge combined with pinduces a cycle which
alternates between two colors and that is impossible because of Pro position 1(i).
Hence, we arrive at a contradiction. ⊓ ⊔