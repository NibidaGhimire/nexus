arXiv:2301.07191v3  [math.CO]  18 Jun 2024A NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX
ANTONIO RIESER
Abstract. We present a new, inductive construction of the Vietoris-Ri ps complex, in which we
take advantage of a small amount of unexploited combinatori al structure in the k-skeleton of the
complex in order to avoid unnecessary comparisons when iden tifying its ( k+ 1)-simplices. In
doing so, we achieve a signiﬁcant reduction in the number of c omparisons required to construct
the Vietoris-Rips compared to state-of-the-art algorithm s, which is seen here by examining the
computational complexity of the critical step in the algori thms. In experiments comparing a
C/C++ implementation of our algorithm to the GUDHI v3.9.0 so ftware package [5], this results
in an observed 5-10-fold improvement in speed of on suﬃcient ly sparse Erd˝ os-R´ enyi graphs with
the best advantages as the graphs become sparser, as well as f or higher dimensional Vietoris-Rips
complexes. We further clarify that the algorithm described in [2] for the construction of the
Vietoris-Rips complex is exactly the Incremental Algorith m from [9], albeit with the additional
requirement that the result be stored in a tree structure, an d we explain how these techniques
are diﬀerent from the algorithm presented here.
1.Introduction
The Vietoris-Rips complex of a point cloud, or, equivalently, the clique complex of a graph, is the
canonical tool for the calculating homology groups associated to a point cloud, and has been since
nearly the beginning of the emergence of topological data analysis. Needless to say, using the best
possible algorithm for the construction of the complex is of paramou nt importance, particularly
since the construction of these complexes has a worst-case comp lexity which is exponential in the
number of points, and even the complexity of constructing the k-skeleton has a worst-case lower
bound of O(n(k+1)), where nis the number of vertices in the complex. (See, for instance, [4] fo r a
discussion of the complexity of computing homology from a point cloud , in addition to a presentation
of a quantum algorithm which provides an exponential improvement o ver the worst-case classical
scenario.) Fortunately, however, the computation of clique comple xes for sparse graphs may be
considerably faster in practice, particularly when one only needs to compute a low-dimensional
skeleton of the complex, as is the usual practice in topological data analysis. Nonetheless, even
with this restriction, computing the persistent homology of large da ta sets tends to be rather slow,
limiting its practical application. While computing Euler characteristic c urves [7, 8, 3] and the
Euler characteristic transform [1] is considerably faster than com puting persistent homology, this,
too, requires the initial construction of a ﬁltered simplicial complex w hen the original input data is
This work was partially supported by the CONACYT Investigad oras y Investigadores por M´ exico Project #1076,
the grant N62909-19-1-2134 from the US Oﬃce of Naval Researc h Global and the Southern Oﬃce of Aerospace
Research and Development of the US Air Force Oﬃce of Scientiﬁ c Research, the National Science Foundation Grant
No. DMS-1929284 while the author was in residence at the Inst itute for Computational and Experimental Research
in Mathematics in Providence, RI, during the ”Math + Neurosc ience: Strengthening the Interplay Between Theory
and Mathematics” program, and the National Science Foundat ion Grant No. DMS-1928930 while the author was in
residence at the Mathematical Sciences Research Institute (MSRI), now the Simons Laufer Mathematical Sciences
Institute (SLMath).
1A NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 2
in the form of a point cloud. It is therefore essential to develop tec hniques and software designed
to speed up the construction of the simplicial complexes used in topo logical data analysis, with the
ultimate goal of making topological techniques more tractable for a wider range of data sets.
To the best of the author’s knowledge, the algorithms described in [2 ] and [9], and, in particular,
the implementation of the Incremental-VR algorithm from [9] in the G UDHI software package [5],
represent the current state-of-the-art for the constructio n of the Vietoris-Rips complex. In [9],
Zomorodian proposes three algorithms: ﬁrst, an intuitive, inductiv e construction of the Vietoris-
Rips complex (the Inductive-VR algorithm); second, the Incremen tal-VR algorithm, which is a
reﬁnement of the Inductive-VR algorithm designed to avoid some re petitive calculations performed
using its more naive predecessor; and, ﬁnally, a construction of th e Vietoris-Rips complex which
proceeds by ﬁnding the maximal cliques of a graph, the Maximal-VR alg orithm. He then studies
their relative performance on a number of diﬀerent data sets, and ﬁnds that, on most of the data
sets, the Incremental-VR Algorithm indeed outperforms the othe rs, although with the important
caveat that, unlike the others, the Maximal-VR algorithm’s perform ance may be improved through
parallelization, even if its single-threaded performance is signiﬁcant ly slower than the other two.
In [2], Boissonnat and Maria introduce the simplex tree data structu re, and present an algorithm
that is equivalent to the Incremental-VR algorithm of [9], with the add itional requirement that
the simplicial complex be stored in a tree. While unreported in [2], the imp lementation of the
Incremental-VR algorithm in GUDHI v3.9.0 uses a merge algorithm to co mpute the intersection in
the critical step, which we brieﬂy describe in Section 4 below. One or a nother of these algorithms
have been implemented in almost every topological analysis software package which has been written
to date, a non-exhaustive list of which is given in [6].
In this article, we present a new algorithm for the construction of t he Vietoris-Rips complex in
which the combinatorial structure of the complex is exploited to avo id a large number of unnecessary
calculations. We discuss the computational complexity of the critica l step in constructing the k-
skeleton from the ( k−1)-skeleton when applied to Erd˝ os-R´ enyi graphs G(n,p), showing that this
step in the New-VR algorithm has complexity O(np(k−1)), whereas the corresponding step in the
best Incremental-VR algorithm as implemented in GUDHI v3.9.0 is expec ted to have an average
complexity of least O(pn), resulting in an overall advantage for the New-VR algorithm, part icularly
whenpis small and the dimension is large. We then present several experime nts where we compute
the Vietoris-Rips complexes of Erd˝ os-R´ enyi graphs using both t he Incremental-VR algorithm and
our New-VR algorithm, in which our algorithm performs approximately as expected: nearly ten
times faster for suﬃciently sparse Erd˝ os-R´ enyi graphs when c ompared to the Vietoris-Rips complex
construction in GUDHI v3.9.0, with at least a 5-fold improvement in mos t of the regimes which
we tested. (The values of pwhich we were able to take were unfortunately limited by memory
constraints.) While the current implementations of our algorithm are slower than GUDHI v3.9.0 for
suﬃciently dense graphs in dimensions 2 and 3 and for complete graph s, we believe that the superior
performance achieved by GUDHI v3.9.0 in these regimes to be the res ult of optimizations in other
parts of the GUDHI v3.9.0 codebase (which is highly optimized relative t o the experimental code
to which it was compared) and not in the Vietoris-Rips construction it self. Indeed, this hypothesis
supported by the observation that the GUDHI v3.9.0 code outperf orms ours on complete graphs,
when the number of comparisons performed by both algorithms sho uld be the same. In dimensions
higher than 3, our software consistently outperforms GUDHI v3.9 .0 in speed, with the exception of
trials on complete graphs and those which were executed shortly be fore the program was killed for
lack of memory. We discuss these issues further in Section 7.A NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 3
The algorithm we introduce depends on two elementary observation s: First, given two distinct
n-cliquesσ0andσ1in a graph Gwhich share a common ( n−1)-clique ρ, to determine whether
τ:=σ0∪σ1is itself an ( n+ 1)-clique, we only need to verify the existence of a single additional
edge among the pairs of vertices in τ, since we know that the rest of the edges are contained in one
or the other of σ0andσ1. This edge, furthermore, is easily identiﬁed to be the pair {v0,v1}, where
vi=τ\σifori= 0,1. Second, every ( n+ 1)-clique in a graph can be uniquely identiﬁed by the pair
ofn-subcliques which is minimal among all such pairs with respect to the lex icographic ordering
on the pair and their vertices. (A precise deﬁnition of this ordering, as well as the exact statements
and proofs of the above assertions, are given in the Sections 2 and 3.) By taking advantage of the
additional structure provided by these observations, we are able reduce the number of computations
necessary to construct the clique complex, resulting in an increase in the speed of the algorithm.
Additionally, we mention how the Incremental-VR algorithm may be (em barrassingly) parallelized,
and explain how our algorithm is similarly embarrassingly parallelizable. We naturally expect that
parallelizing the implementation will lead to further improvements in spe ed.
2.Combinatorial preliminaries
We now give the statements and proofs of the combinatorial facts which underpin our construc-
tion of the Vietoris-Rips complex. The results are entirely elementar y, but we ﬁnd their simplicity
appealing, and we give their proofs in full. We begin with the following lemm a.
Lemma 2.1. LetSbe a set with|S|=n+ 1for some natural number n≥2, and suppose that the
subsetsS0,S1⊂Ssatisfy|Si|=nand that S0/\e}atio\slash=S1. Letti=S\Sifori= 0,1. Then the only pair
{a,b}⊂Swhich is not contained in one of the Siis{t0,t1}.
Proof. Without loss of generality, let S={ti|i∈{0,...,n}}. ThenS0={ˆt0,t1,t2,...,tn}, and
S0={t0,ˆt1,t2,...,tn}, where the notation ˆtiindicates that the element tiis not in the set. Now
note that every pair {ti,tj},i,j∈{2,...}is a subset of both S0andS1. We also have that every
pair of the form{t0,ti},i∈{2,...,n}is a subset of S1, and every pair{t1,ti},i∈{2,...,n}is a
subset of S0. We now see that the only pair contained in Sbut in neither of the Siis{t0,t1}./square
Theorem 2.2. LetG= (V,E)be an undirected graph, and let ΣGdenote the clique complex of G.
Suppose, furthermore, that there exist k-simplices σ0,σ1,σ0/\e}atio\slash=σ1, which share the (k−1)-faceρ.
Letvi=σi\ρfori= 0,1. If{v0,v1}∈E, thenσ0∪σ1is a(k+ 1)-simplex of ΣG.
Proof. Without loss of generality, let τ:={v2,...,v k}, and by hypothesis, we have that ρ=σ0∩σ1.
The theorem now follows directly from Lemma 2.1 with S=σ0∪σ1, andSi=σi. /square
The above theorem gives us a criterion for determining when two k-simplices form two faces of a
(k+ 1)-simplex, but since each ( k+ 1)-simplex has many k-faces, if we apply the criterion naively,
we risk constructing the same ( k+1)-simplex many times over unnecessarily. We will therefore need
a bookkeeping mechanism on the k-simplices which will allow us to track which ( k+ 1)-simplices
we have already created, and which candidates we still need to chec k. To this end, we introduce an
order on pairs of simplices of the same dimension which will enable us to id entify a ( k+ 1)-simplex
with its minimal pair of k-faces. We begin with the following deﬁnition.
Deﬁnition 2.3. Let Σ be a simplicial complex, and endow the vertices of Σ with a total o rder. For
every dimension k≥0 of Σ, we give the set of k-simplices the lexicographic order on their ordered
vertices, i.e. σ0< σ1iﬀ the ordered list of vertices of σ0is less than the ordered list of vertices of σ1
in the lexicographic order. We then deﬁne the relation <on pairs of distinct k-simplices{σ0,σ1},A NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 4
{τ0,τ1},σ0/\e}atio\slash=σ1,τ0/\e}atio\slash=τ1in a similar way. That is, ﬁrst, we order each pair so that, without loss of
generality, we may assume that σ0< σ1and that τ0< τ1. We will write such a pair ( σ0< σ1). We
then apply the lexicographic order to the set of such pairs, i.e.
(σ0< σ1)<(τ0< τ1) iﬀ/braceleftBigg
σ0< τ0,or
σ0=τ0andσ1< τ1.
We now have the following lemma.
Lemma 2.4. The relation <is a total order on the set of pairs of k-simplices for each dimension
k≥0.
Proof. We ﬁrst recall that the vertices of Σ are totally ordered, which implie s that the lexicographic
order on the k-simplices is a total order. The result follows. /square
The next theorem will be instrumental for our construction.
Theorem 2.5. LetΣbe a simplicial complex, and for each k≥0, let Σk+1denote the set of
(k+ 1)-simplices of Σ. Furthermore, let Pkbe the set of distinct pairs (σ0< σ1),σ0/\e}atio\slash=σ1of
k-simplices of Σsuch that
(a) If (σ0< σ1)∈Pk, thenτ:=σ0∪σ1∈Σk+1.
(b) If a pair (σ0< σ1)∈Pk, then (σ0< σ1)is minimal among all pairs of k-faces of any
common (k+1)-dimensional coface τ. Equivalently, σ0andσ1are the smallest and second-
smallest k-faces of τin the lexicographic order on k-simplices of Σ.
Then
(1) For every k >1, there is a bijection between PkandΣk+1.
(2) Ifk >1, then for every pair (σ0< σ1)∈Pk,σ0andσ1have a common (k−1)-faceρ∈Σ,
and, furthermore ρis the minimal (k−1)-face ofτ, and therefore also of of both σ0and
σ1.
Proof. First, by Item (a), there is a well-deﬁned map Ψ : Pk+1→Σk+1. By Item (b) and
Lemma 2.4, Ψ is injective, and by Lemma 2.4, for every τ∈Σk+1, there exists a minimal pair
(σ0< σ1) such that τ=σ0∪σ1, and therefore Ψ is surjective as well. We have therefore proven
Item 1.
To see Item 2, note that for any pair ( σ0< σ1)∈Pk,σ0andσ1arek-faces of a common
(k+ 1)-dimensional simplex by hypothesis, and therefore they share a common ( k−1)-faceρ.
Since the pair σ0< σ1is minimal among pairs of τ=σ0∪σ1, then writing τ= (t0,...,tk+1),
wherei < j =⇒ti< tj, it follows that σ0andσ1must be of the form σ0={t0,...,tk−1}and
σ1={t0,...,tk−2,ˆtk−1,tk}. Therefore the common face of σ0andσ1isσ0∩σ1={t0,...,tk−2},
which is the minimal ( k−1)-face of τ, as well as the minimal ( k−1)-face of both σ0andσ1./square
3.TheNew-VRAlgorithm
We now describe our algorithm, which builds the simplex tree of the simp licial complex Σ G,
where the latter is seen as a partial order on its vertex set. In this and the following, we abuse
notation and refer to nodes in the simplex tree both by the simplices t hey represent and by the
vertex label they are given.
Algorithm 3.1. (Serial) Initialization: Let G= (V,E) be a graph. Put a total order on the
vertices of the graph G. For each vertex v∈G, construct a node at level 0 of the simplex tree,A NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 5
and identify the edges Evfor which vis the smaller of its vertices. Create a node at level 1 in the
simplex tree for each edge einEv, and connect the node in the simplex tree corresponding to vto
every node corresponding to an edge e∈Ev.
Inductive step: Suppose that we have constructed a subset Dof the simplex tree of Σ which
has layers numbered 0 ,...,k and such that and element ρof the (k−1)-st layer of Dis connected
to and element σof the (k)-th layer of Diﬀρis the minimal ( k−1)-face of σ. We construct the
(k+ 1)-st layer of Din the following way: For each ρ∈D(k−1), letLρ⊂D(k) be the list of
elements in D(k) connected to ρinD, i.e.Lρis the list of k-simplices σ∈ΣGsuch that ρis the
minimal face of σ. For every ordered pair ( σ0< σ1) of simplices in Lρ, check whether the pair
{v0,v1}forms an edge in G, wherevi:=σ0∪σ1\σi. If{v0,v1}is an edge in G, then we add the
simplexτ:= to the ( k+ 1)-st layer of D, and we connect σ0toτ.
Note that, by construction, σ0is the smallest k-face of the newly created simplex τwith respect
to the lexicographic order.
The serial algorithm may be summarized by the following four methods . We begin with a
preliminary function which ﬁnds the neighbors of a vertex vin the graph Gwhose label is larger
than that of v.
Algorithm 1 Upper-Neighbors( G= (V,E),u∈V)
return{v∈V|u < v,{u,v}∈E}
The next function, Table-Lookup is the function which creates the list of children Mof a vertex
vin the simplex tree from an ordered list Lof the siblings of gand the (adjacency matrix of the)
graphG. Note that, in line 2, we may simply consider all elements in N, but including the condition
thatwbe also less than the largest neighbor of vslightly reduces the speed of the implementation
in practice, and similar conditions are included in the corresponding se ction of GUDHI v3.9.0.
Algorithm 2 Table-Lookup (G,N,L,v )
1:M←empty list
2:for all(w≤min{end(N),L(v)})do
3:if{v,w}∈Ethen
4: M←M∪{w}
5:end if
6:end for
7:return M
The function New-Add-Cofaces takes a simplicial complex Σ, assumed to be the clique complex
of the subgraph of G=V,E spanned by the vertices {n,...,v + 1}its vertices, a simplex τ∈Σ,
an ordered list Nof vertices which is assumed to be the largest vertices of the simplice s which
haveτas a minimal k-face, and an table Lwhich contains the value of the largest neighbor of
each vertex in the graph. Add-Cofaces then constructs a new sim plicial complex Σ′by adding to
Σ the simplex of the form τ′=τ∪{v}, for each v∈N, after which it constructs the new set
M:={w∈N|{v,w}∈E}which will become the children of vin the simplex tree. It then
recursively calls itself on τ′, Σ′, and the new set M.
TheNew-VR algorithm now applies New-Add-Cofaces to each vertex vof the graph G.A NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 6
Algorithm 3 New-Add-Cofaces( G= (V,E),d,τ,N, Σ,L)
1:Σ←Σ∪{τ}
2:ifdim(τ)≥dthen
3:return
4:else
5:for allv∈Ndo
6: σ←τ∪{v}
7: M←Table-Lookup (G,N,L,v )
8: New-Add-Cofaces( G,d,σ,M, Σ,L)
9:end for
10:end if
Algorithm 4 New-VR(G= (V,E),d)
Σ←V∪E
for allu∈Vdo
N←Upper-Neighbors (G,u)
New-Add-Cofaces (G,d,{u},N,Σ)
end for
return Σ
Algorithm 3.2. (Parallel) We parallelize the above algorithm by noting that the compar isons are
all independent of one another, and once we have two simplices in D(k) which share a common
(k−1)-face, we may begin constructing D(k+ 1).
Theorem 3.3. Given a graph G= (V,E), Algorithms 3.1 and 3.2 construct the clique-complex ΣG
ofG.
Proof. First, since Algorithm 3.2 is simply the parallelization of Algorithm 3.1, it is e nough to
prove that Algorithm 3.1 constructs the clique complex of G. This, however, follows from Theorems
2.2 and 2.5, and the fact that, at every layer D(k) of the simplex tree diagram, the criterion in
Theorem 2.2 is checked for every pair of k-simplices ( σ0< σ1) which share a common ( k−1)-face
ρ. /square
4.The Zomorodian Algorithms and the Simplex Tree
In this section, we describe the algorithms for constructing the Vie toris-Rips complex from [9]
and [2] and discuss the relationships between them. We ﬁrst give the deﬁnition of the Vietoris-Rips
complex.
Deﬁnition 4.1. LetG={V,E}be an undirected graph with vertices Vand edge set E. The
Vietoris-Rips (or clique) complex Σ of Gis the abstract simplicial complex given by
σ={v0,...,v n}∈Σ⇐⇒ ∀vi,vj∈σ,i/\e}atio\slash=j,{vi,vj}∈E.
Note that, by deﬁnition, σ∈Σ,σ′⊂σ=⇒σ′∈Σ, and therefore Σ is a simplicial complex.
We now recall the Inductive-VR construction from [9] (substitut ing upper neighbors for lower
neighbors for consistency with the notation in [2]). The Inductive-V R method does the following.A NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 7
Algorithm 5 Inductive-VR( G= (V,E),d)
Σ←V∪E
fori= 1 toddo
foreachk-simplex τ∈Σdo
N←/intersectiontext
v∈τUpper-Neighbors( G,v)
foreachw∈Ndo
Σ←Σ∪{τ∪{w}}
end for
end for
end for
return Σ
Starting with the graph, it adds the 2-dimensional cofaces of each edge, then the 3-dimensional
cofaces of each 2-d face, and so on.
The next method, the Iterative-VR construction from [9], rests o n the following observation:
Given ak-simplex τ′=τ∪{v}, whereτandτ′are both in the Vietoris-Rips complex, the ( k+ 1)-
dimensional cofaces of τ′such that all of their vertices have labels greater than vare exactly the
simplices of the form τ′∪{w}, wherew∈τ∩Upper-Neighbors( v). (Compare with Figure 2 in [2]).
TheAdd-Cofaces function for the Incremental-VR method is identical to the New-Add-Cofaces
except for at Line 7 below. Note that the sets Mis each case will be identical, but the methods to
calculate them are diﬀerent. This function takes a simplicial complex Σ , assumed to be the clique
complex of the subgraph of G=V,E spanned by the vertices {n,...,v + 1}its vertices, a simplex
τ∈Σ, and a collection Nof vertices which is assumed to be the intersection of the upper neig hbors
of each vertex in τ. Add-Cofaces then constructs a new simplicial complex Σ′by adding to Σ all
of the simplices of the form τ′=τ∪{v}, for each v∈N, after which it recursively calls itself on
τ′, Σ′, andM=N∩Upper-Neighors( v). This function is summarized here:
Algorithm 6 Add-Cofaces( G= (V,E),d,τ,N, Σ)
1:Σ←Σ∪{τ}
2:ifdim(τ)≥dthen
3:return
4:else
5:for allv∈Ndo
6: σ←τ∪{v}
7: M←N∩Upper-Neighbors (G,v)
8: Add-Cofaces( G,d,σ,M, Σ)
9:end for
10:end if
The Incremental-VR algorithm then results from applying Add-Cofa ces to each vertex v∈Vin
the graph, i.e.
Finally, the simplex tree data structure, introduced in [2], encodes a simplicial complex as an
directed tree (i.e. a tree with directed edges) where the edges are directed from parent nodes to
child nodes. Each node of a simplex tree has a label which is one of the v ertices of the graph,
and multiple nodes may (and usually do) have the same label. A simplex {v0,v1,v2,...,vk}, whereA NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 8
Algorithm 7 Incremental-VR
Σ←Σ∪{τ}
for allu∈Vdo
N←Upper-Neighbors (G,u)
Add-Cofaces (G,d,{u},N,Σ)
end for
return Σ
v0< v1<···< vkis represented in the tree as a (directed) path. That is, if {v0,v1,v2}is a simplex
in a simplicial complex Σ and v0< v1< v2, thenv0is inserted at level 0 of the corresponding simplex
tree,v1is its child, and v2is the child of v2, etc. which, in particular, gives a bijection between
k-dimensional simplices in a simplicial complex and the nodes in the k-th level of the simplex tree
(we deﬁne the level with vertices as level zero). The algorithm to cr eate the Vietoris-Rips complex
of a graph using a simplex tree data structure is exactly the same as the Incremental-VR algorithm
above, except that one is more speciﬁc about the data structure used to encode the simplicial
complex, and the set of vertices Mis inserted into the simplex tree as children of vat each step in
theAdd-Cofaces function above.
In the implementation of the Incremental-VR algorithm in the softwa re package GUDHI, the
intersection of the two sets in Line 7 of Algorithm 6 is performed using the following common merge
algorithm. Let L1andL2be two ordered lists. The speciﬁc intersection algorithm implemented in
GUDHI v3.9.0 is found in Algorithm 8:
Algorithm 8 GUDHI Merge-Intersect
1:I= empty list
2:v1←first element of L1
3:v2←first element of L2
4:while ((v1≤end(L1))&&(v2≤end(L2)))do
5:if(v1==v2)then
6: I←I∪{v1}
7: v1←the next element in L1
8: v2←the next element in L2
9:else if ((v1≥end(L2)||(v2≤begin (L1)))then
10: returnI
11:else if (v1< v2)then
12: v1←the next element in L1
13:else if (((v1≤end(L2))||(v2≥begin (L1))))then
14: returnI;
15:else
16: v2←the next element in L2
17:end if
18:end while
19:returnI
Although not mentioned in [2, 9], as in 3.2 above, the sub-complexes Σ iwhich result by applying
Add-Cofaces to vertices viare independent of each other, and they only require access to th e graphA NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 9
in order to construct. The incremental algorithm is therefore (em barrassingly) parallelizable, at
least assuming that the original graph is available to all of the parallel processes. Since the graph
is ﬁxed, this may be easily implemented in a number of ways.
5.The Complexity Difference Between the Incremental-VR and N ew-VR
Algorithms
We now brieﬂy discuss give a simple example which illustrates the diﬀeren ce in behavior be-
tween the Incremental-VR (GUDHI) and our New-VR algorithms. Co nsider the graph in Figure
1. Its clique complex, has 10 vertices, 4 faces, and a single 3-dimens ional simplex. The computa-
20 1 3 4 5
6
78910
Figure 1. Graph which demonstrates the extra comparisons performed by
Add-Coface . When adding node 10 as a child to node 2, the function
merge-intersect will compare 10 to all the nodes from 3 to 10. In
New-Add-Cofaces , however, only a table lookup at the coordinates (2 ,10) made,
saving 7 comparisons.
tionally intensive part of both algorithms is the passage from one leve l to the next in the simplex
tree. As we pass form level 2 in the tree (the 2-skeleton of simplicial complex) to level 3 (the
3-skeleton), in Incremental-VR , the algorithm computes the intersection M∩Upper-Neighbors(2)
usingmerge-intersect . SinceM={10}andUpper-Neighbors (2) ={3,..., 10}, the Incremental-
VR algorithm needlessly compares {2,3,...8,9}to 10 before ﬁnally adding v10 to the next level of
the simplex tree. Conversely, in the New-VR algorithm, the only table look-up which is performed
is for the table entry at index (2 ,10), resulting in faster performance.
We examine the relative computational complexity of the two algorith ms by ﬁrst noting that the
only diﬀerences between them is that the function GUDHI-Merge-Intersect in line 7 of Add-Cofaces
has been replaced by the function Table-Lookup in line 7 of New-Add-Cofaces , and so we focus
on simply comparing these two functions. However, computing the r elative average case compu-
tational complexity of both algorithms is somewhat complicated by line s 9 and 13 of the GUDHI
Merge-Intersect function, which stops the comparisons by taking into consideration of the start
and end points of the respective lists, and, similarly, including L(v) in the stopping condition
w≤min(end(N),L(v)) in line 2 of the New-Add-Cofaces function. We will instead examine the
complexity of simpliﬁed versions of these functions, which, while not e xactly the implementations
that were tested, are easier to analyze, and share the same basic behavior as seen in our experiments.
For reference, the versions of these algorithms which we will consid er in the following discussion are
contained in Algorithms 9 and 10 below.
To examine the relative computational complexity of these two algor ithms on Erd˝ os-R´ enyi
graphs, consider a simplex σ={v0,...,v} ∈ Σ be a simplex in the Vietoris-Rips complex ofA NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 10
Algorithm 9 Simplified-Table-Lookup (G,N,L,v )
1:M←empty list
2:for allw∈Ndo
3:if{v,w}∈Ethen
4: M←M∪{w}
5:end if
6:end for
7:return M
Algorithm 10 Simplified-Merge-Intersect
1:I= empty list
2:v1←first element of L1
3:v2←first element of L2
4:while ((v1≤end(L1))&&(v2≤end(L2)))do
5:if(v1==v2)then
6: I←I∪{v1}
7: v1←the next element in L1
8: v2←the next element in L2
9:else if (v1< v2)then
10: v1←the next element in L1
11:else
12: v2←the next element in L2
13:end if
14:end while
15:returnI
an Erd˝ os-R´ enyi graph G(n,p). The complexity of Simplified-Table-Lookup isO(S), where Sis
the number of siblings of v, and therefore for the Erd˝ os-R´ enyi graph G(n,p), the expected value of
SisE(S) =npk, wherekis the layer of the simplex tree in which vresides, or, equivalently, the
dimension of σ. Conversely, the expected value of the number of neighbors of an y vertex is np, and
the expected complexity of the Simplified-Merge-Intersect function is therefore O(n(p+pk).
Furthermore, in the regime where npn=c,ca constant (preserving the expected degree of each
vertex as nincreases), we have that p=c/n, and the critical step is better by an order of magnitude
inSimplified-Table-Lookup versusSimplified-Merge-Lookup . (This does not imply that the
entire algorithm is necessarily an order of magnitude better in this re gime, however, only that it is
better and that there is a marked diﬀerence in the performance of Simplified-Table-Lookup and
Simplified-Merge-Intersect .)
Since the number of operations in Table-Lookup function is at most two times that of the
Simplified-Table-Lookup function due to the additional veriﬁcation, and may be smaller, the
computational complexity of Table-Lookup is bounded above by O(S). While we do not know the
precise value of the computational complexity of GUDHI-Merge-Intersect , we conjecture that it is
equal to that of Simplified-Merge-Intersect . In any event, while Simplified-Merge-Intersect
may be replaced by a superior algorithm for the intersection of two lis ts, we are unaware of any
such algorithm whose average complexity has been shown to be equa l to or better in the size of
thesmaller of the two lists ( i.e.≤O(M))), making the New-VR algorithm more eﬃcient than anyA NEW CONSTRUCTION OF THE VIETORIS-RIPS COMPLEX 11
instance of the Incremental-VR algorithm using known methods for computing the intersection of
two ordered lists. Furthermore, similar behavior may be expected in any Vietoris-Rips complex
built from any random graph where the expected degree of a verte x is independent of the vertices,
as the expected number of simplices with smallest vertex v0decreases exponentially with dimension,
whereas the expected number of neighbors of any vertex v0is independent of dimension, making
theNew-VR algorithm superior in these cases.
6.Experiments
TheNew-VR algorithm and the experiments below were implemented in C/C++ using t he clang
and clang++ compilers, and run on an 2.4GHz Intel Xeon Silver 4214R C PU running Ubuntu
Linux 20.04.06 LTS. The programs used the single-threaded version s of the algorithms, and for the
Incremental-VR algorithm, the implementation in GUDHI v3.9.0 was use d.
For each combination of p={0.1,..., 0.5}and Maximal Dimension = {2,..., 5}, we generated
100 Erd˝ os-R´ enyi graphs G(n= 125,p) and constructed their Vietoris-Rips complexes up to the
maximal dimension for the experiment. (Note that both algorithms w ere tested against the same
random graphs.) As one can see from Tables 1 and 2 below, the new alg orithm studied in this article
was, on average, 5-10 times faster than the Incremental-VR algo rithm, with higher increases for
sparser graphs and in higher dimensions, as expected from the com plexity analysis. We believe that
the superior performance of the Incremental-VR algorithm seen in dimension two is principally due
to better memory handling and other optimizations in the GUDHI code base which are independent
of the algorithm for computing the Vietoris-Rips complex itself.
Mean Run Times (Microseconds) for the New-VRAlgorithm
p\Dimension 2 3 4 5 6
0.1 109.85 110.65 150.12 232.78 239.05
0.2 409.04 396.52 452.65 623.84 781.28
0.3 1,418.11 1,549.58 1,637.73 1,845.14 2,687.03
0.4 4,521.96 6,620.21 7,327.05 8,195.19 9,705.48
0.5 12,142.36 28,439.83 47,432.14 53,391.11 54,866.87
0.6 27,855.32 115,005.09 322,749.59 543,911.66 (No Data Available)
Table 1. The mean run-times (in microseconds) for the Algorithm 3.1 above,
tested on 100 Erd˝ os-R´ enyi graphs G(n= 100,p), where the probability pis given
in the ﬁrst column of the table. The maximal dimension of the complexe s is given
in the top row of the table.
7.Discussion and Future Work
In this article, we presented a new method for constructing the Vie toris-Rips complex of a
graph, exploiting a small amount of combinatorial structure of the complex to simplify building the
(k+ 1)-skeleton of the complex from the k-dimensional skeleton. Since our algorithm constructs
each (k+1)-simplex in a clique complex using the k-skeleton of the complex combined with a single
additional veriﬁcation at only one pair of vertices, we conjecture t hat this represents the most
eﬃcient process possible, i.e. thatREFERENCES 12
Mean Run Times for the Incremental-VR Algorithm (GUDHI v3.9 .0)
p\Dimension 2 3 4 5 6
0.1 1,081.24 1,142.45 1,213.76 1,280.47 1,345.54
0.2 2,853.89 3,892.48 4,369.18 4,693.18 4,662.37
0.3 5,559.44 11,509.93 14,834.08 16,121.94 16,414.89
0.4 9,230.05 31,173.14 56,338.33 68,455.99 71,643.62
0.5 14,364.26 75,938.71 221,483.81 367,614.49 446,944.97
0.6 21,133.60 716,949.53 829,931.88 2,259,241.63 (No Data Available)
Table 2. The mean run-times (in microseconds) for the Incremental-VR algo -
rithm, tested on 100 Erd˝ os-R´ enyi graphs G(n= 100,p), where the probability pis
given in the ﬁrst column of the table. The maximal dimension of the com plexes is
given in the top row of the table.
Conjecture 7.1. Algorithms 3.1 and 3.2 are optimal serial and parallel algor ithms, respectively,
for constructing the k-skeleta of the clique complex of a graph.
We leave the exact notion of optimality in this conjecture (worst-ca se complexity, average com-
plexity for speciﬁc random graph models, best practical performa nce for ’real’ examples, etc.) open
to interpretation. We gave an initial comparison of the complexity of a simpliﬁed version of the
algorithm to a simpliﬁed version of the Incremental-VR algorithm as implemented in GUDHI
v3.9.0, established that the complexity of the simpliﬁed New-VR algorithm is an upper bound for
the complexity of the original New-VR algorithm, and we conjecture that the complexity of both of
the original algorithms is equal to that of their simpliﬁed counterpar ts.
Multi-threaded and GPU-accelerated implementations of the paralle l algorithm would be nat-
urally expected to signiﬁcantly accelerate the performance of the new algorithm, and these are
currently being developed.
Finally, the experiments on the Erd˝ os-R´ enyi graphs show that t he performance of the new
algorithm in sparse regimes, even in high dimensions, is as good or bett er than the performance
of the GUDHI v3.9.0 algorithm in dimension 2 with diﬀerent values of p. We are interested to
know whether this improvement - or at least the parallelized versions - would be enough to make
the calculation of higher-dimensional ( >1) persistent homology practical for interesting small- to
medium-sized data sets.
Acknowledgements. We are grateful to Marc Glisse for pointing out the reference [2].
References
[1] Erik J Am´ ezquita et al. “Measuring hidden phenotype: quantifyin g the shape of barley seeds us-
ing the Euler characteristic transform”. In: in silico Plants 4.1 (Dec. 2021). diab033. issn: 2517-
5025.doi:10.1093/insilicoplants/diab033 . eprint:https://academic.oup.com/insilicoplants/article-pd 
url:https://doi.org/10.1093/insilicoplants/diab033 .
[2] Jean-Daniel Boissonnat and Cl´ ement Maria. “The Simplex Tree: An Eﬃcient Data Structure
for General Simplicial Complexes”. In: Algorithms – ESA 2012 . Ed. by Leah Epstein and Paolo
Ferragina. Berlin, Heidelberg: Springer Berlin Heidelberg, 2012, pp. 731–742. isbn: 978-3-642-
33090-2.REFERENCES 13
[3] Pawe/suppress l D/suppress lotko and Davide Gurnari. Euler Characteristic Curves and Proﬁles: a stable shape in-
variant for big data problems . 2022.doi:10.48550/ARXIV.2212.01666 .url:https://arxiv.org/abs/2212.01666 .
[4] Seth Lloyd, Silvano Garnerone, and Paolo Zanardi. “Quantum algo rithms for topological and
geometric analysis of data”. In: Nature Communications 7.1 (Jan. 2016), p. 10138. issn: 2041-
1723.doi:10.1038/ncomms10138 .url:https://doi.org/10.1038/ncomms10138 .
[5] Cl´ ement Maria et al. “Rips complex”. In: GUDHI User and Reference Manual . 3.8.0. GUDHI
Editorial Board, 2023. url:https://gudhi.inria.fr/doc/3.8.0/group__rips__compl ex.html .
[6] Nina Otter et al. “A roadmap for the computation of persistent h omology”. In: EPJ Data
Science 6.1 (Aug. 2017), p. 17. issn: 2193-1127. doi:10.1140/epjds/s13688-017-0109-5 .
url:https://doi.org/10.1140/epjds/s13688-017-0109-5 .
[7] Eitan Richardson and Michael Werman. “Eﬃcient classiﬁcation usin g the Euler characteristic”.
In:Pattern Recognition Letters 49 (2014), pp. 99–106. issn: 0167-8655. doi:https://doi.org/10.1016/j.patrec.2 
url:https://www.sciencedirect.com/science/article/pii/S 0167865514002050 .
[8] Alexander Smith and Victor M. Zavala. “The Euler characteristic: A general topological de-
scriptor for complex data”. In: Computers & Chemical Engineering 154 (2021), p. 107463. issn:
0098-1354. doi:https://doi.org/10.1016/j.compchemeng.2021.107463 .url:https://www.sciencedirect.com/ 
[9] Afra Zomorodian. “Fast construction of the Vietoris-Rips comp lex”. In:Computers & Graphics
34.3 (2010). Shape Modelling International (SMI) Conference 201 0, pp. 263–271. issn: 0097-
8493.doi:https://doi.org/10.1016/j.cag.2010.03.007 .url:http://www.sciencedirect.com/science/arti 