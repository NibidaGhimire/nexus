Macro-micro decomposition for consistent and conservative
model order reduction of hyperbolic shallow water moment
equations:
A study using POD-Galerkin and dynamical low rank
approximation
Julian Koellermeier∗, Philipp Krah†, Jonas Kusch‡
July 17, 2024
Abstract
Geophysical flow simulations using hyperbolic shallow water moment equations
require an efficient discretization of a potentially large system of PDEs, the so-called
moment system. This calls for tailored model order reduction techniques that allow
for efficient and accurate simulations while guaranteeing physical properties like mass
conservation.
In this paper, we develop the first model reduction for the hyperbolic shallow
water moment equations and achieve mass conservation. This is accomplished using
a macro-micro decomposition of the model into a macroscopic (conservative) part
and a microscopic (non-conservative) part with subsequent model reduction using
either POD-Galerkin or dynamical low-rank approximation only on the microscopic
(non-conservative) part. Numerical experiments showcase the performance of the new
modelreductionmethodsincludinghighaccuracyandfastcomputationtimestogether
with guaranteed conservation and consistency properties.
Keywords : Model order reduction, shallow water moment equations, POD-Galerkin,
dynamical low-rank approximation
1 Introduction
Accurate simulation of free-surface flows is necessary for prediction of natural hazards like
floods, landslides, tsunami waves, and weather forecasting [14, 15]. However, the solution
of the full incompressible Navier-Stokes equations is often too costly and simplified models
liketheshallow water equations (SWE)oftenyieldinaccurateresults, sincetheSWEmodel
assumes a constant velocity over the vertical axis. The recently derived hyperbolic shallow
water moment equations (HSWME) overcome this problem by allowing for polynomial
velocity profiles [43]. The model is based on a hyperbolic regularization of [46] using
techniques from kinetic theory [24, 44]. The increased accuracy of the model was shown
in numerical simulations, including sediment transport [26]. However, the HSWME also
∗Bernoulli Institute, University of Groningen j.koellermeier@rug.nl
†Institut de Mathématiques de Marseille (I2M), Aix-Marseille Université, philipp.krah@univ-amu.fr
‡Institut für Mathematik, Universität Innsbruck, jonas.kusch1@gmail.com
1arXiv:2302.01391v2  [math.NA]  16 Jul 2024lead to a higher computational cost and memory footprint due to additional nonlinear
equations for the expansion coefficients of the polynomial velocity profile. The goal of this
work is to perform an additional model reduction to improve efficiency of the model while
at the same time preserving important properties like conservation of mass.
To reduce computational costs during the simulation of the HSWME we propose to
projectthesystemonalowerdimensionalmanifoldusingGalerkinmethods. Inthiscontext
we apply two model reduction techniques. First, the classical offline-online procedure
(see for a review [48]), where important modes are calculated using a proper orthogonal
decomposition (POD) in a so-called offline phase. This allows to conduct further on-
line computations with the generated basis at significantly reduced computational costs.
Second, the online adaptive basis method, dynamical low-rank approximation (DLRA)
[39], that along with other methods like the adaptive basis and adaptive sampling discrete
empirical interpolation method (AADEIM) [59], adapts the dominant modes by online
updates to the solution locally in time. DLRA therefore does not require an offline
computation since training is shifted to the online phase.
Most commonly in model order reduction (MOR) a reduced basis is computed with
the help of the POD, that was first introduced in [55] in the context of fluid dynamics.
In combination with Galerkin projection methods, POD-Galerkin has been successfully
applied in fluid dynamics [51], including the SWE [53, 52, 71, 64, 65]. Since POD-Galerkin
does not preserve conservation laws, one possibility is to introduce Hamilton formulations
that ensure structure-preservation when constructing reduced order models (ROM) of SWE
with the help of POD [35, 36]. In this paper we consider the HSWME that introduce N
additional equations to the 1D-SWE to account for non-constant velocity profiles along
the vertical axis. With the aim to reduce the HSWME to a system yielding a similar
complexity as the SWE we then apply POD-Galerkin as the first approach. In contrast
to existing SWE-ROM approaches [53, 52, 71, 64, 65, 35, 36], that try to reduce the high
dimensional state-space by Galerkin projections onto the spatial modes, we utilize POD
modes that reduce the system only in the vertical direction. Here, the idea is to replace the
N+ 2dimensional HSWME system by a r+ 2(where r≪N) dimensional system. This
is achieved through a linear combination of global ansatz functions that are determined by
POD. Similar ideas have been first introduced by [67, 68, 69] and later in fluid dynamics
to study the pipe flow where a coarse model featuring the dominant dynamics in the flow
direction is enriched by a fine model that accounts for the additional dynamics in the
transverse direction with the help of a modal expansion [60, 62, 61, 56]. This so called
hierarchical model order reduction was further expanded for non-linear PDEs in [63].
Dynamical low-rank approximation [39] for matrix differential equations approximates
the solution by a low-rank matrix decomposition and derives evolution equations to update
thefactorsofthesolutionintime. Theseevolutionequationsaredeterminedbyminimizing
the defect while restricting the evolution of the solution to the manifold of low-rank matri-
ces. StabletimeintegratorsfortheresultingDLRAsystem, whicharerobustirrespectiveof
the curvature of the low-rank manifold [38], are the matrix projector–splitting integrator
[54] as well as the “unconventional” basis update & Galerkin step (BUG) integrator of
[11]. Here, we use the BUG integrator which only evolves the solution forward in time,
thereby facilitating the construction of stable spatial discretizations [49]. Moreover, the
BUG integrator enables a straightforward basis augmentation step [9] which simplifies the
construction of rank adaptive methods [9, 50, 31] and allows for conservation properties
[9, 22].
Comparing computational results for POD-Galerkin and DLRA, we note that the
2generation of basis functions during the online computation makes dynamical low-rank
approximation significantly more costly than the online computation of POD-Galerkin.
However, sinceDLRAdoesnotrequireanofflinecomputationinwhichthefullmodelneeds
to be evaluated repeatedly, itoffers threemain advantagesover POD-Galerkin: First, when
the full order model is expensive to compute or cannot be stored in memory at a desirable
accuracy, the offline phase of POD-Galerkin can become unfeasible to compute. Second,
DLRA allows a straightforward application in settings that require a retraining of the basis
withPOD-Galerkin. Third,sinceDLRAallowstoadaptthebasisduringtheonlinephaseit
isindependentofthechoiceofsnapshotsanditisbeneficialinsettingswhereaprecomputed
linear basis might not describe the dynamics sufficiently. In particular DLRA is superior
to POD-Galerkin for transport dominated systems, where the Kolmogorov n-width decays
slowly [58, 27].
While model order reduction techniques promise a reduction of cost and memory,
they can struggle to preserve important quantities of the full system such as boundary
conditions or mass conservation. To guarantee preserving these properties, we propose
to decompose the HSWME solution into two parts: (1) macroscopic variables: water
height and momentum and (2) microscopic variables: higher-order moments of the velocity
profile. Separate evolution equations for the macro and micro solution parts are derived
and the model order reduction strategy is only applied to the computational and memory
intensive microscopic part (2). Thereby, we facilitate imposing boundary conditions for
the macroscopic water height and momentum while guaranteeing mass conservation. In
addition, we achieve consistency with the underlying SWE model in case of vanishing
microscopic structures.
The construction of efficient numerical method for dynamical low-rank approximation
requires a carefully chosen formulation of the low-rank evolution equations and the con-
struction of adequate numerical discretizations. Therefore, besides the introduction of a
macro-micro decomposition to preserve solution invariants in model order reduction, main
novelties of this work are:
•The derivation of efficient low-rank evolution equations for HSWME. We derive
evolution equations of low-rank factors of the HSWME which do not require the
computationoffull-rankmatrices. Thereby,thememoryfootprintandcomputational
costs to evolve the dynamical low-rank approximation are significantly reduced.
•The construction of an efficient numerical scheme. A classical implicit time dis-
cretization of friction terms yields prohibitive costs when evolving the low-rank
approximation. We propose a splitting step to eliminate computationally costly
terms in the numerical scheme, allowing for a significant reduction in runtime.
The remaining parts of this paper are structured as follows: We present the main
concept of the macro-micro decomposition as well as the correction terms for model
order reduction in Section 2. The mathematical model HSWME is briefly explained in
Section 3. Section 4 covers the numerical discretizations including the implementation
of the macro-micro decomposition for the new model. The conservative POD-Galerkin
method is adopted for the considered model in Section 5, followed by the dynamical
low-rank approximation in Section 6. Numerical results showing the performance of both
methods are presented in Section 7 and the paper ends with a brief conclusion.
32 Concept
A core issue of model order reduction is the potential violation of crucial properties of the
original problem. To preserve these properties we choose to first decompose the original
dynamics into evolution equations describing the macroscopic (conservative) quantities on
the one hand and microscopic (non-conservative) correction terms on the other hand.
A reduced model is then derived only for the microscopic corrections terms, whereas
the original macroscopic evolution equations remain unaltered. Thereby, basis functions
which are important for overall solution properties remain unchanged, whereas the overall
solution complexity that mainly arises from correction terms is reduced through model
order reduction. The concept is visualized in Fig. 1.
Figure 1: Concept of the macro-micro decomposition MOR approach for HSWME. The
HSWME is decomposed in macroscopic variables uand microscopic variables v. While the
macroscopic variables are computed with a standard conservative scheme, the microscopic
variables are treated by MOR techniques DLRA or POD-Galerkin.
We consider equations of the following type
∂tq+A(q)∂xq=gν(q), (1)
where A(q)∂xqdenotes the transport term and gν(q)denotes the friction term, which
depends on a friction parameter ν. Furthermore, the variable vector q= (u,v)contains
both macroscopic variables uand microscopic variables v.
For the numerical solution, we perform two main steps: (I) A first order operator
splitting to Eq. (1), in which we split the transport part from the right-hand side friction
part. (II) A decomposition of the solution into macroscopic ( u) and microscopic ( v)
variables. Note that the operator splitting only introduce first order errors in time and
space, which are of the same order as the discretization errors in the sub-steps. The
macro-micro variable decomposition does not introduce an error but a decoupled solution
of the macro and micro step will do so. The procedure can be summarized by the following
steps
Step 1: transport ∂tq+A(q)∂xq= 0, (2)
Step 2: friction ∂tq =gν(q), (3)
4and the subsequent macro-micro decomposition
Step 1a: macro transport qn=(un,vn)(2)⇒(eun+1,vn), (4)
Step 1b: micro transport (eun+1,vn)(2)⇒(eun+1,evn+1),(5)
Step 2a: macro friction eqn+1=(eun+1,evn+1)(3)⇒(un+1,evn+1),(6)
Step 2b: micro friction (un+1,evn+1)(3)⇒(un+1,vn+1).(7)
Remark. Note that macro-micro decomposition has been used in a wide variety of appli-
cations in combination with model order reduction, see e.g. [20, 19]. In contrast to these
works, we employ the macro-micro decomposition not to construct asymptotic–preserving
schemes, but for two purposes: 1) Guarantee mass conservation and 2) ensure consistency
with the SWE when the microscopic part tends to zero. Note that the latter also ensures
that the model order reduction method does not reduce the approximation accuracy of
water height and mean velocity. That is, these two quantities of interest can be represented
accurately, independent of any chosen basis functions. The choice of macroscopic and
microscopic variables for a general model is not predetermined and this could change
based on the interpretation of the model or a spectral analysis potentially identifying a
spectral gap, e.g., [1].
Remark. The notion of macro and micro variables originates from the limit of the SWME
with respect to vanishing slip length. This models a perfect slip bottom such that only
the interior friction remains and drives the “microscopic” higher-order moments to zero
resulting in a constant velocity profile [34]. The remaining water height hand velocity
umevolve according to the “macroscopic” shallow water equations. This justifies the
decomposition into a macro part evolving on the equilibrium manifold and a remaining
micro part. For more details, we refer to [34].
In the next sections, we will first introduce the full (coupled) model Eq. (1), then
discuss the space time discretization of the operator splitting of Eq. (2) and Eq. (3), before
deriving a detailed scheme for the macro-micro decomposition system Eq. (4) - Eq. (7),
which can then be efficiently used for model reduction algorithms like POD-Galerkin and
DLRA of the micro steps Eq. (5) and Eq. (7).
3 Models for Shallow Flows
In the following, we introduce two full models for shallow water flows: the shallow water
moment equations and their hyperbolic formulation, the hyperbolic shallow water moment
equations.
We note that an alternative approach to starting with these models is to directly apply
the model reduction techniques to the underlying incompressible Navier-Stokes equations.
Conceptually, this is possible. In the case of DLRA, the evolution equation for the L-step
is then continuous in the velocity variable, and a moment method can be used to obtain
a discretized set of equations. This is equivalent (when using the BUG integrator as we
do in this work) to first performing the moment approximation and then applying DLRA.
However, using the moment method first and the model reduction second is much more
convenient in terms of notation and efficiency of presentation. It also allows for a very
intuitive understanding of how to carry over the desirable properties of the moment model
to the numerical solution.
53.1 Shallow water moment equations
Shallow water flows are often modeled using the standard SWE, which are hyperbolic
balance laws for the macroscopic variables water height hand the mean velocity um,
derived from the underlying incompressible Navier-Stokes equations. For simplicity, we
consider a one-dimensional vertical coordinate x∈R, a flat bottom topography, and a
Newtonian fluid. The SWE model for handumthen reads [46]
∂th
hum
+∂xhum
hu2
m+1
2gh2
=−ν
λ0
um
, (8)
with gravity constant g, slip length λand kinematic viscosity ν. Note that the system
is written in so-called convective variables (h, hu m), which will also be the case for the
more advanced shallow water Moment model below. The addition of a non-flat bottom
topography term in Eq. (8) will pose no conceptual difficulties and is left for future work,
see [26, 42] for examples of the straightforward treatment. Further note that the concept
can be readily extended to the 2D case. However, so far there is very little research on 2D
models with vertically resolved velocity profiles. Even though the conceptual framework
of the model is laid out in [46] and the hyperbolic regularisation below can be extended
based on [43], to the best of our knowledge, no full 2D simulations exist. We therefore
focus on the 1D case in the current work.
Due to its simplicity with only the macroscopic mean velocity um, the SWE model
cannot represent vertical variations of the velocity, representing micro structure of the
profile. The assumption of a constant velocity profile breaks down for many applications,
especially when considering strong bottom friction [37]. Even when starting with constant
velocity profiles, bottom friction leads to a deceleration of the fluid close to the bottom
giving rise to more complex velocity profiles.
The recently developed shallow water moment equations (SWME) [46] tackle this
problem by introducing a polynomial expansion of the velocity profile u(t, x, z )depending
on the vertical variable z∈[0, h]as follows
u(t, x, z ) =um(t, x) +NX
j=1αj(t, x)ϕjz
h(t, x)
, (9)
where ϕj: [0,1]→Rare thescaled Legendre polynomials of degree jdefined by
ϕj(ζ) =1
j!dj
dζj(ζ−ζ2)j. (10)
The basis functions ϕjform an orthogonal basis, due toR1
0ϕm(ζ)ϕn(ζ)dζ=1
2n+1δmn,
where δmnis the Kronecker delta.
The corresponding expansion coefficients αjforj= 1,2, . . . , Nof the polynomial
expansionEq.(9)arealsocalled moments inanalogytomomentmodelsfromkinetictheory
[66]. The moments represent micro variables that augment the macroscopic variables h
andum.
The expansion Eq. (9) then allows for the representation of complex velocity profiles,
e.g., linear, quadratic, ..., up to the maximal polynomial degree N∈N. While a larger
maximal degree Nleads to potentially higher accuracy of the velocity profile, more mo-
ments are used in the representation which leads to higher computational costs.
6Evolution equations of the moments in time and space can be derived by a projection
of the underlying incompressible Navier-Stokes equations onto the basis functions Eq. (10).
In combination with the conservation of mass, the resulting system of equations is called
the shallow water moment equations. More details on the derivation of the SWME can be
found in [46].
The SWME model for water height h, mean velocity um, and coefficients αifor
i= 1, . . . , Ncan be written as
∂tq+eA(q)∂xq=gν(q),
with convective variable vector q= [h, hu m, hα1, . . . , hα N]T∈RN+2, transport matrix
eA(q)∈RN+2×N+2, and right-hand side friction term gν(q)∈RN+2.
In this paper, we do not use the SWME model in the form derived in [46] due to its
lack of hyperbolicity, which was attributed to stability issues in [43]. We therefore do not
show the explicit form of the matrix eA(q)and source term gν(q)of the SWME here, but
directly introduce the hyperbolic regularization derived in [43].
3.2 Hyperbolic shallow water moment equations
Based on results from kinetic theory [24, 44, 6], the HSWME were first derived in [43] and
have been extended and analyzed in [42, 34]. As a key property of transport dominated
problems, hyperbolicity is the property of the transport matrix to have real eigenvalues
corresponding to waves with real propagation speeds. It was shown that the HSWME
yield accurate results while preserving hyperbolicity of the model equations [43]. Recently,
the model has been applied to sediment transport [26] and analysis of steady states and
equilibrium stability has been performed [34, 42].
In this paper, we use the HSWME model in its standard form written in terms of the
convective variable vector q= [h, hu m, hα1, . . . , hα N]T∈RN+2as
∂tq+A(q)∂xq=gν(q), (11)
with hyperbolic transport matrix A(q)∈R(N+2)×(N+2)given by
A(q) =
0 1
gh−u2
m−1
3α2
12um2
3α1
−2umα1 2α1um3
5α1
−2
3α2
1 01
3α1um...
......N+1
2N+1α1
N−1
2N−1α1 um
.
Note that the transport matrix Ais a function that only depends on macroscopic h,
um, plus α1, whereas it does not depend on the higher microscopic moments αifor
i= 2, . . . , N. This will be the first important ingredient allowing for efficient model
reduction via POD-Galerkin in Section 5 and DLRA in Section 6 later. While the HSWME
model appears simpler than SWME, it still retains the main nonlinearity of the SWME and
is able to reproduce the complex nonlinear flow patterns of shallow flows, as demonstrated
in numerous recent papers [26, 34, 42, 1].
7The source term gν(q)∈RN+2of Eq. (11) is given by gν(q) = [0 , gν0, . . . , g νN]Tand
reads
gνi(q) =−ν
λ(2i+ 1)
um+NX
j=1αj
−ν
h4 (2i+ 1)NX
j=1ai,jαj, i= 0, . . . , N, (12)
with slip length λ, viscosity ν, and constants ai,jgiven by
ai,j=(
0 ifi+j=even,
min(i−1,j)(min( i−1,j)+1)
2ifi+j=odd.
Note that the first entry of the right-hand side friction term gν(q)is zero, leading to
the conservation of mass, which is the integral of the water height h. More importantly,
the other entries given by gνi(q)only depend non-linearly on the water height h, while
depending linearly on the remaining umandαi. This will be another important ingredient
for efficient model reduction to be exploited later.
4 Space-time discretization with operator splitting
The right-hand side friction term of Eq. (11) can be stiff for small λor small h. This
prohibits the use of standard explicit schemes to solve the coupled model Eq. (11). While
stable explicit schemes like projective integration exist [1], they typically require more time
steps and some parameter tuning, which would be impractical for a robust model order
reduction later. The left-hand side transport part is naturally discretised best with an
explicit scheme using a standard CFL condition. We therefore split the full model Eq. (11)
into a transport step and a friction step. We then treat the space-time discretization of
both terms separately.
As explained in Section 2, for a single time step of a numerical solution we apply a
first order operator splitting to Eq. (11) in the same fashion as [34], in which we split the
transport part Eq. (2) from the right-hand side friction part Eq. (3) as
Step 1: transport ∂tq+A(q)∂xq= 0,
Step 2: friction ∂tq =gν(q),
where the solution of the transport and friction step will be considered separately in the
following two subsections.
4.1 A new macro-micro decomposition scheme for the transport step
AstraightforwarddiscretizationofthetransportstepEq.(2)viaastandardpath-conservative
numerical schemes [42] is sufficient to solve the transport step of the full order model.
However, preparing for the model reduction in Section 5 and Section 6, we here describe
a new version exploiting the structure of the model using a macro-micro decomposition of
the variables. This means additionally decomposing the vector of variables in the same
way as they will be treated by the POD-Galerkin and DLRA methods in Section 5 and
Section 6, respectively.
A standard numerical scheme as written in Appendix A, see Eq. (24), considers an
update of the full state vector. However, this does not allow to completely leverage the
8structure of the underlying model equations during the model reduction procedure later.
To that end, we exploit the structure of the HSWME model Eq. (11), by decomposing Q
into two parts: (1) the first two (macroscopic) variables for the water height hand the
mean velocity um(called U) on the one hand and (2) the last N(microscopic) variables
for the moments αion the other hand (called V). This can be written as
Q=
U V
,U=
h(xj, t)h(xj, t)um(xj, t)
j∈RNx×2,
V=
h(xj, t)α1(xj, t). . . h (xj, t)αN(xj, t)
j∈RNx×N. (13)
In the same fashion, we decompose the transport matrix A(q)into four blocks corre-
sponding to the first two equations and the last Nequations and variables, respectively
A(q) =AuuAuv
AvuAvv
, (14)
with blocks
Auu=1
gh−u2
m−1
3α2
12um
∈R2×2,Auv=
2
3α1
∈R2×N,
Avu=
−2umα1 2α1
−2
3α2
1
∈RN×2,Avv=
um3
5α1
1
3α1um...
......N+1
2N+1α1
N−1
2N−1α1 um
∈RN×N,
where all other entries are zeros.
We thus decompose the system into a set of macroscopic variables Uand another set
of microscopic variables V. While the macroscopic variables are not reduced to allow
structure preservation, the microscopic variables are used to generate an efficient reduced
order model.
The space-time discretization of the transport part towards a solution scheme is de-
scribed in the Appendix A for brevity. The derivation of reduced model by both POD-
Galerkin as well as DLRA rely on the definition of this discretized scheme.
After the solution of the transport step has been computed the scheme continues with
the friction step, which is potentially stiff and requires a different, implicit scheme.
4.2 Friction step
To solve the space-homogeneous friction step Eq. (3), an implicit scheme is necessary due
to potential stiffness originating from small values for λorh. We will use the scheme from
[34], but adopt it to our decomposition of variables QintoUandVas explained in this
section.
The macro variables u= (h, hu m)after the friction step are obtained using the
definition of the source in Eq. (12) and the two observations: (1) The height hremains
constant in time during the friction step. (2) The micro moments αiremain constant
during the macro update. This leads to the updated values (hn+1, hn+1un+1
m).
For the update of the remaining micro coefficients Vduring the micro friction step
Eq. (7), we make use of the fact that handumare now constant and Vonly occurs
9linearly. According to [34], Eq. (3) for the last Nmoments can then be written as
˙Vj=1
h2
jG1Vj+1
hjG2Vj+um,jgν, (15)
where G1∈RN×Nhas entries
G1,ij=(
−2ν(2(i−1) + 1) ·min(i, j)·(min( i, j) + 1)ifi+ 1 + jis even
0 else
andG2=gν·1⊤∈RN×N, where gν∈RNhas entries gνi=−ν
λ(2i+ 1).
The micro friction step Eq. (15) is then solved implicitly by a backward Euler method
to overcome stability issues from potential stiffness. Note again that the water height hj
is constant during the whole friction step and un+1
m,jis given by the solution of the macro
friction step Eq. (6). Applying the backward Euler method to Eq. (15) yields
Vn+1
j=Vn
j+ ∆t 
1
h2
jG1Vn+1
j+1
hjG2Vn+1
j+un+1
m,jgν!
. (16)
We then define the matrix
Dj=IN−∆t
h2
jG1−∆t
hjG2
to arrive at the time update
Vn+1
j=D−1
j
Vn
j+ ∆t un+1
m,jgν
. (17)
We note that D−1
jcan be precomputed efficiently, as it does not depend on umandαi.
Thus, theupdatedmicrovariablesinEq.(17)canbecomputedefficientlywithoutinverting
a matrix during the online computation.
5 Macro-microdecompositionforconservativePOD-Galerkin
The following section addresses the POD-Galerkin reduction of the HSWME model from
Section 3.2. As already pointed out in Section 2 the presented approach applies the
reduction only to the microscopic higher-order moments v= [hα1, . . . , hα N]⊤∈RN.
Furthermore, in contrast to the conventional POD-Galerkin approach that reduces the
full state-space of the discretized PDE, we only reduce the dimensions of the PDEs’
state-components. This leads to a decoupling between the time-space dynamics and
the correlation between the components and avoids the separation of spatial-temporal
dynamics that can lead to slow decaying approximation errors, known as the Kolmogorov
N-width problem [58, 27]. For a typical dam break scenario we showcase this slow decay in
Fig. 3 of our numerical Section 7. To obtain a reduced model that allows rapid yet accurate
predictions over a range of different parameters, one often uses a two phase offline-online
procedure, which is explained in the following.
105.1 Offline phase
In theoffline phase the reduced basis and the operators of the reduced model space are
precomputed. Note that in contrast to the DLRA approach from Section 6 one is willing to
forego large up-front offline costs in favor of a more efficient reduced model for the online
phase. The reduced basis is formed by collecting snapshots of the solution of Eq. (11) at
Ntdifferent time/parameter instances
V={v(x, t1), . . . ,v(x, tNt−1)}.
The POD approximates the microscopic higher moment vector using an orthonormal basis
{w}k=1,...,r
v(x, t)≈ev(x, t) =rX
k=1ˆαk(x, t)wk, r ≪N≤Nt
=Wˆv(x, t),
where W= [w1, . . . ,wr]∈RN×rcollects the basis vectors and ˆv= [ˆα1, . . . , ˆαr]⊤∈Rr
denotesthereducedspace-timecoefficients. Inafullydiscretesettingthisbasisiscomputed
by a truncated singular value decomposition (SVD) of the snapshot matrix
VPOD=
V0
...
VNt−1
∈R(NxNt)×N,
where the Vnare defined in Eq. (13). The truncated SVD of VPODyields
VPOD≈VPOD
r=ΨΣW⊤(18)
Here, Σ= diag ( σ1, . . . , σ r), r≪M, is a diagonal matrix containing the largest rsingular
values σ1≥σ2≥ ··· ≥ σrandΨ∈R(NxNt)×r,W∈RN×rare orthogonal matrices
containing the left and right singular vectors, respectively. The latter are also termed
modesin the following.
According to the Eckart-Young-Mirsky theorem [17, 57] VPOD
ris the best rank r
approximation and the resulting error in the Frobenius norm is rigorously computed from
the trailing singular values
∥VPOD−VPOD
r∥2
F=mX
k=r+1σ2
k.
A common choice for ris to truncate after a certain energy percentage (e.g. Ecum≥95%)
is reached in the reduced system compared to the full system:
Ecum=∥VPOD
r∥F
∥VPOD∥F=Pr
k=1σ2
kPm
k=1σ2
k.
CalculatinganSVDcanbechallenging,particularlywhendealingwithhigher-dimensional
space, due to the potentially prohibitive size of the snapshot matrix. This can be circum-
vented by either using randomized or wavelet techniques to calculate the POD-modes
[47, 30] more efficiently or applying POD-greedy sampling methods [29, 70] that reduce
the number of snapshots needed to form a POD basis.
In the context of Galerkin projections the column space of Wyields the trial space
V(t)≈eV(t) =WˆV(t), ˆV: [0, T]→Rr×Nx.
115.2 Online Phase
As explained in Section 2, the online phase evolves the dynamics in two steps. In the first
step we evolve the first two macro variables Uwithout any model order reduction and in
the second step we use the evolved Uas an input of our reduced system of the microscopic
higher order moments V. The reduced system is gathered by projecting Eqs. (16) and (25)
onto the test space which is the reduced subspace spanned by the columns of W.
5.2.1 Transport step
For the transport part in Eq. (25) we define the reduced transport term as
cFv(ˆV) :=W⊤Fv(U,WˆV(t))∈Rr×Nx.
Evaluating this at the jth cell we obtain:
[cFv(ˆV)]j=1
2∆t(ˆVj−1−2ˆVj+ˆVj+1)
−1
2∆x
ˆAj+1,vu(Uj+1−Uj) +ˆAj+1,vv
ˆVj+1−ˆVj
−1
2∆x
ˆAj,vu(Uj−Uj−1) +ˆAj,vv
ˆVj−ˆVj−1
,
where we define the reduced non-linear operators ˆAj,vu:=W⊤Aj,vuandˆAj,vv, where:
ˆAj,vv:=W⊤Aj,vvW=1
2(α1,j+1+α1,j)ˆA+1
2(um,j+1+um,j)Ir
(19)
ˆA:=W⊤AW∈Rr×r,
with identity matrix Ir∈Rr×r. Note, since ˆAis precomputed in the offline phase, the
non-linear term Eq. (19) only has to be evaluated for rinstead of Ncomponents, which
generates the speedup. To further simplify the non-linear terms POD is often used in
combination with sparse sampling methods that sample the nonlinear terms at a few
components to approximate them in a low-dimensional space. Examples are the discrete
empirical interpolation method (DEIM)[13], thatrelatesbacktotheempiricalinterpolation
method (EIM) [3, 28], the gappy POD [23, 5, 2], or the energy-conserving sampling and
weighting (ECSW) method [25]. However, we refrain from using them here for a direct
comparison with DLRA, that does not make use of sparse sampling methods, yet.
5.2.2 Friction step
Similar to the transport term we evaluate the micro friction term Eq. (7) at the jth
component projected onto the test space. We define the components of the reduced source
term ˆG(ˆV) :=W⊤G(U,WˆV)∈Rr×Nxby
[ˆG(ˆV)]j=1
h2
jˆG1ˆVj+ˆG2ˆVj+um,jˆgν
ˆG1=W⊤G1W∈Rr×r, ˆG2=W⊤G2W∈Rr×r, ˆgν=W⊤gν∈Rr
The complexity of the source term computation is reduced, since only rcomponents have
to be evaluated.
126 Dynamical low-rank approximation
As an alternative to POD-Galerkin, we propose to evolve the microscopic higher-order
moments with DLRA introduced in [39]. This method is data-driven in the sense that it
closes the moment equations without assuming physical properties, based on the real-time
solution data.
6.1 Macro-micro decomposition for dynamical low-rank approximation
The core idea of DLRA is to evolve the solution on a low-rank manifold. That is, DLRA
represents the solution as a low-rank factorization and provides evolution equations for
the individual factors. Therefore, DLRA can be interpreted as a Galerkin method which
updatesnotonlytheexpansioncoefficientsbutalsothebasisfunctionsintime. Topreserve
thestructureofwaterheightandmomentum, weapplyDLRAtothemicroscopiccorrection
terms vi:=hαionly. Collecting the spatially discretized correction terms in a matrix
V(t)∈RNx×N, where vji=h(t, xj)αi(t, xj), we define a low-rank approximation as
V(t) =X(t)S(t)W(t)⊤, where X∈RNx×randW∈RN×rcan be interpreted as the
collection of rbasis vectors in space and moment order with a corresponding coefficient
matrix S∈Rr×r.
To benefit from this representation, we want to ensure that the method works on these
factors only and never needs to compute and store the full solution V. To preserve the
low-rank structure of the solution, we therefore force the solution at all times tto remain
in the manifold of rank rmatrices, which we call Mr. This can be ensured when the
time derivative of Vlies in the tangent space of rank rmatrices, i.e., the solution when
advancing in time does not leave the manifold Mr. We denote the tangent space at V(t)
asTV(t)Mr. Then, the time evolution equations for the basis vectors and coefficients must
satisfy
˙V(t)∈ TV(t)Mrsuch that ∥˙V(t)−Rv(U(t),V(t))∥ →min! (20)
The first condition conserves the representation V(t) =X(t)S(t)W(t)⊤and the second
condition minimizes the residual, which is essentially a Galerkin condition. Hence, an
equivalent formulation of (20) is
D
˙V(t)−Rv(U(t),V(t)), δVE
= 0∀δV∈ TV(t)Mr.
This represents a Galerkin method, which chooses test functions based on the solution data
and the geometry of the manifold of rank rmatrices. An admissible choice of δVwhen
the solution reads V(t) =X(t)S(t)W(t)⊤isδV=XiW⊤
jwhich indeed lies in the tangent
space. Here, XiandWjdenote the ithandjthcolumns of the basis matrices, respectively.
This test function yields an evolution equation for the coefficient matrix
˙S(t) =X(t)⊤Rv(X(t)S(t)W(t)⊤)W(t).
Choosing test functions δV=XiandδV=Wi, which again lie in the tangent space,
results in evolution equations for the respective basis matrices
˙X(t) = (I−X(t)X(t)⊤)Rv(X(t)S(t)W(t)⊤)W(t)S(t)−1,
˙W(t) = (I−W(t)W(t)⊤)Rv(X(t)S(t)W(t)⊤)⊤X(t)S(t)−⊤.
13Solvingtheseevolutionequationswithclassicaltimeintegrationschemesisinefficient, since
the coefficient matrices are often ill conditioned and the time step size is dictated by the
smallest absolute eigenvalue of S. Two robust time integrators, which guarantee stability,
are theprojector–splitting integrator [54] as well as the BUG integrator [12]. Their main
strategy is to not evolve XandWin time directly, but to evolve a linear transformation
K:=XSandL:=WS⊤and retrieve the basis matrices through a QR-decomposition. In
this work, we focus on the BUG integrator, which consists of three update steps
1.K-step: Update X0toX1via
˙K(t) =Rv(K(t)W0,⊤)W0,K(t0) =X0S0.
Determine X1withK(t1) =X1Rand store M=X1,⊤X0.
2.L-step: Update W0toW1via
˙L(t) =Rv(X0L(t)T)TX0,L(t0) =W0S⊤.
Determine W1withL(t1) =W1eRand store N=W1,⊤W0.
3.S-step: Update S0toS1via
˙S(t) =X1,⊤Rv(X1S(t)W1,⊤)W1,S(t0) =MS0N⊤
and set S1=S(t1).
The solution at the next time step is then given by V(t1) =X1S1W1,⊤. Note that the first
two equations which evolve the basis in time can be updated in parallel followed by a serial
update of the coefficient vector. Effectively the size of the original matrix ODE is reduced
froma N×NxsystemtothreesmallermatrixODEsofsize: Nx×r(K-step), N×r(L-step),
andr×r(S-step). Wewishtounderlinetherequirementsofauser-determinedchoiceofthe
rank r, which needs to be determined such that the solution exhibits a sufficiently accurate
approximation at minimal computational costs and memory requirements. Note however
thatthe BUGintegrator allowsfor anextensionto rank adaptivity[9]. Here, the basisafter
theKandLsteps is augmented with the basis at time t0to enlarge the approximation
spacefrom rto2rbasisvectors. Aftera 2r×2rcoefficientupdateinthe S-step, thesolution
is truncated to a new rank r1≤2raccording to a user-determined tolerance parameter ϑ.
While this parameter needs to be chosen before the simulation, it has a clear interpretation
as the truncation error in every time step. For clarity of presentation, we focus on the
fixed-rank BUG integrator in our derivations, the numerical results however include both
fixed-rank and rank-adaptive computations. For more information on rank-adaptivity and
further properties of the rank-adaptive integrator, we refer to [9]. Further approaches for
rank-adaptivity in dynamical low-rank approximation and model order reduction are, for
example, [33, 10, 16, 32, 18].
The classical dynamical low-rank approximation approach often does not preserve
important physical properties. This stems from the fact that DLRA can remove basis
functions which are needed for conservation. However, problem-dependent adaptations
to the classical DLRA integrators can provide conservation properties. As an example,
conservation of solution invariants up to a tolerance parameter can be achieved with a basis
augmentation step [9]. Moreover, [22] uses a basis augmentation as well as a reformulation
of the K,LandS-step to preserve mass, momentum and energy in the Vlasov equations.
14Our approach in this work ensures local mass conservation by decomposing the dynamics
of the macroscopic (conserved) water height and momentum from the dynamics of the
microscopic correction terms. This means that the conservation law structure of the water
height equation is not altered by DLRA.
6.2 Evolution equations for the low-rank HSWME
In the following we derive efficient representations of the K,L, and S-steps for the micro
transport step Eq. (5) and the micro friction step Eq. (7) of the HSWME model. Note that
the macroscopic variables are not altered by the DLRA and computed during the macro
transport and macro friction step as explained in Section 4. Note that the derivation of
evolution equations is performed on the semi-discrete level, i.e., the system is already
discretized in the vertical direction zby a moment approximation and the horizontal
direction by a finite volume discretization. DLRA can, however, also be derived in the fully
continuous formulation [21], leading to a continuous set of low-rank evolution equations.
When using BUG integrators combined with an equivalent moment and finite volume
discretization of the continuous low-rank evolution equations, these two approaches are
equivalent, and we choose the discrete formulation for ease of presentation.
6.2.1 Transport step
For the micro transport part Eq. (5), the spatially discretized right-hand side Eq. (25) is
given by
[Fv(U,V)]j=1
2∆t(Vj−1−2Vj+Vj+1)
−1
2∆x(Aj+1,vu(Uj+1−Uj) +Aj+1,vv(Vj+1−Vj))
−1
2∆x(Aj,vu(Uj−Uj−1) +Aj,vv(Vj−Vj−1)).
K-step:To derive the K-step, we denote the j-th row of KasKj(t)∈Rrand represent
the solution Vat spatial cell jasVj(t) =W0Kj(t). Multiplying the right-hand side Fv
withW0,⊤then yields
˙Kj=1
2∆t(Kj−1−2Kj+Kj+1)
−1
2∆x
W0,⊤Aj+1,vu(Uj+1−Uj) +eAj+1,vv(Kj+1−Kj)
−1
2∆x
W0,⊤Aj,vu(Uj−Uj−1) +eAj,vv(Kj−Kj−1)
,
where eAj,vv:=W0,⊤Aj,vvW0. Note that since eAj,vv∈Rr×randW0,⊤Aj+1,vu∈Rr×2,
the main memory requirements stem from storing Kjat all spatial cells j, i.e., memory
requirements are O(r·Nx)opposed to the original method’s requirements of O(Nx·N).
An efficient computation of eAj,vvprecomputes eA:=W0,⊤AW0which requires O(r2·N)
operations. Using the matrix eA∈Rr×rto compute eAj,vvvia
eAj,vv=1
2(α1,j+α1,j−1)eA+1
2(um,j+um,j−1)Ir
15requires O(r2·Nx)operations. Hence,thecomputationalcostsforthe K-stepare CK≲r2·(Nx+N).
L-step:Toderivethe L-step,werepresentthesolution Vatspatialcell jasVj(t) =L(t)X0
j.
Moreover, we test with X0, meaning that we multiply the right-hand side with X0
jand
sum over j. Hence, using Einstein’s sum convention and writing out eAj,vvwe have
˙L=1
2∆tL(t)·(X0
j−1−2X0
j+X0
j+1)X0,⊤
j
−1
4∆x(AL(t)·(α1,j+1+α1,j) +L(t)·(um,j+1+um,j))·(X0
j+1−X0
j)X0,⊤
j
−1
4∆x(AL(t)·(α1,j+α1,j−1) +L(t)·(um,j+um,j−1))·(X0
j−X0
j−1)X0,⊤
j
−1
2∆x
Aj+1,vu(Uj+1−Uj)X0,⊤
j+Aj,vu(Uj−Uj−1)X0,⊤
j
.
To simplify the structure of the resulting equations, we define
eX0:=X
j(X0
j−1−2X0
j+X0
j+1)X0,⊤
j,
eα0
+:=X
j(α1,j+1+α1,j)(X0
j+1−X0
j)X0,⊤
j,
eu0
+:=X
j(um,j+1+um,j)(X0
j+1−X0
j)X0,⊤
j,
andeα0
−as well as eu0
−accordingly. This results in
˙L=1
2∆tL(t)eX0−1
4∆x 
AL(t) eα0
++eα0
−
+L(t) eu0
++eu0
−
−1
2∆x
Aj+1,vu(Uj+1−Uj)X0,⊤
j+Aj,vu(Uj−Uj−1)X0,⊤
j
.
Note that the highest memory requirements come from storing L∈RN×r. Computing
eX0,eα0
±andeu0
±requires O(r2·Nx)operations and computing A·Lrequires O(N·r)
operations, since Aonly has off-diagonal entries. The multiplication of LandeX0,eα0
±as
well as eu0
±requires O(r2·N)operations, i.e., we have a computational cost for the L-step
ofCL≲O(r2·(Nx+N)).
S-step:To derive the S-step, we represent the microscopic solution Vat spatial cell
jasVj(t) =W1S(t)⊤X1
j. Moreover, we test with X1andW1, i.e., we multiply the
right-hand side with X1
jand sum over jas well as multiply with W1,⊤. With the previous
definitions we have
˙S=1
2∆tS(t)eX1−1
4∆x
W1,⊤AW1S(t)⊤ eα1
++eα1
−
+S(t)⊤ eu1
++eu1
−
−1
2∆x
W1,⊤Aj+1,vu(Uj+1−Uj)X1,⊤
j+W1,⊤Aj,vu(Uj−Uj−1)X1,⊤
j
.
The memory requirements are O(r2)and following the discussion for the KandL-steps,
the computational costs for the S-step again are CS≲O(r2·(Nx+N)).
166.2.2 Friction step
For the friction step Eq. (7) we have according to Eq. (15)
˙Vj=1
h2
jG1Vj+1
hjG2Vj+um,jgν.
For simplicity of notation, we define the matrix ordinary differential equation (ODE)
˙V=h−2VG⊤
1+h−1VG⊤
2+umg⊤
ν, (21)
where h=diag(h1,···, hNx)andum=diag(um,1,···, um,N x)will be the values obtained
from a previous macro friction update Eq. (6) and assumed known during the micro step
Eq. (7). Let us again derive K,LandS-steps and directly define a time discretization.
K-step:Let us use the representation V=K(t)W1,⊤and test with W1. Then, the
K-step equation reads
˙K=h−2KW1,⊤G⊤
1W1+h−1KW1,⊤G⊤
2W1+umg⊤
νW1.
Since friction terms are commonly stiff, we use an implicit Euler method to discretize
in time. That is, for a fixed spatial cell jand defining bG1:=W1,⊤G1W1as well as
bG2:=W1,⊤G2W1we have

Ir−∆th−2
jbG1−∆th−1
jbG2
Kn+1
j=Kn
j+ ∆tun+1
m,jg⊤
νW1,
where un+1
m,jis the updated velocity from the macro friction step Eq. (6).
We again retrieve the time updated spatial basis which we denote by X2by a QR
decomposition of Kn+1. Hence, at Nxspatial cells, we need to solve a linear system with
runknowns. Moreover, we have to compute flux matrices with r2entries which require N
operations per entry. Thus, the computational costs are Cf
K≲Nx·r3+N·r2.
L-step:Use the representation V=X1L⊤and test the transposed of (21) with X1.
Then, the L-step equation reads
˙L=G1LX1,⊤h−2X1+G2LX1,⊤h−1X1+gνu⊤
mX1.
Let us define bh−2
1:=X1,⊤h−2X1andbh−1
1:=X1,⊤h−1X1and again use an implicit Euler
time discretization. This gives
Ln+1−∆tG1Ln+1bh−2
1−∆tG2Ln+1bh−1
1=Ln+ ∆tgνun+1,⊤
mX1.
The time updated coefficient basis which we denote by W2is then obtained by a QR
decomposition of Ln+1. Hence, we need to solve an r·Nsystem of linear equations which
requires O(r3·N3)operations. Moreover, computing bh−1
1andbh−2
1requires O(Nx·r2)
operations, hence Cf
L≲r3·N3+Nx·r2.
S-step:Use the representation V=X2SW2,⊤and test (21) with X2andW2. Then,
theS-step equation reads
˙S=bh−2
2SbG⊤
1+bh−1
2SbG⊤
2+X2,⊤umg⊤
νW2.
17An implicit Euler time discretization gives with Sn=X2,⊤X1S1W1,⊤W2
Sn+1−∆tbh−2
2Sn+1bG⊤
1−∆tbh−1
2Sn+1bG⊤
2=Sn+ ∆tX2,⊤un+1,⊤
mg⊤
νW2.
Hence, we need to solve an r2system of linear equations which requires O(r6)opera-
tions. Moreover, computing flux matrices requires O((Nx+N)·r2)operations, hence
Cf
S≲r2·(N+Nx) +r6.
Remark. Note that the implicit L-step exhibits high computational costs of O(r3·N3).
Nevertheless, we are able to separate the spatial degrees of freedom from the number of
moments, which are commonly much smaller than the number of spatial cells. Therefore,
we expect a significant reduction of computational costs by DLRA, which, however, does
not resemble its full potential. Note that DLRA will become substantially more efficient
compared to the full-rank baseline for two-dimensional spatial domains since, in this case,
the number of spatial cells drastically increases and thereby removes the computational
bottleneck of matrix inversions performed in the L-step. In this case, the computational
costs are distributed more evenly among the K,L, and Ssteps.
7 Numerical experiments
As numerical examples of the model reduction techniques developed in the previous sec-
tions, we consider three test cases: (1) a water column (also called dam break) test
case similar to the test case in [43] (2) a smooth wave similar to the test case in [46]
and (3) the square root velocity profile test case that mimics a realistic velocity profile.
Additionally to POD-Galerkin and DLRA we also include computations of the HSWME
with a reduced number of moments (rHSWME). In the following, rdenotes the rank in
the case of DLRA and POD-Galerkin and the number of Moments for the rHSWME. All
numerical experiments can be reproduced with the openly available source code [45]. The
simulations have been performed on 11th Gen Intel(R) Core(TM) i7-11850H CPUs (8
processing units).
7.1 Water column or dam break test case
In the first test case, we investigate a water column or dam break scenario defined by
the settings in Table 1. Initially, the water is at rest and the height profile is defined as
h(x) = 0 .3 + 0 .35·(tanh(x)−tanh(x−0.2)), for x∈[−1,1]leading to a water column
within [0,0.2]withslightlysmoothedboundaries. Note, thatweareusingasmoothedwater
column, because of the oscillator behavior of a Lax-Friedrichs scheme with non-smooth
initial conditions [4]. The friction parameters are ν= 1.0andλ= 0.5which slow down
velocities close to the bottom.
The numerical discretization is performed using Nx= 2000cells and a CFL number
of0.25for time stepping within t∈[0,0.2]. For the full-order HSWME model, we
consider N= 100coefficients, leading to a large system of coupled PDEs. For the model
reduction, we first consider a fixed number of r= 5basis function, which largely reduces
the complexity of the reduced POD-Galerkin and DLRA models.
The trial and test space for the POD-Galerkin approach is spanned by the POD-basis.
It is setup offline from the concatenation of the snapshots for two different trajectories
sampled with slip length ν∈ {0.1,10}. The snapshots are shown for the water height in
Fig. 2. From the snapshot matrix VPOD∈R(2NtNx)×Nwe can compute the POD basis
18friction coefficient λ= 0.5
slip length ν= 1.0
temporal domain t∈[0,0.2]
spatial domain x∈[−1,1]
spatial resolution Nx= 2000
number of moments N= 100
initial height h(x) = 0 .3 + 0 .35·(tanh(x)−tanh(x−0.2))
initial velocity u(0, x, ζ) = 0
CFL number CFL = 0.25
spatial discretization path-conservative FVM [42]
Table 1: Simulation setup for water column test case.
with help of the SVD Eq. (18) and evaluate the projected right-hand side efficiently for
the testing slip length ν= 1. We highlight that our approach does not try to decouple
space and time and we therefore avoid slowly decaying approximation errors of our dyadic
decomposition, a known problem for transport-dominated fluid systems. The difference
between the classical MOR approach, which suffers from this slow decay and the here
presented approach is shown in Fig. 3. As our approach only tries to reduce the component
space, it avoids slowly decaying approximation errors, thus yielding a rapid decay of
the POD approximation errors. Note, that this procedure is nothing new but has been
extensively used in hierarchical MOR reduction (see for example [63]).
0 200 400 600 800 1,000 1,200 1,400 1,60005001,0001,5002,000
ν= 10 ν= 0.1
time samples ntspace samples nx
0.40.60.81
Figure 2: Sampled snapshot data of the POD, shown for the water height component.
ThenumericalresultsshowninFig.4comparethenumericalresultsof(1)thefull-order
HSWME model, (2) the lowest-order SWE model, (3) the new macro-micro decomposition
POD-Galerkin, (4) the new macro-micro decomposition DLRA and (5) the HSWME with
a reduced number of moments. The full-order HSWME model clearly depicts two waves
symmetrically moving left and right, respectively. The simple SWE model uses a constant
velocity profile with zero micro structure and thus cannot capture the complex dynamics
induced by the bottom friction, which slows down the velocity profile at the bottom.
The new macro-micro decomposition POD-Galerkin and DLRA methods, yield optically
indistinguishable solutions from the full-order HSWME model, even though only r= 5
195 10 15 20 25 3010−1710−1310−910−510−1
number of modes rrelative erroroffline error - space/moment basis
offline error - moment basis
online error - moment basisFigure 3: Relative approximation errorP
i∥v(x, ti)−˜v(x, ti)∥L2of the snapshot data for
space-moment ˜v(x, t) =P
kαk(t)wk(x)andmomentonlybasis ˜v(x, t) =Pr
k=1ˆαk(x, t)wk.
The online error is given as ∥u(x, tend)−˜u(x, tend)∥L2, where u= (h, hu m)
basis functions are chosen. This emphasizes the good approximation quality of the reduced
models despite a small number of basis functions. However, we note that for this specific
test case the moment model with only 5 moments already does a good job as well. This is
because the dependencies on the higher moments vanishes quickly and a small number of
moments already gives an excellent approximation quality.
(a)
−1−0.5 0 0.5 10.30.350.40.45
xh
HSWME
SWE
POD-Galerkin
DLRA
rHSWME (b)
−1−0.5 0 0.5 1−0.2−0.100.10.2
xhum
HSWME
SWE
POD-Galerkin
DLRA
rHSWME
Figure 4: Water column test case comparison of macroscopic quantities water height h(a)
and momentum hum(b) for full-order HSWME, SWE, POD-Galerkin, and DLRA using
rank r= 5. Both reduced models DLRA and POD-Galerkin yield indistinguishable results
from the full-order model while the simple SWE model shows insufficient accuracy.
In Fig. 5 the water velocity profiles are plotted each time for different positions:
x= 0.05, 0.0, 0.15 close to the center of the domain in Fig. 5a and x= 0.65,0.67close to
the shock wave in Fig. 5b. In Fig. 5a, we clearly see that also the velocity profiles of the
full-order model and the reduced POD-Galerkin and DLRA models, as well as the reduced
moment model agree almost perfectly at all three points. The SWE model on the other
20hand shows an overestimation of the average velocity at both positions. This is due to
wrong propagation speeds of the SWE model [43] and clearly shows why this simple model
is not useful in simulations of such complex cases. In Fig. 5b, the profiles close to the shock
wave are plotted and the reduced models again agree almost perfectly with the full-order
model. Again the SWE model predicts wrong average profiles, in this case much smaller
than the full model and the reduced models.
Forthesettingsfromabove, Fig.6showstheruntimecomparisonbetweenthefull-order
HSWME, DLRA, SWE, and POD-Galerkin, where the POD-Galerkin runtime is divided
into the offline precomputations and the online phase. The truncation ranks of DLRA
r= 4and POD-Galerkin r= 3are tuned such that the relative L2errors of uat the
final time are approximately the same ( ≈0.3%, compare Fig. 7). The DLRA method
already reduces the runtime significantly. The SWE has the fastest runtime, but does not
result in sufficient accuracy as seen in the previous figures. The POD-Galerkin method is
equally as fast as the SWE during the online phase, but requires a relatively costly offline
precomputation phase. It is important to highlight that the efficacy of a global reduced
order model becomes particularly apparent in the realm of multi-query simulations. In
this context, the upfront costs associated with the offline phase of the POD-Galerkin
algorithm are offset by an exceptionally efficient online phase, which can be replicated
across a considerable number of queries.
However, there might be other MOR applications in which a global ROM can not be set
up, because of the tremendous amount of data that would be required in the offline stage.
For example, in the realistic scenario of two-dimensional HSWME or higher-dimensional
systems involving multiple parameters formulated in a tensor-valued ODE (discussed in
[40]). This is where DLRA has a clear advantage, as it does not rely on an offline phase.
When the offline phase becomes too expensive, a combination of both methods might be
beneficial. In this approach, DLRA is used to establish the initial basis, which is then
employed in the online phase of POD.
Increasing the rank of the reduced models leads to increasing accuracy at the expense
of more runtime, as can be seen in Fig. 7, where we compare the online computation time
of POD-Galerkin with DLRA and the reduced moment HSWME model. For the rank
adaptive version of DLRA we sample the solution for 14 different ϑvalues evenly on a log
scale in the interval 10−10≤ϑ≤100. From the comparison we observe, that rHSWME is
the fastest, which is not surprising since the higher moments vanish quickly, in a regime
of high friction. POD-Galerkin seems to achieve similar errors for small number of modes,
however, it is slower then the rHSWME with increasing accuracy. Both DLRA and its
adaptive version are one order of magnitude slower than POD-Galerkin. Note that since
weapplyMORonlyinthemicroscopichighermoments( v-components)thereducedDLRA
model converges towards the SWE with r→0. Therefore, we obtain small relative errors
even with a small number of modes.
As a summary of this first test case, we see very good accuracy of the reduced models
with small rank and significant speedup that can even be amplified by further reducing
the rank. Unfortunately, these speedups do not pay off directly when comparing it to the
reduced moments HSWME, as the higher moments vanish quickly, due to the choice of the
test case. In the next section, we will see, that this is not generally the case.
21(a)
−2 −1 0 1 2
·10−200.10.20.30.4
vzx= 0.05, DLRA
x= 0.1, DLRA
x= 0.15, DLRA
x= 0.05, POD-Galerkin
x= 0.1, POD-Galerkin
x= 0.15, POD-Galerkin
x= 0.05, HSWME
x= 0.1, HSWME
x= 0.15, HSWME
x= 0.05, SWE
x= 0.1, SWE
x= 0.15, SWE
x= 0.05, rHSWME
x= 0.1, rHSWME
x= 0.15, rHSWME
(b)
0 0.1 0.2 0.3 0.4 0.500.10.20.30.4
vzx= 0.55, DLRA
x= 0.1, DLRA
x= 0.67, DLRA
x= 0.55, POD-Galerkin
x= 0.65, POD-Galerkin
x= 0.67, POD-Galerkin
x= 0.55, HSWME
x= 0.65, HSWME
x= 0.67, HSWME
x= 0.55, SWE
x= 0.65, SWE
x= 0.67, SWE
x= 0.55, rHSWME
x= 0.65, rHSWME
x= 0.67, rHSWME
Figure 5: Water column test case comparison of velocity profiles close to the domain
center (a) and close to the shock wave (b) for full-order HSWME, SWE, POD-Galerkin,
and DLRA using rank r= 5. Both reduced models DLRA and POD-Galerkin also yield
indistinguishable results from the full-order model while the simple SWE model shows
insufficient accuracy and wrong propagation speeds.
22HSWME DLRA SWE POD-Galerkin02004006008001,0001,200
online costs
offline costs (SVD + FOM)560.4 s
78.8 s
4.5 s 12.4 s1109.3 stcpu[sec]Figure 6: Water column test case runtime comparison between full-order HSWME, DLRA,
SWE, POD-Galerkin (including offline precomputations and online phase separately) show
a large speedup of the reduced models with respect to the full model. The simple SWE
model is obviously fastest but does not achieve sufficient accuracy. The truncation ranks
of DLRA r= 4and POD-Galerkin r= 3are tuned such that the relative L2errors of u
at the final time are approximately the same ( ≈0.3%).
10−1610−1310−1010−710−410−1100101
relative errorspeedupreduced moments
POD-Galerkin
DLRA
adaptive DLRA
Figure 7: Water column test case runtime comparison speedup and error
comparison between reduced moments HSWME, DLRA, POD-Galerkin (without offline
precomputation phase) in comparison to full HSWME model (100 moments). For
the comparison, we vary the degrees of freedom in the system by adjusting the
rank (POD-Galerkin, DLRA) or the number of moments (reduced moments) to
r= 1,2,3,4,5,7,9,11,15,20,25,30. For the rank adaptive DLRA, we select 14 different
tolerance values on a logarithmic scale from 10−10to100. The relative error denotes the
L2error of u= (h, hu m)at the final time t= 0.2.
237.2 Smooth wave
This second test case closely follows the general simulation test cases in [46] and its setup
is given in Table 2. It describes a smooth wave given by the initial height function
h(x) = 1 +exp(3 cos( π(x+ 0.5)))/exp(4)travelling through a periodic domain x∈[−1,1].
The initial velocity profile is chosen as u(0, x, ζ) = 0 .25·(1−ϕ1(ζ) +ϕN(ζ)), leading to
um= 0.25,α1=−0.25, and αN= 0.25. This velocity profile happens to be outside
of the hyperbolicity region of the standard SWME model in the test case in [43]. This
means that applying the SWME model can lead to instability issues. This is resolved by
applying the HSWME model and demonstrates the utility of this guaranteed hyperbolic
model necessary to result in a well-posed model. Given the substantial dependence of the
initial profile on the last moment αN, it is anticipated that the rHSWME will be surpassed
by DLRA and POD-Galerkin.
friction coefficient λ= 0.001
slip length ν= 100
temporal domain t∈[0,0.2]
spatial domain periodic x∈[−1,1]
spatial resolution Nx= 2000
number of moments N= 100
initial height h(x) = 1 +exp(3 cos( π(x+ 0.5)))/exp(4)
initial velocity u(0, x, ζ) = 0 .25·(1−ϕ1(ζ) +ϕN(ζ))
CFL number CFL = 0.2
spatial discretization path-conservative FVM [42]
Table 2: Simulation setup for smooth wave test case.
The numerical discretization uses the same parameters as before. The test is carried
out using Nx= 2000cells and a CFL number of 0.25for the time interval t∈[0,0.2]. The
full-order HSWME model uses N= 100coefficients and the reduced models use a fixed
number of r= 4basis function.
Similar to the water column test case, we compute the POD-basis from the snapshots of
twotrajectoriessimulatedwiththefullHSWMEat ν∈ {10,1000}. Thefrictionparameters
to compare all methods are now chosen as ν= 10andλ= 0.001, leading to large values
of the bottom friction term.
We first show the numerical results for the macroscopic water height hand momentum
humin Fig. 8 for (1) the full-order HSWME model, (2) the lowest-order SWE model, (3)
the reduced HSWME model, (4) the new macro-micro decomposition POD-Galerkin, and
(5) the new macro-micro decomposition DLRA. As for the first test case, the simple SWE
model fails at capturing the complex dynamics of the test case, which is especially apparent
inthemomentum humshowninFig.8b. Similarly, PODGalerkinandtherHSWMEmodel
struggle to capture an accurate description of the momentum. Here DLRA yields a very
good match even with a small number of degrees of freedom.
In Fig. 9 the water velocity profiles for the smooth wave test case are plotted each time
for different positions: x= 0.05,0.0,0.15close to the center of the domain in Fig. 9a and
x= 0.65,0.67further away from the center in Fig. 9b. In Fig. 9a, the velocity profiles
of the full-order model agree well with the reduced POD-Galerkin and DLRA models at
all three points, while there are some small differences in the maximum velocity value due
to the complexity of the test case and the significant model reduction. In contrast the
24(a)
−1−0.5 0 0.5 111.11.21.3
xh
HSWME
SWE
POD-Galerkin
DLRA
rHSWME (b)
−1 −0.5 0 0.5 1−2024·10−2
xhum
HSWME
SWE
POD-Galerkin
DLRA
rHSWME
Figure 8: Smooth wave test case comparison of macroscopic quantities water height h(a)
and momentum hum(b) for full and reduced-moments HSWME, SWE, POD-Galerkin,
and DLRA using rank r= 4. Again, the reduced models DLRA and POD-Galerkin yield
very good approximations of the full-order model while the simple SWE model fails.
rHSWME completely overshoots in the maximum velocity as it misses the information of
the highest moment. Similarly for the SWE model, that is not shown for conciseness. The
velocity profiles at positions further away from the center in Fig. 9b yield a similar result.
For this smooth wave test case, we also want to emphasize one main property of our
newly developed macro-micro decomposition reduced models, which is guaranteed mass
conservation by construction. In Fig. 10, the time evolutions of the total massR1
−1hdx,
thetotalmomentumR1
−1humdxandthetotalfourthhighermomentR1
−1hα4dxareplotted
in terms of relative deviation from the initial values. It is clearly seen that the total mass
is constant as changes are within machine precision. The total momentum and total
higher momentum are not conserved in agreement with the underlying PDE model, which
includes friction terms for the corresponding equations leading to a loss of momentum due
to bottom friction, for example. The mass conservation is achieved due to the macro-micro
decomposition formulation which includes explicitly solving for the water height while
applyingthemodelreductiononlytotheremainingmicroscopicvelocityprofilecoefficients.
While the total momentum is not constant, its evolution is in very good agreement with the
full HSWME model for both reduced models since also the equation for humis apart from
the model reduction process. Some deviations are seen for the total fourth momentum,
obviously originating from the model reduction process for that variable.
With Fig. 11 we want to emphasize that a naive application of model reduction tech-
niques does not lead to conservation of mass. This is done by comparison of our new
macro-micro decomposition conservative DLRA, where the evolution of the macroscopic
water height hand momentum humis decoupled from the microscopic reduced coefficient
system, with a naive (non-conservative) DLRA, where the complete system including water
height h, momentum humand coefficients hαiis reduced as a whole. It is seen that only
the macro-micro decomposition conservative DLRA method achieves mass conservation.
Next, we compare the runtime vs. speedup of the presented methods. For this
study, the rank of DLRA and POD-Galerkin is gradually increased starting from r= 1
until r= 30(not all points in between are included). As before the rank adaptive
version of DLRA is sampled for 14 different ϑvalues evenly on a log scale in the interval
25(a)
0 0.20.40.60.8 1 1.21.4
·10−200.20.40.60.81
vzx= 0.05, DLRA
x= 0.1, DLRA
x= 0.15, DLRA
x= 0.05, POD-Galerkin
x= 0.1, POD-Galerkin
x= 0.15, POD-Galerkin
x= 0.05, HSWME
x= 0.1, HSWME
x= 0.15, HSWME
x= 0.05, rHSWME
x= 0.1, rHSWME
x= 0.15, rHSWME
(b)
0 1 2 3
·10−300.20.40.60.81
vzx= 0.55, DLRA
x= 0.65, DLRA
x= 0.67, DLRA
x= 0.55, POD-Galerkin
x= 0.65, POD-Galerkin
x= 0.67, POD-Galerkin
x= 0.55, HSWME
x= 0.65, HSWME
x= 0.67, HSWME
x= 0.55, rHSWME
x= 0.65, rHSWME
x= 0.67, rHSWME
Figure 9: Smooth wave test case comparison of velocity profiles close to the domain center
(a)andclosetotheshockwave(b)forfull-orderHSWME,POD-Galerkin, andDLRAusing
rank r= 5(SWEomittedforconciseness). BothreducedmodelsDLRAandPOD-Galerkin
yield good results in comparison with the full-order model.
260 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2−101·10−15mass
0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2024·10−2momentum
0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.201·10−2
time thigher momentumHSWME
POD-Galerkin
DLRAFigure 10: Smooth wave test case time evolution of the total mass (R1
−1hdx), momentum
(R1
−1hudx) and higher momentum (R1
−1hα4dx) relative to their respective initial values
plotted for the full HSWME model and both reduced POD-Galerkin and DLRA models.
The mass is conserved and the momentum accurately follows the full model reference
solution.
0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2012
time tmasssplit-conservative DLRA
non-conservative DLRA
Figure 11: Smooth wave test case time evolution of the total mass (R1
−1hdx) relative to its
respectiveinitialvalueplottedforthenovelmacro-microdecompositionconservativeDLRA
and a naive (non-conservative) DLRA. The mass is only conserved for the macro-micro
decomposition conservative DLRA.
2710−10≤ϑ≤100. Comparing both MOR methods and the rHSWME in Fig. 12, we
observe that rHSWME stagnates at about 2% error. This can be explained as after the
linear moment the higher moments only increase the complexity of the calculations, but
can not capture any sensible dynamics before the last moment is not included. DLRA
and POD-Galerkin however do not a-priori impose a basis and therefore can include the
information necessary to represent the dynamics of the highest moments. As expected,
we observe that DLRA exhibits an increased runtime in comparison to the online phase
of POD-Galerkin. In general, we see that the adaptive DLRA method can achieve results
with higher accuracy, which is compromised by additional effort for adding and removing
basis functions to the decomposition. However, DLRA does not require a computationally
expensive and memory-intensive offline phase. Furthermore, since DLRA utilizes time-
dependentbasisfunctions, itexhibitstwoadvantagesoverPOD-Galerkin. First, sincebasis
information can be added and removed in time, the approximation space at a given rank
is richer than for POD-Galerkin. This is for example seen when comparing both methods
for a fixed rank r= 4in Fig. 8. DLRA achieves a better approximation quality with fewer
degrees of freedom. Second, when the dynamics in the online phase is not captured by the
POD-ansatz space, POD-Galerkin requires an expensive retraining while DLRA adapts
automatically to such situations. A main advantage of POD-Galerkin, besides the reduced
runtime is, that it does not require the derivation of new evolution equations. Moreover,
in the case of certain non-linearities, efficient evolution equations for DLRA might not be
available.
10−710−610−510−410−310−210−1100101102
relative errorspeedup
reduced moments
POD-Galerkin
DLRA
adaptive DLRA
Figure 12: Smooth wave test case runtime comparison speedup and error comparison
between rHSWME, SWE, DLRA, POD-Galerkin (without offline precomputation phase)
in comparison to full HSWME model (100 moments). For the comparison, we vary the
degrees of freedom in the system by adjusting the rank (POD-Galerkin, DLRA) or the
number of moments (reduced moments) to r= 1,2,3,5,7,9,15,20,25,30. For the rank
adaptive DLRA, we select 14 different tolerance values on a logarithmic scale from 10−10
to100. The relative error denotes the L2error of u= (h, hu m)at the final time t= 0.2.
287.3 Square root profile
In this section, we present a realistic test case that implements a water column with
an initial square root velocity profile u(0, x, ζ) =√ζin the viscous case. Note, that in
comparison to Section 7.1 we use an increased slip length and decreased friction coefficient
that highlights a stronger coupling of the higher moments to (h, hu m). The range of
parameters is similar to the test cases used in [34], where the relaxation of the model
towards different equilibria is investigated. The precise test setup is detailed in Table 3.
friction coefficient λ= 0.01
slip length ν= 10
temporal domain t∈[0,0.05]
spatial domain periodic x∈[−0.15,0.3]
spatial resolution Nx= 2000
number of moments N= 100
initial height h(x) =0.7
2(−tanh(50( x−0.2)) + tanh(50( x))) + 0 .3
initial velocity u(0, x, ζ) =√ζ
CFL number CFL = 0.1
spatial discretization path-conservative FVM [42]
Table 3: Simulation setup for square root profile test case, compare [42].
As before we sample the solution at two different slip lengths ν= 1andν= 100to
set up the POD basis in an offline phase. For each parameter, we sample 800 snapshots,
resulting in a total of 1600 snapshots to set up the POD basis as detailed in Section 5.1.
The simulation results are shown in Fig. 13a and Fig. 13b. We see a very good match of
the DLRA method with the full HSWME model, while POD-Galerkin and the rHWSME
model (with less coefficients r= 4) shows a small deviation from the full model solution.
This square root profile example shows that DLRA and its adaptive version are superior
for a small number of degrees of freedom. This is especially relevant for realistic scenarios
in higher space dimension because here one does not have the luxury of choosing a high
number of degrees of freedom due to the memory bottleneck.
Figure 14 also visualizes the difference in the velocity profiles. The same observation as
for the macroscopic variables h, umcan be made: DLRA succeeds at reproducing the full
model solution of HSWME, while POD-Galerkin and the smaller rHWSME model lead to
an error in the velocity profiles. This is true both for a point in the center of the simulation
domain in Fig. 14a as well as for a point close to the shock wave in Fig. 14b, where the
square root velocity profile is still clearly visible.
Figure 15 shows the speedup obtained depending on the resulting error simulated with
therespectivemethod. Eachdatapointrepresentsonechoiceforthenumberofthereduced
model coefficients ror10−10≤ϑ≤100. Note that offline computation costs are neglected
here. As expected and shown for the previous test cases, POD-Galerkin has a very fast
online computation phase leading to large speedups. The rank-adaptive DLRA can obtain
very good accuracy as well even without any offline computation, but at the sacrifice of a
more costly online computation. Simply reducing the number of moments in the full model
(called rHSWME above) leads to significant errors and is therefore not recommended.
The square root test demonstrates for a more physically relevant velocity profile the
power of the rank-adaptive model order reduction via adaptive DLRA.
29(a)
−0.2 0 0.2 0.40.40.60.81
xh
HSWME
SWE
POD-Galerkin
DLRA
rHSWME (b)
−0.2 0 0.2 0.4−0.100.10.2
xhum
HSWME
SWE
POD-Galerkin
DLRA
rHSWME
Figure 13: Square root test case comparison of macroscopic variables h(a) and hum(b)
for full-order HSWME, SWE, POD-Galerkin, and DLRA using rank r= 4and a low-order
rHSWMEmodelwithonly4moments. DLRAshowsexcellentaccuracyandPOD-Galerkin
yield good results in comparison with the full-order model.
7.4 Summary of numerical results
To summarize and compare the gained insights from numerical test cases, we note that, as
expected, reduced moment models (rHSWME) perform well in settings with high friction
and smooth initial velocity profiles. This is especially seen in Section 7.1, where rHSWME
yields the best performance, achieving a speedup of over 50 compared to the full model to
achieve a relative error smaller than 10−5. While POD Galerkin demonstrates a speedup
of around 20 at the same error level, the additional computational costs required by DLRA
lead to a significantly lower speedup of around 5. In situations where the initial velocity
profile is irregular or friction is small, POD Galerkin and DLRA exhibit a clear advantage
overrHSWME.ThisisseeninSections7.2and7.3, whereanerrorlevelof 10−5issurpassed
at a speedup of around 50 for POD Galerkin and 16 for DLRA in Section 7.2, and
50 for POD Galerkin and 8 for DLRA in Section 7.3. Overall, POD Galerkin achieves
a higher speedup at given error levels compared to DLRA when factoring out offline
costs. This is expected, as in this case, POD Galerkin uses a fixed basis, whereas DLRA
additionally requires solving basis update equations. However, POD-Galerkin requires
additionalhyperparameters, whileDLRAallowserrorstobecontrolledduringcomputation
when using rank-adaptive integrators with a single hyperparameter. Comparing fixed-rank
and rank-adaptive DLRA methods, it is observed that an adaptive rank will significantly
improve the method’s performance. The two factors that benefit the rank-adaptive method
are the exact initial conditions of the S-steps and the ability to pick varying ranks over
time.
8 Conclusion
In this work we proposed mass conservative model order reduction methods for the hy-
perbolic shallow water moment equations that yield fast and accurate solutions. Mass
conservation is achieved by decomposing the macroscopic water height and momentum
equations from the microscopic higher-order moments and applying model order reduction
30(a)
−0.25−0.2−0.15−0.1−0.05 0 0.0500.20.40.60.8
vzx= 0.0, DLRA
x= 0.05, DLRA
x= 0.1, DLRA
x= 0.0, POD-Galerkin
x= 0.05, POD-Galerkin
x= 0.1, POD-Galerkin
x= 0.0, HSWME
x= 0.05, HSWME
x= 0.1, HSWME
x= 0.0, rHSWME
x= 0.05, rHSWME
x= 0.1, rHSWME
(b)
0 0.1 0.2 0.300.20.40.60.8
vzx= 0.2, DLRA
x= 0.25, DLRA
x= 0.3, DLRA
x= 0.2, POD-Galerkin
x= 0.25, POD-Galerkin
x= 0.3, POD-Galerkin
x= 0.2, HSWME
x= 0.25, HSWME
x= 0.3, HSWME
x= 0.2, rHSWME
x= 0.25, rHSWME
x= 0.3, rHSWME
Figure 14: Square root test case comparison of velocity profiles close to the domain center
(a) and close to the shock wave (b) for full-order HSWME, POD-Galerkin, DLRA using
rank r= 4and a low-order rHSWME model with only r= 4modes (SWE omitted for
conciseness). Again DLRA shows excellent accuracy and POD-Galerkin yield good results
in comparison with the full-order model.
3110−710−610−510−410−310−210−1100101102
relative errorspeedup
reduced moments
POD-Galerkin
DLRA
adaptive DLRAFigure 15: Square root test case runtime comparison speedup and error comparison
between DLRA, POD-Galerkin (without offline precomputation phase) and rHSWME in
comparisontofullHSWMEmodel(100moments). Forthecomparison, wevarythedegrees
of freedom in the system by adjusting the rank (POD-Galerkin, DLRA) or the number of
moments (reduced moments) to r= 1,2,3,4,5,6,7,8,9,10,11,15,20,25,30. For the rank
adaptive DLRA, we select 14 different tolerance values on a logarithmic scale from 10−10
to100. The relative error denotes the L2error of (h, hu m)at the final time t= 0.05.
solely to the microscopic higher-order moment equations. Additionally, the decomposition
allows to recover the naive SWE for vanishing truncation rank of the reduced HSWME,
resulting in a very accurate reduced model even for a small number of modes. We
use two model order reduction methods, namely POD-Galerkin and dynamical low-rank
approximations to accelerate the computation and reduce memory footprint. The methods
can produce speedups of up to 100 compared to the full HSWME, while the introduced
approximation errors are negligible. However, it must be noted, that the HSWME with
a reduced number of moments already shows a good performance, if the higher moments
vanishquickly. ConcludingthatDLRAandPOD-Galerkinaremostefficientiftheshearing
in the vertical direction is strong and therefore a slow decay in the additional moments is
expected. Employing rank-adaptive methods led to further runtime improvements while
achieving high accuracy with a smaller number of variables.
The work in this paper opens up possibilities for future work on model reduction for
shallow water moment models. An interesting extension would be to use DLRA to generate
basis functions for POD.
Author Contribution Statement (CRediT)
All authors contributed equally to this publication. The original draft and all subsequent
edits and reviews were done equally by all authors. The authors contributions differ in the
following points:
32Julian Koellermeier: initial idea, methodology, implementation of HSWME, setup of test
cases
Philipp Krah: implementation of POD-Galerkin, simulation/setup of numerical tests,
visualization
Jonas Kusch: initial idea, methodology, implementation of HSWME, implementation
of DLRA, simulation/setup of numerical tests, visualization
Conflict of Interest
The authors declare that they have no conflict of interest.
Code and Data Availability
All scripts to reproduce the results are available at [45].
Acknowledgement
The authors would like to acknowledge the financial support of the CogniGron research
centerandtheUbboEmmiusFunds(UniversityofGroningen). JonasKuschwasfundedby
the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) – 491976834.
The authors were granted access to the HPC resources of IDRIS under the allocation No.
AD012A01664R1 attributed by Grand Équipement National de Calcul Intensif (GENCI).
Centre de Calcul Intensif d’Aix-Marseille is acknowledged for granting access to its high
performance computing resources. Furthermore, we would like to thank Yannick Schubert
for detailed reading and commenting on the work.
References
[1] A. Amrita and J. Koellermeier. Projective integration for hyperbolic shallow water
moment equations. Axioms, 11(5):235, 2022. 5, 7, 8
[2] P. Astrid, S. Weiland, K. Willcox, and T. Backx. Missing point estimation in models
described by proper orthogonal decomposition. IEEE Transactions on Automatic
Control, 53(10):2237–2251, 2008. 12
[3] M. Barrault, Y. Maday, N. C. Nguyen, and A. T. Patera. An ‘empirical
interpolation’method: application to efficient reduced-basis discretization of partial
differential equations. Comptes Rendus Mathematique , 339(9):667–672, 2004. 12
[4] M. Breuß. The correct use of the Lax–Friedrichs method. ESAIM: Mathematical
Modelling and Numerical Analysis , 38(3):519–540, 2004. 18
[5] T. Bui-Thanh, M. Damodaran, and K. Willcox. Proper orthogonal decomposition
extensions for parametric applications in compressible aerodynamics. In 21st AIAA
applied aerodynamics conference , page 4213, 2003. 12
[6] Z.Cai, Y.Fan, andR.Li. GloballyhyperbolicregularizationofGrad’smomentsystem
in one dimensional space. Commun. Math. Sci. , 11(2):547–571, 2013. 7
33[7] M. Castro and E. Fernández-Nieto. A class of computationally fast first order finite
volume solvers: PVM methods. SIAM Journal on Scientific Computing , 34(4):A2173–
A2196, 2012. 38
[8] M. J. Castro, P. G. LeFloch, M. L. Munoz-Ruiz, and C. Pares. Why many theories
of shock waves are necessary: Convergence error in formally path-consistent schemes.
Journal of Computational Physics , 227(17):8107–8129, 2008. 38
[9] G. Ceruti, J. Kusch, and C. Lubich. A rank-adaptive robust integrator for dynamical
low-rank approximation. BIT Numerical Mathematics , pages 1–26, 2022. 2, 14
[10] G. Ceruti, J. Kusch, and C. Lubich. A parallel rank-adaptive integrator for dynamical
low-rank approximation. arXiv preprint arXiv:2304.05660 , 2023. 14
[11] G. Ceruti and C. Lubich. An unconventional robust integrator for dynamical low-rank
approximation. BIT Numerical Mathematics , 62(1):23–44, 2022. 2
[12] G. Ceruti, C. Lubich, and H. Walach. Time integration of tree tensor networks. SIAM
Journal on Numerical Analysis , 59(1):289–313, 2021. 14
[13] S. Chaturantabut and D. C. Sorensen. Nonlinear model reduction via discrete
empirical interpolation. SIAM Journal on Scientific Computing , 32(5):2737–2764,
2010. 12
[14] M. Christen, J. Kowalski, and P. Bartelt. Ramms: Numerical simulation of dense
snow avalanches in three-dimensional terrain. Cold Regions Science and Technology ,
63(1-2):1–14, 2010. 1
[15] P. Courtier and J.-F. Geleyn. A global numerical weather prediction model with
variable resolution: Application to the shallow-water equations. Quarterly Journal of
the Royal Meteorological Society , 114(483):1321–1346, 1988. 1
[16] A. Dektor, A. Rodgers, and D. Venturi. Rank-adaptive tensor methods for high-
dimensional nonlinear PDEs. Journal of Scientific Computing , 88(2):36, 2021. 14
[17] C. Eckart and G. Young. The approximation of one matrix by another of lower rank.
Psychometrika , 1(3):211–218, 1936. 11
[18] V. Ehrlacher and D. Lombardi. A dynamical adaptive tensor method for the Vlasov–
Poisson system. Journal of Computational Physics , 339:285–306, 2017. 14
[19] L. Einkemmer, J. Hu, and J. Kusch. Asymptotic–preserving and energy stable
dynamical low-rank approximation. arXiv preprint arXiv:2212.12012 , 2022. 5
[20] L. Einkemmer, J. Hu, and Y. Wang. An asymptotic-preserving dynamical low-rank
method for the multi-scale multi-dimensional linear transport equation. Journal of
Computational Physics , page 110353, 2021. 5
[21] L. Einkemmer and C. Lubich. A quasi-conservative dynamical low-rank algorithm
for the Vlasov equation. SIAM Journal on Scientific Computing , 41(5):B1061–B1081,
2019. 15
[22] L. Einkemmer, A. Ostermann, and C. Scalone. A robust and conservative dynamical
low-rank algorithm. arXiv preprint arXiv:2206.09374 , 2022. 2, 14
34[23] R. Everson and L. Sirovich. Karhunen–Loeve procedure for gappy data. JOSA A ,
12(8):1657–1664, 1995. 12
[24] Y. Fan, J. Koellermeier, J. Li, R. Li, and M. Torrilhon. Model reduction of kinetic
equations by operator projection. Journal of Statistical Physics , 162(2):457–486, 2016.
1, 7
[25] C. Farhat, P. Avery, T. Chapman, and J. Cortial. Dimensional reduction of nonlinear
finite element dynamic models with finite rotations and energy-based mesh sampling
and weighting for computational efficiency. International Journal for Numerical
Methods in Engineering , 98(9):625–662, 2014. 12
[26] J. Garres-Díaz, T. M. de Luna, M. J. Castro, and J. Koellermeier. Shallow water
moment models for bedload transport problems. Communications in Computational
Physics, 11(3):435–467, 2021. 1, 6, 7
[27] C. Greif and K. Urban. Decay of the Kolmogorov n-width for wave problems. Applied
Mathematics Letters , 96:216–222, 2019. 3, 10
[28] M. A. Grepl, Y. Maday, N. C. Nguyen, and A. T. Patera. Efficient reduced-basis
treatment of nonaffine and nonlinear partial differential equations. ESAIM:
Mathematical Modelling and Numerical Analysis , 41(3):575–605, 2007. 12
[29] B. Haasdonk and M. Ohlberger. Reduced basis method for finite volume
approximations of parametrized linear evolution equations. ESAIM: Mathematical
Modelling and Numerical Analysis , 42(2):277–302, 2008. 11
[30] N. Halko, P. G. Martinsson, and J. A. Tropp. Finding structure with randomness:
probabilistic algorithms for constructing approximate matrix decompositions. SIAM
Review, 53(2):217–288, 2011. 11
[31] C. Hauck and S. Schnake. A predictor-corrector strategy for adaptivity in dynamical
low-rank approximations. arXiv preprint arXiv:2209.00550 , 2022. 2
[32] J. S. Hesthaven, C. Pagliantini, and N. Ripamonti. Rank-adaptive structure-
preserving model order reduction of Hamiltonian systems. ESAIM: Mathematical
Modelling and Numerical Analysis , 56(2):617–650, 2022. 14
[33] M. Hochbruck, M. Neher, and S. Schrammer. Rank-adaptive dynamical low-rank
integrators for first-order and second-order matrix differential equations. BIT
Numerical Mathematics , 63(1):9, 2023. 14
[34] Q. Huang, J. Koellermeier, and W.-A. Yong. Equilibrium stability analysis
of hyperbolic shallow water moment equations. Math. Method. Appl. Sci. ,
45(10):6459–6480, 2022. 5, 7, 8, 9, 10, 29
[35] B. Karasözen, S. Yıldız, and M. Uzunca. Structure preserving model order reduction
of shallow water equations. Mathematical Methods in the Applied Sciences , 44(1):476–
492, 2021. 2
[36] B. Karasözen, S. Yıldız, and M. Uzunca. Energy preserving reduced-order modeling
of the rotating thermal shallow water equation. Physics of Fluids , 34(5):056603, 2022.
2
35[37] M. A. Kern, P. A. Bartelt, and B. Sovilla. Velocity profile inversion in dense avalanche
flow.Annals of Glaciology , 51(54):27–31, 2010. 6
[38] E. Kieri, C. Lubich, and H. Walach. Discretized dynamical low-rank approximation
in the presence of small singular values. SIAM Journal on Numerical Analysis ,
54(2):1020–1038, 2016. 2
[39] O. Koch and C. Lubich. Dynamical low-rank approximation. SIAM Journal on Matrix
Analysis and Applications , 29(2):434–454, 2007. 2, 13
[40] O. Koch and C. Lubich. Dynamical tensor approximation. SIAM Journal on Matrix
Analysis and Applications , 31(5):2360–2375, 2010. 21
[41] J. Koellermeier and M. Castro. High-order non-conservative simulation of hyperbolic
moment models in partially-conservative form. East Asian Journal on Applied
Mathematics , 11(3), 2021. 39
[42] J. Koellermeier and E. Pimentel. Steady states and well-balanced schemes for shallow
water moment equations with topography. Appl. Math. Comput. , 427, 2022. 6, 7, 8,
19, 24, 29, 38
[43] J. Koellermeier and M. Rominger. Analysis and numerical simulation of hyperbolic
shallow water moment equations. Commun. Comp. Phys. , 28((3)):1038–1084, 2020.
1, 6, 7, 18, 21, 24
[44] J. Koellermeier, R. P. Schaerer, and M. Torrilhon. A framework for hyperbolic
approximation of kinetic equations using quadrature-based projection methods.
Kinetic and Related Models , 7(3):531–549, 2014. 1, 7
[45] J. Kollermeier, P. Krah, and J. Kusch. Numerical testcases for "Dynamical
low-rank approximation for Burgers’ equation with uncertainty" , 2023.
https://github.com/JonasKu/Publication-Split-conservative-model-order-reduction-
for-hyperbolic-shallow-water-moment-equations.git. 18, 33
[46] J.KowalskiandM.Torrilhon. Momentapproximationsandmodelcascadesforshallow
flow.Communications in Computational Physics , 25, 2019. 1, 6, 7, 18, 24
[47] P. Krah, T. Engels, K. Schneider, and J. Reiss. Wavelet adaptive proper orthogonal
decomposition for large-scale flow data. Advances in Computational Mathematics ,
48(2):1–40, 2022. 11
[48] K. Kunisch and S. Volkwein. Galerkin Proper Orthogonal Decomposition Methods
for a General Equation in Fluid Dynamics. SIAM Journal on Numerical Analysis ,
40(2):492–515, 2002. 2
[49] J. Kusch, L. Einkemmer, and G. Ceruti. On the stability of robust dynamical low-rank
approximations for hyperbolic problems. SIAM Journal on Scientific Computing ,
45(1):A1–A24, 2023. 2
[50] J. Kusch and P. Stammer. A robust collision source method for rank adaptive
dynamical low-rank approximation in radiation therapy. ESAIM: M2AN , 2022. 2
36[51] T. Lassila, A. Manzoni, A. Quarteroni, and G. Rozza. Model order reduction in fluid
dynamics: challenges and perspectives. Reduced Order Methods for modeling and
computational reduction , pages 235–273, 2014. 2
[52] A. Lozovskiy, M. Farthing, and C. Kees. Evaluation of Galerkin and Petrov–Galerkin
model reduction for finite element approximations of the shallow water equations.
Computer Methods in Applied Mechanics and Engineering , 318:537–571, 2017. 2
[53] A. Lozovskiy, M. Farthing, C. Kees, and E. Gildin. POD-based model reduction
for stabilized finite element approximations of shallow water flows. Journal of
Computational and Applied Mathematics , 302:50–70, 2016. 2
[54] C. Lubich and I. V. Oseledets. A projector-splitting integrator for dynamical low-rank
approximation. BIT Numerical Mathematics , 54(1):171–188, 2014. 2, 14
[55] J.L.Lumley. Thestructureofinhomogeneousturbulentflows. Atmospheric turbulence
and radio wave propagation , pages 166–178, 1967. 2
[56] L. Mansilla Alvarez, P. Blanco, C. Bulant, E. Dari, A. Veneziani, and R. Feijóo.
Transversally enriched pipe element method (TEPEM): An effective numerical
approach for blood flow modeling. International journal for numerical methods in
biomedical engineering , 33(4):e2808, 2017. 2
[57] L. Mirsky. Symmetric gauge functions and unitarily invariant norms. The quarterly
journal of mathematics , 11(1):50–59, 1960. 11
[58] M. Ohlberger and S. Rave. Reduced basis methods: Success, limitations and future
challenges. Proceedings of the Conference Algoritmy , pages 1–12, 2016. 3, 10
[59] B. Peherstorfer. Model reduction for transport-dominated problems via online
adaptive bases and adaptive sampling. SIAM Journal on Scientific Computing ,
42(5):A2803–A2836, Jan. 2020. Publisher: Society for Industrial and Applied
Mathematics. 2
[60] S. Perotto, A. Ern, and A. Veneziani. Hierarchical local model reduction for elliptic
problems: a domain decomposition approach. Multiscale Modeling & Simulation ,
8(4):1102–1127, 2010. 2
[61] S. Perotto, A. Reali, P. Rusconi, and A. Veneziani. HIGAMod: A Hierarchical
IsoGeometric Approach for MODel reduction in curved pipes. Computers & Fluids ,
142:21–29, 2017. 2
[62] S. Perotto and A. Veneziani. Coupled model and grid adaptivity in hierarchical
reduction of elliptic problems. Journal of Scientific Computing , 60(3):505–536, 2014.
2
[63] K. Smetana and M. Ohlberger. Hierarchical model reduction of nonlinear partial
differential equations based on the adaptive empirical projection method and reduced
basistechniques. ESAIM: Mathematical Modelling and Numerical Analysis ,51(2):641–
677, 2017. 2, 19
37[64] R. Ştefănescu, A. Sandu, and I. M. Navon. Comparison of POD reduced order
strategies for the nonlinear 2D shallow water equations. International Journal for
Numerical Methods in Fluids , 76(8):497–521, 2014. 2
[65] R. Ştefănescu, A. Sandu, and I. M. Navon. POD/DEIM reduced-order strategies
for efficient four dimensional variational data assimilation. Journal of Computational
Physics, 295:569–595, 2015. 2
[66] M. Torrilhon. Modeling nonequilibrium gas flow based on moment equations. Annual
Review of Fluid Mechanics , 48(1):429–458, 2016. 6
[67] M. Vogelius and I. Babuška. On a dimensional reduction method. i. the optimal
selection of basis functions. Mathematics of computation , 37(155):31–46, 1981. 2
[68] M. Vogelius and I. Babuška. On a dimensional reduction method. ii. some
approximation-theoretic results. Mathematics of computation , 37(155):47–68, 1981.
2
[69] M. Vogelius and I. Babuška. On a dimensional reduction method. iii. a posteriori error
estimation and an adaptive approach. Mathematics of computation , 37(156):361–384,
1981. 2
[70] S. Waldherr and B. Haasdonk. Efficient parametric analysis of the chemical master
equation through model order reduction. BMC systems biology , 6:1–12, 2012. 11
[71] R. Ştefănescu and I. Navon. POD/DEIM nonlinear model order reduction of an ADI
implicit shallow water equations model. Journal of Computational Physics , 237:95–
114, 2013. 2
A Numericaldiscretizationofthedecomposedtransportpart
This appendix briefly describes a numerical scheme for the transport part and then con-
tinues with the space-time discretization for the decomposed set of variables Eq. (13).
We first cover a standard scheme. For the spatial discretization, we consider an
equidistant mesh xj=j∆xwith lattice spacing ∆xand local state-variables, so that
the full state vector at time tis given by Q(t) = [qi(xj, t)]ij∈RNx×(N+2)forNxspatial
discretization points. Furthermore, we denote the rows of this matrix as Qj(t)∈RN+2,
which represents the corresponding solution vector evaluated at the spatial cell j.
The spatial discretization of Eq. (2) for each cell jleads to a semi-discrete ODE for
the unknowns Qj(t). This step is performed via the following standard first-order path-
conservative scheme [42, 8]
˙Qj=−1
∆x
A−
j+1(Qj+1−Qj) +A+
j(Qj−Qj−1)
=: (Fq(Q))j,(22)
where the so-called fluctuations A±
j+1(Qj+1−Qj)can be computed in different ways.
In this paper, we use the notation from [7] and include the system matrix evaluated at
the average of adjacent cells as well as a Lax-Friedrichs type numerical diffusion term for
stability as follows
A±
j+1=1
2
AQj+Qj+1
2
±∆x
∆tI
. (23)
38Remark. We note that different numerical schemes are possible that can readily be written
in the form of Eq. (24). Examples are the FORCE scheme
A±,FORCE
j+1 =1
2 
AQj+Qj+1
2
± 
∆x
2∆tI+∆t
2∆xAQj+Qj+1
22!!
,
or the upwind scheme
A±,upwind
j+1 =1
2
AQj+Qj+1
2
±AQj+Qj+1
2
.
However, these schemes might include higher computational cost. For details we refer to
[41].
Using an explicit Euler time integration scheme for Eq. (22) yields the time discrete
update formula of the transport step
Qn+1
j=Qn
j−∆t
∆x
A−
j+1 
Qn
j+1−Qn
j
+A+
j 
Qn
j−Qn
j−1
. (24)
Based on the decomposition of variables and the system matrix given in Eq. (13) and
Eq. (14), a numerical scheme can be formulated.
For the first order Lax-Friedrichs scheme used in Eq. (23) the fluctuations for both sets
of variables can then be derived as follows.
A±
j+1=1
2
AQj+Qj+1
2
±∆x
∆tI
=1
2

AuuUj+Uj+1
2,Vj+Vj+1
2
AuvUj+Uj+1
2,Vj+Vj+1
2
AvuUj+Uj+1
2,Vj+Vj+1
2
AvvUj+Uj+1
2,Vj+Vj+1
2
±∆x
∆tI20
0 I N

=1
2
AuuUj+Uj+1
2,Vj+Vj+1
2
±∆x
∆tI2 AuvUj+Uj+1
2,Vj+Vj+1
2
AvuUj+Uj+1
2,Vj+Vj+1
2
AvvUj+Uj+1
2,Vj+Vj+1
2
±∆x
∆tIN

=1
2Aj+1,uu±∆x
∆tI2 Aj+1,uv
Aj+1,vu Aj+1,vv±∆x
∆tIN
=1
2A±
j+1,uuA±
j+1,uv
A±
j+1,vuA±
j+1,vv
,
where we used the abbreviations Aj+1,uu:=AuuUj+Uj+1
2,Vj+Vj+1
2
as well as the
identity matrices I2∈R2×2andIN∈RN×N.
The semi-discrete version of Eq. (22) then reads
˙Qj=−1
∆x
A−
j+1(Qj+1−Qj) +A+
j(Qj−Qj−1)
˙Uj
˙Vj
=−1
∆x1
2A−
j+1,uuA−
j+1,uv
A−
j+1,vuA−
j+1,vvUj+1−Uj
Vj+1−Vj
+A+
j,uuA+
j,uv
A+
j,vuA+
j,vvUj−Uj−1
Vj−Vj−1
=1
2∆tUj+1−2Uj+Uj−1
Vj+1−2Vj+Vj−1
+1
2∆x·. . .
Aj+1,uu(Uj+1−Uj) +Aj+1,uv(Vj+1−Vj) +Aj,uu(Uj−Uj−1) +Aj,uv(Vj−Vj−1)
Aj+1,vu(Uj+1−Uj) +Aj+1,vv(Vj+1−Vj) +Aj,vu(Uj−Uj−1) +Aj,vv(Vj−Vj−1)
=:(Fu(U,V))j
(Fv(U,V))j
. (25)
39The matrices Aj+1,uu,Aj+1,uv,Aj+1,vu,Aj+1,vvare given by Eq. (14) evaluated at the
averaged variables as follows
Aj+1,uu=1
gh− 1
2(um,j+1+um,j)2−1
3 1
2(α1,j+1+α1,j)2um,j+1+um,j
∈R2×2,
Aj+1,uv=
1
3(α1,j+1+α1,j)
∈R2×N,
Aj+1,vu=
−1
2(um,j+1+um,j) (α1,j+1+α1,j)α1,j+1+α1,j
−1
6(α1,j+1+α1,j)2
∈RN×2,
Aj+1,vv=1
2(α1,j+1+α1,j)A+1
2(um,j+1+um,j)IN
∈RN×N,
where the matrix A∈RN×Nis zero except for the off-diagonal entries
Aj,j+1=j+ 2
2j+ 3, A j,j−1=j−1
2j−1.
The semi-discrete transport step using an explicit Euler time integration scheme for
Eq. (25) leads to the time discrete transport update for the first two equations (macro
transport step)
Un+1
j=1
2 
Un
j+1+Un
j−1
+∆t
2∆x 
Aj+1,uu 
Un
j+1−Un
j
+Aj+1,uv 
Vn
j+1−Vn
j
+∆t
2∆x 
Aj,uu 
Un
j−Un
j−1
+Aj,uv 
Vn
j−Vn
j−1
,
andtothetimediscretetransportupdateforthelast Nmomentequations(microtransport
step)
Vn+1
j=1
2 
Vn
j+1+Vn
j−1
+∆t
2∆x 
Aj+1,vu 
Un
j+1−Un
j
+Aj+1,vv 
Vn
j+1−Vn
j
+∆t
2∆x 
Aj,vu 
Un
j−Un
j−1
+Aj,vv 
Vn
j−Vn
j−1
.
Note that the solution of the micro-step for Vn+1
jis later performed with the known
values eUn+1
jfrom the first macro step, see Eq. (5). The solution of the macro step should
be performed with a conservative scheme, to ensure mass conservation.
40