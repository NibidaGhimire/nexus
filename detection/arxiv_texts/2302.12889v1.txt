Using the Julia framework to teach quantum entanglement.
Shlomo KashaniΦ1and Prof. David ZaretΨ2
1Graduate School (Applied Physics), Johns Hopkins University, Maryland U.S.A.: skashan2@jh.edu
2Principal Professional Staﬀ, JHU Applied Physics Laboratory, Maryland, U.S.A: david.zaret@jhuapl.edu
February 28, 2023
Entanglement, a phenomenon that has puzzled scientists since its discovery, has been
extensively studied by many researchers through both theoretical and experimental
means [FR18, ABP+02, GM05, GHZ07, Mer98, Lev07, Woo01]. It is a fundamental
aspect of both quantum information processing (QIP) and quantum mechanics (QM).
But how can entanglement be most eﬀectively taught [ZS11, Mer03, MS20] to com-
puter science students compared to applied physics students?. in this educational pur-
suit, we propose using Yao.jl [LLZW20], a quantum computing framework written in
Julia [KPOR18, Jul15] for teaching entanglement to graduate computer science students
attending a quantum computing class [Zar22] at Johns Hopkins University.
David Mermin’s just enough QM for them to understand and develop algorithms
in quantum computation [Mer98, Mer03] idea aligns with the purpose of this work.
Additionally, the authors of the study [ZS11] Improving students’ understanding of QM
via the Stern-Gerlach experiment (SGE) argue that this experiment should be a key part
of any QM education.
Here, we explore the concept of entanglement and it’s quantiﬁcation in various quan-
tum information processing experiments, including one inequality-free [GM05, GHZ07,
ABP+02] form of Bell’s theorem [Mer98]: (1) Superposition via the Hadamard (2.2.1),
(2) Bell-state generation (2.4) and (3) GHZ state generation (2.5). The utilisation of
circuit diagrams [Gid16] and code fragments [GJ+10, Ghe18] is a central theme in this
work’s philosophy.
Contents
1 Introduction 2
1.1 Prior work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.1.1 Educational programmes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.1.2 Recommended quantum-aware teaching methodologies . . . . . . . . . . . . . . 3
1.2 The important concepts of the SGE . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.2.1 The crucial takeaway for CS students . . . . . . . . . . . . . . . . . . . . . . . . 5
1.3 Using Julia for teaching quantum simulation . . . . . . . . . . . . . . . . . . . . . . . . 6
2 The classical simulation of Entangled-states 8
2.1 The theory of Entanglement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
2.2 Entanglement generation using Julia . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
2.2.1 The Hadamard and superposition generation . . . . . . . . . . . . . . . . . . . 9
2.2.2 Using the Hadamard for Entanglement generation . . . . . . . . . . . . . . . . 11
2.3 The von-Neumann entropy measure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.3.1 Density matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.4 Bell-state generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.5 Greenberger Horne Zeilinger (GHZ) nonlocality state generation . . . . . . . . . . . . . 17
2.5.1 Local realism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
1arXiv:2302.12889v1  [physics.ed-ph]  7 Jan 20233 Conclusions 19
4 Acknowledgements. 20
List of Figures 20
List of Tables 21
References 21
Alphabetical Index 24
1 Introduction
Here, we provide a comprehensive plan for computer science institutions to eﬀectively teach the fun-
damental concept of entanglement using the Julia language, while targeting computer science students
who may not have a strong background in QM. We present each concept of entanglement from multi-
ple perspectives , including the mathematical equations, the corresponding quantum circuit, the Julia
code for generating the circuit , and, in some cases, the result of simulating the circuit on a classical
computer . This approach allows students to understand the concept from diﬀerent perspectives and
helps to reinforce their learning.
In the realm of teaching QIS [Sho, NC00] and quantum computing, courses often encompass a
variety of subjects such as quantum algorithms, cryptography, programming, laboratory work, and
hardware design. However, this analysis highlights several key areas of diﬃculty for students, including
diﬃculties with quantum formalism and the need for basic quantum programming assignments that
focus on entanglement.
For teaching engagement, there are several quantum computing libraries, such as [RPLZ19, WSS14,
Yin16, AG05, Sel04, SV05, BBGV20, SGT+18, GLR+13, PRZ17, CdV19, RS17], which allow quantum
scientists to design and create quantum circuits for use on actual quantum computers. These libraries,
which are primarily written in Python [qis21, BIS+18, SGT+18], are developed by companies that
aim to run quantum computing algorithms on real hardware rather than classical simulations for
educational purposes. However, there are several reasons why it is beneﬁcial to use a classical simulator
when teaching graduate students about quantum computing:
1.Due to the high error rates of current quantum computers [NC10], research on quantum error
correction is a highly active ﬁeld. However, for the purpose of comparing a student’s mathematical
derivation to the optimal mathematical results, a classical simulator may be more suitable.
2.Quantum hardware tests do not always provide immediate measurement for all values, including
the full quantum state vector and marginal probabilities of measurements.
3.While access to actual quantum hardware is not as restricted as it used to be [MS20], it is still
not widely accessible in all locations and educational institutions. In contrast, classical simulators
can be run on most modern computers.
1.1 Prior work
1.1.1 Educational programmes
Universities are oﬀering master’s degree programs in quantum computing to meet the increasing de-
mand for skilled professionals in this ﬁeld. These programs are generally geared towards students who
have already completed a bachelor’s degree in a STEM ﬁeld, such as computer science, physics, or
engineering, and want to specialize in quantum computing. However, these programs may struggle
to accommodate students with diverse technical backgrounds and diﬀerent levels of knowledge about
QM.
2Some students may have a strong foundation in computer science but may be unfamiliar with QM,
while others may have a strong background in QM but may lack knowledge of computer science. This
can make it diﬃcult for universities to design a curriculum that meets the needs of all students and
helps them fully understand the complex concepts of quantum computing.
For instance, in the UK, UCL oﬀers a master’s programme in Quantum technologies [UCL23] em-
phasizing quantum simulation:
"The programme prepares graduates for careers in the emerging quantum technology industries which
play an increasingly important role in: secure communication; sensing and metrology; the simulation
of other quantum systems; and ultimately in general-purpose quantum computation. Graduates will
also be well prepared for research at the highest level in the numerous groups now developing quantum
technologies and for work in government laboratories." Upon reviewing the curriculum, it becomes
apparent that it may not be suitable for computer science students due to its strong focus on QM.
In Zurich ETHZ oﬀers a master’s programme in Quantum Engineering [eth23] where it is also
apparent that it mainly targets applied physics students:
"A quantum engineer harnesses the laws of QM to provide technological solutions to problems currently
unsolvable using classical resources. To tackle this formidable task, on the one hand, a quantum engineer
needs to be well versed in quantum theory .... "
1.1.2 Recommended quantum-aware teaching methodologies
To address these concerns, several authors which we explore here, have proposed various approaches to
address this issue and ensure that these programs can eﬀectively educate a diverse group of students
including computer science students. In particular, we refer the reader to the following studies.
1.In [ABB+22], the authors have developed a comprehensive and innovative curriculum for training
"quantum-aware engineers" in quantum engineering. The curriculum includes several modules, such
as "Classical Information Theory" and "Two-Qubit Gates and Entanglement," which are intended
for STEM students, as well as an advanced module called "Hamiltonians and Time Evolution."
While this curriculum is well-suited for a full degree program, it cannot be condensed into a single
semester-long module on quantum computation.
2.In the work by Microsoft’s team entitled Teaching QC through a Practical Software-driven Ap-
proach: Experience Report [MS20], theauthorsalsohighlightthechallengesencounteredbycomputer
science undergraduates, whom they were charged with teaching QC, not least among their ﬁndings
is this:
"Teach QC through software engineering instead of physics. We approached the course as computer
scientists, deliberately avoiding physics in the lectures . We presented the qubits as abstract objects
described by vectors instead of quantum mechanical states, and the operations on them as matrix
transformations instead of physical processes." We on the other hand, do think that some, even
minimal introduction to the concepts of projections, a measurement apparatus, eigenvalues, and
operators is essential to the end-to-end understanding of entanglement .
3.Other attempts at teaching entanglement were made via the construction of quantum versions
of classical games. In [Gof06], the authors attempted to teach entanglement through the use of a
quantum version of the tic-tac-toe game. They claim that this approach allows for a better under-
standing of entanglement. They state that the game:
"oﬀers a way of introducing QM without advanced mathematics" and conclude that "Quantum tic-
tac-toe illustrates a number of quantum principles including states, superposition, collapse, nonlo-
cality, entanglement , the correspondence principle, interference, and decoherence" .
4.And ﬁnally, a quote from David Mermin’s From Cbits to Qbits: Teaching computer scientists
QM[Mer03] as Mermin is a highly respected pioneer in the ﬁeld of quantum computing:
3“A strategy is suggested for teaching mathematically liter-
ate students, with no background in physics ,just enough QM
for them to understand and develop algorithms in quantum
computation and quantum information theory[Mer03, p.3]
”
Following [Mer03], one notable example of an experiment that can be used to teach entanglement is
the SG experiment which is presented Chapter 1 of Nielsen’s [NC10] quantum information processing
(Figure1.22andequations1.56through1.59)andlateronthecascadedSGexperiment(Figure1.23and
equations 1.56 through 1.59). We will now examine the SGE from a quantum computing perspective
in more depth.
1.2 The important concepts of the SGE
BeforediscussingEntanglement,werecommendthatatleastoneortwoclassesinaquantumcomputing
module be dedicated to the study of the SG experiment [Cre07, NC10, Mon80]. Graduate students
with some knowledge of QM should be able to understand the main points covered in this material.
There are numerous experimental veriﬁcations of QM, but one of the most important and surprising
ones is the SG experiment. In it, randomly oriented electrons are shot through a non-uniform electric
ﬁeld whose gradient is oriented in the +z-direction [ZS11]. Speciﬁcally, a narrow beam of neutral spin-
1/2particles is directed along a speciﬁc n-axis (usually z,y,orz) through a S-G ( zaxis) apparatus.
Theapparatus, allowsabeamconsistingofneutralparticlesindiﬀerentspinstatestosplitintodiﬀerent
beams [NC00].
Figure 1: The ﬁgure depicts the SG experiment oriented in the z-direction (SGz). Source [Ana17].
But what is the connection between the SGE and entanglement, and why do we often teach the
SGE as a precursor to understanding entanglement? The answer is that the angular momentum of one
particle can be entangled with the angular momentum of another particle . Therefore, the relationship
between the SGE and entanglement is that both involve the concept of angular momentum and its
quantization, but the SGE demonstrates this concept in a single particle, while entanglement involves
the correlation of angular momentum between two or more particles
Probabilitiesalsoplayacrucialruleinentangelment[NC10]. Here, thecomputationoftherespective
probability amplitude /angbracketleftφ|ψ/angbracketright(also termed a projection ), which is a complex number providing the
probability amplitude of ﬁnding state |ψ/angbracketrightin state|φ/angbracketright, plays a central role in the experiment. The
experiments in Fig. (1) ([Lev07], [Cre07]) reveal that it is possible to send all particles through a Z-
axis oriented apparatus and get a 50%/50%distribution and subsequently remove one state completely
from the system (for instance, by using a blocker), and send it through an X-axis oriented S-G ( xaxis)
apparatus and get 50%/50%distribution once again.
Finally, if we take half of these away and put the remaining ones through another S-G ( zaxis)
(e.g. Z-axis oriented apparatus) we end up with a 50%/50%distribution once again. This illustrates a
fundamental quantum mechanical postulate - the only values that are observed in a measurement are
the eigenvalues of the measurement operator , where the SG ﬁlters are also represented and treated as
operators.
4For spin- 1/2particles, a beam polarized along z+direction is deﬁned as:
z+=/parenleftBigg
1
0/parenrightBigg
,/parenleftbigg
eigenvalue +~
2/parenrightbigg
;z−=/parenleftBigg
0
1/parenrightBigg
,/parenleftbigg
eigenvalue−~
2/parenrightbigg
(1)
Note the use of the +~/2notation, which is very commonly used in physics but may be unknown
to CS students . The S-G apparatus measures the projection of Sin a direction of the zaxis. There
can only be two outcomes, +~/2and−~/2. These eigenvalues correspond to two distinct eigenstates,
which are considered to be orthogonal and are usually written using Dirac notation as |↑/angbracketrightand|↓/angbracketright, or
in the context of quantum computing as |0/angbracketrightand|1/angbracketright.
1oven = (0_ ket+ 1_ ket).normalized();
2resulting_state= measure(oven,Z);
3
Figure 2: Pseudo code for the ﬁrst stage of the SG experiment and the concept of an oven, in Chapter 1 of
Nielsen’s [NC10] quantum information processing (Figure 1.22 and equations 1.56 through 1.59) where a state
ie passed through the Pauli Z gate.
Using the SG apparatus oriented in a particular direction, we can prepare electrons to have spins
in that direction [ZS11]. We know that performing a measurement changes the state of a quantum
system, here we can assume that the state was created by passing a particle through an S-G ( zaxis)
apparatus oriented in the Z direction.
If we measure Sz(choosing the Zaxis for our measurements is common practice) on a particle in
the general state Z, then the possible outcomes are z+1, with probability |a|2, orz−0 (−~/2), with
probability|b|2[ZS11].:
|a|2+|b|2= 1 (2)
In this case the state of the spin1
2particle equals z+orsand therefore the bit "0":
z+=/parenleftBigg
1
0/parenrightBigg
will always be observed with absolute certainty. Therefore α= 1,β= 0and the wave-function in the
z+,z−basis is:
|ψ/angbracketright=α|0/angbracketright+β|1/angbracketright= 1∗|z+/angbracketright+ 0∗|z−/angbracketright=|z+/angbracketright (3)
In [ZS11] Improving students’ understanding of QM via the Stern–Gerlach experiment the authors
draw unambiguous conclusions that align with our suggestions.:
“The preparation of a speciﬁc quantum state may be challenging to achieve in the laboratory but it is
relatively easy to conceptualize theoretically at least in a 2D Hilbert space with SGE. We ﬁnd that the
students have diﬃculty with the preparation of a speciﬁc quantum state even in a 2D Hilbert space.”
and:
“Here, we discuss investigation of students’ diﬃculties about the SG experiment by giving written tests
and interviewing advanced undergraduate and graduate students in QM courses. We also discuss pre-
liminary data from two QM courses that suggest that a Quantum Interactive Learning Tutorial (QuILT)
related to the SG experiment is helpful in improving students’ understanding of these concepts.”
1.2.1 The crucial takeaway for CS students
Finally, for the student, it is important to understand the following concept that relates an operator
to it’s eigenvalues . The 4th Postulate of QM states: The probability of obtaining the eigenvalue anin
a measurement of the observable Aon the system in the state |ψ/angbracketrightis
P(an) =|/angbracketleftan|ψ/angbracketright|2,
5where|an/angbracketrightis the eigenvector of Acorresponding to the eigenvalue an.
Here we have an arbitrary linear combination of the basis states, where α,β∈C. The state of the
electron spin after exiting the oven (See Fig. 3) is:
|ψ/angbracketright=α|z+/angbracketright+β|z−/angbracketright (4)
Figure 3: The ﬁgure depicts the SG experiment oriented in the z-direction (SGz). Source [Ana17].
Or equivalently:
|ψ/angbracketright=←→α/parenleftBigg
1
0/parenrightBigg
+β/parenleftBigg
0
1/parenrightBigg
=/parenleftBigg
α
β/parenrightBigg
(5)
And also/angbracketleftψ|ψ/angbracketright=|α|2+|β|2= 1.
However,|α↑|2=|β↓|2doesnotnecessarily hold. Therefore, when exiting the ﬁrst S-G ( zaxis)
(Fig.1), the electron collapses to |↑/angbracketrightor|↓/angbracketright, with probabilities |α↑|2and|β↓|2, respectively. Mathe-
matically: We can ﬁrst compute the inner product of this ket |ψ/angbracketrightwith the bra|z+/angbracketright:
/angbracketleftz+|ψ/angbracketright=/angbracketleftz+|α|z+/angbracketright+/angbracketleftz+|β|z−/angbracketright
=α/angbracketleftz+|z+/angbracketright+β/angbracketleftz+|z−/angbracketright=α(6)
Then, the probability that a measurement yields a certain result is the square of the modulus of the
corresponding amplitude [Sho]:
P(z+) =|/angbracketleftz+|ψ/angbracketright|2=|α|2(7)
This is the probability that the state |ψ/angbracketrightis found to be in the state |z+/angbracketrightwhen a measurement of Sz
is made. Likewise:
P(z−) =|β|2. (8)
Here, we used the property that scalars can be moved freely through either bras or kets.
1.3 Using Julia for teaching quantum simulation
We believe that Julia’s symbolic variable ( ∆∗σx) and operator (⊗) support [GKP18, KPOR18] make
it an ideal choice for turning a theoretical quantum mechanic concept or formula into code [Jul15].
For scientiﬁc computing, the high-level just-in-time compiled language Julia is extremely eﬀective and
while there were numerous attempts at writing Julia-based QM and quantum information processing
libraries, only a few survived, some of which we present here:.
•QuantumInformation.jl [GKP18] for instance, whose development eﬀorts ceased a few years ago, is
among these. It makes heavy usage of symbolic representations as exempliﬁed in Fig. (4):
1φ= 1/sqrt(2)∗(ket(1,4) + ket(4,4))
2ξ= ptrace(proj( φ),[2,2],[2],
3@testξ≈I/2atol=1e −15
4
Figure 4: Julia code snippet depicting the usage of Unicode (e.g.φ,ξetc.) symbols in place of variable
names. In this case, the application of partial trace to two Kets.
6•QuantumOptics.jl [KPOR18] is another Julia framework for simulating open quantum systems,
although judging from a cursory perusal of the discussion groups, the primary audience is physi-
cists and not computer scientists. It also utilises symbolic representations even more heavily as
exempliﬁed in Fig. (5):
1using QuantumOptics
2Ω = 0.5
3t= [0 : 0.1 : 10; ]
4b=SpinBasis (1//2)
5H= Ω∗(sigmap(b)⊗sigmam(b) + sigmam( b)⊗sigmap(b))
6
Figure 5: Line number 6in the code snippet, is a marvellous example of the expressive power of
Julia, and how a mathematical concept is translated almost one-to-one to an actual code realization.
•Yao.jl [LLZW20] is a very active and highly maintained quantum computing library in Julia which
is described by it’s authors as an open source framework that aims to empower quantum information
research with software tools [LLZW20]. In a working Julia environment, the following code snippet
Fig. (6) can be used to install the dependencies required for running Yao.jl
1begin
2using Pkg
3Pkg.activate(mktempdir())
4Pkg.Registry.update()
5Pkg.add("Yao")
6Pkg.add("YaoPlots")
7Pkg.add("StatsBase")
8Pkg.add("Plots")
9Pkg.add("BitBasis")
10end
11
Figure 6: Installation instructions for Yao.jl
QuantumBFS, an open source organization for quantum science, is responsible for the project.
Xiu-Zhe (Roger) Luo and Jin-Guo Liu, who are members of the organization, have been actively
answering our questions on the discussion boards. For instance, upon our request they added a
feature to the library that allows plotting with barriers. A simple quantum circuit created using
Yao.jl is depicted in Fig. 7:
7(a)
1cr = chain(2,
2kron(H, X),
3kron(1=>Y, 2=>H),
4);
5plot(cr)
6
(b)
q0 H X
q1 H H
(c)
(H⊗X)×(X⊗X)
Figure 7: (a) Creating a simple quantum circuit in Yao.jl. (b) the respective circuit diagram in YaoPlots.jl
(c) the actual mathematical representation of the tensor product.
For the purposes of academic research and the incentives mentioned, we decided to conduct our
experiments in Julia using a variety of libraries, including Yao.jl and PastaQ.jl. To help with
visualization and plotting, we also used quirk [Gid16], a tool that allows users to easily create
quantum circuit simulations, and YaoPlots.jl [Wan], a plotting extension speciﬁcally designed for
visualizing circuits created in Yao.jl.
2 The classical simulation of Entangled-states
After going over some of the theoretical underpinnings of entanglement in Sec. (2.1), we then proceed
to utilise Yao.jl to simulate entanglement in the following quantum information processing [NC10]
experiments:
1.Superposition via the Hadamard (2.2.1)
2.Bell-state generation (2.4)
3.GHZ state generation (2.5)
4.Hardy’s state generation ( ??)
2.1 The theory of Entanglement
Given the extensive literature on entanglement [Woo01, Sho, NC10, Lev07], we will not delve into
its theoretical aspects in this context. Instead, our focus will be on teaching entanglement through
quantum programming. Entanglement is a phenomenon in which two qubits are correlated, and it has
been very helpful in the ﬁeld of quantum computing, such as in Shor’s and Jozsa’s algorithms [JL03].
Whentwoqubitsareentangled, measuringoneofthemcausestheothertotakeonaspeciﬁcstate. This
means that the measurement of one qubit can inﬂuence the potential behaviour of the second qubit.
In other words, the statistical connections between the measurements of entangled quantum states
cannot be explained by local realist physical theories. It is often beneﬁcial for students to understand
how to test for entanglement [HM19], as we will discuss in a later section 2.3. when using the Von
Neumann entropy measure.
Let us now shortly introduce the meaning of entanglement. A state of a bipartite system is referred
to as entangled if it cannot be expressed as the direct product of two states from the two subsystem
Hilbert spaces [NC10]. Mathematically this implies that:
ΨA⊗B/negationslash= ΨA⊗ΨB (9)
8Therefore, in principle, one could:
•Generate a system of two physically local, entangled qubits, such as any form of the Bell pairs.
•Separate them by a signiﬁcant distance.
•Measure one of the qubits, resulting in the collapse of the entire entangled system (i.e., both qubits).
•Immediately thereafter, measure the second qubit and provide a result that is correlated with the
ﬁrst qubit.
2.2 Entanglement generation using Julia
Quantum programmes make considerable use of superposition and entanglement, which are the
fundamental basis for quantum computing’s computational advantage over traditional computing
[NC00, Woo01]. A quantum programme is a series of quantum operations (gates) executed on a
group of qubits and single-qubit gates such as the Hadamard. In order to take advantage of quantum
parallelism, Hadamard gates are commonly used in quantum information processing to set the input
qubits in the uniform superposition state,|+/angbracketright=1√
2|0/angbracketright+1√
2|1/angbracketrightwhich switches between the Pauli X
andZ.
2.2.1 The Hadamard and superposition generation
The superposition principle serves a key role in the theory of quantum information processing, and
one of the most famous experiments in quantum superposition, is the double-slit experiment [Sho]
consisting of a source, a double-slit assembly,and an observation screen used to observe interference
fringes. A singleHadamardtransformationplaystheroleofa 50/50beamsplitterwhileaMach-Zehnder
interferometer consists of a sequence of twoHadamard transformations [Sho].
Physicists are thought that a physical process is related to a general unitary matrix via the unitary
evolution equation U= exp(−iHt/~)which is expressed asUin a quantum circuit diagram. How-
ever, as a ﬁrst step in the study of entanglement and Bell-state preparation [Woo01], the Hadamard
maybeintroducedto computerscience studentsviait’stwoformsasdepictedinFig. (8)andexpressed
as follows in both the Dirac Eq. (10)and matrix Eq. (11)notations:
(a)H=1√
2[(|0>+|1>)<0|+ (|0>−|1>)<1|] (10)
(b)H=1√
2/bracketleftBigg
1 1
1−1/bracketrightBigg
(11)
(c)
Figure 8: The 1-qubit Hadamard. (a) The Hadamard in the Dirac notation (b) The Hadamard in a matrix
notation. (c) using Julia to generate a Hadamard gate.
9The result of applying the Hadamard gate [NC00]Ψ Hto the quantum states |0/angbracketrightand|1/angbracketrightis
depicted in Fig. (9):
(a)
|x/angbracketrightH (−1)x|x/angbracketright+|1−x/angbracketright,|x/angbracketright={|0/angbracketright,|1/angbracketright}1
(b)
H|0/angbracketright=1√
2(|0/angbracketright+|1/angbracketright)≡|+/angbracketrightx
H|1/angbracketright=1√
2(|0/angbracketright−|1/angbracketright)≡|−/angbracketrightx(12)
(c)
1begin
2st0 = normalize!(arrayreg(bit"0"))
3state(st0) |> pretty_print
4r0 = apply!((st0), H)
5state(r0)
6end
7> julia Matrix{ComplexF64}:
80.7071067811865475 + 0.0im
90.7071067811865475 + 0.0im
Figure 9: (a) The eﬀect of the gate Hacting on a qubit in state |x/angbracketright. (b) The resulting quantum states (c)
Yao.jl code snippet depicting the application fo the H gate on the two basic states in the computational basis.
Applying the Hadamard to quantum state |0/angbracketrightfor instance, results in H|0/angbracketright=1√
2(|0/angbracketright+|1/angbracketright).
Using Yao.jl, the full processes for generating the two quantum states in superposition is depicted
in Fig. (10):
Figure 10: Julia code snippet for generating superposition via the Hadamard, matching the values in the
mathematical expression in Eq.(12).
10It is important for the students to understand that while the Hadamard gate can create quantum
superposition in a single qubit (such asH|0/angbracketright=|+/angbracketright), it cannot be used to entangle multiple qubits.
No single-qubit gate has this capability.
2.2.2 Using the Hadamard for Entanglement generation
We have already stated that the H gate alone can not generate an entangled state. The entangling
operation consists of a local Hadamard transformation which maps |0/angbracketright→(|0/angbracketright+|1/angbracketright)/√
2,|1/angbracketright→(|0/angbracketright−
|1/angbracketright)/√
2followed by the application of a local CNOT (Controlled NOT). We remind the reader that a
two-qubit CNOT operator acts as follows:
CNOT|00/angbracketright=|00/angbracketright,CNOT|01/angbracketright=|01/angbracketright,CNOT|10/angbracketright=|11/angbracketright,CNOT|11/angbracketright=|10/angbracketright.(13)
Where the 0-th qubit is the control qubit and the 1-st qubit is the target qubit.
(a)
1begin
2st4 = normalize!(arrayreg(bit"00"))
3state(st4) |> pretty_print
4cir=chain(2,
5kron(H,I2),
6control(1,2=>X))
7r4 = apply!((st4), cir)
8state(r4) |> pretty_print
9end
10>julia
11
0.71 + 0.0i
0.0i
0.0i
0.71 + 0.0i

12
(b)HΨ1Ψ2Ψ3
Figure 11: (a) Yao.jl code snippet depicting the application fo the H gate on the two basic states in the
computational basis. (b) In a step by step approach, following the application of H gate (e.g. Ψ1), the quantum
state turns into|+/angbracketright⊗|0/angbracketright=|0/angbracketright+|1/angbracketright√
2⊗|0/angbracketright=(|0/angbracketright+|1/angbracketright)⊗|0/angbracketright√
2=|0/angbracketright⊗|0/angbracketright+|1/angbracketright⊗|0/angbracketright√
2=|00/angbracketright+|10/angbracketright√
2.
Subsequently in Ψ2, the CNOT gate maps the state|00/angbracketright+|10/angbracketright√
2to the state|00/angbracketright+|11/angbracketright√
2. The full mathe-
matical derivation is depicted in Eq.(17).
Paper-and-pencil computation:
In matrix form the CNOT is represented as:
CNOT→
1 0 0 0
0 0 0 1
0 0 1 0
0 1 0 0
(14)
Here in Fig. (11) we apply an entangling operation, an Hadamard gate followed by a CNOT gate
where Initially, the 2-qubit state of the system is |0/angbracketright⊗|0/angbracketright=|00/angbracketright.:
|00/angbracketright→| 0/angbracketright⊗H|0/angbracketright=|00/angbracketright+|01/angbracketright√
2→CNOT 01|00/angbracketright+|01/angbracketright√
2= (15)
11CNOT 01|00/angbracketright+CNOT 01|01/angbracketright√
2=|00/angbracketright+|11/angbracketright√
2(16)
Ψ2 = CNOT/parenleftbigg|00/angbracketright+|10/angbracketright√
2/parenrightbigg
=
1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0
/parenleftbigg|00/angbracketright+|10/angbracketright√
2/parenrightbigg
=1√
2
1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0
(|00/angbracketright+|10/angbracketright)
=1√
2
1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0


1
0
0
0
+
0
0
1
0


=1√
2
1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0

1
0
1
0
(17)
Which equals:
=1√
2

1
0
0
0
+
0
0
0
1

=1√
2(|00/angbracketright+|11/angbracketright) (18)
This also equals the value of the matrix generated by Yao.jl in line 11in Fig. 9 (b). We now simulate
this simple circuit on a classical computer by running 1024 shots:
12(a)
1measuredqubits = r4 |> r −>measure(r, nshots=1024)
2plotmeasure(measuredqubits)
3
(b)
Figure 12: (a) Yao.jl code snippet for running a simulation of 1024 shots on a classical computer. (b)
visualizing the results using a Yao.jl bar plot. This ﬁnding is not unexpected given that Yao’s classical sim-
ulator reproduces the quantum equations perfectly. In particular, the initial measurement (which collapses
the entanglement) will, on average, choose between |00/angbracketrightand|11/angbracketrightfor the collapsed state. On actual quantum
computing hardware, which is susceptible to quantum mistakes as a result of decoherence and noise, the results
may be far from ideal.
How can we conﬁrm that a state is truly entangled ? One method is to use the von-Neumann entropy
measure 2.3, which is a commonly used measure of entanglement.
2.3 The von-Neumann entropy measure
In this section, density matrices are frequently utilized and therefore, we provide a brief overview of
their characteristics. For a more detailed treatment of the topic, interested readers can refer to external
sources, such as [Sho, NC10].
2.3.1 Density matrices
Density matrices are a tool that can be used to describe quantum states in a concise and eﬀective
manner, particularly when dealing with statistical mixtures of diﬀerent states. They are commonly
used in the study of quantum systems.
In the context of entropy, the density matrix of a pure state {(1,|ψ/angbracketright)}is given by ρ=|ψ/angbracketright/angbracketleftψ|while
for a mixed state ρ=/summationtext
ipi|ψi/angbracketright/angbracketleftψi|. By deﬁnition, the density matrix is a positive, Hermitian matrix
with a trace of one. We remind the reader that a pure state is a quantum state whose wave-function
is known with absolute certainty while a mixed state is a statistical distribution of pure states [Sho]
and hence pure states have purity one and mixed states have purity of less than one.[NC10].
Here the notion of purity also arises, and is described by the density operator ρwhich is deﬁned to
beTr/bracketleftbigρ2/bracketrightbig. The von Neumann entropy is deﬁned as:
S(ρ) =−m/summationdisplay
iλilogλi= tr(−ρlogρ) (19)
For a pure quantum state the following condition holds, S(ρ) = 0, for a maximally mixed state
ρ=I
mandS(ρ) = logm. The state ρABis entangled if S(ρA|ρB)<0.
13Paper-and-pencil computation:
Now assume a system is in the pure state |ψ/angbracketright=1√
2(|00/angbracketright+|11/angbracketright)(Eq.(18)). The reduced density matrix
state is mixed, even though the state |Ψ/angbracketrightitself is pure (Eq. (20)):
ρAB=|Ψ/angbracketright/angbracketleftΨ|=1
2(|00/angbracketright/angbracketleft00|+|00/angbracketright/angbracketleft11|+|11/angbracketright/angbracketleft00|+|11/angbracketright/angbracketleft11|)
trB(ρAB) =1
2(|0/angbracketright/angbracketleft0|+|1/angbracketright/angbracketleft1|) =1A
2.(20)
and therefore it’s density matrix is:
ρ=|ψ/angbracketright/angbracketleftψ| (21)
For our case:
ρ=1
2
1 0 0 1
0 0 0 0
0 0 0 0
1 0 0 1
(22)
Or in Yao.jl (13):
(a)
1begin
2reg = (arrayreg(bit"00") + arrayreg(bit"11")) / sqrt(2)
3(statevec(reg) ∗statevec(reg)’) |> pretty_print
4end
5> julia
6
0.5 + 0.0i0.0i0.0i0.5 + 0.0i
0.0i 0.0i0.0i 0.0i
0.0i 0.0i0.0i 0.0i
0.5 + 0.0i0.0i0.0i0.5 + 0.0i

(b)
1begin
2rho = density_matrix(reg)
3(von_neumann_entropy(rho))
4end
5> julia
62.4231940935448884e −14 (e.g.=0)
Figure 13: (a) Calculating the density matrix for the pure quantum bell-state |ψ/angbracketright= (|00/angbracketright+|11/angbracketright)/√
2using
Yao.jl. (b) The entropy of a quantum system is computed by deriving the eigenvalues λnof the density operator
ρand preforming the operation S=−/summationtext
nλnlog (λn). By expressing the operator as a matrix and calculating
its eigenvalues, the Von Neumann entropy is realised in Yao.jl where subsequently, the eigenvalues are plugged
into the equation for Von Neumann entropy. This is demonstrated by the second code fragment.
It is a well-established fact that a pure state in a quantum system has no entropy, as the only
non-zero eigenvalue of the density matrix in a pure state is λ= 1. When this eigenvalue is applied
to the Von Neumann entropy equation, it becomes clear that a pure state, being a completely known
system, should not possess any entropy. This is in line with the general understanding of entropy and
pure states in the quantum world. This idea has been widely accepted in the ﬁeld, as evident from the
various sources cited in [Sho, Woo01, NC10].
2.4 Bell-state generation
The Bell states are superpositions of two particles that are maximally entangled, as described in a
study by [Sho]. These states occur when two spin-1/2 particles are produced at the same time and
14can be represented by four wave functions that encompass the entire spin states of the particles. The
overall system must be represented by a four-vector due to the two possible spin orientations for each
particle.
In section (2.2.2) we have already studied the generation of the most well-known Bell-state |Φ+/angbracketright:
|Φ+/angbracketright=1√
2(|00/angbracketright+|11/angbracketright) =
1√
2
0
0
1√
2
(23)
Using a quantum circuit comprised of a Hadamard (H) gate, an identity (I) gate, and a controlled-not
gate (CNOT) as described in 2.2.2, any Bell state may be created from two classical bits:
(a)HΨ1Ψ2Ψ3
(b)
CNOT(H⊗I)|01/angbracketright=1√
2·
1
0
0
−1
(24)
(c)
1cr=chain(2, kron(H,I2), control(1,2=>X))
2ψ0 =ArrayReg(bit"01") |>normalize!\psi 0=(\psi 0 \mid> cr)@show ((\psi 0 .state ))
Figure 14: (a) The Bell-state generation circuit (b) The mathematical expression for generating a Bell-state
(b) Yao.jl code snippet for creating the circuit and measuring the state.
The result of running the circuit in 14 on a classical computer is presented in (25):
4×1Matrix{ComplexF 64}
0.7071067811865475 + 0 .0im
0.0 + 0.0im
0.0 + 0.0im
−0.7071067811865475 + 0 .0im(25)
For each of the possible four spin-1/2 combinations for the input state, the following four Bell-states
may be generated:
In Out
|00/angbracketright(|00/angbracketright+|11/angbracketright)/√
2≡|β00/angbracketright
|01/angbracketright(|01/angbracketright+|10/angbracketright)/√
2≡|β01/angbracketright
|10/angbracketright(00/angbracketright−|11/angbracketright)/√
2≡|β10/angbracketright
|11/angbracketright(01/angbracketright−|10/angbracketright)/√
2≡|β11/angbracketright(26)
15The bell states with their commonly used symbolic representations [NC10]:
/vextendsingle/vextendsingleΦ+/angbracketrightbig=1√
2(|00/angbracketright+|11/angbracketright)|Φ−/angbracketright=1√
2(|00/angbracketright−|11/angbracketright)
/vextendsingle/vextendsingleΨ+/angbracketrightbig=1√
2(|01/angbracketright+|10/angbracketright)|Ψ−/angbracketright=1√
2(|01/angbracketright−|10/angbracketright)(27)
It should be emphasised to the student that if the spin orientation of the ﬁrst particle is measured ,
the spin orientation of the second particle is also immediately known, regardless of how far away it
is. Consequently, such measurements eliminate entanglement , forcing both particles into well-deﬁned
spin states.
Paper-and-pencil computation:
In this study, we outline the steps of the Bell-state generation circuit, speciﬁcally Ψ1−Ψ3shown in
Figure 14, and discuss the impact of each unitary operation on the circuit’s time evolution. We will
also reiterate these steps.Control
Target|0/angbracketrightH
|0/angbracketrightΨ1Ψ2Ψ3
1. AtstepΨ1the circuit is initialized with |ψ1/angbracketright=|0/angbracketrightC⊗|0/angbracketrightT=|0,0/angbracketrightin order to generate the Bell-state
1√
2(|00/angbracketright+|11/angbracketright).
2. Atstep Ψ2, following the application of the unitary Hadamard gate the result is:
|ψ2/angbracketright= (H⊗I2)|ψ1/angbracketright= (H⊗I2) (|0/angbracketrightCONTROL⊗|0/angbracketrightTARGET ) =H|0/angbracketrightC⊗|0/angbracketrightT=1√
2(|0/angbracketright+|1/angbracketright)⊗|0/angbracketright
which ﬁnally equals1√
2(|00/angbracketright+|10/angbracketright).
3. AtstepΨ3the CNOT gate is applied as follows |ψ3/angbracketright=CNOT|ψ2/angbracketrightresulting in =1√
2CNOT (|00/angbracketright+
|10/angbracketright) =1√
2(|00/angbracketright+|11/angbracketright)which ﬁnally equals =1√
2
1
0
0
1
.
The summery of the steps is presented in (28):
Stage Quantum state
0|0/angbracketright⊗|0/angbracketright
1|0/angbracketright+|1/angbracketright√
2⊗|0/angbracketright
2|0/angbracketright⊗|0/angbracketright+|1/angbracketright⊗|1/angbracketright√
2(28)
The exact opposite of the Bell-state creation process is the Bell-state measurement circuit depicted
in 15. For instance:
16(a)HΨ1Ψ2Ψ3
(b)

0
0.707
−0.707
0
=
0
0
0
1
(29)
Figure 15: (a) Bell-state detection circuit (b) the result of applying the circuit to the Bell-state.)
Paper-and-pencil computation: All the Bell states are pure quantum states since using the density
matrix it may be shown that (|Ψ/angbracketright/angbracketleftΨ|)2=|Ψ/angbracketright/angbracketleftΨ|:
Ψ·ΨT=
0 0 0 0
0 0.5−0.5 0
0−0.5 0.5 0
0 0 0 0
= (Ψ·ΨT)2(30)
The Quantum proof of an entangled superposition is the presence of oﬀ-diagonal entries in the Bell-
state density matrix operator in E.g (30).
2.5 Greenberger Horne Zeilinger (GHZ) nonlocality state generation
While the Bell-states involve only two spin-1/2 particles, the Greenberger-Horne-Zeilinger (GHZ) state
is a special type of quantum entanglement involving at least three such particles. In 1989, D. Green-
berger, M.A. Horne, and Anton Zeilinger were the ﬁrst to investigate quantum states and reveal their
nonclassical features. For quantum systems with n= 3qubits, there are two main types of entan-
glement, which are exempliﬁed by the GHZ state. First, the GHZ which is a generalization of the
Bell-state/vextendsingle/vextendsingleΦ+/angbracketrightbig= 1/√
2(|00/angbracketright+|11/angbracketright)increasing from n= 2ton= 3qubits(31):
|GHZ/angbracketright=1√
2(|000/angbracketright+|111/angbracketright) (31)
The 3-qubit state, cannot be written as a tensor product of 1-qubit states. And the W state, is the
second type (32)which is a generalization of the Bell-state/vextendsingle/vextendsingleΨ+/angbracketrightbig= 1/√
2(|01/angbracketright+|10/angbracketright)increasing from
n= 2ton= 3qubits.:
|W/angbracketright=1√
3(|001/angbracketright+|010/angbracketright+|100/angbracketright) (32)
Generally for N=n qubits:
|ψGHZ/angbracketright=1√
2/parenleftbig|0/angbracketright⊗n+|1/angbracketright⊗n/parenrightbig(33)
Here is the 3-qubit GHZ generation circuit [NC10]:
17(a)
1cr = chain(
23,
3repeat(H, 1:3),
4control(2, 1=>X),
5control(3, 1=>X),
6repeat(H, 2:3),
7)
8
(b)
(c)
1ψ1 =ArrayReg(bit"000") |>normalize!
2ψ1 = (ψ1|>cr)
3@show ((ψ1. state ))
4> julia
5Matrix{ComplexF64}:
60.7071067811865472 + 0.0im
70.7071067811865472 + 0.0im
8
Figure 16: (a) Yao.jl code for generating the GHZ states (b) the circuit diagram (c) the result of applying
the circuit to the GHZ state.)
Paper-and-pencil computation: In this study, we outline the steps of the GHZ state generation
circuit, speciﬁcally Ψ1−Ψ4shown in Figure 17, and discuss the impact of each unitary operation on
the circuit’s time evolution.
|0/angbracketrightH
|0/angbracketright
|0/angbracketrightΨ1Ψ2Ψ3Ψ4
Figure 17: A quantum circuit that creates the Greenberger-Horne-Zeilinger state among multiple qubits
using a quantum circuit model. A step-by-step examination of the GHZ-type entanglement state generating
circuit to highlight the inﬂuence of the gates at each level as the circuit advances.
1. Atstep Ψ1the circuit is initialized with zeros |ψ1/angbracketright=|0/angbracketright|0/angbracketright|0/angbracketrightin order to generate the ﬁrst GHZ
state type.
2. Atstep Ψ2, following the application of the unitary Hadamard gate the result is |ψ2/angbracketright= (H|0/angbracketright)⊗
|0/angbracketright|0/angbracketright=1√
2(|0/angbracketright+|1/angbracketright)|0/angbracketright|0/angbracketright
3. Atstep Ψ3the CNOT gate is applied as follows |ψ3/angbracketright=CNOT|ψ2/angbracketright
|ψ3/angbracketright= (CNOT )121√
2(|0/angbracketright1+|1/angbracketright1)|0/angbracketright2⊗|0/angbracketright3which equals =1√
2(|0/angbracketright1|0/angbracketright2+|1/angbracketright1)|1/angbracketright2⊗|0/angbracketright3
184. Atstep Ψ4the CNOT gate is applied once again producing =1√
2(|000/angbracketright+|111/angbracketright) =1√
2
1
0
0
0
0
0
0
1

2.5.1 Local realism
No discussion on entanglement can be complete without mentioning the concept of local realism. A
central theme In local realism is that objects have properties independent of the action of measurement
[GM05, GHZ07, Mer98], and a measurement at one location on a ﬁrst particle has no eﬀect on a
measurement of a second particle at a distant location, regardless of the fact that both particles were
formed in the same event. Conceptually, local realism holds that spin-1/2 particles contain attributes
or instruction sets that determine the outcomes of subsequent measurements. In this school of thought,
particles are in a state that can be precisely described even before any measurements are conducted.
Hardy [GM05] established in his fundamental study on local realism that for any entangled, but
not maximally entangled, states of two spin-1/2 particles, non-locality may be demonstrated without
the use of inequalities. Particularly, he demonstrated that "local reality" is inconsistent with quantum
predictions by employing classic EPR-counterfactual arguments. For the interested reader, formal
proofs of these arguments are discussed in detail in [FR18, ABP+02, GM05, GHZ07, Mer98] and in
Hardy’s test [GM05, GHZ07, ABP+02], an inequality-free variant of Bell’s theorem [DYC20, Mer98]
which invalidates locality.
3 Conclusions
Quantum computing has the potential to transform a number of ﬁelds, including medicine, ﬁnance,
and security. However, it can be challenging for students, particularly those studying computer science,
to fully grasp the concept of entanglement, which is a key component of quantum computing, due to
its complexity and abstract nature.
In the past, courses on quantum computing have only been oﬀered by physics departments, but
in order to adequately prepare computer scientists for careers in the quantum industry, new training
programs need to be developed in engineering and computer science departments in collaboration with
applied physics departments.
One approach to helping students better understand entanglement and quantum computing is to
use the programming language Julia, which is speciﬁcally designed for scientiﬁc computing and allows
students to learn through hands-on, interactive experiences. It is important for computer science
studentstofocusonthepracticalapplicationsandpotentialusesofentanglementthroughprogramming
quantum circuits using Python or Julia.
Meanwhile, a more theoretical approach, which focuses on the fundamental principles of entangle-
ment from the perspective of QM and their application to quantum computing, as well as the technical
aspects of quantum algorithms and hardware, may be more suitable for students of physics. It is
important to ﬁnd a balance between these approaches and tailor them to the level of familiarity and
interest of the audience.
Unfortunately, it seems unlikely that Julia will become widely adopted in the ﬁeld of quantum
computing, as most major vendors have chosen to use Python as their primary programming language
for developing their quantum platforms. This follows a similar pattern seen with artiﬁcial intelligence
libraries such as PyTorch and TensorFlow.
194 Acknowledgements.
We thank the authors of Yao.il ([LLZW20]) Luo, Xiu-Zhe and Liu, Jin-Guo and Zhang, Pan and Wang,
Lei for their responses on the Yao.jl discussion group.
List of Figures
1 The ﬁgure depicts the SG experiment oriented in the z-direction (SGz). Source [Ana17]. 4
2 PseudocodefortheﬁrststageoftheSGexperimentandtheconceptofanoven, inChap-
ter 1 of Nielsen’s [NC10] quantum information processing (Figure 1.22 and equations
1.56 through 1.59) where a state ie passed through the Pauli Z gate. . . . . . . . . . . 5
3 The ﬁgure depicts the SG experiment oriented in the z-direction (SGz). Source [Ana17]. 6
4 Julia code snippet depicting the usage of Unicode (e.g.φ,ξetc.) symbols in place of
variable names. In this case, the application of partial trace to two Kets. . . . . . . . . 6
5 Line number 6in the code snippet, is a marvellous example of the expressive power
of Julia, and how a mathematical concept is translated almost one-to-one to an actual
code realization. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
6 Installation instructions for Yao.jl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
7 (a) Creating a simple quantum circuit in Yao.jl. (b) the respective circuit diagram in
YaoPlots.jl (c) the actual mathematical representation of the tensor product. . . . . . 8
8 The 1-qubit Hadamard. (a) The Hadamard in the Dirac notation (b) The Hadamard in
a matrix notation. (c) using Julia to generate a Hadamard gate. . . . . . . . . . . . . . 9
9 (a) The eﬀect of the gate Hacting on a qubit in state |x/angbracketright. (b) The resulting quantum
states (c) Yao.jl code snippet depicting the application fo the H gate on the two basic
states in the computational basis. Applying the Hadamard to quantum state |0/angbracketrightfor
instance, results in H|0/angbracketright=1√
2(|0/angbracketright+|1/angbracketright). . . . . . . . . . . . . . . . . . . . . . . . . . . 10
10 Julia code snippet for generating superposition via the Hadamard, matching the values
in the mathematical expression in Eq. (12). . . . . . . . . . . . . . . . . . . . . . . . . . 10
11 (a) Yao.jl code snippet depicting the application fo the H gate on the two basic states
in the computational basis. (b) In a step by step approach, following the application of
H gate (e.g. Ψ1), the quantum state turns into |+/angbracketright⊗|0/angbracketright=|0/angbracketright+|1/angbracketright√
2⊗|0/angbracketright=(|0/angbracketright+|1/angbracketright)⊗|0/angbracketright√
2=
|0/angbracketright⊗|0/angbracketright+|1/angbracketright⊗|0/angbracketright√
2=|00/angbracketright+|10/angbracketright√
2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
12 (a)Yao.jlcodesnippetforrunningasimulationof1024shotsonaclassicalcomputer. (b)
visualizing the results using a Yao.jl bar plot. This ﬁnding is not unexpected given that
Yao’s classical simulator reproduces the quantum equations perfectly. In particular, the
initial measurement (which collapses the entanglement) will, on average, choose between
|00/angbracketrightand|11/angbracketrightfor the collapsed state. On actual quantum computing hardware, which is
susceptible to quantum mistakes as a result of decoherence and noise, the results may
be far from ideal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
13 (a)Calculatingthedensitymatrixforthepurequantumbell-state |ψ/angbracketright= (|00/angbracketright+|11/angbracketright)/√
2
using Yao.jl. (b) The entropy of a quantum system is computed by deriving the eigenval-
uesλnof the density operator ρand preforming the operation S=−/summationtext
nλnlog (λn). By
expressing the operator as a matrix and calculating its eigenvalues, the Von Neumann
entropy is realised in Yao.jl where subsequently, the eigenvalues are plugged into the
equation for Von Neumann entropy. This is demonstrated by the second code fragment. 14
14 (a) The Bell-state generation circuit (b) The mathematical expression for generating a
Bell-state (b) Yao.jl code snippet for creating the circuit and measuring the state. . . . 15
15 (a) Bell-state detection circuit (b) the result of applying the circuit to the Bell-state.) . 17
16 (a) Yao.jl code for generating the GHZ states (b) the circuit diagram (c) the result of
applying the circuit to the GHZ state.) . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2017 A quantum circuit that creates the Greenberger-Horne-Zeilinger state among multiple
qubits using a quantum circuit model. A step-by-step examination of the GHZ-type
entanglement state generating circuit to highlight the inﬂuence of the gates at each level
as the circuit advances. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
List of Tables
References
[ABB+22] Abraham Asfaw, Alexandre Blais, Kenneth R. Brown, Jonathan Candelaria, Christo-
pher Cantwell, Lincoln D. Carr, Joshua Combes, Dripto M. Debroy, John M. Donohue,
Sophia E. Economou, Emily Edwards, Michael F. J. Fox, Steven M. Girvin, Alan Ho,
Hilary M. Hurst, Zubin Jacob, Blake R. Johnson, Ezekiel Johnston-Halperin, Robert
Joynt, Eliot Kapit, Judith Klein-Seetharaman, Martin Laforest, H. J. Lewandowski,
Theresa W. Lynn, Corey Rae H. McRae, Celia Merzbacher, Spyridon Michalakis, Prineha
Narang, William D. Oliver, Jens Palsberg, David P. Pappas, Michael G. Raymer, David J.
Reilly, Mark Saﬀman, Thomas A. Searles, Jeﬀrey H. Shapiro, and Chandralekha Singh.
Building a quantum engineering undergraduate program. IEEE Transactions on Educa-
tion, 65(2):220–242, may 2022. URL: https://doi.org/10.1109%2Fte.2022.3144943 ,
doi:10.1109/te.2022.3144943 .
[ABP+02] Yakir Aharonov, Alonso Botero, Sandu Popescu, Benni Reznik, and Jeﬀ Tollaksen. Re-
visiting hardy 's paradox: counterfactual statements, real measurements, entanglement and
weak values. Physics Letters A , 301(3-4):130–138, aug 2002. URL: https://doi.org/10.
1016%2Fs0375-9601%2802%2900986-6 ,doi:10.1016/s0375-9601(02)00986-6 .
[AG05] T. Altenkirch and J. Grattage. A functional quantum programming language. In IEEE
Symposium on Logic in Computer Science , 2005. doi:10.1109/LICS.2005.1 .
[Ana17] Babis Anastasiou. Quantum mechanics i, 2017. URL: https://people.phys.ethz.ch/
~babis/Teaching/QM1/qm1.pdf .
[BBGV20] Benjamin Bichsel, Maximilian Baader, Timon Gehr, and Martin Vechev. Silq: A high-level
quantum language with safe uncomputation and intuitive semantics. In ACM SIGPLAN
Conference on Programming Language Design and Implementation , 2020. doi:10.1145/
3385412.3386007 .
[BIS+18] Ville Bergholm, Josh Izaac, Maria Schuld, Christian Gogolin, Carsten Blank, Keri McK-
iernan, and Nathan Killoran. Pennylane: Automatic diﬀerentiation of hybrid quantum-
classical computations. arXiv preprint arXiv:1811.04968 , 2018.
[CdV19] Pierre Clairambault and Marc de Visme. Full abstraction for the quantum lambda-calculus.
InACM SIGPLAN Symposium on Principles of Programming Languages , 2019. doi:10.
1145/3371131 .
[Cre07] James Cresser. Particle spin and the sge, 2007. URL: http://physics.mq.edu.au/
~jcresser/Phys301/Chapters/Chapter6.pdf .
[DYC20] Zhenzhu Dong, Ying Yang, and Huaixin Cao. Detecting bell nonlocality based on the
hardy paradox. International Journal of Theoretical Physics , 59(5):1644–1656, 2020. doi:
10.1007/s10773-020-04432-1 .
[eth23] ethz. Quantum engineering msc, 2023. URL: https://ethz.ch/content/dam/ethz/
special-interest/itet/department/Studies/Master/Brochures/itet-broschuere_
quantum_engineering.pdf .
[FR18] Daniela Frauchiger and Renato Renner. Quantum theory cannot consistently describe the
use of itself. Nature Communications , 9(1), sep 2018. URL: https://doi.org/10.1038%
2Fs41467-018-05739-8 ,doi:10.1038/s41467-018-05739-8 .
21[Ghe18] Vlad Gheorghiu. Quantum++: A modern c++ quantum computing library. PLOS ONE ,
13(12):e0208073, dec 2018. URL: https://doi.org/10.1371%2Fjournal.pone.0208073 ,
doi:10.1371/journal.pone.0208073 .
[GHZ07] Daniel M. Greenberger, Michael A. Horne, and Anton Zeilinger. Going beyond bell’s
theorem. 2007. URL: https://arxiv.org/abs/0712.0921 ,doi:10.48550/ARXIV.0712.
0921.
[Gid16] Craig Gidney. Quirk: A drag-and-drop quantum circuit simulator. https://algassert.
com/quirk , 2016.
[GJ+10] Gaël Guennebaud, Benoît Jacob, et al. Eigen v3. http://eigen.tuxfamily.org , 2010.
[GKP18] Piotr Gawron, Dariusz Kurzyk, and Łukasz Pawela. QuantumInformation.jl—a ju-
lia package for numerical computation in quantum information theory. PLOS ONE ,
13(12):e0209358, dec 2018. doi:10.1371/journal.pone.0209358 .
[GLR+13] Alexander S. Green, Peter LeFanu Lumsdaine, Neil J. Ross, Peter Selinger, and Benoît
Valiron. Quipper: A scalable quantum programming language. In ACM SIGPLAN Confer-
ence on Programming Language Design and Implementation , 2013. doi:10.1145/2491956.
2462177.
[GM05] GianCarlo Ghirardi and Luca Marinatto. Nonlocality without inequalities for almost all
entangled states of any quantum system. Physical Review A , 72(1), jul 2005. URL: https:
//doi.org/10.1103%2Fphysreva.72.014105 ,doi:10.1103/physreva.72.014105 .
[Gof06] Allan Goﬀ. Quantum tic-tac-toe: A teaching metaphor for superposition in quantum me-
chanics. 2006. URL: https://perruchenautomne.eu/wordpress/wp-content/uploads/
2015/05/QT3-AJP-10-20-06.pdf .
[HM19] Yipeng Huang and Margaret Martonosi. Statistical assertions for validating patterns and
ﬁnding bugs in quantum programs. In International Symposium on Computer Architecture ,
2019. doi:10.1145/3307650.3322213 .
[JL03] Richard Jozsa and Noah Linden. On the role of entanglement in quantum-computational
speed-up. Proceedings of the Royal Society of London. Series A: Mathematical, Physical
and Engineering Sciences , 459(2036), Aug 2003. doi:10.1098/rspa.2002.1097 .
[Jul15] Julia. Julia operaotrs. 2015. URL: https://github.com/JuliaLang/julia/blob/
59314a9875851ac26316369cb9525f57ba044333/base/int.jl#L53 .
[KPOR18] Sebastian Krämer, David Plankensteiner, Laurin Ostermann, and Helmut Ritsch. Quan-
tumoptics. jl: A julia framework for simulating open quantum systems. Computer Physics
Communications , 227:109–116, 2018.
[Lev07] George Levesque. The epr paradox, 2007. URL: https://vc.bridgew.edu/cgi/
viewcontent.cgi?article=1064&context=undergrad_rev .
[LLZW20] Xiu-Zhe Luo, Jin-Guo Liu, Pan Zhang, and Lei Wang. Yao.jl: Exten-
sible, Eﬃcient Framework for Quantum Algorithm Design. Quantum , 4:341,
2020. URL: https://quantum-journal.org/papers/q-2020-10-11-341/ ,doi:10.
22331/q-2020-10-11-341 .
[Mer98] N. David Mermin. The ithaca interpretation of quantum mechanics. Pramana ,
51(5):549–565,nov1998. URL: https://doi.org/10.1007%2Fbf02827447 ,doi:10.1007/
bf02827447 .
[Mer03] N. David Mermin. From cbits to qbits: Teaching computer scientists quantum mechanics.
American Journal of Physics , 71(1):23–30, jan 2003. URL: https://doi.org/10.1119%
2F1.1522741 ,doi:10.1119/1.1522741 .
[Mon80] Montague. Spinor algebra, 1980. URL: https://cds.cern.ch/record/134383/files/
cer-000045113.pdf .
[MS20] Mariia Mykhailova and Krysta M. Svore. Teaching quantum computing through a practical
software-driven approach. In Proceedings of the 51st ACM Technical Symposium on Com-
puter Science Education . ACM, feb 2020. URL: https://doi.org/10.1145%2F3328778.
3366952,doi:10.1145/3328778.3366952 .
22[NC00] MichaelA.NielsenandIsaacL.Chuang. Quantum Computation and Quantum Information .
Cambridge University Press, 2000.
[NC10] MichaelA.NielsenandIsaacL.Chuang. Quantum Computation and Quantum Information:
10th Anniversary Edition . Cambridge University Press, 2010.
[PRZ17] Jennifer Paykin, Robert Rand, and Steve Zdancewic. Qwire: A core language for quantum
circuits. In ACM SIGPLAN Symposium on Principles of Programming Languages , 2017.
doi:10.1145/3009837.3009894 .
[qis21] Qiskit: An open-source framework for quantum computing, 2021. URL: https://www.
qiskit.org ,doi:10.5281/zenodo.2573505 .
[RPLZ19] Robert Rand, Jennifer Paykin, Dong-Ho Lee, and Steve Zdancewic. Reqwire: Reasoning
about reversible quantum circuits. Electronic Proceedings in Theoretical Computer Science ,
287, Jan 2019. doi:10.4204/EPTCS.287.17 .
[RS17] Mathys Rennela and Sam Staton. Classical control, quantum circuits and linear logic in
enriched category theory. In Conference on Mathematical Foundations of Programming
Semantics , 2017. doi:10.23638/LMCS-16(1:30)2020 .
[Sel04] Peter Selinger. Towards a quantum programming language. Mathematical Structures in
Computer Science , 14, 08 2004. doi:10.1017/S0960129504004256 .
[SGT+18] Krysta Svore, Alan Geller, Matthias Troyer, John Azariah, Christopher Granade, Bettina
Heim, Vadym Kliuchnikov, Mariia Mykhailova, Andres Paz, and Martin Roetteler. Q#:
Enablingscalablequantumcomputinganddevelopmentwithahigh-leveldsl. RWDSL2018,
NewYork, NY,USA,2018.AssociationforComputingMachinery. doi:10.1145/3183895.
3183901.
[Sho] Barak Shoshani. PHYS 4P51: Quantum Mechanics Fall 2021 Lecture Notes, Department
of Physics, Brock University. URL: https://baraksh.com/4P51/Barak_Shoshany_PHYS_
4P51_Lecture_Notes.pdf .
[SV05] Peter Selinger and Benoît Valiron. A lambda calculus for quantum computation
with classical control. Typed Lambda Calculi and Applications , 2005. doi:10.1017/
S0960129506005238 .
[UCL23] UCL. Quantum technologies msc, 2023. URL: https://www.ucl.ac.uk/
prospective-students/graduate/taught-degrees/quantum-technologies-msc .
[Wan] Yaoplots.jl: Plotting extension for quantum circuit visualizations.
[Woo01] William Wooters. Entanglement of formation and concurrence, 2001. URL: https://www.
rintonpress.com/journals/qic-1-1/eof2.pdf .
[WSS14] Dave Wecker, Krysta M. Svore, and Krysta M. Svore. Liqui|>: A software design architec-
ture and domain-speciﬁc language for quantum computing. February 2014.
[Yin16] Mingsheng Ying. Foundations of Quantum Programming . Morgan Kaufmann Publishers
Inc., San Francisco, CA, USA, 1st edition, 2016.
[Zar22] David Zaret. 605.728 quantum computation, 2022.
[ZS11] Guangtian Zhu and Chandralekha Singh. Improving students’ understanding of quantum
mechanics via the stern–gerlach experiment. American Journal of Physics , 79(5):499–507,
May 2011. URL: http://dx.doi.org/10.1119/1.3546093 ,doi:10.1119/1.3546093 .
23Alphabetical Index
B
Basis ........................................ 10
Beamsplitter..................................9
Bell state....................................14
Bell states..................................14f.
Bell’s theorem.................................1
Bell-state measuerment ...................... 16
Bell-state measuerment circuit...............16
Bra...........................................6
C
CNOT..................................11f., 16
Control......................................16
Controll ..................................... 12
D
Density matrices.............................13
Density matrix...............................14
Dirac ......................................... 9
Double-slit....................................9
E
Eigenstates ................................... 5
Eigenvalue ................................ 4, 14
Eigenvalues...................................5
Entangelment qunatiﬁcation...................8
Entanglement...................1, 4, 8f., 11, 13
Entanglement entropy........................13
Entropy......................................13
EPR.........................................19
G
GHZ.........................................17
Greenberger Horne Zeilinger ................. 17
H
Hadamard .............................. 1, 8–11
Hardy’d paradox.............................19
Hermitian....................................13
Hidden-variable models ....................... 1
J
Julia...............................1, 7f., 10–13
K
Ket...........................................6
L
Local realism ................................ 19M
Mach-Zehnder interferometer .................9
Maximally entangled.........................19
Maximally mixed states......................13
Mixed states.................................13
P
Paper-and-pencil.......................13, 16ﬀ.
Pauli X.......................................9
Pauli Z ....................................... 9
Polarized......................................4
Probability amplitude.........................6
Pure states .................................. 13
Purity ....................................... 13
Q
QIS...........................................2
Quantum circuit..............1f., 7ﬀ., 12, 15ﬀ.
Quantum information processing..............2
Quantum simulation.........................12
S
S-G apparatus ................................ 4
SGE........................................1, 4
Shots........................................12
Spin 1/2.....................................15
Spin-1/2.....................................19
Spin-half......................................5
Superposition............................1, 9ﬀ.
Superpositions...............................14
T
Target ................................... 12, 16
Three qubit entanglement....................17
U
Unitary.......................................9
Unitary time evolution........................9
V
Von-Neumann.................................8
Von-Neumann entropy ........................ 8
von-Neumann entropy........................13
Y
Yao..........................................14
Yao.jl..............................1, 7f., 10–13
Z
Z-axis.........................................4
24