arXiv:2302.06984v1  [cs.CC]  14 Feb 2023Towards Optimal Depth-Reductions for Algebraic Formulas
Herv´ e Fournier1, Nutan Limaye2, Guillaume Malod3, Srikanth Srinivasan∗4, and
S´ ebastien Tavenas5
1,3Universit´ e Paris Cit´ e, IMJ-PRG
Emails: herve.fournier@imj-prg.fr, guillaume.malod@im j-prg.fr
2ITU Copenhagen,
Email: nuli@itu.dk
5Aarhus University,
Email: srinivasan.srikanth@gmail.com
3Univ. Savoie Mont Blanc, CNRS, LAMA
Email: sebastien.tavenas@univ-smb.fr
Abstract
Classical results of Brent, Kuck and Maruyama (IEEE Trans. Comp uters 1973) and
Brent (JACM 1974) show that any algebraic formula of size scan be converted to one of
depthOplogsqwith only a polynomial blow-up in size. In this paper, we consider a ﬁne-
grained version of this result depending on the degree of the polyno mial computed by the
algebraic formula.
Given a homogeneous algebraic formula of size scomputing a polynomial Pof de-
greed, we show that Pcan also be computed by an (unbounded fan-in) algebraic formula
of depth Oplogdqand size poly psq.Our proof shows that this result also holds in the highly
restricted setting of monotone, non-commutative algebraic form ulas.
This improves on previous results in the regime when dis small (i.e., d“sop1q). In
particular, for the setting of d“Oplogsq,along with a result of Raz (STOC 2010, JACM
2013), our result implies the same depth reduction even for inhomogeneous formulas. This
is particularly interesting in light of recent algebraic formula lower bou nds, which work
precisely in this “low-degree” and “low-depth” setting.
We also show that these results cannot be improved in the monotone setting, even for
commutative formulas.
∗The author is grateful for a research visit sponsored by the G uest researchers faculty program at Universit´ e
Paris Cit´ e in summer 2022.1 Introduction
Inthispaper,westudyabasicquestionregardingcomputati onaltradeoﬀsbetweentworesources
for the model of algebraic formulas .
An algebraic formula Ffor a multivariate polynomial Ppx1,...,x nqis simply an algebraic
expressionfor Pmadeupofnestedadditionsandmultiplications. Equivalen tly, it canbedeﬁned
as a rooted directed tree where the leaves are labelled by var iables and internal nodes (or gates)
compute either linear combinations or products of their chi ldren (a formal deﬁnition can be
found in Section 2 below). Unless otherwise stated, we do not bound the number of children of
a gate (in other words, we consider formulas of unbounded fan-in ).
The two basic computational resources that describe the com plexity of an algebraic formula
Fareitssize, whichis thenumberofleaves intheunderlyingtree, andits depth, whichnaturally
is the depth of the tree. Polynomials1that have eﬃcient (i.e., poly pnq-sized) algebraic formulas
form the algebraic complexity class VF .Like its Boolean counterpart NC1, this is a natural and
important complexity class.
Tradeoﬀs between size and depth in the setting of formulas and related models of computa-
tion have been the focus of many previous works, starting fro m the early 1970s [Spi71, BKM73,
Bre74, VSBR83, SS80, Nis91, Raz06, RY08, AV08, Koi12, Tav15 , GKKS16, KSS14, CKSV16,
LST21a]. We describe a few such results here.
•In theBoolean setting, Spira[Spi71] and independentlyKhr apchenko(see [YK68]) showed
that any Boolean formula of size scan beconverted to aBoolean formula of depth Oplogsq
while keeping the size bounded by sOp1q.These results were replicated in the algebraic
setting in results of Brent, Kuck and Marayuma [BKM73] and Br ent [Bre74]. The con-
stants involved in the bounds for the depth and the size were i mproved in many follow-up
works [PM75, PM76, Kos86, BCE95, BB94].
•This question has also been studied for the more general mode l ofalgebraic circuits, where
the underlying tree is replaced by a directed acyclic graph ( DAG). A well-known result
of Valiant, Skyum, Berkowitz and Rackoﬀ [VSBR83] showed tha t an algebraic circuit of
sizescomputing a polynomial of degree poly psqcan be converted to a circuit of depth2
Oplogsqand size poly psq. These results were also shown to hold for multilinear3circuits
by Raz and Yehudayoﬀ [RY08].
•The above results are known to be tight in various settings. I n themonotone case4,
Shamir and Snir [SS80] showed the existence of an explicit po lynomial Pwith a poly pnq-
sized circuit such that any circuit of depth oplognqforPis of superpolynomial size.
Similar results were obtained in the multilinear case by Raz [Raz06] and Chillara, Limaye
and Srinivasan [CLS18] (for multilinear circuits and formu las, respectively).
•BeginningwiththeworkofAgrawal andVinay [AV08], arecent lineofwork[Koi12,Tav15,
GKKS16, KSS14, CKSV16, KdOS19] has shown that algebraic cir cuits and formulas can
be converted to formulas of constant depth with asub-exponential blow-up in size. In
contrast, our focus in this paper is primarily on reducing de pth as much as possible while
keeping the size bounded by poly psq, as in the results listed previously.
1Strictly speaking, we should refer here to inﬁnite sequence s of polynomials, but we ignore this distinction.
2In the bounded fan-in case, this would be depth Oplog2sqinstead.
3A circuit or formula is multilinear if each of its gates compu tes a multilinear polynomial.
4where the underlying ﬁeld is Rand all constants are non-negative, so cancellations do not occur.
2The question. In this paper, we ask the question of whether stronger depth-reduction results
can be proved given a bound don the degree of the polynomial Ppx1,...,x nqcomputed by the
algebraic formula. In general, an algebraic formula of size scan compute a polynomial of degree
at mosts. Whend“s(ord“sΩp1q), the above results imply that an algebraic formula Ffor
Pcan be converted to another formula F1of depth Oplogdqwithout signiﬁcant blow-up in size.
Does such a result hold for any d(or more speciﬁcally, when d“sop1q)?
Note that this question only makes sense for algebraic formu las of unbounded fan-in. If the
fan-in of each gate is bounded by a constant, then any formula of sizesmust have depth at
least Ω plogsq(and so, Brent, Kuck, and Marayuma’s result [BKM73] is optim al). However, in
many settings (see e.g. the third motivation below), we want a ﬁner analysis of the formula
depth that can be achieved by formulas of unbounded fan-in.
Motivation. While the question is fairly natural in our opinion, there ar e also many concrete
reasons that lead to this line of inquiry.
•It is easy to see from the proof of Valiant, Skyum, Berkowitz, and Rackoﬀ [VSBR83] that
any algebraic circuitcan be depth-reduced to depth Oplogdqwith only a poly ps,dqblow-
up in size. So the natural generalization for small degrees i s indeed true in the setting of
algebraic circuits.
•It also follows from previous results that the depth bound of Oplogsqcan be improved
when the degree is d“oplogsq.This is due to a result of Raz [Raz13]: any formula Ffor
a homogeneous polynomial Pof degree dcan be converted to a homogeneous formula5
F1eﬃciently. Further, it is easy to see that any homogeneous fo rmula computing a
polynomial of degree dhas depth Opdq “oplogsq.So, in this regime for the degree,
standard depth-reduction results canbe strengthened.
•Finally, very recent results in algebraic complexity [LST2 1b] have suggested a way of prov-
ing lower bounds against low-depth algebraic formulas for computing low-degree polyno-
mials, which naturally raises the question of obtaining the best possible depth-reduction
results in this setting.
More speciﬁcally, Limaye, Srinivasan, and Tavenas [LST21b ] showed how to prove lower
bounds against algebraic formulas (and even circuits) of sm all depth. Their proof pro-
ceeds by converting an algebraic formulaof size sand depth∆ to a homogeneous algebraic
formula of size poly psqand depth Op∆q,and then proving lower bounds against homoge-
neous algebraic formulas of depth Op∆q. An important point regarding the ﬁrst step is
that it only works in the “low-degree setting” of d“Oplogs{loglogsq.The second step
proves lower bounds against homogeneous formulas of depth u p toOploglogdq.
To make this proof idea work for general (unbounded-depth) a lgebraic formulas, we would
like to be able to homogenize and depth-reduce algebraic for mulas as much as possible.
The aforementioned result of Raz [Raz13] already shows that we can homogenize algebraic
formulas eﬃciently in the low-degree setting. So it is natur al to investigate the best
possible depth-reduction for homogeneous algebraic formu las in the low-degree setting.
Results. Ourmain result is a depth-reduction resultfor homogeneous formulas that eﬃciently
reduces the depth to Oplogdq, matching what was already known for algebraic circuits by t he
result of [VSBR83].
5A homogeneous formula is one where each gate computes a homog eneous polynomial. This means that the
formula does not compute intermediate polynomials of degre e larger than d.
3Theorem 1 (Main Result) .LetFbe a homogeneous algebraic formula of size scomputing a
polynomial Pof degree dě2. ThenPis also computed by a homogeneous formula F1of size
poly psqand depth Oplogdq.Moreover, if Fis monotone and/or non-commutative, then so is
F1.
Here, amonotone algebraic formula is one that does not exploit cancellation s in any way,
and anon-commutative formula describes a polynomial expression in a domain where the input
variables do not commute when multiplied with each other (fo rmal deﬁnitions are given in
Section 2). These are both settings in which formula upper bo unds are harder to prove, and
hence the depth-reduction result in this setting implies th e result in the standard setting. It can
also be checked that the depth-reduction procedure above pr eserves other interesting properties
of the formula, such as multilinearity andset-multilinearity .
Using the aforementioned result of Raz that allows us to homo genize algebraic formulas in
the low-degree setting, we get the following depth-reducti on even for inhomogeneous formulas.
Corollary 2. Letd“Oplognq. Then a homogeneous polynomial Pdeﬁned on nvariables with
degreedě2has an algebraic formula of size poly pnqif and only if it has an algebraic formula
of depth Oplogdqand size poly pnq.
In particular, this means that to prove superpolynomial low er bounds against general alge-
braic formulas in the low-degree setting, it suﬃces to prove such lower bounds against homoge-
neous algebraic formulas of depth Oplogdq.As far as we know, nothing below the trivial Opdq
bound was known before for such an implication. This brings u s much closer to the regime of
depths for which we have lower bounds [LST21b].
The statements are even starker in the non-commutative sett ing, where it is a long-standing
problem to prove separations between Algebraic Branching Programs (ABPs) and formulas. In
recent work [TLS22], it was shown how to prove such a result fo r depths that are op?logdq.
The results of this paper show that it suﬃces to prove such a re sult for depth Oplogdq.6
Finally, we also show that our results cannot be improved asy mptotically in terms of depth,
unless we use techniques that exploit cancellations in some way.
Theorem 3 (Lower Bound) .Letnandd“dpnqbe growing parameters such that dpnq ď?n.
Then there is a monotone algebraic formula Fof size at most nand depth Oplogdqcomputing
a polynomial PPFrx1,...,x nsof degree at most dsuch that any monotone formula F1of depth
oplogdqcomputing Pmust have size nωp1q.
Itshouldbenotedthatawell-knownresultofGupta, Kamath, KayalandSaptharishi[GKKS16]
shows how to exploit cancellations to obtain better depth-r eduction results. However, in gen-
eral this does not reduce the depth of a given formula by more t han a constant factor without
incurring a signiﬁcant blow-up in size.7As a result, we believe that the above result is a strong
indication that our depth reduction result is tight up to a co nstant factor in the depth.
2 Preliminaries
Basic notation. Throughout, unless otherwise speciﬁed, we work with polyno mials over
a ﬁeldF. We will work with the multivariate ring of polynomials Frx1,...,x nsor itsnon-
commutative analogFxx1,...,x ny.
6We note that Raz’s result, though only stated for the commuta tive setting, works just as well in the non-
commutative case.
7More precisely, the result of [GKKS16] shows how to convert a low-degree homogeneous depth-4 formula to
aninhomogeneous depth-3 formula eﬃciently. In general, this can be used to re duce the depth of a small-depth
formula by a multiplicative factor of 2.
42.1 Algebraic formulas
We start with some brief deﬁnitions and results related to al gebraic formulas. For much more
about this model, see the standard references [SY10, Sap15] .
The model. An algebraic formula over the multivariate polynomial ring Frx1,...,x nsis a
rooted, directed tree with edges directed towards the root. Leaves are labelled by variables
x1,...,x nor by the constant 1 and edges by non-zero ﬁeld constants. Int ernal nodes (i.e., gates)
by`and ˆand compute linear combinations (based on the edge weights) or products of their
children. We will assume, with loss of generality, that if a n odeαhas for child a leaf labelled
by 1, then αis a `-gate and that if a `-gateαhas only children labelled by 1, then αis the
output of the formula.8Anon-commutative algebraic formula over the multivariate polynomial
ringFxx1,...,x nyis deﬁned similarly, with the additional assumption that th e children of any
ˆ-gate are linearly ordered, and the corresponding product i s computed in this order.
Unless explicitly stated, the algebraic formulas we consid er haveunbounded fan-in (i.e., a
gate can have any number of inputs). The sizeofFwill denote the number of leaves,9thedepth
ofFthe longest leaf-to-root path. The product-depth and the sum-depth ofFare deﬁned to
be the maximum number of product gates and sum gates encounte red on a leaf-to-root path,
respectively.
Aparse tree of a formula Fis a subformula of Fwhich corresponds to the way a monomial
is built in the evaluation of F. Parse trees of Fcan be deﬁned inductively as follows:
•IfFhas a top `-gate, a parse tree of Fis obtained by taking a parse tree of one of its
children together with the corresponding edge to the root of F;
•IfFhas a top ˆ-gate, a parse tree of Fis obtained by a taking a parse tree of each of its
children, together with the incoming edges of the root of F;
•The only parse tree of a leaf is itself.
The polynomial computed by a parse tree is a single monomial, which is equal to the product of
the variables labelling its leaves, multiplied by the produ ctof the scalars labelling its edges. The
polynomial computed by a formula Fis easily seen to be the sum of the monomials computed
by all its parse trees.
A formula Fis called monotone if any monomial computed by a parse tree of Fhas a
non-zero coeﬃcient in the polynomial computed by F.
We now recall some well-known results from the literature re garding algebraic formulas. It
shouldbenoted that these results (speciﬁcally Theorems 4, 5and 10 later on) areusually proved
in the general setting of commutative formulas. However, it is easy to see that the proofs of
these results carry over to the monotone, non-commutative s etting without signiﬁcant change.
Depth-reduction. Classical results [BKM73,Bre74] showthat any algebraic fo rmulaof small
size can be simulated by one of small depth and not much larger size. Formally,
Theorem 4. LetFbe a (non-commutative or commutative) algebraic formula of sizescom-
puting a polynomial P. Then there is an algebraic formula F1of size at most poly psqand
depth∆“Oplogsqcomputing P. We may also assume that each gate in F1has fan-in 2.
Furthermore, Fis homogeneous and/or monotone, then so is F1.
8This ensures that aformula can compute polynomials with a co nstant term but forbids using many arithmetic
operations just to compute constants.
9This is within a constant factor of the number of gates, as lon g as each gate has fan-in at least 2 each (which
is without loss of generality).
5Homogeneity. Each gate in an algebraic formula has a syntactic degree deﬁned in a natural
way. Leaves labelled by the constant 1 have syntactic degree 0, leaves labelled with a variable
have syntactic degree 1, ˆ-gates have a syntactic degree that is the sum of the syntacti c degrees
of their children, and `-gates have a syntactic degree that is equal to the largest of the syntactic
degrees of their children. The syntactic degree of a formula is deﬁned as the syntactic degree of
its output. Notice that in a formula the syntactic degree of a ny gate is boundedby the syntactic
degree of the formula.
We will further assume that no gate computes the zero polynom ial.
A formula is homogeneous if each gate in the formula computes a homogeneous polynomia l.
Equivalently, in terms of syntactic degrees, this means tha t all the children of a sum gate have
the same syntactic degree.
Raz [Raz13] showed how to convert a possibly inhomogeneous f ormulaFto a homogeneous
formula with a relatively small blow-up in size.
Theorem 5. LetFbe a (non-commutative or commutative) algebraic formula of sizesand
product-depth ∆computing a polynomial Psuch that all gates in Fhave fan-in 2. Then there
is ahomogeneous algebraic formula F1of size at most O´
s¨`∆`d`1
d˘¯
and product-depth ∆
computing P. In particular, if ∆“Oplogsqandd“Oplogsq, then the formula F1has size
poly psq.
3 Main result
Proof Overview. While the proof of the main resultis fairly short and(in our o pinion)clean,
we add some remarks here to clarify why previous depth-reduc tion proofs are not applicable in
our setting.
The ﬁrst attempt in proving Theorem 1 would be to try to use the proof strategy behind
Theorem 4. Here, we start with a formula Fof sizesand ﬁnd a subformula Gof size roughly
s{2 rooted at some gate αofF. It is not hard to show that the polynomial computed by Fcan
be written as
F“GˆH1`H2
whereH1andH2are also computed by formulas of size s{2.10We then apply induction to
these three subformulas to get the result. Unfortunately, t his strategy does not use the degree
of the formula at all, and therefore only yields a formula of d epthOplogsq.
In the homogeneous setting, it is sometimes more natural to d o induction on the degree
of the underlying formula, in which case GandH1(in the decomposition above) would be
subformulas of degree roughly d{2. We get the following recursion on the worst-case size of th e
depth-reduced version of F, which we denote by Tps,dq
Tps,dq ďTps1,d{2q `Tps´s1,d{2q `Tps´s1,dq
wheres1denotes the size of G. Unfortunately, in this case, the formulas H1andH2couldhave
size nearly s, resulting in considerable size blow-up. Indeed, when s1is much smaller than s
(says1“sop1q), the above recursion only yields Tps,dq “sOplogdq, which is a superpolynomial
size blow-up.
It may be possible to interleave recursions with respect to s ize and depth, but we were
unable to make this work.
10Here, for simplicity, we are assuming that Fis a commutative formula. In the non-commutative setting, w e
would instead get F“H1
1GH2
1`H2.
6Another possible strategy could be to follow the work of [VSB R83] which produces circuits
of the required depth. Unfortunately, the proof of [VSBR83] is a memoization procedure, which
seems to yield circuits even when applied to a formula F. Turning the resulting circuit of depth
Oplogdqinto a formula seems to increase the size to sΩplogdq.
The approach we take is somewhat more global than the recursi ve strategies outlined above.
Our ﬁrst motivating example is seemingly the worst-case exa mple for depth-reduction: a comb
of depth greater than dwith alternating sums and products. More formally, a comb co mputes
the following polynomial (up to identifying variables).
Cpxq “x1` px2ˆ px3` px4ˆ ¨ ¨ ¨ qqq
Note that the above yields a formula of depth greater than dwheredis the degree of the
underlying polynomial. However, we observe that such a comb actually computes a polynomial
withonlyafewmonomials, andhencecan bewrittentrivially asadepth-2řś-formulawithout
much of a size blow-up.
Building on this observation, the overall strategy is to dec ompose the formula into a top
partG, which is a (generalized) comb, whose leaves are subformula s ofFto which we will apply
the same procedure recursively. We then write Gas ařś-formula, and replace its leaves with
the depth-reduced versions of the subformulas. This gives t he depth-reduced version of F.
The correct deﬁnition of Gis crucial, and somewhat subtle (at least to us), but with the
proper deﬁnitions in place, the proof goes through without m uch trouble.
3.1 Proof of Theorem 1
In this section we prove our main result (Theorem 1). We start by showing a simple depth-
reductionresultforthecaseof skew formulas . Aformulaissaidtobeskewifeverymultiplication
gate in it has at most 1 non-trivial child (i.e., a non-leaf no de).
We will say that a leaf in a skew-formula is a `-leaf if the parent of that leaf is a `gate and
aˆ-leaf otherwise. We show that any skew formula can be convert ed eﬃciently into a depth-2
formula, i.e., ařś-formula.
Lemma 6. LetGbe a skew formula with sum-depth δ, wherein all the gates have fan-in 2and
the leaves are labelled by distinct variables. Then the polyn omial computed by Gis a multilinear
polynomial with at most 2δmonomials. Moreover any variable labelling in G
•a`-leaf,
•or a ˆ-leaf whose sibling is a leaf
appears in exactly one monomial. We will call them the non-duplicable variables.
Proof.We prove this by induction on the depth of the formula. The bas e case is when the depth
is 0 or 1. In both cases, the statement trivially holds.
For the induction case, assume that the depth is at least 2. Su pposeG“G1`G2. The
sum-depths of G1andG2are at most δ´1. Letf1,f2be the multilinear polynomials computed
byG1,G2, respectively. We know that the leaves of Gare labelled with distinct variables.
Hence,G1,G2have the same property and the variable sets labelling the le aves ofG1andG2
are disjoint. Thedepths of G1andG2are strictly smaller than the depth of G. By the induction
hypothesis we have that f1andf2have at most 2δ´1monomials. Moreover, any non-duplicable
variable in G1appears in at most one monomial in f1. Similarly, any non-duplicable variable in
G2appears in at most one monomial in f2. Hence, the polynomial computed by G, i.e.,f1`f2,
7has at most 2δmonomials and each non-duplicable variable appears in at mo st one monomial
in it.
Suppose the top gate of Gis a ˆgate. As Gis a skew formula it is either xˆG1or
G1ˆx, wherexis a variable. In particular since the depth of Gis at least two, the variable x
is duplicable. Let f1be the multilinear polynomial computed by G1. By our assumption, the
variablexdoes not appear in f1. The depth of G1is strictly smaller than G. By the induction
hypothesis we have that f1has at most 2δmonomials and any non-duplicable variable in G1
appears in at most one monomial. As xcan distribute over the monomials of f1, we have that
thepolynomial computed by Gis multilinear withat most 2δmonomials and any non-duplicable
variable appears in at most one monomial.
(Note that this can also be seen using parse trees, since the p olynomial computed is the sum
of the monomials computed by the parse trees. The multilinea rity is obvious. Note that parse
trees do not really “branch” at multiplication gates becaus e of the skewness and are therefore
combs. To build a parse tree starting from the root we will hav e two choices for each addition
gate we encounter on the path, and there are at most δ, so we get at most 2δparse trees. The
only parse tree containing a given non-duplicable variable is deﬁned by the path from the root
to this leaf.)
If a formula is homogeneous, it implies that for any gate α, the degree of the polynomial
computed by αcoincides with the syntactic degree dαofα. Based on this remark, below we
prove a stronger statement than Theorem 1. Speciﬁcally, The orem 1 is stated for homogeneous
formulas. But here, we show a depth-reduction for formulas f or which the syntactic degree is
small.
Theorem 7 (Reﬁnement ofTheorem1) .LetFbe an algebraic formula of size sand of syntactic
degreedFě2. ThenPis also computed by a formula F1of sizepoly psqand depth OplogdFq.
Moreover, if Fis homogeneous, monotone and/or non-commutative, then so i sF1.
Proof.Let us start with a formula obtained from Fafter applying Theorem 4. That is, we will
assume that we have a formula of size poly psqsuch each gate in it has fan-in 2, sum-depth and
product-depth are bounded by Oplogsq. For notational simplicity, from now on, Fwill refer to
this new formula.
Letδbe a positive integer. For a formula Gof syntactic degree dGě1 and sum-depth ∆ pGq
we deﬁne a potential function φδpGqas follows.
#
φδ,1pGq “rlogpdGqs
φδ,2pGq “r∆pGq{δs
and let
φδpGq “φδ,1pGq `φδ,2pGq.
We will show that the potential function bounds the depth of t he depth-reduced formula
that wewill construct. We will alsouseit toboundthesize of theresultingformula. Speciﬁcally,
we prove the following lemma.
Lemma 8. Letδbe a positive integer. Any formula Fof fan-in 2, syntactic degree dě1, sum-
depth∆, and size scan be parallelized into a formula F1(of arbitrary fan-in) of product-depth
at most φδpFqand size at most s¨2δlogpdq. Further, if Fis homogeneous, monotone and/or
non-commutative, so is F1.
8Sincewe ensuredthat thesum-depthis boundedby Oplogsq, takingδ“Q
logs
logdU
and applying
Lemma 8, we get that the ﬁnal formula F1has size at most poly psqand product-depth at most
φδpFq “Oˆ
rlogds`R
logpsqlogd
logsV˙
“Oplogdq.
By collapsing sum gates that feed into other sum gates, we see that the depth of F1can be
assumed to be at most twice its product-depth, which is Oplogdq. This thus ﬁnishes the proof
of the theorem.
We now prove Lemma 8.
Proof of Lemma 8. For any gate αinF, letFαdenote the subformula rooted at αanddαbe
its syntactic degree. We do the proof by induction on φδpFq.
The base case φδpFq “0 trivially holds. Consider the following set of gates of F:
A“/visualspace
α|αis a not a leaf labelled 1 and φδpFαq ăφδpFq “φδpFparent pαqq(
.
For any gate αinA, the induction hypothesis tells us that we can construct a fo rmulaF1
αof
product-depth at most φδpFq ´1 and size at most sα¨2δlogpdαqcomputing the same polynomial
asFα.
Let us consider the formula Gobtained by replacing these gates from AinFby leaves (la-
belled with distinct variables). Notice that for a product- gateβinF, at most one of its children
has syntactic degree larger than dβ{2, where dβis the syntactic degree of β. Consequently, G
is a skew formula. The other child of βis aˆ-leaf inG. Moreover, Ghas sum-depth at most δ
(sinceφδ,2strictly decreases for gates below).
Hence, we can use Lemma 6 to simplify G: we get that the polynomial computed by G
is a multilinear polynomial in its leaves and has 2δmonomials. We can then write Gas ařś-formula G1such that each duplicable gate appears in at most 2δmonomials and each
non-duplicable gate in at most 1.
The new formula F1forFis obtained from G1by replacing each variable leaf, which corre-
sponds to some gate αinF, by its depth-reduced version F1
αconstructed using the induction
hypothesis above.
The product-depth of F1is bounded by the product-depth of the gates αPAplus the
product-depth of G, which is equal to 1 after rewriting it as ařś-formula. That is, the
product-depth is at most pφδpFq ´1q `1“φδpFq. By construction if Gdoes not contain leaves
labelled by 1, then it is also the case for G1, otherwise, G1still has at most one such leaf. The
size of the resulting formula is bounded by
ÿ
αnon-duplicable´
sα¨2δlogpdαq¯
`¨
˝2δ¨ÿ
αduplicable´
sα¨2δlogpdαq¯˛
‚` /BDG’ has a constant leaf .
Notice that if αis duplicable, it must be a ˆ-leaf with its sibling βnot a leaf. This means
thatdαďdβďdsince the syntactic degree is maximal at the root. Hence dαďd{2 so the
contribution of duplicable gates is bounded by
ÿ
αduplicable2δ´
sα¨2δplogpdq´1q¯
ďÿ
αduplicable´
sα¨2δlogpdq¯
.
The contribution of non-duplicable gates is bounded by
ÿ
αnon-duplicablesα¨2δlogd
9since any gate in Fhas syntactic degree at most d. By the choice of A, the subformulas Fαare
disjoint soř
αPAsαďs, with strict inequality if G1has a constant leaf. Hence the size of F1is
bounded by s¨2δlogpdq.
Finally, it is straightforward to verify that the construct ion preserves homogeneity, mono-
tonicity and/or non-commutativity.
Remark 9. It is easy to note that our depth reduction procedure does not i ncrease the syntactic
degree of the formula.
We also observe that putting Theorem 1 together with Theorem s 4 and 5 immediately
implies Corollary 2.
Proof of Corollary 2. Given a (possibly inhomogeneous) formula Fof sizes“poly pnqcomput-
ing a polynomial of degree d“Oplognq,we ﬁrst apply standard depth-reduction (Theorem 4)
to get an equivalent formula F1of sizes1“poly pnqand depth ∆ 1“Oplognqwhere each gate
has fan-in 2. Applying Raz’s homogenization theorem (Theor em 5) to F1yields an equivalent
homogeneous formulaF2of sizes2“poly pnqand depth ∆ 2“Oplognq. We can now apply The-
orem 1 to F2to get an equivalent formula F1of sizes1“poly pnqand depth ∆1“Oplogdq.
3.2 Reducing the size blow-up
We note that the above strategy can be easily adapted to yield a small depth formula of size s1
that is nearly linear in the size sof the original formula, at the expense of increasing the dep th
by a large constant.
The proof is nearly identical to the proof of Theorem 1 above. The new ingredient is a
near-linear depth-reduction in the setting where there is n o bound assumed on the degree of
the above formula. More precisely, Bshouty, Cleve and Eberl y [BCE95] (see also the work of
Bonet and Buss [BB94]) showed the following (we sketch Bonet and Buss’ proof in Appendix A
for completeness).
Theorem 10 (Depth-reduction with near-linear size) .The following holds for any εą0.Let
Fbe a (non-commutative or commutative) algebraic formula of sizescomputing a polynomial
P. Then there is an algebraic formula F1of size at most s1`εand depth ∆“2Op1{εq¨logs
computing P. We may also assume that each gate in F1has fan-in 2. Furthermore, if Fis
homogeneous and/or monotone, then so is F1.
Using the above result, we can prove the following improved v ersion of our depth-reduction.
Theorem 11. Assume that Fis a (commutative or non-commutative) formula of size sand
syntactic degree dě1computing a polynomial P. ThenPis also computed by a formula F2
of size at most s1`εand depth ∆“2Op1{εq¨logd.Furthermore, if Fis a homogeneous and/or
monotone formula, then so is F2.
Proof.Ifd4{εěs, then the depth-reduction of Theorem 10 already gives a sati sfactory solution.
Indeed the size is bounded by s1`εand the depth is bounded by
2Op1{εqlogsď4
ε2Op1{εqlogdď2Op1{εqlogd.
So we assume that sąd4{ε. By ﬁrst applying Theorem 10 (with ε{2 instead of ε), we obtain
a formula F1of size at most s1`ε{2, depth ∆1“2Op1{εq¨logs, and fan-in 2 computing P.
Now, we apply Lemma 8, while setting δ“tpεlogsq{p2logdqu. Notice that since εlogsą
4logd, it ensures that δą pεlogsq{p4logdq ą1.
10Then the strategy produces a formula F2of product-depth at most
φδpF1q ďφδ,1pF1q `φδ,2pF1q ărlogds`2Op1{εqlogs4logd
εlogs“2Op1{εqlogd
and size at most
s1`ε{2¨2δlogdďs1`ε{2sε{2.
This proves the theorem.
3.3 Reducing the product fan-ins to 2
It is natural to ask if Theorem 1 can be proved while ensuring t hat the fan-in of each gate is
bounded by 2, as in Theorem 1 and Theorem 10. This is not possib le, as a formula of fan-in 2
and depth Oplogdqcan only compute polynomials on at most poly pdqvariables, while formulas
of sizesmay have up to svariables. However, this does not rule out reducing the fan- in of
the product gates to 2. Indeed, the circuitdepth-reduction of [VSBR83] does exactly this. We
show now that this can also be done for algebraic formulas wit h bounded syntactic degree.
Theorem 12. LetFbe a (commutative or non-commutative) algebraic formula Fof sizes,
depth∆, and syntactic degree dě1computing a polynomial P. ThenPcan also be computed
by a formula F1of sizesand depth ∆1“Op∆`logdqwhere each product gate of F1has fan-in
2. Furthermore, if Fis a homogeneous and/or monotone formula, then so is F1.
Plugging this in Theorem 7 gives a depth-reduction to formul as of depth Oplogdqand size
poly psqsuch that all product gates have fan-in at most 2. A similar re sult can be obtained with
a smaller blow-up in size by combining this statement with Th eorem 11.
Proof.It suﬃces to prove a weaker version of the above theorem where each product gate has
fan-in at most 3. We can then replace each of the products of fa n-in 3 by a tree of product
gates of fan-in 2 and size 3. This has the eﬀect of increasing th e depth at most by a factor of
2, which does not aﬀect the overall result.
So we will prove this slightly weaker version. In this settin g, we will aim for a depth
∆1“∆`logd.
This is done by induction on the depth ∆ of the formula. The cas e of ∆ “0 is trivial. Let
Fbe a formula of depth ∆ ą0 and syntactic degree d.
Assume that the output gate of Fis a sum gate, and F1,...,F tare the subformulas of F
of depth ∆ ´1. By deﬁnition, each Fihas syntactic degree at most d. Applying the induction
hypothesis to each of the Fiyields a formula F1
iwith product gates of fan-in at most 3. The
formulaF1can then be deﬁned as the sum of these formulas.
Now we come to the main case, which is when the output gate of Fis a product gate.
Assume that F1,...,F tare the subformulas of Fof depth ∆ ´1 in the order11that they appear
inF. Letdidenote the syntactic degree of Fi. Deﬁne
m“mintj|jÿ
i“1diěd{2u.
LetFℓbe the formula obtained from Fby keeping only the subformulas F1,...,F m´1, and
Frbe the formula obtained by keeping only Fm`1,...,F t.We use the induction hypothesis on
Fℓ,Fm,andFrto get formulas F1
ℓ,F1
mandF1
r. Finally, we set
F1“F1
ℓˆF1
mˆF1
r.
The size12ofF1is the sum of the sizes of F1
ℓ,F1
mandF1
r, which is at most sby the induction
11The order is important in the non-commutative setting.
12Recall that the size of a formula is the number of its leaves.
11hypothesis. Let ∆1
ℓ,∆1
mand ∆1
rdenote the depths of F1
ℓ,F1
mandF1
rrespectively. The depth of
F1is
1`maxt∆1
ℓ,∆1
m,∆1
ru ď1`maxt∆`logpd{2q,∆´1`logd,∆`logpd{2qu “∆`logd
where the second inequality uses the induction hypothesis, and the fact that FℓandFrhave
syntactic degree at most d{2 andFmhas depth at most ∆ ´1.
4 Tightness
Given integers kě1andrě2, wewill deﬁnea polynomial Hpk,rq. Intuitively, wewant to deﬁne
this polynomial as a standard universal polynomial for form ulas. It is composed of k-nested
inner products, each one of size r. In the following we will drop the superscript in Hpk,rqand
write simply Hinstead.
The polynomial Hwill be deﬁned over the set of p2rqkvariables
txσ,τ|σP r2sk,τP rrsku.
Let us deﬁne recursively polynomials Hu,vfor all pu,vq P r2sďkˆ rrsďksuch that |u| “ |v|:
Hu,v“xu,v when |u| “ |v| “k
Hu,v“rÿ
a“1Hu1,vaHu2,va otherwise .
The polynomial His deﬁned as the polynomial Hε,ε. Note that His a polynomial of degree
d“2kand hasrd´1monomials.
From its deﬁnition, His computed by a monotone formula Mof size p2rqkand depth 2 k,
with a `-gate at the top, alternating layers of `-gates and ˆ-gates, with `-gates of fan-in r
and ˆ-gates of fan-in 2, and leaves labelled with distinct variab les.
For words uandvover the same alphabet, we write uĄvifuis a preﬁx of v. There is
a natural one-to-one correspondance between preﬁxes of wor ds of prrs ˆ r2sqkand nodes of M,
which is the following. Let σ“σ1...σkP r2sk, andτ“τ1...τkP rrsk. The word τ1σ1...τkσk
corresponds to a path from the root of Mto the leaf labelled xσ,τ, while proper preﬁxes of
τ1σ1...τkσkcorrespond to internal gates in Malong this path. For ℓăk,u“u1...uℓP r2sℓ
andv“v1...vℓP rrsℓ, the node which corresponds to the word v1u1...vℓuℓis the `-gate of
Mcomputing Hu,v.
The polynomial His easily seen to be set-multilinear with respect to the sets of variables
tXσ|σP r2skuwhereXσ“ txσ,τ|τP rrsku. This means that each monomial has exactly one
variable from each set Xσ.
Remark 13. For|u| “ |v| “ℓďk,uP r2sℓandvP rrsℓ, the polynomial Hpk,rq
u,vis deﬁned over
the set of variables
Xu,v“ txσ,τ|σP r2sk, τP rrsk,uĄσ, v Ąτu
and is the polynomial Hpk´ℓ,rq(upto renaming of the variables). In particular, its degree i s
d1“2k´ℓ, it hasrd1´1monomials and it is set-multilinear with respect to tXσ|σP r2sk, uĄσu.
Before proving hardness of Hfor small-depth monotone formulas, we need to show that
the gates of a monotone formula computing Hcannot compute too many monomials. This is
proved in Lemma 15 below.
12Proposition 14. Consider two variables xσ,τandxσ1,τ1. Ifxσ,τxσ1,τ1appears in a monomial
ofH, and if σandσ1have a common preﬁx of length ℓăk, thenτandτ1have a common
preﬁx of length ℓ`1.
Proof.Observe that xσ1,τ1...xσp,τpis a monomial of Hif and only if these variables form the
leaves of a parse tree of M. As observed above, the root-to-leaf path leading to the var iable
xσi,τiinMis obtained by taking in turn the ﬁrst letter of τi, the ﬁrst letter of σi, the second
letter of τi, etc.
If the product xσ,τxσ1,τ1appears in a monomial of H, it must be possible to complete the
union of the two paths, from the root to xσ,τand from the root to xσ1,τ1, into a parse tree of
the formula M.
If the longest common preﬁx of τandτ1were of length at most ℓ, then the lowest common
ancestor of xσ,τandxσ1,τ1inMwould be a `-gate, which is not possible in a parse tree where
each `-gate has a single child.
Lemma 15. IfFis a monotone formula which computes the polynomial Hand ifαis a gate
ofFof degree dα, then the number of monomials of the polynomial computed at g ateαis at
mostrdα´1.
Proof.SinceHhasrd´1monomials, the result is true when dα“dby monotonicity. Assume
now that dαăd.
Let
I“ tσP r2sk|some variable of Xσappears in αu.
ForuP r2sďk, letIu“ tσP r2sk|uĄσu. Let tu1,...,u pube the set of words wof minimal
length such that IwĎI. ThenIis the disjoint unionŤ
ℓPrpsIuℓ. Sincedαăd,I‰ r2skso no
uℓis the empty word.
Consider some ℓP rps. Let ¯uℓbe obtained by switching the last letter of uℓ. By minimality
of the length of uℓ, we must have I¯uℓĘI. Letσbe a word in I¯uℓzI. SinceFis monotone
and computes a set-multilinear polynomial, it is a set-mult ilinear formula and therefore the
polynomial computed at αmust be multiplied by some variable xσ,τ. Letvℓbe the preﬁx of
length |uℓ|ofτ. Consider any variable xσ1,τ1appearing in αsuch that uℓĄσ1. Since the
productxσ,τxσ1,τ1must appear in a monomial of Hby monotonicity, it must be that vℓĄτ1by
Proposition 14.
Any monomial min the polynomial computed in gate αcan be written in a unique way
m“m1¨ ¨ ¨mpwithmℓset-multilinear with respect to tXσ|uℓĄσu. By the above, mℓis a
monomial over the variables Xuℓ,vℓof degree |Iuℓ|. By monotonicity, it should be possible to
complete leaves of Mlabelled with variables from mℓinto a parse tree of Mappearing in H,
which proves that mℓis a monomial of Huℓ,vℓ. There are at most r|Iuℓ|´1such submonomials
mℓby Remark 13. It follows that the number of monomials of the po lynomial computed in
nodeαis at mostpź
ℓ“1r|Iuℓ|´1ďr|I|´1“rdα´1.
We are ready to prove hardness of the polynomial Hfor monotone computation. We shall
make use of the following “product lemma”, which comes in diﬀe rent forms in e.g. [SY10, HY11,
Sap15].
Lemma 16. A degree- dhomogeneous formula Fof sizesand product-depth ∆can be written
as a sum of Opsqpolynomials, each of which is a product of Ωp∆d1{∆qmany polynomials of
positive degree. Moreover, each of these polynomials is com puted by some gate in F.
13Proposition 17. IfFis a monotone formula of product-depth ∆ďlogdwhich computes H,
then its size is at least rΩp∆d1{∆q.
Proof.Lett“∆d1{∆. SinceFis monotone, it is homogeneous andby Lemma16 can bewritten
as
F“s1ÿ
i“1tiź
j“1Fi,j
withs1“Opsqandti“Ωptqfor alli, andFi,jis of degree at least 1 and computed by some
gate inF.
Letdi,jbe the degree of Fi,j. By Lemma 15, each Fi,jcomputes at most rdi,j´1monomials.
The number of monomials ofśtj
i“1Fi,jis therefore bounded by
tiź
j“1rdi,j´1ďrřti
j“1di,j´tiďrd´t
sinceřti
j“1di,j“d. It follows that the number of monomials computed by Fis at most s¨rd´t.
SinceFcomputes Hwhich has rd´1monomials, we get s“rΩptq.
We can now get Theorem 3 from the introduction, which is resta ted here for convenience.
Theorem 18. Letnandd“dpnqbe growing parameters such that dpnq ď?n. Then there is
a monotone algebraic formula Fof size at most nand depth Oplogdqcomputing a polynomial
PPFrx1,...,x nsof degree at most dsuch that any monotone formula F1of depth oplogdq
computing Pmust have size nωp1q.
Proof of Theorem 3. Choose parameters kpnqandrpnqsuch that Ppnq:“Hpk,rqhas Θ pnq
variables and degree Θ pdq: letk“logdandr“1
2n1{logd. Condition dpnq ď?nensures
thatrě2. The polynomial Phas a monotone formula of size Opnqand depth Oplogdq. By
Proposition 17, any monotone formula of product-depth ∆ ďlogdcomputing Phas size
rΩp∆d1{∆q“ˆ1
2n1{logd˙Ωp∆d1{∆q
“ pn{dqˆ
∆d1{∆
logd˙
which is nΩˆ
∆d1{∆
logd˙
using the hypothesis dpnq ď?n. Since∆d1{∆
logdÑ `8when ∆ “oplogdq
this bound is nωp1q.
5 Conclusion and Open questions
In this paper we investigated the possibility of reducing th e depth of a formula of size scom-
puting a polynomial of degree dtoOplogdqwhile keeping the size sOp1q.
We showed (Theorem 1) that we can do such a transformation whe nFishomogeneous .
More generally, Theorem 7 states that we can achieve it as soo n as the syntactic degree of Fis
polynomially bounded in d.
Structure inside VF. Let us consider a sequence of polynomials pfnqwhose number of
variables and degree are bounded polynomially in n(such a family is usually called a p-family,
see for example [B ¨00]). We can then consider three classes of such families:
•homF rspnqs “ tpfnq |fnis computed by a homogeneous formula of size poly pspnqqu,
14•lowSynDegF rspnqs “ tpfnq |fnis computed by a formula of size poly pspnqqand of
syntactic degree poly pdegpfnqqu
•lowDepthF rspnqs “ tpfnq |fnis computed by a formula of size poly pspnqqand of
depthOplogdeg pfnqqu.
Clearly, we have the inclusion homF rspnqs ĎlowSynDegF rspnqs. Also, in this paper, we
have shown the inclusion lowSynDegF rspnqs ĎlowDepthF rspnqs. Consequently,
homF rpoly pnqs ĎlowSynDegF rpoly pnqs ĎlowDepthF rpoly pnqs ĎVF,
and we do not know if these inclusions are strict or not.
The complexity of the Elementary Symmetric Polynomials. A particularly interest-
ing special case of the questions above comes from the exampl e of theElementary Symmetric
Polynomials. Given parameters d,nwithdďn,recall that the Elementary Symmetric polyno-
mialSd
npx1,...,x nqis the sum of all the multilinear monomials of degree exactly d. A simple
and elegant construction of Ben-Or (see [SW01]) shows that f or anyd, the polynomial Sd
n
has aninhomogeneous formula of depth-3 and size Opn2q.This puts this family of polynomi-
als in the class lowDepthF rpoly pnqs.Further, Shpilka and Wigderson [SW01, Theorem 5.3],
showed that Sd
nhas depth-6 formulas of syntactic degree at most poly pdq,putting it in the class
lowSynDegF rpoly pnqs.
However, as far as we know, there are no known poly pnq-sized homogeneous formulas for
this family of polynomials.13In fact, under some further restrictions, Hrubeˇ s and Yehud ayoﬀ
showed [HY11] a superpolynomial homogeneous formula lower bound when d“n{2. Removing
these restrictions would show a separation between homF rpoly pnqsand lowSynDegF rpoly pnqs.
On the other hand, if indeed the elementary symmetric polyno mials have poly pnq-sized homo-
geneous formulas, then this can be used to argue14the same for any polynomial computed by a
depth-3 formula of polynomial size, hinting at a possible co llapse between homF rpoly pnqsand
lowSynDegF rpoly pnqs.
Lower bounds for higher-depth formulas. Duetotherecentlowerboundresultsof[LST21b],
we know that there is an explicit homogeneous polynomial PpXqof degree donnvariables that
cannot be computed by any formula of size poly pnqand depth ε¨loglogd, for some absolute
constant εą0. It turns out that the polynomial Piscomputable by an algebraic branching
program and therefore, lies in the complexity class called VBP.
It is known that VF is contained in VBP. However, we do not know whether this contain-
ment is strict or not. Our lower bound result helps us pose a re ﬁned version of this question.
Speciﬁcally, it shows that if the lower bound from [LST21b] c an be improved from Ω ploglogdq
toωplogdq, then we will have separated VF from VBP.
Thefactthat ourdepthreduction carries over to thenon-com mutative setting, makes a com-
pellingcaseforrevisiting theVF vs. VBP question inthenon -commutative setting. Speciﬁcally,
a recent result of [TLS22] shows that there is an explicit non -commutative polynomial PpXq
of degree donnvariables that cannot be computed by any non-commutative fo rmula of size
poly pnqand depth ε¨?logd. So, improving the lower bound in this case from Ω p?logdqto
ωplogdqwould separate VF from VBP in the non-commutative setting.
13A strong form of this was conjectured by Nisan and Wigderson [ NW97], which was subsequently refuted by
Hrubeˇ s and Yehudayoﬀ [HY11]. However, this still does not y ield polynomial-sized homogeneous formulas for all
elementary symmetric polynomials.
14see e.g. [LST21b, Section III] for the standard argument
15References
[AV08] Manindra Agrawal and V. Vinay. Arithmetic circuits: A chasm at depth four. In
proceedings of Foundations of Computer Science (FOCS) , pages 67–75, 2008.
[B¨00] Peter B¨ urgisser. Cook’s versus Valiant’s hypothesis. Theoretical Computer Science ,
235(1):71–88, 2000.
[BB94] Maria Luisa Bonet and Samuel R. Buss. Size-depth trad eoﬀs for boolean formulae.
Information Processing Letters , 49(3):151 – 155, 1994.
[BCE95] Nader H. Bshouty, Richard Cleve, and Wayne Eberly. S ize-depth tradeoﬀs for alge-
braic formulas. SIAM J. Comput. , 24(4):682–705, 1995.
[BKM73] R. Brent, D. Kuck, and K. Maruyama. The parallel eval uation of arithmetic expres-
sions without division. IEEE Transactions on Computers , C-22(5):532–534, 1973.
[Bre74] Richard P. Brent. The parallel evaluation of genera l arithmetic expressions. Journal
of the ACM , 21(2):201–206, April 1974.
[CKSV16] Suryajith Chillara, Mrinal Kumar, Ramprasad Sapt harishi, and V. Vinay. The
chasm at depth four, and tensor rank : Old results, new insigh ts.CoRR,
abs/1606.04200, 2016.
[CLS18] Suryajith Chillara, Nutan Limaye, and Srikanth Sri nivasan. Small-depth multilin-
ear formula lower bounds for iterated matrix multiplicatio n, with applications. In
STACS, volume 96 of LIPIcs, pages 21:1–21:15. Schloss Dagstuhl - Leibniz-Zentrum
fuer Informatik, 2018.
[GKKS16] Ankit Gupta, Pritish Kamath, Neeraj Kayal, and Ram prasad Saptharishi. Arith-
metic circuits: A chasm at depth 3. SIAM Journal of Computing , 45(3):1064–1079,
2016.
[HY11] Pavel Hrubeˇ s and Amir Yehudayoﬀ. Homogeneous formul as and symmetric polyno-
mials.Comput. Complexity , 20(3):559–578, 2011.
[KdOS19] Mrinal Kumar, Rafael Mendes de Oliveira, and Rampr asad Saptharishi. Towards
optimal depth reductions for syntactically multilinear ci rcuits. In Christel Baier,
Ioannis Chatzigiannakis, Paola Flocchini, and Stefano Leo nardi, editors, 46th In-
ternational Colloquium on Automata, Languages, and Program ming, ICALP 2019,
July 9-12, 2019, Patras, Greece , volume 132 of LIPIcs, pages 78:1–78:15. Schloss
Dagstuhl - Leibniz-Zentrum f¨ ur Informatik, 2019.
[Koi12] Pascal Koiran. Arithmetic circuits: The chasm at de pth four gets wider. Theor.
Comput. Sci. , 448:56–65, 2012.
[Kos86] S Rao Kosaraju. Parallel evaluation of division-fr ee arithmetic equations. In Pro-
ceedings of the Eighteenth Annual ACM Symposium on Theory of Com puting, pages
231–239, 1986.
[KSS14] Neeraj Kayal, Chandan Saha, and Ramprasad Sapthari shi. A super-polynomial
lower boundforregular arithmeticformulas. InDavid B. Shm oys, editor, Symposium
on Theory of Computing, STOC 2014, New York, NY, USA, May 31 - June 03,
2014, pages 146–153. ACM, 2014.
16[LST21a] Nutan Limaye, Srikanth Srinivasan, and S´ ebastie n Tavenas. Superpolynomial lower
bounds against low-depth algebraic circuits. Electron. Colloquium Comput. Com-
plex., TR21-081, 2021.
[LST21b] Nutan Limaye, Srikanth Srinivasan, and S´ ebastie n Tavenas. Superpolynomial lower
bounds against low-depth algebraic circuits. In 62nd IEEE Annual Symposium on
Foundations of Computer Science, FOCS 2021, Denver, CO, USA, Fe bruary 7-10,
2022, pages 804–814. IEEE, 2021.
[Nis91] Noam Nisan. Lower bounds for non-commutative compu tation. In Proceedings of
the twenty-third annual ACM symposium on Theory of computing , pages 410–418,
1991.
[NW97] Noam Nisan and Avi Wigderson. Lower bounds on arithme tic circuits via partial
derivatives. Computational Complexity , 6(3):217–234, 1997.
[PM75] FrancoP.PreparataandDavidE.Muller. Thetimerequ iredtoevaluatedivision-free
arithmetic expressions. Inf. Process. Lett. , 3(5):144–146, 1975.
[PM76] Franco P. Preparata and David E. Muller. Eﬃcient para llel evaluation of boolean
expression. IEEE Trans. Computers , 25(5):548–549, 1976.
[Raz06] Ran Raz. Separation of multilinear circuit and form ula size. Theory of Computing ,
2(1):121–135, 2006.
[Raz13] Ran Raz. Tensor-rank and lower bounds for arithmeti c formulas. Journal of the
ACM, 60(6):40:1–40:15, 2013.
[RY08] Ran Raz and Amir Yehudayoﬀ. Balancing syntactically m ultilinear arithmetic cir-
cuits.Computational Complexity , 17(4):515–535, 2008.
[Sap15] Ramprasad Saptharishi. A survey of lower bounds in a rithmetic circuit complexity.
Github survey, 2015.
[Spi71] Philip M. Spira. On time hardware complexity tradeo ﬀs for Boolean functions.
In Shu Lin, editor, Proceedings of the Fourth Hawaii International Conference on
System Sciences , pages 525–527. Western Periodicals Company, North Hollyw ood,
California, 1971.
[SS80] Eli ShamirandMarcSnir. Onthedepthcomplexity offo rmulas.Math. Syst. Theory ,
13:301–322, 1980.
[SW01] Amir Shpilka and Avi Wigderson. Depth-3 arithmetic c ircuits over ﬁelds of charac-
teristic zero. Computational Complexity , 10(1):1–27, 2001.
[SY10] Amir Shpilka and Amir Yehudayoﬀ. Arithmetic circuits : A survey of recent re-
sults and open questions. Foundations and Trends in Theoretical Computer Science ,
5:207–388, March 2010.
[Tav15] S´ ebastien Tavenas. Improved bounds for reduction to depth 4 and depth 3. Infor-
mation and Computation , 240:2–11, 2015.
[TLS22] S´ ebastien Tavenas, NutanLimaye, andSrikanthSri nivasan. Set-multilinear andnon-
commutative formula lower bounds for iterated matrix multi plication. In STOC,
pages 416–425. ACM, 2022.
17[VSBR83] LeslieG. Valiant, SvenSkyum, StuartJ.Berkowitz , andCharlesRackoﬀ. Fast Paral-
lel Computation of Polynomials Using Few Processors. SIAM Journal of Computing ,
12(4):641–644, 1983.
[YK68] SV Yablonskii and VP Kozyrev. Mathematical problems of cybernetics. Infor-
mation Materials of Scientiﬁc Council of Akad. Nauk SSSR on Com plex Problem
“Kibernetika , 19:3–15, 1968.
18A The Bonet-Buss depth-reduction
In this section, we give a proof of Theorem 10. This is essenti ally the same proof as in the
work of Bonet and Buss [BB94], but since the results in that pa per are only stated for Boolean
formulas, we give the proof here for completeness.
We show that for some large enough absolute constant Cą0, any polynomial Pcomputed
by a formula Fof sizescan also be computed by a formula F1of size at most s1`ε, depth at
most 2Op1{εq¨logs, and fan-in 2. Further, if Fis homogeneous/monotone/non-commutative,
then so is F1. This latter claim will follow directly from the constructi on.
We assume here that each gate in Fhas fan-in 2 to begin with. We can make this modiﬁ-
cation to Fin the beginning at the expense of increasing the depth, and w ithout increasing the
size.
We prove the claim by induction on the size sof the formula. Let TpsqandDpsqdenote
the maximum size and depth (respectively) of F1thus obtained, assuming that Fhas size at
mosts.Letk“2C{εwhereCą0 is an absolute constant we will choose below. We assume
throughout that εă1, which is without loss of generality.
The base case of the formula is when sďk,in which case the claim is trivial, as any formula
of sizeshas depth at most s, which in this case is at most 2C{ε.
Now, assume that sąk.In this case, we ﬁnd a gate αsuch that the size of the subformula
Fαrooted at αhas size at least s´s{k, while the children βandγofαdo not satisfy this
property. It is easy to observe that there is a unique αwith this property. Let ˚denote the
operation (either `orˆ) labelling α.
We replace αby a fresh variable yinFto get a formula Fy. Note that Fyhas size at most
s1“2s
k.SinceFyhas at most one occurrence of y, we can write
Fy“A¨y¨B`C
whereAis the product of all subformulas that multiply yon the left in Falong the path to
the output, Bis similarly the product of all subformulas that multiply yon the right, and Cis
the polynomial computed by Fywhen we set yto 0. Clearly, A,BandChave formulas FA,FB
andFCof size at most s1. Finally, we get the formula F1as in Figure 1.
`
ˆF1
C
ˆF1
B
F1
A˚
F1
βF1
γ
Figure 1: Constructing F1
Here,F1
A,F1
B,F1
C,F1
β,F1
γare the formulas obtained by recursively applying the same p roce-
dure toFA,FB,FC,Fβ,Fγ.
We can bound the size and depth of the depth-reduced formula b y induction. We have
Dpsq ďDps´s{kq `Op1q
19leading easily to an overall depth bound of Opklogsq “2Op1{εq¨logsfor any choice of the
constant C.
For the size, we have the following recursion.
Tpsq ďmaxsβ,sγ,s1:
sβ,sγďsp1´1{kq
s1ď2s{k
sβ`sγ`s1ďsTpsβq `Tpsγq `3Tps1q
wheresβandsγare the sizes of FβandFγrespectively. We now use induction to bound Tpsq
as follows. (We omit the conditions on sβ,sγands1for notational simplicity.)
Tpsq ďmax
sβ,sγ,s1s1`ε
β`s1`ε
γ`3s1`ε
1
ďˆ
sˆ
1´1
k˙˙1`ε
`´s
k¯1`ε
`3ˆ2s
k˙1`ε
where we used the fact that s1ď2s{kand the fact that, using the convexity of the map
xÞÑx1`ε,the function s1`ε
β`s1`ε
γis maximized when max tsβ,sγu “s´s{k, meaning that
mintsβ,sγu ďs{k.
Continuing the computation, we get
Tpsq ďs1`εˆˆ
1´1
k˙
`1
k1`ε`34
k1`ε˙
ďs1`ε¨ˆ
1´1
k`C1
k1`ε˙
for some large enough absolute constant C1. Setting k“2C{εfor a large enough absolute
constant Cgives usTpsq ďs1`ε, proving the inductive claim.
20