Strong Baselines for Neural Semi-supervised Learning
under Domain Shift
Sebastian Ruder|Barbara Plank~3
Insight Research Centre, National University of Ireland, Galway, Ireland
|Aylien Ltd., Dublin, Ireland
~Center for Language and Cognition, University of Groningen, The Netherlands
3Department of Computer Science, IT University of Copenhagen, Denmark
sebastian@ruder.io,bplank@gmail.com
Abstract
Novel neural models have been proposed
in recent years for learning under domain
shift. Most models, however, only evaluate
on a single task, on proprietary datasets, or
compare to weak baselines, which makes
comparison of models difﬁcult. In this pa-
per, we re-evaluate classic general-purpose
bootstrapping approaches in the context of
neural networks under domain shifts vs. re-
cent neural approaches and propose a novel
multi-task tri-training method that reduces
the time and space complexity of classic
tri-training. Extensive experiments on two
benchmarks are negative: while our novel
method establishes a new state-of-the-art
for sentiment analysis, it does not fare con-
sistently the best. More importantly, we
arrive at the somewhat surprising conclu-
sion that classic tri-training, with some ad-
ditions, outperforms the state of the art. We
conclude that classic approaches constitute
an important and strong baseline.
1 Introduction
Deep neural networks (DNNs) excel at learning
from labeled data and have achieved state of the
art in a wide array of supervised NLP tasks such as
dependency parsing (Dozat and Manning, 2017),
named entity recognition (Lample et al., 2016), and
semantic role labeling (He et al., 2017).
In contrast, learning from unlabeled data, es-
pecially under domain shift, remains a challenge.
This is common in many real-world applications
where the distribution of the training and test data
differs. Many state-of-the-art domain adaptation
approaches leverage task-speciﬁc characteristics
such as sentiment words (Blitzer et al., 2006; Wu
and Huang, 2016) or distributional features (Schn-abel and Schütze, 2014; Yin et al., 2015) which
do not generalize to other tasks. Other approaches
that are in theory more general only evaluate on
proprietary datasets (Kim et al., 2017) or on a sin-
gle benchmark (Zhou et al., 2016), which carries
the risk of overﬁtting to the task. In addition, most
models only compare against weak baselines and,
strikingly, almost none considers evaluating against
approaches from the extensive semi-supervised
learning (SSL) literature (Chapelle et al., 2006).
In this work, we make the argument that such al-
gorithms make strong baselines for any task in line
with recent efforts highlighting the usefulness of
classic approaches (Melis et al., 2017; Denkowski
and Neubig, 2017). We re-evaluate bootstrapping
algorithms in the context of DNNs. These are
general-purpose semi-supervised algorithms that
treat the model as a black box and can thus be used
easily—with a few additions—with the current gen-
eration of NLP models. Many of these methods,
though, were originally developed with in-domain
performance in mind, so their effectiveness in a
domain adaptation setting remains unexplored.
In particular, we re-evaluate three traditional
bootstrapping methods, self-training (Yarowsky,
1995), tri-training (Zhou and Li, 2005), and tri-
training with disagreement (Søgaard, 2010) for
neural network-based approaches on two NLP
tasks with different characteristics, namely, a se-
quence prediction and a classiﬁcation task (POS
tagging and sentiment analysis). We evaluate the
methods across multiple domains on two well-
established benchmarks, without taking any further
task-speciﬁc measures, and compare to the best
results published in the literature.
We make the somewhat surprising observation
that classic tri-training outperforms task-agnostic
state-of-the-art semi-supervised learning (Laine
and Aila, 2017) and recent neural adaptation ap-
proaches (Ganin et al., 2016; Saito et al., 2017).arXiv:1804.09530v1  [cs.CL]  25 Apr 2018In addition, we propose multi-task tri-training ,
which reduces the main deﬁciency of tri-training,
namely its time and space complexity. It establishes
a new state of the art on unsupervised domain adap-
tation for sentiment analysis but it is outperformed
by classic tri-training for POS tagging.
Contributions Our contributions are: a) We pro-
pose a novel multi-task tri-training method. b) We
show that tri-training can serve as a strong and ro-
bust semi-supervised learning baseline for the cur-
rent generation of NLP models. c) We perform an
extensive evaluation of bootstrapping1algorithms
compared to state-of-the-art approaches on two
benchmark datasets. d) We shed light on the task
and data characteristics that yield the best perfor-
mance for each model.
2 Neural bootstrapping methods
We ﬁrst introduce three classic bootstrapping meth-
ods, self-training, tri-training, and tri-training with
disagreement and detail how they can be used with
neural networks. For in-depth details we refer the
reader to (Abney, 2007; Chapelle et al., 2006; Zhu
and Goldberg, 2009). We introduce our novel multi-
task tri-training method in §2.3.
2.1 Self-training
Self-training (Yarowsky, 1995; McClosky et al.,
2006b) is one of the earliest and simplest boot-
strapping approaches. In essence, it leverages the
model’s own predictions on unlabeled data to ob-
tain additional information that can be used during
training. Typically the most conﬁdent predictions
are taken at face value, as detailed next.
Self-training trains a model mon a labeled train-
ing setLand an unlabeled data set U. At each
iteration, the model provides predictions m(x)in
the form of a probability distribution over classes
for all unlabeled examples xinU. If the proba-
bility assigned to the most likely class is higher
than a predetermined threshold ,xis added to the
labeled examples with p(x) = arg max m(x)as
pseudo-label. This instantiation is the most widely
used and shown in Algorithm 1.
Calibration It is well-known that output prob-
abilities in neural networks are poorly calibrated
(Guo et al., 2017). Using a ﬁxed threshold is thus
1We use the term bootstrapping as used in the semi-
supervised learning literature (Zhu, 2005), which should not
be confused with the statistical procedure of the same name
(Efron and Tibshirani, 1994).Algorithm 1 Self-training (Abney, 2007)
1:repeat
2:m train _model (L)
3: forx2Udo
4: ifmaxm(x)>then
5: L L[f(x;p(x))g
6:until no more predictions are conﬁdent
not the best choice. While the absolute conﬁdence
value is inaccurate, we can expect that the relative
order of conﬁdences is more robust.
For this reason, we select the top nunlabeled
examples that have been predicted with the high-
est conﬁdence after every epoch and add them to
the labeled data. This is one of the many variants
for self-training, called throttling (Abney, 2007).
We empirically conﬁrm that this outperforms the
classic selection in our experiments.
Online learning In contrast to many classic al-
gorithms, DNNs are trained online by default. We
compare training setups and ﬁnd that training until
convergence on labeled data and then training until
convergence using self-training performs best.
Classic self-training has shown mixed success.
In parsing it proved successful only with small
datasets (Reichart and Rappoport, 2007) or when
a generative component is used together with a
reranker in high-data conditions (McClosky et al.,
2006b; Suzuki and Isozaki, 2008). Some success
was achieved with careful task-speciﬁc data se-
lection (Petrov and McDonald, 2012), while oth-
ers report limited success on a variety of NLP
tasks (Plank, 2011; Van Asch and Daelemans,
2016; van der Goot et al., 2017). Its main down-
side is that the model is not able to correct its own
mistakes and errors are ampliﬁed, an effect that is
increased under domain shift.
2.2 Tri-training
Tri-training (Zhou and Li, 2005) is a classic method
that reduces the bias of predictions on unlabeled
data by utilizing the agreement of three indepen-
dently trained models. Tri-training (cf. Algorithm
2) ﬁrst trains three models m1,m2, andm3on
bootstrap samples of the labeled data L. An unla-
beled data point is added to the training set of a
modelmiif the other two models mjandmkagree
on its label. Training stops when the classiﬁers do
not change anymore.
Tri-training with disagreement (Søgaard, 2010)Algorithm 2 Tri-training (Zhou and Li, 2005)
1:fori2f1::3gdo
2:Si bootstrap _sample (L)
3:mi train _model (Si)
4:repeat
5: fori2f1::3gdo
6:Li ;
7: forx2Udo
8: ifpj(x) =pk(x)(j;k6=i)then
9: Li Li[f(x;pj(x))g
mi train _model (L[Li)
10:until none ofmichanges
11:apply majority vote over mi
is based on the intuition that a model should only
be strengthened in its weak points and that the
labeled data should not be skewed by easy data
points. In order to achieve this, it adds a simple
modiﬁcation to the original algorithm (altering line
8 in Algorithm 2), requiring that for an unlabeled
data point on which mjandmkagree , the other
modelmidisagrees on the prediction. Tri-training
with disagreement is more data-efﬁcient than tri-
training and has achieved competitive results on
part-of-speech tagging (Søgaard, 2010).
Sampling unlabeled data Both tri-training and
tri-training with disagreement can be very expen-
sive in their original formulation as they require to
produce predictions for each of the three models
on all unlabeled data samples, which can be in the
millions in realistic applications. We thus propose
to sample a number of unlabeled examples at every
epoch. For all traditional bootstrapping approaches
we sample 10k candidate instances in each epoch.
For the neural approaches we use a linearly grow-
ing candidate sampling scheme proposed by (Saito
et al., 2017), increasing the candidate pool size as
the models become more accurate.
Conﬁdence thresholding Similar to self-
training, we can introduce an additional require-
ment that pseudo-labeled examples are only added
if the probability of the prediction of at least one
model is higher than some threshold . We did not
ﬁnd this to outperform prediction without threshold
for traditional tri-training, but thresholding proved
essential for our method (§2.3).
The most important condition for tri-training and
tri-training with disagreement is that the models
are diverse. Typically, bootstrap samples are used
Figure 1: Multi-task tri-training (MT-Tri).
to create this diversity (Zhou and Li, 2005; Sø-
gaard, 2010). However, training separate models
on bootstrap samples of a potentially large amount
of training data is expensive and takes a lot of time.
This drawback motivates our approach.
2.3 Multi-task tri-training
In order to reduce both the time and space com-
plexity of tri-training, we propose Multi-task Tri-
training (MT-Tri). MT-Tri leverages insights from
multi-task learning (MTL) (Caruana, 1993) to share
knowledge across models and accelerate training.
Rather than storing and training each model sepa-
rately, we propose to share the parameters of the
models and train them jointly using MTL.2All
models thus collaborate on learning a joint repre-
sentation, which improves convergence.
The output softmax layers are model-speciﬁc
and are only updated for the input of the respective
model. We show the model in Figure 1 (as instan-
tiated for POS tagging). As the models leverage
a joint representation, we need to ensure that the
features used for prediction in the softmax layers
of the different models are as diverse as possible,
so that the models can still learn from each other’s
predictions. In contrast, if the parameters in all
output softmax layers were the same, the method
would degenerate to self-training.
To guarantee diversity, we introduce an orthog-
onality constraint (Bousmalis et al., 2016) as an
additional loss term, which we deﬁne as follows:
Lorth=kW>
m1Wm2k2
F (1)
wherejk2
Fis the squared Frobenius norm and
Wm1andWm2are the softmax output parameters
2Note: we use the term multi-task learning here albeit all
tasks are of the same kind, similar to work on multi-lingual
modeling treating each language (but same label space) as
separate task e.g., (Fang and Cohn, 2017). It is interesting to
point out that our model is further doing implicit multi-view
learning by way of the orthogonality constraint.of the two source and pseudo-labeled output layers
m1andm2, respectively. The orthogonality con-
straint encourages the models not to rely on the
same features for prediction. As enforcing pair-
wise orthogonality between three matrices is not
possible, we only enforce orthogonality between
the softmax output layers of m1andm2,3while
m3is gradually trained to be more target-speciﬁc.
We parameterizeLorthby
=0:01following (Liu
et al., 2017). We do not further tune 
.
More formally, let us illustrate the model by
taking the sequence prediction task (Figure 1) as il-
lustration. Given an utterance with labels y1;::;y n,
our Multi-task Tri-training loss consists of three
task-speciﬁc ( m1;m2;m3) tagging loss functions
(where~his the uppermost Bi-LSTM encoding):
L() = X
iX
1;::;nlogPmi(yj~h) +
Lorth (2)
In contrast to classic tri-training, we can train
the multi-task model with its three model-speciﬁc
outputs jointly and without bootstrap sampling on
the labeled source domain data until convergence,
as the orthogonality constraint enforces different
representations between models m1andm2. From
this point, we can leverage the pair-wise agreement
of two output layers to add pseudo-labeled exam-
ples as training data to the third model. We train the
third output layer m3only on pseudo-labeled target
instances in order to make tri-training more robust
to a domain shift. For the ﬁnal prediction, major-
ity voting of all three output layers is used, which
resulted in the best instantiation, together with con-
ﬁdence thresholding ( = 0:9, except for high-
resource POS where = 0:8performed slightly
better). We also experimented with using a domain-
adversarial loss (Ganin et al., 2016) on the jointly
learned representation, but found this not to help.
The full pseudo-code is given in Algorithm 3.
Computational complexity The motivation for
MT-Tri was to reduce the space and time complex-
ity of tri-training. We thus give an estimate of
its efﬁciency gains. MT-Tri is ~ 3more space-
efﬁcient than regular tri-training; tri-training stores
one set of parameters for each of the three mod-
els, while MT-Tri only stores one set of parameters
(we use three output layers, but these make up a
comparatively small part of the total parameter bud-
get). In terms of time efﬁciency, tri-training ﬁrst
3We also tried enforcing orthogonality on a hidden layer
rather than the output layer, but this did not help.Algorithm 3 Multi-task Tri-training
1:m train _model (L)
2:repeat
3: fori2f1::3gdo
4:Li ;
5: forx2Udo
6: ifpj(x) =pk(x)(j;k6=i)then
7: Li Li[f(x;pj(x))g
8: ifi= 3thenmi=train _model (Li)
9: elsemi train _model (L[Li)
10:until end condition is met
11:apply majority vote over mi
requires to train each of the models from scratch.
The actual tri-training takes about the same time as
training from scratch and requires a separate for-
ward pass for each model, effectively training three
independent models simultaneously. In contrast,
MT-Tri only necessitates one forward pass as well
as the evaluation of the two additional output lay-
ers (which takes a negligible amount of time) and
requires about as many epochs as tri-training until
convergence (see Table 3, second column) while
adding fewer unlabeled examples per epoch (see
Section 3.4). In our experiments, MT-Tri trained
about 5-6faster than traditional tri-training.
MT-Tri can be seen as a self-ensembling tech-
nique, where different variations of a model are
used to create a stronger ensemble prediction. Re-
cent approaches in this line are snapshot ensem-
bling (Huang et al., 2017) that ensembles models
converged to different minima during a training run,
asymmetric tri-training (Saito et al., 2017) ( ASYM)
that leverages agreement on two models as informa-
tion for the third, and temporal ensembling (Laine
and Aila, 2017), which ensembles predictions of a
model at different epochs. We tried to compare to
temporal ensembling in our experiments, but were
not able to obtain consistent results.4We compare
to the closest most recent method, asymmetric tri-
training (Saito et al., 2017). It differs from ours
in two aspects: a) ASYM leverages only pseudo-
labels from data points on which m1andm2agree,
and b) it uses only one task ( m3) as ﬁnal predictor.
In essence, our formulation of MT-Tri is closer to
the original tri-training formulation (agreements
on two provide pseudo-labels to the third) thereby
incorporating more diversity.
4We suspect that the sparse features in NLP and the domain
shift might be detrimental to its unsupervised consistency loss.Domain # labeled # unlabeledPOS taggingAnswers 3,489 27,274
Emails 4,900 1,194,173
Newsgroups 2,391 1,000,000
Reviews 3,813 1,965,350
Weblogs 2,031 524,834
WSJ 30,060 100,000SentimentBook 2,000 4,465
DVD 2,000 3,586
Electronics 2,000 5,681
Kitchen 2,000 5,945
Table 1: Number of labeled and unlabeled sen-
tences for each domain in the SANCL 2012 dataset
(Petrov and McDonald, 2012) for POS tagging
(above) and the Amazon Reviews dataset (Blitzer
et al., 2006) for sentiment analysis (below).
3 Experiments
In order to ascertain which methods are ro-
bust across different domains, we evaluate on
two widely used unsupervised domain adaptation
datasets for two tasks, a sequence labeling and a
classiﬁcation task, cf. Table 1 for data statistics.
3.1 POS tagging
For POS tagging we use the SANCL 2012 shared
task dataset (Petrov and McDonald, 2012) and com-
pare to the top results in both low and high-data
conditions (Schnabel and Schütze, 2014; Yin et al.,
2015). Both are strong baselines, as the FLORS tag-
ger has been developed for this challenging dataset
and it is based on contextual distributional features
(excluding the word’s identity), and hand-crafted
sufﬁx and shape features (including some language-
speciﬁc morphological features). We want to gauge
to what extent we can adopt a nowadays fairly stan-
dard (but more lexicalized) general neural tagger.
Our POS tagging model is a state-of-the-art
Bi-LSTM tagger (Plank et al., 2016) with word
and 100-dim character embeddings. Word embed-
dings are initialized with the 100-dim Glove em-
beddings (Pennington et al., 2014). The BiLSTM
has one hidden layer with 100 dimensions. The
base POS model is trained on WSJ with early stop-
ping on the WSJ development set, using patience
2, Gaussian noise with = 0:2and word dropout
withp= 0:25(Kiperwasser and Goldberg, 2016).
Regarding data, the source domain is the
Ontonotes 4.0 release of the Penn treebank Wall
Street Journal (WSJ) annotated for 48 ﬁne-grained
POS tags. This amounts to 30,060 labeled sen-tences. We use 100,000 WSJ sentences from 1988
as unlabeled data, following Schnabel and Schütze
(2014).5As target data, we use the ﬁve SANCL
domains (answers, emails, newsgroups, reviews,
weblogs). We restrict the amount of unlabeled data
for each SANCL domain to the ﬁrst 100k sentences,
and do not do any pre-processing. We consider the
development set of ANSWERS as our only target
dev set to set hyperparameters. This may result in
suboptimal per-domain settings but better resem-
bles an unsupervised adaptation scenario.
3.2 Sentiment analysis
For sentiment analysis, we evaluate on the Amazon
reviews dataset (Blitzer et al., 2006). Reviews with
1 to 3 stars are ranked as negative, while reviews
with 4 or 5 stars are ranked as positive. The dataset
consists of four domains, yielding 12 adaptation
scenarios. We use the same pre-processing and
architecture as used in (Ganin et al., 2016; Saito
et al., 2017): 5,000-dimensional tf-idf weighted
unigram and bigram features as input; 2k labeled
source samples and 2k unlabeled target samples
for training, 200 labeled target samples for valida-
tion, and between 3k-6k samples for testing. The
model is an MLP with one hidden layer with 50
dimensions, sigmoid activations, and a softmax
output. We compare against the Variational Fair
Autoencoder (VFAE) (Louizos et al., 2015) model
and domain-adversarial neural networks (DANN)
(Ganin et al., 2016).
3.3 Baselines
Besides comparing to the top results published on
both datasets, we include the following baselines:
a) the task model trained on the source domain;
b) self-training (Self);
c) tri-training (Tri);
d) tri-training with disagreement (Tri-D); and
e) asymmetric tri-training (Saito et al., 2017).
Our proposed model is multi-task tri-training (MT-
Tri). We implement our models in DyNet (Neu-
big et al., 2017). Reporting single evaluation
scores might result in biased results (Reimers and
Gurevych, 2017). Throughout the paper, we re-
port mean accuracy and standard deviation over
ﬁve runs for POS tagging and over ten runs for
5Note that our unlabeled data might slightly differ from
theirs. We took the ﬁrst 100k sentences from the 1988 WSJ
dataset from the BLLIP 1987-89 WSJ Corpus Release 1.Figure 2: Average results for unsupervised domain adaptation on the Amazon dataset. Domains: B (Book),
D (DVD), E (Electronics), K (Kitchen). Results for VFAE, DANN, and Asym are from Saito et al. (2017).
sentiment analysis. Signiﬁcance is computed using
bootstrap test. The code for all experiments is re-
leased at: https://github.com/bplank/
semi-supervised-baselines .
3.4 Results
Sentiment analysis We show results for senti-
ment analysis for all 12 domain adaptation sce-
narios in Figure 2. For clarity, we also show the
accuracy scores averaged across each target domain
as well as a global macro average in Table 2.
Model D B E K Avg
VFAE* 76.57 73.40 80.53 82.93 78.36
DANN* 75.40 71.43 77.67 80.53 76.26
Asym* 76.17 72.97 80.47 83.97 78.39
Src 75.91 73.47 75.61 79.58 76.14
Self 78.00 74.55 76.54 80.30 77.35
Tri 78.72 75.64 78.60 83.26 79.05
Tri-D 76.99 74.44 78.30 80.59 77.58
MT-Tri 78.14 74.86 81.45 82.14 79.15
Table 2: Average accuracy scores for each SA tar-
get domain. *: result from Saito et al. (2017).
Self-training achieves surprisingly good results
but is not able to compete with tri-training. Tri-
training with disagreement is only slightly better
than self-training, showing that the disagreement
component might not be useful when there is a
strong domain shift. Tri-training achieves the bestaverage results on two target domains and clearly
outperforms the state of the art on average.
MT-Tri ﬁnally outperforms the state of the art
on 3/4 domains, and even slightly traditional tri-
training, resulting in the overall best method. This
improvement is mainly due to the B->E and D->E
scenarios, on which tri-training struggles. These
domain pairs are among those with the highest A-
distance (Blitzer et al., 2007), which highlights
that tri-training has difﬁculty dealing with a strong
shift in domain. Our method is able to mitigate this
deﬁciency by training one of the three output layers
only on pseudo-labeled target domain examples.
In addition, MT-Tri is more efﬁcient as it adds a
smaller number of pseudo-labeled examples than
tri-training at every epoch. For sentiment analysis,
tri-training adds around 1800-1950/2000 unlabeled
examples at every epoch, while MT-Tri only adds
around 100-300 in early epochs. This shows that
the orthogonality constraint is useful for inducing
diversity. In addition, adding fewer examples poses
a smaller risk of swamping the learned represen-
tations with useless signals and is more akin to
ﬁne-tuning, the standard method for supervised
domain adaptation (Howard and Ruder, 2018).
We observe an asymmetry in the results between
some of the domain pairs, e.g. B->D and D->B.
We hypothesize that the asymmetry may be due to
properties of the data and that the domains are rela-
tively far apart e.g., in terms of A-distance. In fact,
asymmetry in these domains is already reﬂectedTarget domains
Model ep Answers Emails Newsgroups Reviews Weblogs Avg WSJ pseudo
Src (+glove) 87.63 .37 86.49.35 88.60.22 90.12.32 92.85.17 89.14.28 95.49.09 —
Self (5) 87.64 .18 86.58.30 88.42.24 90.03.11 92.80.19 89.09.20 95.36.07 .5k
Tri (4) 88.42 .16 87.46.20 87.97.09 90.72.14 93.40.15 89.56.16 95.94.07 20.5k
Tri-D (7) 88.50.04 87.63.15 88.12.05 90.76.10 93.51.06 89.70.08 95.99.03 7.7K
Asym (3) 87.81 .19 86.97.17 87.74.24 90.16.17 92.73.16 89.08.19 95.55.12 1.5k
MT-Tri (4) 87.92 .18 87.20.23 87.73.37 90.27.10 92.96.07 89.21.19 95.50.06 7.6k
FLORS 89.71 88.46 89.82 92.10 94.20 90.86 95.80 —
Table 3: Accuracy scores on dev set of target domain for POS tagging for 10% labeled data. Avg: average
over the 5 SANCL domains. Hyperparameter ep(epochs) is tuned on Answers dev. pseudo : average
amount of added pseudo-labeled data. FLORS: results for Batch (u:big) from (Yin et al., 2015) (see §3).
Target domains dev sets Avg on
Model Answers Emails Newsgroups Reviews Weblogs targets WSJ
TnT* 88.55 88.14 88.66 90.40 93.33 89.82 95.75
Stanford* 88.92 88.68 89.11 91.43 94.15 90.46 96.83
Src 88.84 .15 88.24.12 89.45.23 91.24.03 93.92.17 90.34.14 96.69.08
Tri 89.34 .18 88.83.07 89.32.21 91.62.06 94.40.06 90.70.12 96.84.04
Tri-D 89.35 .16 88.66.09 89.29.12 91.58.05 94.32.05 90.62.09 96.85.06
Src (+glove) 89.35 .16 88.55.14 90.12.31 91.48.15 94.48.07 90.80.17 96.90.04
Tri 90.00.03 89.06.16 90.04.25 91.98.11 94.74.06 91.16.12 96.99.02
Tri-D 89.80 .19 88.85.10 90.03.22 91.98.09 94.70.05 91.01.13 96.95.05
Asym 89.51 .15 88.47.19 89.26.16 91.60.20 94.28.15 90.62.17 96.56.01
MT-Tri 89.45 .05 88.65.04 89.40.22 91.63.23 94.41.05 90.71.12 97.37.07
FLORS* 90.30 89.44 90.86 92.95 94.71 91.66 96.59
Target domains test sets Avg on
Model Answers Emails Newsgroups Reviews Weblogs targets WSJ
TnT* 89.36 87.38 90.85 89.67 91.37 89.73 96.57
Stanford* 89.74 87.77 91.25 90.30 92.32 90.28 97.43
Src (+glove) 90.43 .13 87.95.18 91.83.20 90.04.11 92.44.14 90.54.15 97.50.03
Tri 91.21.06 88.30.19 92.18.19 90.06.10 92.85.02 90.92.11 97.45.03
Asym 90.62 .26 87.71.07 91.40.05 89.89.22 92.37.27 90.39.17 97.19.03
MT-Tri 90.53 .15 87.90.07 91.45.19 89.77.26 92.35.09 90.40.15 97.37.07
FLORS* 91.17 88.67 92.41 92.25 93.14 91.53 97.11
Table 4: Accuracy for POS tagging on the dev and test sets of the SANCL domains, models trained on
full source data setup. Values for methods with * are from (Schnabel and Schütze, 2014).
in the results of Blitzer et al. (2007) and is cor-
roborated in the results for asymmetric tri-training
(Saito et al., 2017) and our method.
We note a weakness of this dataset is high vari-
ance. Existing approaches only report the mean,
which makes an objective comparison difﬁcult. For
this reason, we believe it is essential to evaluate
proposed approaches also on other tasks.
POS tagging Results for tagging in the low-data
regime (10% of WSJ) are given in Table 3.
Self-training does not work for the sequence
prediction task. We report only the best instantia-tion (throttling with n=800). Our results contribute
to negative ﬁndings regarding self-training (Plank,
2011; Van Asch and Daelemans, 2016).
In the low-data setup, tri-training with disagree-
ment works best, reaching an overall average ac-
curacy of 89.70, closely followed by classic tri-
training, and signiﬁcantly outperforming the base-
line on 4/5 domains. The exception is newsgroups,
a difﬁcult domain with high OOV rate where none
of the approches beats the baseline (see §3.4). Our
proposed MT-Tri is better than asymmetric tri-
training, but falls below classic tri-training. It beatsAns Email Newsg Rev Webl
% unk tag 0.25 0.80 0.31 0.06 0.0
% OOV 8.53 10.56 10.34 6.84 8.45
% UWT 2.91 3.47 2.43 2.21 1.46
Accuracy on OOV tokens
Src 54.26 57.48 61.80 59.26 80.37
Tri 55.53 59.11 61.36 61.16 79.32
Asym 52.86 56.78 56.58 59.59 76.84
MT-Tri 52.88 57.22 57.28 58.99 77.77
Accuracy on unknown word-tag (UWT) tokens
Src 17.68 11.14 17.88 17.31 24.79
Tri 16.88 10.04 17.58 16.35 23.65
Asym 17.16 10.43 17.84 16.92 22.74
MT-Tri 16.43 11.08 17.29 16.72 23.13
FLORS* 17.19 15.13 21.97 21.06 21.65
Table 5: Accuracy scores on dev sets for OOV and
unknown word-tag (UWT) tokens.
the baseline signiﬁcantly on only 2/5 domains (an-
swers and emails). The FLORS tagger (Yin et al.,
2015) fares better. Its contextual distributional fea-
tures are particularly helpful on unknown word-tag
combinations (see § 3.4), which is a limitation of
the lexicalized generic bi-LSTM tagger.
For the high-data setup (Table 4) results are simi-
lar. Disagreement, however, is only favorable in the
low-data setups; the effect of avoiding easy points
no longer holds in the full data setup. Classic tri-
training is the best method. In particular, traditional
tri-training is complementary to word embedding
initialization, pushing the non-pre-trained baseline
to the level of SRCwith Glove initalization. Tri-
training pushes performance even further and re-
sults in the best model, signiﬁcantly outperform-
ing the baseline again in 4/5 cases, and reaching
FLORS performance on weblogs. Multi-task tri-
training is often slightly more effective than asym-
metric tri-training (Saito et al., 2017); however,
improvements for both are not robust across do-
mains, sometimes performance even drops. The
model likely is too simplistic for such a high-data
POS setup, and exploring shared-private models
might prove more fruitful (Liu et al., 2017). On the
test sets, tri-training performs consistently the best.
POS analysis We analyze POS tagging accu-
racy with respect to word frequency6and unseen
word-tag combinations (UWT) on the dev sets.
Table 5 (top rows) provides percentage of un-
6The binned log frequency was calculated with base 2 (bin
0 are OOVs, bin 1 are singletons and rare words etc).
Figure 3: POS accuracy per binned log frequency.
known tags, OOVs and unknown word-tag (UWT)
rate. The SANCL dataset is overall very chal-
lenging: OOV rates are high (6.8-11% compared
to 2.3% in WSJ), so is the unknown word-tag
(UWT) rate (answers and emails contain 2.91%
and 3.47% UWT compared to 0.61% on WSJ) and
almost all target domains even contain unknown
tags (Schnabel and Schütze, 2014) (unknown tags:
ADD,GW,NFP,XX), except for weblogs. Email is
the domain with the highest OOV rate and highest
unknown-tag-for-known-words rate. We plot ac-
curacy with respect to word frequency on email in
Figure 3, analyzing how the three methods fare in
comparison to the baseline on this difﬁcult domain.
Regarding OOVs, the results in Table 5 (second
part) show that classic tri-training outperforms the
source model (trained on only source data) on 3/5
domains in terms of OOV accuracy, except on two
domains with high OOV rate (newsgroups and we-
blogs). In general, we note that tri-training works
best on OOVs and on low-frequency tokens, which
is also shown in Figure 3 (leftmost bins). Both
other methods fall typically below the baseline in
terms of OOV accuracy, but MT-Tri still outper-
forms Asym in 4/5 cases. Table 5 (last part) also
shows that no bootstrapping method works well
on unknown word-tag combinations. UWT tokens
are very difﬁcult to predict correctly using an un-
supervised approach; the less lexicalized and more
context-driven approach taken by FLORS is clearly
superior for these cases, resulting in higher UWT
accuracies for 4/5 domains.
4 Related work
Learning under Domain Shift There is a large
body of work on domain adaptation. Studies
on unsupervised domain adaptation include early
work on bootstrapping (Steedman et al., 2003;
McClosky et al., 2006a), shared feature represen-
tations (Blitzer et al., 2006, 2007) and instance
weighting (Jiang and Zhai, 2007). Recent ap-proaches include adversarial learning (Ganin et al.,
2016) and ﬁne-tuning (Sennrich et al., 2016). There
is almost no work on bootstrapping approaches
for recent neural NLP, in particular under domain
shift. Tri-training is less studied, and only recently
re-emerged in the vision community (Saito et al.,
2017), albeit is not compared to classic tri-training.
Neural network ensembling Related work on
self-ensembling approaches includes snapshot en-
sembling (Huang et al., 2017) or temporal ensem-
bling (Laine and Aila, 2017). In general, the line be-
tween “explicit” and “implicit” ensembling (Huang
et al., 2017), like dropout (Srivastava et al., 2014)
or temporal ensembling (Saito et al., 2017), is more
fuzzy. As we noted earlier our multi-task learning
setup can be seen as a form of self-ensembling.
Multi-task learning in NLP Neural networks
are particularly well-suited for MTL allowing for
parameter sharing (Caruana, 1993). Recent NLP
conferences witnessed a “tsunami” of deep learn-
ing papers (Manning, 2015), followed by what
we call a multi-task learning “wave”: MTL has
been successfully applied to a wide range of NLP
tasks (Cohn and Specia, 2013; Cheng et al., 2015;
Luong et al., 2015; Plank et al., 2016; Fang and
Cohn, 2016; Søgaard and Goldberg, 2016; Ruder
et al., 2017; Augenstein et al., 2018). Related to
it is the pioneering work on adversarial learning
(DANN) (Ganin et al., 2016). For sentiment analy-
sis we found tri-training and our MT-Tri model to
outperform DANN. Our MT-Tri model lends itself
well to shared-private models such as those pro-
posed recently (Liu et al., 2017; Kim et al., 2017),
which extend upon (Ganin et al., 2016) by having
separate source and target-speciﬁc encoders.
5 Conclusions
We re-evaluate a range of traditional general-
purpose bootstrapping algorithms in the context
of neural network approaches to semi-supervised
learning under domain shift. For the two examined
NLP tasks classic tri-training works the best and
even outperforms a recent state-of-the-art method.
The drawback of tri-training it its time and space
complexity. We therefore propose a more efﬁcient
multi-task tri-training model, which outperforms
both traditional tri-training and recent alternatives
in the case of sentiment analysis. For POS tag-
ging, classic tri-training is superior, performing
especially well on OOVs and low frequency to-kens, which suggests it is less affected by error
propagation. Overall we emphasize the importance
of comparing neural approaches to strong baselines
and reporting results across several runs.
Acknowledgments
We thank the anonymous reviewers for their valu-
able feedback. Sebastian is supported by Irish
Research Council Grant Number EBPPG/2014/30
and Science Foundation Ireland Grant Number
SFI/12/RC/2289. Barbara is supported by NVIDIA
corporation and thanks the Computing Center of
the University of Groningen for HPC support.
References
Steven Abney. 2007. Semisupervised learning for com-
putational linguistics . CRC Press.
Isabelle Augenstein, Sebastian Ruder, and Anders Sø-
gaard. 2018. Multi-task Learning of Pairwise Se-
quence Classiﬁcation Tasks Over Disparate Label
Spaces. In Proceedings of NAACL-HLT 2018 .
John Blitzer, Mark Dredze, and Fernando Pereira. 2007.
Biographies, bollywood, boom-boxes and blenders:
Domain adaptation for sentiment classiﬁcation. An-
nual Meeting-Association for Computational Lin-
guistics , 45(1):440.
John Blitzer, Ryan McDonald, and Fernando Pereira.
2006. Domain Adaptation with Structural Corre-
spondence Learning. Proceedings of the 2006 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP ’06) , pages 120–128.
Konstantinos Bousmalis, George Trigeorgis, Nathan
Silberman, Dilip Krishnan, and Dumitru Erhan.
2016. Domain Separation Networks. NIPS .
Rich Caruana. 1993. Multitask learning: A knowledge-
based source of inductive bias. In Proceedings of the
Tenth International Conference on Machine Learn-
ing.
Olivier Chapelle, Bernhard Schölkopf, and Alexander
Zien. 2006. Semi-Supervised Learning , volume 1.
MIT press.
Hao Cheng, Hao Fang, and Mari Ostendorf. 2015.
Open-domain name error detection using a multi-
task rnn. In Proceedings of the 2015 Conference on
Empirical Methods in Natural Language Processing ,
pages 737–746. Association for Computational Lin-
guistics.
Trevor Cohn and Lucia Specia. 2013. Modelling an-
notator bias with multi-task gaussian processes: An
application to machine translation quality estimation.
InProceedings of the 51st Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:Long Papers) , pages 32–42, Soﬁa, Bulgaria. Associ-
ation for Computational Linguistics.
Michael Denkowski and Graham Neubig. 2017.
Stronger baselines for trustable results in neural ma-
chine translation. arXiv preprint arXiv:1706.09733 .
Timothy Dozat and Christopher D. Manning. 2017.
Deep Biafﬁne Attention for Neural Dependency
Parsing. In Proceedings of ICLR 2017 .
Bradley Efron and Robert J Tibshirani. 1994. An intro-
duction to the bootstrap . CRC press.
Meng Fang and Trevor Cohn. 2016. Learning when
to trust distant supervision: An application to low-
resource pos tagging using cross-lingual projection.
InProceedings of CoNLL-16 .
Meng Fang and Trevor Cohn. 2017. Model transfer
for tagging low-resource languages using a bilingual
dictionary. In Proceedings of the 55th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 2: Short Papers) , pages 587–593. Associa-
tion for Computational Linguistics.
Yaroslav Ganin, Evgeniya Ustinova, Hana Ajakan,
Pascal Germain, Hugo Larochelle, Francois Lavio-
lette, Mario Marchand, and Victor Lempitsky. 2016.
Domain-Adversarial Training of Neural Networks.
Journal of Machine Learning Research , 17:1–35.
Rob van der Goot, Barbara Plank, and Malvina Nis-
sim. 2017. To normalize, or not to normalize: The
impact of normalization on part-of-speech tagging.
InProceedings of the 3rd Workshop on Noisy User-
generated Text , pages 31–39, Copenhagen, Den-
mark. Association for Computational Linguistics.
Chuan Guo, Geoff Pleiss, Yu Sun, and Kilian Q. Wein-
berger. 2017. On Calibration of Modern Neural Net-
works. Proceedings of ICML 2017 .
Luheng He, Kenton Lee, Mike Lewis, and Luke Zettle-
moyer. 2017. Deep semantic role labeling: What
works and what’s next. In Proceedings of the 55th
Annual Meeting of the Association for Computa-
tional Linguistics (Volume 1: Long Papers) , pages
473–483, Vancouver, Canada. Association for Com-
putational Linguistics.
Jeremy Howard and Sebastian Ruder. 2018. Universal
Language Model Fine-tuning for Text Classiﬁcation.
InProceedings of ACL 2018 .
Gao Huang, Yixuan Li, Geoff Pleiss, Zhuang Liu,
John E. Hopcroft, and Kilian Q. Weinberger. 2017.
Snapshot Ensembles: Train 1, get M for free. In
Proceedings of ICLR 2017 .
Jing Jiang and ChengXiang Zhai. 2007. Instance
weighting for domain adaptation in nlp. In Proceed-
ings of the 45th Annual Meeting of the Association
of Computational Linguistics , pages 264–271. Asso-
ciation for Computational Linguistics.Young-Bum Kim, Karl Stratos, and Dongchan Kim.
2017. Adversarial adaptation of synthetic or stale
data. In Proceedings of the 55th Annual Meeting of
the Association for Computational Linguistics (Vol-
ume 1: Long Papers) , pages 1297–1307, Vancouver,
Canada. Association for Computational Linguistics.
Eliyahu Kiperwasser and Yoav Goldberg. 2016. Sim-
ple and accurate dependency parsing using bidirec-
tional lstm feature representations. Transactions
of the Association for Computational Linguistics ,
4:313–327.
Samuli Laine and Timo Aila. 2017. Temporal Ensem-
bling for Semi-Supervised Learning. In Proceed-
ings of ICLR 2017 .
Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural Architectures for Named Entity Recognition.
InNAACL-HLT 2016 .
Pengfei Liu, Xipeng Qiu, and Xuanjing Huang. 2017.
Adversarial multi-task learning for text classiﬁca-
tion. In Proceedings of the 55th Annual Meeting
of the Association for Computational Linguistics
(Volume 1: Long Papers) , pages 1–10, Vancouver,
Canada. Association for Computational Linguistics.
Christos Louizos, Kevin Swersky, Yujia Li, Max
Welling, and Richard Zemel. 2015. The variational
fair autoencoder. arXiv preprint arXiv:1511.00830 .
Minh-Thang Luong, Quoc V Le, Ilya Sutskever, Oriol
Vinyals, and Lukasz Kaiser. 2015. Multi-task
sequence to sequence learning. arXiv preprint
arXiv:1511.06114 .
Christopher D Manning. 2015. Computational linguis-
tics and deep learning. Computational Linguistics ,
41(4):701–707.
David McClosky, Eugene Charniak, and Mark Johnson.
2006a. Effective self-training for parsing. In Pro-
ceedings of the Human Language Technology Con-
ference of the NAACL, Main Conference , New York
City, USA. Association for Computational Linguis-
tics.
David McClosky, Eugene Charniak, and Mark John-
son. 2006b. Reranking and Self-Training for Parser
Adaptation. International Conference on Compu-
tational Linguistics (COLING) and Annual Meet-
ing of the Association for Computational Linguistics
(ACL) , (July):337–344.
Gábor Melis, Chris Dyer, and Phil Blunsom. 2017. On
the State of the Art of Evaluation in Neural Lan-
guage Models. In arXiv preprint arXiv:1707.05589 .
Graham Neubig, Chris Dyer, Yoav Goldberg, Austin
Matthews, Waleed Ammar, Antonios Anastasopou-
los, Miguel Ballesteros, David Chiang, Daniel Cloth-
iaux, Trevor Cohn, et al. 2017. Dynet: The
dynamic neural network toolkit. arXiv preprint
arXiv:1701.03980 .Jeffrey Pennington, Richard Socher, and Christopher D.
Manning. 2014. Glove: Global vectors for word rep-
resentation. In Empirical Methods in Natural Lan-
guage Processing (EMNLP) , pages 1532–1543.
Slav Petrov and Ryan McDonald. 2012. Overview of
the 2012 shared task on parsing the web. Notes of
the First Workshop on Syntactic Analysis of Non-
Canonical Language (SANCL) , 59.
Barbara Plank. 2011. Domain adaptation for parsing .
University Library Groningen.
Barbara Plank, Anders Søgaard, and Yoav Goldberg.
2016. Multilingual Part-of-Speech Tagging with
Bidirectional Long Short-Term Memory Models and
Auxiliary Loss. In Proceedings of the 54th Annual
Meeting of the Association for Computational Lin-
guistics .
Roi Reichart and Ari Rappoport. 2007. Self-training
for enhancement and domain adaptation of statisti-
cal parsers trained on small datasets. In Proceed-
ings of the 45th Annual Meeting of the Association
of Computational Linguistics , pages 616–623.
Nils Reimers and Iryna Gurevych. 2017. Reporting
score distributions makes a difference: Performance
study of lstm-networks for sequence tagging. In Pro-
ceedings of the 2017 Conference on Empirical Meth-
ods in Natural Language Processing , pages 338–
348, Copenhagen, Denmark. Association for Com-
putational Linguistics.
Sebastian Ruder, Joachim Bingel, Isabelle Augenstein,
and Anders Søgaard. 2017. Learning what to
share between loosely related tasks. arXiv preprint
arXiv:1705.08142 .
Kuniaki Saito, Yoshitaka Ushiku, and Tatsuya Harada.
2017. Asymmetric Tri-training for Unsupervised
Domain Adaptation. In ICML 2017 .
Tobias Schnabel and Hinrich Schütze. 2014. FLORS:
Fast and Simple Domain Adaptation for Part-of-
Speech Tagging. TACL , 2:15–26.
Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Improving neural machine translation mod-
els with monolingual data. In Proceedings of the
54th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers) , pages
86–96, Berlin, Germany. Association for Computa-
tional Linguistics.
Anders Søgaard. 2010. Simple semi-supervised train-
ing of part-of-speech taggers. In Proceedings of the
ACL 2010 Conference Short Papers , pages 205–208.
Anders Søgaard and Yoav Goldberg. 2016. Deep multi-
task learning with low level tasks supervised at lower
layers. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 231–235, Berlin, Germany. Association
for Computational Linguistics.Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: A Simple Way to Prevent Neural Networks
from Overﬁtting. Journal of Machine Learning Re-
search , 15:1929–1958.
Mark Steedman, Rebecca Hwa, Stephen Clark, Miles
Osborne, Anoop Sarkar, Julia Hockenmaier, Paul
Ruhlen, Steven Baker, and Jeremiah Crim. 2003.
Example selection for bootstrapping statistical
parsers. In Proceedings of the 2003 Human Lan-
guage Technology Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics .
Jun Suzuki and Hideki Isozaki. 2008. Semi-supervised
sequential labeling and segmentation using giga-
word scale unlabeled data. pages 665–673.
Vincent Van Asch and Walter Daelemans. 2016. Pre-
dicting the effectiveness of self-training: Applica-
tion to sentiment classiﬁcation. arXiv preprint
arXiv:1601.03288 .
Fangzhao Wu and Yongfeng Huang. 2016. Sentiment
Domain Adaptation with Multiple Sources. Pro-
ceedings of the 54th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL 2016) ,
pages 301–310.
David Yarowsky. 1995. Unsupervised Word Sense Dis-
ambiguation Rivaling Supervised Methods. In Pro-
ceedings of the 33rd annual meeting on Association
for Computational Linguistics .
Wenpeng Yin, Tobias Schnabel, and Hinrich Schütze.
2015. Online Updating of Word Representations for
Part-of-Speech Tagging. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing , September, pages 1329–1334.
Guangyou Zhou, Zhiwen Xie, Jimmy Xiangji Huang,
and Tingting He. 2016. Bi-transferring deep neu-
ral networks for domain adaptation. In Proceed-
ings of the 54th Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers) , pages 322–332, Berlin, Germany. Association
for Computational Linguistics.
Zhi-Hua Zhou and Ming Li. 2005. Tri-Training: Ex-
ploiting Unlabeled Data Using Three Classiﬁers.
IEEE Trans.Data Eng. , 17(11):1529–1541.
Xiaojin Zhu. 2005. Semi-Supervised Learning Litera-
ture Survey. Technical Report 1530, Computer Sci-
ences, University of Wisconsin-Madison.
Xiaojin Zhu and Andrew B Goldberg. 2009. Intro-
duction to semi-supervised learning. Synthesis lec-
tures on artiﬁcial intelligence and machine learning ,
3(1):1–130.