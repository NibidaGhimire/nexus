arXiv:2305.10846v1  [cs.AI]  18 May 2023TPLP : Page 1–14. © The Author(s), 2023. Published by Cambridge Un iversity Press 2023
doi:10.1017/xxxxx1
Non-deterministic approximation operators: ultimate
operators, semi-equilibrium semantics and aggregates
(full version)∗
HEYNINCK JESSE
Open Universiteit, the Netherlands
BOGAERTS BART
Vrij Universiteit Brussels, Belgium
Abstract
Approximation ﬁxpoint theory (AFT) is an abstract and gener al algebraic framework for studying the se-
mantics of non-monotonic logics. In recent work, AFT was gen eralized to non-deterministic operators,
i.e. operators whose range are sets of elements rather than s ingle elements. In this paper, we make three
further contributions to non-deterministic AFT: (1) we deﬁ ne and study ultimate approximations of non-
deterministic operators, (2) we give an algebraic formulat ion of the semi-equilibrium semantics by Amen-
dola, et al., and (3) we generalize the characterisations of disjunctive logic programs to disjunctive logic
programs with aggregates.
This is an extended version of our paper that will be presente d at ICLP 2023 and will appear in the
special issue of TPLP with the ICLP proceedings.
KEYWORDS : Approximation ﬁxpoint theory, Disjunctive logic program ming, Semi-equilibrium semantics
1 Introduction
Knowledge representation and reasoning (KRR), by its very n ature, is concerned with the study
of a wide variety of languages and formalisms. In view of this ,unifying frameworks that allow for
the language-independent study of aspects of KRR is essenti al. One framework with strong uni-
fying potential is approximation ﬁxpoint theory (AFT) (Denecker et al. 2000), a purely algebraic
theory which was shown to unify the semantics of, among other s, logic programming default
logic and autoepistemic logic. The central objects of study of AFT are (approximating) operators
and their ﬁxpoints . For logic programming for instance, it was shown that Fitti ng’s three-valued
immediate consequence operator is an approximating operat or of Van Emden and Kowalski’s
two-valued immediate consequence operator and that all maj or semantics of (normal) logic pro-
gramming can be derived directly from this approximating op erator. Moreover, this observation
does not only hold for logic programming: also for a wide vari ety of other domains, it is straight-
forward how to derive an approximating operator, and the maj or semantics can be recovered
∗This work was partially supported by Fonds Wetenschappelij k Onderzoek – Vlaanderen (project G0B2221N) and the
Flemish Government (Onderzoeksprogramma Artiﬁci¨ ele Int elligentie (AI) Vlaanderen).2 Jesse Heyninck and Bart Bogaerts
from that approximator using purely algebraic means (an ove rview is given by Heyninck et al.
(2022)). This has in turn inspired others to deﬁne the semant ics of non-monotonic formalisms
directly using AFT (Bogaerts 2019), putting AFT forward not only as a f ramework to study
existing semantics, but also as a framework to deﬁne them. Th e advantage is that AFT-based
semantics are guaranteed to follow well-established princ iples. such as groundedness (Bogaerts
2015). Moreover, it is often easier to deﬁne a semantic opera tor, than to deﬁne the semantics
from scratch.
Recently, AFT was generalized to also capture non-deterministic operators (Heyninck et al.
2022) which allow for different options or choices in their o utput. A prime example of the occur-
rence of non-determinism in KRR is disjunctive logic programming , and it was indeed shown that
many semantics of disjunctive logic programming (speciﬁca lly the weakly supported, (partial)
stable, and well-founded semantics (Alcˆ antara et al. 2005 )) are captured by non-deterministic
AFT. In this paper, we make further contributions to the stud y of non-deterministic AFT, with a
particular emphasis on disjunctive logic programs. On the o ne hand, (in Section 3) we deepen
the theory of non-deterministics AFT by investigating so-c alled ultimate semantics . For standard
AFT, Denecker et al. (2002) have shown that with every two-va lued operator, we can uniquely as-
sociate a most-precise approximator called the ultimate approximator . When deﬁning semantics
of new formalisms, this even takes the need of deﬁning an appr oximator away, since it sufﬁces to
deﬁne an exact operator and its ultimate approximator comes for free.1Our ﬁrst contribution is
to show how ultimate approximations can be obtained for non- deterministic AFT, which we later
illustrate using disjunctive logic programs with aggregat es. This means we give the ﬁrst con-
structive method for obtaining non-deterministic approxi mation operators. On the other hand,
we also apply non-deterministic AFT to two areas that have thus far been ou t of reach of AFT.
In Section 4, we use it to deﬁne an algebraic generalisation o f the semi-equilibrium semantics , a
semantics originally formulated for disjunctive logic pro grams (Amendola et al. 2016) but now,
thanks to our results, available to any operator-based sema ntics. In Section 5, we apply the theory
of non-deterministic AFT to disjunctive logic programs wit haggregates in the body, giving rise
to a family of semantics for such programs.
2 Background and Preliminaries
In this section, we recall disjunctive logic programming (S ec. 2.1), approximation ﬁxpoint theory
for deterministic operators (Sec. 2.2) and non-determinis tic operators (Sec. 2.3).
2.1 Disjunctive Logic Programming
In what follows we consider a propositional2language L, whose atomic formulas are denoted by
p,q,r (possibly indexed), and that contains the propositional co nstantsT(representing truth), F
(falsity),U(unknown), and C(contradictory information). The connectives in Linclude nega-
tion¬, conjunction∧, disjunction∨, and implication←. Formulas are denoted by φ,ψ,δ(again,
possibly indexed). Logic programs in Lmay be divided to different kinds as follows: a (propo-
sitional) disjunctive logic program PinL(a dlp in short) is a ﬁnite set of rules of the form
1However, ultimate semantics often come at the cost of increa sed computational complexity compared to their standard
counterparts.
2For simplicity we restrict ourselves to the propositional c ase.Non-deterministic AFT 3
/logicalortextn
i=1pi←ψ, where the head/logicalortextn
i=1piis a non-empty disjunction of atoms, and the body ψis
a formula not containing ←. A rule is called normal (nlp), if its body is a conjunction of literals
(i.e., atomic formulas or negated atoms), and its head is ato mic. A rule is disjunctively normal
if its body is a conjunction of literals and its head is a non-e mpty disjunction of atoms. We will
use these denominations for programs if all rules in the prog ram satisfy the denomination, e.g. a
program is normal if all its rules are normal. The set of atoms occurring inPis denotedAP.
The semantics of dlps are given in terms of four-valued interpretations . Afour-valued inter-
pretation of a programPis a pair(x,y), wherex⊆APis the set of the atoms that are assigned
a value in{T,C}andy⊆APis the set of atoms assigned a value in {T,U}. We deﬁne−T=F,
−F=TandX=−XforX=C,U. Truth assignments to complex formulas are as follows:
•(x,y)(p) =

T ifp∈xandp∈y,
U ifp/\e}a⊔io\slash∈xandp∈y,
F ifp/\e}a⊔io\slash∈xandp/\e}a⊔io\slash∈y,
C ifp∈xandp/\e}a⊔io\slash∈y.•(x,y)(¬φ) =−(x,y)(φ),
•(x,y)(ψ∧φ) =lub≤t{(x,y)(φ),(x,y)(ψ)},
•(x,y)(ψ∨φ) =glb≤t{(x,y)(φ),(x,y)(ψ)}.
A four-valued interpretation of the form (x,x)may be associated with a two-valued (ortotal)
interpretation x.(x,y)is athree-valued (orconsistent ) interpretation, if x⊆y. Interpretations
are compared by two order relations which form a pointwise ex tension of the structure FOUR
consisting of T,F,CandUwithU<iF,T<iCandF<tC,U<tT. The pointwise extension
of these orders corresponds to the information order , which is equivalently deﬁned as (x,y)≤i
(w,z)iffx⊆wandz⊆y, and the truth order , where(x,y)≤t(w,z)iffx⊆wandy⊆z.
The immediate consequence operator for normal programs (va n Emden and Kowalski 1976)
is extended to dlp’s as follows:
Deﬁnition 1 (Immediate Consquence operator for dlp’s )
Given a dlpPand a two-valued interpretation x, we deﬁne: (1) HDP(x) ={∆|/logicalortext∆←ψ∈
Pand(x,x)(ψ) =T}; and (2)ICP(x) ={y⊆/uniontextHDP(x)|∀∆∈HDP(x), y∩∆/\e}a⊔io\slash=∅}.
Thus,ICP(x)consists of sets of atoms that occur in activated rule heads, each set contains at
least one representative from every disjuncts of a rule in Pwhose body is x-satisﬁed. Denoting
by℘(S)the powerset ofS,ICPis an operator on the lattice /a\}bracke⊔le{⊔℘(AP),⊆/a\}bracke⊔ri}h⊔.3
Given a dlpPa consistent interpretation (x,y)is a(three–valued) model ofP, if for every
φ←ψ∈P,(x,y)(φ)≥t(x,y)(ψ). The GL-transformationP
(x,y)of a disjunctively normal dlp
Pwith respect to a consistent (x,y), is the positive program obtained by replacing in every rule
inPof the form p1∨...∨pn←/logicalandtextm
i=1qi∧/logicalandtextn
j=1¬rja negated literal¬ri(1≤i≤k) by
(x,y)(¬ri).(x,y)is athree-valued stable model ofPiff it is a≤t-minimal model ofP
(x,y).4
2.2 Approximation Fixpoint Theory
We now recall basic notions from approximation ﬁxpoint theo ry (AFT), as described by De-
necker, Marek and Truszczy´ nski (2000). We restrict oursel ves here to the necessary formal
3The operator ICPis a generalization of the immediate consequence operator f rom (Fern´ andez and Minker 1995,
Deﬁnition 3.3), where the minimal sets of atoms in ICP(x)are considered. However, this requirement of minimality
is neither necessary nor desirable in the consequence opera tor (Heyninck et al. 2022).
4An overview of other semantics for dlp’s can be found in previ ous work on non-deterministic AFT (Heyninck et al.
2022).4 Jesse Heyninck and Bart Bogaerts
details, and refer to more detailed introductions by Deneck er, Marek and Truszczy´ nski (2000)
and Bogaerts (2015) for more informal details. AFT introduc es constructive techniques for ap-
proximating the ﬁxpoints of an operator Oover a lattice L=/a\}bracke⊔le{⊔L,≤/a\}bracke⊔ri}h⊔.5Approximations are
pairs of elements (x,y). Thus, given a lattice L=/a\}bracke⊔le{⊔L,≤/a\}bracke⊔ri}h⊔, the induced bilattice is the structure
L2=/a\}bracke⊔le{⊔L2,≤i,≤t/a\}bracke⊔ri}h⊔, in whichL2=L×L , and for every x1,y1,x2,y2∈L,(x1,y1)≤i(x2,y2)
ifx1≤x2andy1≥y2, and(x1,y1)≤t(x2,y2)ifx1≤x2andy1≤y2.6
Anapproximating operator O:L2→L2of an operator O:L→L is an operator that maps
every approximation (x,y)of an element zto an approximation (x′,y′)of another element O(z),
thus approximating the behavior of the approximated operat orO. In more details, an operator
O:L2→L2is≤i-monotonic , if when(x1,y1)≤i(x2,y2), alsoO(x1,y1)≤iO(x2,y2);Ois
approximating , if it is≤i-monotonic and for any x∈L,Ol(x,x) =Ou(x,x).7Oapproximates
ofO:L→L , if it is≤i-monotonic andO(x,x) = (O(x),O(x))(for everyx∈L). Finally,
for a complete lattice L, letO:L2→L2be an approximating operator. We denote: Ol(·,y) =
λx.Ol(x,y)and similarly forOu. The stable operator for Ois then deﬁned as S(O)(x,y) =
(lfp(Ol(.,y)),lfp(Ou(x,.)), wherelfp(O)denotes the least ﬁxpoint of an operator O.
Approximating operators induce a family of ﬁxpoint semantics . Given a complete lattice L=
/a\}bracke⊔le{⊔L,≤/a\}bracke⊔ri}h⊔and an approximating operator O:L2→L2,(x,y)is aKripke-Kleene ﬁxpoint ofOif
(x,y) = lfp≤i(O(x,y));(x,y)is athree-valued stable ﬁxpoint ofOif(x,y) =S(O)(x,y);
(x,y)is atwo-valued stable ﬁxpoints ofOifx=yand(x,x) =S(O)(x,x);(x,y)is the
well-founded ﬁxpoint ofOif it is the≤i-minimal (three-valued) stable ﬁxpoint of O.
2.3 Non-deterministic approximation ﬁxpoint theory
AFT was generalized to non-deterministic operators, i.e. o perators which map elements of a lat-
tice to a set of elements of that lattice (like the operator ICPfor DLPs) by Heyninck et al. (2022).
We recall the necessary details, referring to the original p aper for more details and explanations.
Anon-deterministic operator on Lis a function O:L →℘(L)\{∅} . For example, the
operatorICPfrom Deﬁnition 1 is a non-deterministic operator on the latt ice/a\}bracke⊔le{⊔℘(AP),⊆/a\}bracke⊔ri}h⊔.
As the ranges of non-deterministic operators are setsof lattice elements, one needs a way to
compare them, such as the Smyth order and the Hoare order . LetL=/a\}bracke⊔le{⊔L,≤/a\}bracke⊔ri}h⊔be a lattice, and
letX,Y∈℘(L). Then:X/precedeseq⊓alS
LYif for everyy∈Ythere is anx∈Xsuch thatx≤y; and
X/precedeseq⊓alH
LYif for everyx∈Xthere is ay∈Ysuch thatx≤y. Given some X1,X2,Y1,Y2⊆L,
X1×Y1/precedeseq⊓alA
iX2×Y2iffX1/precedeseq⊓alS
LX2andY2/precedeseq⊓alH
LY1. LetL=/a\}bracke⊔le{⊔L,≤/a\}bracke⊔ri}h⊔be a lattice. Given an
operatorO:L2→L2, we denote byOlthe operator deﬁned by Ol(x,y) =O(x,y)1, and
similarly forOu(x,y) =O(x,y)2. An operatorO:L2→℘(L)\∅×℘(L)\∅is called a non-
deterministic approximating operator (ndao, for short), if it is /precedeseq⊓alA
i-monotonic (i.e. (x1,y1)≤i
(x2,y2)impliesO(x1,y1)/precedeseq⊓alA
iO(x2,y2)), and is exact (i.e., for every x∈ L ,O(x,x) =
Ol(x,x)×Ol(x,x)). We restrict ourselves to ndaos ranging over consistent pa irs(x,y).
5Recall that a lattice is a partially ordered set in which ever y pair of elements has a least upper bound and greatest lower
bound denoted by ⊔and⊓, respectively. If every set of elements has a least upper bou nd and greatest lower bound,
we call the lattice complete.
6Note that we use small letters to denote elements of lattice, capital letters to denote sets of elements, and capital
calligraphic letters to denote sets of sets of elements.
7In some papers (e.g., Denecker et al. (2000)), an approximat ion operator is deﬁned as a symmetric ≤i-monotonic
operator, i.e. a ≤i-monotonic operator s.t. for every x,y∈ L,O(x,y) = (Ol(x,y),Ol(y,x))for someOl:L2→
L. However, the weaker condition we take here (taken from Dene cker et al. (2002)) is actually sufﬁcient for most
results on AFT.Non-deterministic AFT 5
We ﬁnally deﬁne the stable operator (given an ndao O) as follows. The complete lower stable
operator is deﬁned by (for any y∈L)C(Ol)(y) ={x∈L|x∈Ol(x,y)and¬∃x′< x:
x′∈Ol(x′,y)}. The complete upper stable operator is deﬁned by (for any x∈L)C(Ou)(x) =
{y∈L|y∈Ou(x,y)and¬∃y′< y:y′∈Ou(x,y′)}. The stable operator :S(O)(x,y) =
C(Ol)(y)×C(Ou)(x).(x,y)is astable ﬁxpoint ofOif(x,y)∈S(O)(x,y).8
Other semantics, e.g. the well-founded state and the Kripke -Kleene ﬁxpoints and state are
deﬁned by Heyninck et al (2022) and can be immediately obtain ed once an ndao is formulated.
Example 1
An example of an ndao approximating ICP(Deﬁnition 1) is deﬁned as follows (given a dlp
Pand an interpretation (x,y)):HDl
P(x,y) ={∆|/logicalortext∆←φ∈ P,(x,y)(φ)≥tC},
HDu
P(x,y) ={∆|/logicalortext∆←φ∈P,(x,y)(φ)≥tU},IC†
P(x,y) ={x1⊆/uniontextHD†
P(x,y)|
∀∆∈HD†
P(x,y), x1∩∆/\e}a⊔io\slash=∅}(for†∈{l,u}), andICP(x,y) = (ICl
P(x,y),ICu
P(x,y)).
Consider the following dlp: P={p∨q←¬q}. The operatorICl
Pbehaves as follows:
•For any interpretation (x,y)for whichq∈x,HDl
P(x,y) =∅and thusICl
P(x,y) ={∅}.
•For any interpretation (x,y)for whichq/\e}a⊔io\slash∈x,HDl
P(x,y) ={{p,q}}and thusICl
P(x,y) =
{{p},{q},{p,q}}.
SinceICl
P(x,y) =ICu
P(y,x)(see (Heyninck et al. 2022, Lemma 1)), ICPbehaves as follows:
•For any(x,y)withq/\e}a⊔io\slash∈xandq/\e}a⊔io\slash∈y,ICP(x,y) ={{p},{q},{p,q}}×{{p},{q},{p,q}},
•For any(x,y)withq/\e}a⊔io\slash∈xandq∈y,ICP(x,y) ={∅}×{{{p},{q},{p,q}},
•For any(x,y)withq∈xandq/\e}a⊔io\slash∈y,ICP(x,y) ={{p},{q},{p,q}}×{∅} , and
•For any(x,y)withq∈xandq∈y,ICP(x,y) ={(∅,∅)}.
We see e.g. that C(ICl
P)({p}) ={{p},{q}}and thus ({p},{p})is a stable ﬁxpoint of ICP.
(∅,{q})is the second stable ﬁxpoint of ICP.(∅,{p,q})is a ﬁxpoint ofICPthat is not stable.
In general, (total) stable ﬁxpoints of ICPcorrespond to (total) stable models of P, and weakly
supported models of ICPcorrespond to ﬁxpoints of ICP. (Heyninck et al. 2022).
3 Ultimate Operators
Approximation ﬁxpoint theory assumes an approximation ope rator, but does not specify how to
construct it. In the literature, one ﬁnds various ways to con struct a deterministic approximation
operatorOthat approximates a deterministic operator O. Of particular interest is the ultimate
operator (Denecker et al. 2002), which is the most precise approximation operator. In this section,
we show that non-deterministic approximation ﬁxpoint theo ry admits an ultimate operator, which
is, however, different from the ultimate operator for deter ministic AFT.
We ﬁrst recall that for a deterministic operatorO:L→L , the ultimate approximation Ouis
deﬁned by Denecker et al. (2002) as follows:9
ODMTd(x,y) = (⊓O[x,y],⊔O[x,y])10
8Notice that we slightly abuse notation and write (x,y)∈S(O)(x,y)to abbreviate x∈(S(O)(x,y))1andy∈
(S(O)(x,y))2, i.e.xis a lower bound generated by S(O)(x,y)andyis an upper bound generated by S(O)(x,y).
9We use the abbreviation DMTdfordeterministic Denecker, Marek and Truszczy´ nski to denote this operator, as to not
overburden the use of ICU
P. Indeed, we will later see that the ultimate operator for non -disjunctive logic programs
generalizes to an ndao that is different from the ultimate no n-deterministic operator ICU
P.
10Recall that denotes ⊓Xthe greatest lower bound of Xand⊔Xdenotes the least upper bound of X.6 Jesse Heyninck and Bart Bogaerts
WhereO[x,y] :={O(z)|x≤z≤y}. This operator is shown to be the most precise opera-
tor approximating an operator O(Denecker et al. 2002). In more detail, for any (determinist ic)
approximation operator Oapproximating O, and any consistent (x,y),O(x,y)<iODMTd(x,y).
The ultimate approximator for ICPfor non-disjunctive logic programs Plooks as follows:
Deﬁnition 2
Given a normal logic program P, we let:ICDMTd
P(x,y) = (ICDMTd,l
P(x,y),ICDMd,u
P(x,y))
with:ICDMTd,l
P(x,y) =/intersectiontext
x⊆z⊆y{α|α←φ∈P andz(φ) =T}, andICDMTd,u
P(x,y) =/uniontext
x⊆z⊆y{α|α←φ∈P andz(φ) =T}.
In this section, we deﬁne the ultimate semantics for the non- deterministic operators. In more
detail, we constructively deﬁne an approximation operator that is most precise and has non-empty
upper and lower bounds. Its construction is based on the foll owing idea: we are looking for an
operatorOUs.t. for any ndaoOthat approximates O,Ol(x,y)/precedeseq⊓alS
LOU
l(x,y)(and similarly for
the upper bound). As we know that Ol(x,y)/precedeseq⊓alS
LO(z)for anyx≤z≤y, we can obtainOU
lby
simply gathering all applications of Oto elements of the interval [x,y]i.e. we deﬁne:
OU
l(x,y) =/uniondisplay
x≤z≤yO(z)
The upper bound can be deﬁned in the same way as the lower bound . Altogether, we obtain:
OU(x,y) =OU
l(x,y)×OU
l(x,y)
The following example illustrates this deﬁnition for norma l logic programs:
Example 2
LetP={q← ¬p;p←p}. ThenICP(∅) =ICP({q}) ={q}andICP({p}) =
ICP({p,q}) ={p}. Therefore,ICU
P(∅,{p,q}) ={{p},{q}}×{{p},{q}}whereas
ICU
P(∅,{q}) ={{q}}×{{q}}.
The ultimate approximation is the most precise ndao approxi mating the operator O:
Proposition 1
Let a non-deterministic operator Oover a lattice/a\}bracke⊔le{⊔L,≤/a\}bracke⊔ri}h⊔be given. ThenOUis an ndao that
approximates O. Furthermore, for any ndao Othat approximates Oand for every x,y∈L s.t.
x≤y, it holds thatO(x,y)/precedeseq⊓alA
iOU(x,y).
In conclusion, non-deterministic AFT admits, just like det erministic AFT, an ultimate approx-
imation. However, as we will see in the rest of this section, t he ultimate non-deterministic ap-
proximation operator OUdoes notgeneralize the deterministic ultimate approximation oper ator
deﬁned by Denecker et al (2002). In more detail, we compare th e non-deterministic ultimate
operatorICU
Pwith the deterministic ultimate ICDMT
P from Deﬁnition 2. Somewhat surprisingly,
even when looking at normal logic programs, the operator ICDMTd
P does not coincide with the
ultimate ndaoICU
P(and thusICDMTd
P isnotthe most precise ndao, even for non-disjunctive
programs). The intuitive reason is that the additional expr essivity of non-deterministic opera-
tors, which are not restricted to single lower and upper boun ds in their outputs, allows to more
precisely capture what is derivable in the “input interval” (x,y).
Example 3 (Example 2 continued )Non-deterministic AFT 7
Consider againP={q← ¬p;p←p}. Applying the DMTd-operator gives:
ICDMTd
P(∅,{p,q}) = (∅,{p,q}). Intuitively, the ultimate semantics ICU
P(∅,{p,q}) =
{{p},{q}}×{{p},{q}}gives us the extra information that we will always either der iveporq,
which is information a deterministic approximator can simp ly not capture. Such a “choice” is not
expressible within a single interval, hence the determinis tic ultimate approximation is (∅,{p,q}).
This example also illustrates the fact that, when applying t he ultimate ndao-construction to (non-
constant) deterministic operators O,OUmight be a non-deterministic approximation operator.
However, one can still generalize the operator ICDMTd
P to disjunctive logic programs. We ﬁrst
generalize the idea behind ICDMTd,l
P to an operator gathering the heads of rules that are true in
every interpretation zin the interval [x,y]. Similarly,ICDMTd,u
Pis generalized by gathering the
heads of rules with bodies that are true in at least one interp retation in [x,y]:
HDDMT,l
P(x,y) =/intersectiondisplay
x⊆z⊆yHDP(z)andHDDMT,u
P(x,y) =/uniondisplay
x⊆z⊆yHDP(z)}.
The upper and lower immediate consequences operator are the n straightforwardly deﬁned, that
is: by taking all interpretations that only contain atoms in HDDMT,†
P(x,y)and contain at least
one member of every head ∆∈HDDMT,†
P(x,y)(for†∈{u,l}):
ICDMT,†
P(x,y) ={z⊆/uniondisplay
HDDMT,†
P(x,y)|∀∆∈HDDMT,†
P(x,y)/\e}a⊔io\slash=∅:z∩∆/\e}a⊔io\slash=∅}.
Finally, the DMT -ndao is deﬁned as: ICDMT
P(x,y) =ICDMT,l
P(x,y)×ICDMT,u
P(x,y). We have:
Proposition 2 ((Heyninck et al. 2022, Proposition 3) )
For any disjunctive logic program P,ICDMT
P is an ndao that approximates ICP.
Notice that for a non-disjunctive program P,/uniontextICDMT,†
P(x,y) =/uniontextHDDMT,†
P(x,y) =
ICDMTd,†
P(x,y)(for† ∈ {u,l}), i.e. the non-deterministic version reduces to the determ in-
istic version when looking at non-disjunctive programs. No tice furthermore the operators
HDDMT,l
P(x,y)andHDDMT,u
P(x,y)are only deﬁned for consistent interpretations (x,y). We
leave the extension of this operator to inconsistent interp retations for future work.
Example 4
Consider again the program P={p∨q←¬q}from Example 1.ICDMT,l
Pbehaves as follows:
•Ifq∈ythenHDDMT,l
P(x,y) =∅and thusICDMT,l
P(x,y) =∅.
•Ifq/\e}a⊔io\slash∈ythenHDDMT,l
P(x,y) ={{p,q}}andICDMT,l
P(x,y) ={{p},{q},{p,q}}.
ICDMT,u
P behaves as follows:
•Ifq∈xthenHDDMT,u
P(x,y) =∅and thusICDMT,u
P(x,y) =∅.
•Ifq/\e}a⊔io\slash∈xthenHDDMT,u
P(x,y) ={{p,q}}and thusICDMT,u
P(x,y) ={{p},{q},{p,q}}.
Thus e.g.ICDMT
P(∅,{p,q}) ={∅} × {{p},{q},{p,q}}andICDMT
P({p},{p}) =
{{p},{q},{p,q}}×{{p},{q},{p,q}}.We thus see that ({p},{p})is a stable ﬁxpoint of ICDMT
P.
A slightly extended program P={q←¬q;p∨q←q}shows some particular but unavoidable
behavior of this operator. ICDMT,l
P(∅,{q}) ={∅} asHDP(∅) ={{q}}andHDP({q}) =
{{p,q}}. Note that the lower bound for is notthe stronger{p}. This would result in a loss of
/precedeseq⊓alA
i-monotonicity, as the lower bound {{q}}for the less informative (∅,{q})would be/precedeseq⊓alS
L-
incomparable to the lower bound {{p},{q},{p,q}}of the more informative ({q},{q}).8 Jesse Heyninck and Bart Bogaerts
We have shown in this section that non-deterministic AFT adm its an ultimate operator, thus
providing a way to construct an ndao based on a non-determini stic operator. We have also shown
that the ultimate ndao diverges from the ultimate operator f or deterministic AFT, but that this
deterministic ultimate operator can be generalized to disj unctive logic programs. Both operators
will be used in Section 5 to deﬁne semantics for DLP’s with agg regates.
4 Semi-Equilibrium Semantics
To further extend the reach of non-deterministic AFT, we gen eralize yet another semantics for
dlp’s, namely the semi-equilibrium semantics (Amendola et al. 2016). The semi-equilibrium se-
mantics is a semantics for disjunctive logic programs that h as been studied for disjunctively
normal logic programs. This semantics is a three-valued sem antics that fulﬁlls the following
properties deemed desirable by Amendola et al. (2016): (1) E very (total) answer set of Pcor-
responds to a semi-equilibrium model; (2) If Phas a (total) answer set, then all of its semi-
equilibrium models are (total) answer sets; (3) If Phas a classical model, then Phas a semi-
equilibrium model. We notice that these conditions can be se en as a view on approximation of
the total stable interpretations alternative to the well-f ounded semantics. We do not aim to have
the last word on which semantics is the most intuitive or desi rable. Instead, we will show here
that semi-equilibrium models can be represented algebraic ally, and thus can be captured within
approximation ﬁxpoint theory. This leaves the choice of exa ct semantics to the user once an ndao
has been deﬁned, and allows the use of the semi-equilibrium s emantics for formalisms other than
nlps, such as disjunctive logic programs with aggregates (s ee below) or conditional ADFs.
Semi-equilibrium models are based on the logic of here-and-there (Pearce 2006). An HT-
interpretation is a pair(x,y)wherex⊆y(i.e. a consistent pair in AFT-terminology). Satisfac-
tion of a formula φ, denoted|=HT, is deﬁned recursively as follows:
•(x,y)|=HTαifα∈xfor anyα∈AP,
•(x,y)|=HT¬φif(y,y)(φ)/\e}a⊔io\slash=T, and(x,y)/\e}a⊔io\slash|=HT⊥,
•(x,y)|=HTφ∧[∨]ψif(x,y)|=HTφand [or](x,y)|=HTψ,
•(x,y)|=HTφ→ψif (a)(x,y)/\e}a⊔io\slash|=HTφor(x,y)|=HTψ, and (b)(y,y)(¬φ∨ψ) =T.
TheHT-models ofPare deﬁned as HT(P) ={(x,y)|∀ψ←φ∈P: (x,y)|=HTφ→ψ}.
Semi-equilibrium models are a special class of HT-models. They are obtained by perform-
ing two minimization steps on the set of HT-models of a program. The ﬁrst step is obtained by
minimizing w.r.t.≤t.11The second step is obtained by selecting the maximal canonical mod-
els. For this, the gapof an interpretation is deﬁned as gap(x,y) =y\x,12and, for any set
of interpretations X, the maximally canonical interpretations aremc(X) ={(x,y)∈X|
/\e}a⊔io\slash∃(w,z)∈X:gap(x,y)⊃gap(w,z)}. The semi-equilibrium models of Pare then deﬁned as:
SEQ(P) =mc(min≤t(HT(P)).
Example 5
11Amendola et al. (2016) proceeds as follows. First, HTκ(P) ={x∪ {Kα|α∈y}}is constructed, and then the
⊆-minimal sets in HTκ(P)are selected. It is straightforward to see that this is equiv alent to minimizing the original
interpretations w.r.t. ≤t.
12Again, Amendola et al. (2016) proceeds in a slightly more con voluted way by deﬁning gap(I) ={Kα∈I|α/ne}a⊔ionslash∈I}
for anyI∈HTκ(P).Non-deterministic AFT 9
We illustrate these semantics with the program P={p←¬p,s∨q←¬s,s∨q←¬q}.
ThenHT(P) ={(x,y)| {p} ⊆y⊆ {p,q,s},x⊆y,{q,s}∩y/\e}a⊔io\slash=∅}. Furthermore,
min≤t(HT(P)) ={(∅,{p,q,s}),({q},{q,p}),({s},{s,p})}. Asgap(∅,{p,q,s}) ={p,q,s}
andgap({q},{q,p})=gap({s},{s,p})={p},SEQ={({q},{q,p}),({s},{s,p})}.
Before we capture the ideas behind this semantics algebraic ally, we look a bit deeper into the
relationship between HT(P)-models and the classical notion of three-valued models of a pro-
gram (see Section 2.1). We ﬁrst observe that HT-models of a program are a proper superset of
the three-valued models of a program:
Proposition 3
Let a disjunctively normal logic program Pand a consistent intepretation (x,y)be given. Then
if(x,y)is a model ofP, it is anHT-model ofP. However, not every HT-model is a model of P.
We now deﬁne the concept of a HT-pair algebraically, inspired by Truszczy´ nski (2006):
Deﬁnition 3
Given an ndaoOapproximating a non-determinstic operator O, a pair(x,y)is aHT-pair (de-
noted(x,y)∈HT(O)) if the following three conditions are satisﬁed: (1) x≤y, (2)O(y)/precedeseq⊓alS
Ly,
and (3)Ol(x,y)/precedeseq⊓alS
Lx.
This simple deﬁnition faithfully transposes the ideas behi ndHT-models to an algebraic con-
text. Indeed, applying it to ICPgives use exactly the HT-models ofP:
Proposition 4
Let some normal disjunctive logic program Pbe given. Then: HT(P) =HT(ICP).
We now show that exact ≤t-minimal HT-models ofOare stable interpretations of Oin our
algebraic setting. The opposite direction holds as well: to tal stable ﬁxpoints are ≤t-minimal HT-
pairs ofO. In fact, every total ﬁxpoint ofOis aHT-pair ofO. We assume thatOisupwards
coherent , i.e. for every x,y∈ L,Ol(x,y)/precedeseq⊓alS
LOu(x,y). In the appendix, we provide more
details on upwards coherent operators. Notice that all ndao s in this paper are upwards coherent.
Proposition 5
Given an upwards coherent ndao O, (1) if(x,x)∈ O(x,x)then(x,x)∈HT(O); and (2)
(x,x)∈min≤t(HT(O))iff(x,x)∈S(O)(x,x).
The second concept that we have to generalize to an algebraic setting is that of maximal
canonical models. Recall that gap(x,y)consists of the atoms which are neither true nor false,
i.e. it can be used as a measure of the informativeness or prec ision of a pair. For the algebraic
generalization of this idea, it is useful to assume that the l attice under consideration admits a
difference for every pair of elements.13In more detail, z∈ L is the difference ofyw.r.t.x
ifz⊓x=⊥andx⊔y=x⊔z. If the difference is unique we denote it by x⊘y. As an
example, note that any Boolean lattice admits a unique diffe rence for every pair of elements. We
can then deﬁne mc(X) = argmin(x,y)∈X{y⊘x}. This allows us to algebraically formulate the
13If a lattice does not admit a difference for some elements, on e cannot characterise the semi-equilibrium semantics
exactly, but can still obtain an approximate characterisat ion. We detail this in the appendix.10 Jesse Heyninck and Bart Bogaerts
semi-equilibrium models of an ndao Oas
SEQ(O) =mc/parenleftbigg
min
≤t(HT(O))/parenrightbigg
The properties mentioned at the start of this section are pre served, and this deﬁnition generalizes
the semi-equilibrium models for disjunctive logic program s by Amendola et al. (2016):
Proposition 6
Let an upwards coherent ndao Oover a ﬁnite lattice be given s.t. every pair of elements
admits a unique difference. Then SEQ(O)/\e}a⊔io\slash=∅. Furthermore, if there is some (x,x)∈
mc(min≤t(HT(O)))thenSEQ(O) ={(x,x)∈L2|(x,x)∈S(O)(x,x)}.
Corollary 1
Let a disjunctively normal logic program Pbe given. ThenSEQ(ICP) =SEQ(P).
In this section, we have shown that semi-equilibrium models can be characterized alge-
braically. This means semi-equilibrium models can now be ob tained for other ndao’s (e.g. those
from Section 5, as illustrated in Appendix C), thus greatly e nlarging the reach of these semantics.
We end this section by making a short, informal comparison be tween the semi-equilibrium
models and the well-founded state for ndaos (Heyninck et al. 2022). Both constructions have a
similar goal: namely, approximate the (potentially non-ex istent) total stable interpretations. In
the case of the semi-equilibrium models, the set of semi-equ ilibrium models coincides with the
total stable interpretations if they exist, whereas the wel l-founded state approximates any stable
interpretation (and thus in particular the total stable int erpretations), but might not coincide with
them. When it comes to existence, we have shown here that the s emi-equilibrium models exist
for any ndao, just like the well-founded state. Thus, the wel l-founded state and semi-equilibrium
models seem to formalize two different notions of approxima tion. Which notion is most suitable
is hard to decide in abstracto but will depend on the exact application context.
5 Application to DLPs with Aggregates
We apply non-deterministic AFT to disjunctive logic progra ms with aggregates by studying three
ndaos: the ultimate, DMT and the trivial operators. We show the latter two generalize the ultimate
semantics (Pelov et al. 2007) respectively the semantics by Gelfond and Zhang (2019).
5.1 Preliminaries on aggregates
We survey the necessary preliminaries on aggregates and the corresponding programs, restricting
ourselves to propositional aggregates and leaving aggrega tes with variables for future work.
A set termSis a set of pairs of the form [t:Conj]withta list of constants and Conj a ground
conjunction of standard atoms For example, [1 :p;2 :q;−1 :r]intuitively assigns 1top,2to
qand−1tor. An aggregate function is of the form f(S)whereSis a set term, and fis an
aggregate function symbol (e.g.#Sum,#Count or#Max). An aggregate atom is an expression
of the form f(S)∗wwheref(S)is an aggregate function, ∗∈{<,≤,≥,>,=}andwis a
numerical constant. We denote by At(f(S)∗w)the atoms occuring in S.Non-deterministic AFT 11
Adisjunctively normal aggregate program consists of rules of the form (where ∆is a set of
propositional atoms, and α1,...,α n,β1,...,β mare aggregate or propositional atoms):
/logicalordisplay
∆←α1,...,α n,¬β1,...,¬βm
An aggregate symbol is evaluated w.r.t. a set of atoms as foll ows. First, let x(S)denote the
multiset[t1|/a\}bracke⊔le{⊔t1,...,tn:Conj/a\}bracke⊔ri}h⊔∈SandConj is true w.r.t. x].x(f(S))is then simply the
result of the application of fonx(S). If the multiset x(S)is not in the domain of f,x(f(s)) =/uprise
where/upriseis a ﬁxed symbol not occuring in P. An aggregate atom f(S)∗wis true w.r.t. x(in
symbols,x(f∗w) =T) if: (1)x(f(S))/\e}a⊔io\slash=/upriseand (2)x(f(S))∗wholds; otherwise, f(S)∗wis
false (in symbols, x(f∗w) =F).¬f(S)∗wis true if: (1) x(f(S))/\e}a⊔io\slash=/upriseand (2)x(f(S))∗w
does not hold; otherwise, ¬f(S)∗wis false. Evaluating a conjunction of aggregate atoms is
done as usual. We can now straightforwardly generalize the i mmediate consequence operator for
disjunctive logic programs to disjunctive aggregate progr ams by generalizing HDPto take into
account aggregate formulas as described above: HDP(x) ={∆|/logicalortext∆←φ∈P,x(φ) =T}.
ICPfrom Deﬁnition 1 is then generalized straightforwardly by s imply using the generalized
HDP. Thus, the only difference with the immediate consequence o perator for dlp’s is that the
set of activated heads HDPnow takes into account the truth of aggregates as well.
The ﬁrst semantics we consider is the one formulated by Gelfo nd and Zhang (2019) (deﬁned
there only for logic programs with aggregates occurring pos itively in the body of a rule):
Deﬁnition 4
Let a disjunctively normal aggregate logic program Ps.t. for every/logicalortext∆←/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj∈ P ,βjis a normal (i.e. non-aggregate) atom. Then the GZ-reduct ofPw.r.t.x
is deﬁned by doing, for every r=/logicalortext∆←/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj∈P, the following: (1) if an
aggregate atom αiis false or undeﬁned for some i= 1,...,n , deleter; (2) otherwise, replace
every aggregate atom αi=f(S)∗wby/uniontext{Conj occurs in S|x(Conj) =T}. We denote the
GZ-reduct ofPbyPx
GZ. Notice that this is a disjunctively normal logic program. A set of atoms
x⊆APis aGZ-answer set ofPif(x,x)is an answer set of Px
GZ.
Example 6
Consider the program P={p←#Sum[1 :p,q]>0;p←#Sum[1 :q]>0;q←#Sum[1 :
s]<1}. We check whether {p,q}is aGZ-answer set as follows:
1. TheGZ-reduct isP{p,q}
GZ={p←p,q;p←q;q←}.In more detail, as{p,q}(#Sum[1 :
p,q]>0) =T, we replace #Sum[1 :p,q]>0in the ﬁrst rule by the atoms in the condition of
this aggregate atom veriﬁed by {p,q}, namelypandq. Similarly for the other rules.
2. As{p,q}(or, to be formally more precise, ({p,q},{p,q})) is a minimal model ofP{p,q}
GZ
({p,q},{p,q}),
we see{p,q}is aGZ-answer set ofP.
We now move to the semantics by Denecker et al. (2002). They ar e deﬁned only for non-
disjunctive aggregate programs. They are deﬁned on the basi s of the ultimate (deterministic)
approximatorICDMT
P (Deﬁnition 2). In more detail, an interpretation (x,y)isDMTd-stable if
and only if (x,y)∈S(ICDMTd
P)(x,y), i.e.x∈lfp(ICDMTd
P(.,y))andy∈lfp(ICDMTd
P(x,.)).
Example 7
Consider the program P={p←#Sum[1 :p]>0;p←#Sum[1 :p]<1}.({p},{p})is an
DMTd-stable model ofP, but the program has no GZ-stable models.12 Jesse Heyninck and Bart Bogaerts
We ﬁrst explain why {p}is not a GZ-stable model. First, we construct P{p}
GZ={p←p}.
Since{p}is not a stable model of P{p}
GZ, we see that{p}is not a GZ-stable model. Likewise,
sinceP∅
GZ={p←∅} , we see that∅is not a stable model of P∅
GZand therefore not GZ-stable.
To see{p}is aDMTd-stable model, observe that ICDMTd,l
P(∅,{p}) =ICDMTd,l
P({p},{p}) =
{p}. Thus,lfp(ICDMTd,l
P(.,{p}) ={p}, i.e.({p},{p}) =S(ICDMTd
P)({p},{p}).
5.2 Non-Deterministic Approximation Operators for Disjun ctive Aggregate Programs
We now proceed to deﬁne ndaos for disjunctive aggregate prog rams. The ﬁrst ndao we consider
generalizes the trivial operator (Pelov et al. 2007), which maps two-valued interpr etations to their
immediate consequences whereas three-valued interpretat ions are mapped to the least precise
pair(∅,AP)(or, in the non-deterministic case, {∅}×{A P}). We also study the ndao ICDMT
P
based on the deterministic ultimate approximation, and the ultimate ndaoICU
P.
Deﬁnition 5
Given a disjunctively normal aggregate program Pand a (consistent) interpretation (x,y), let
ICGZ
P(x,y) =/braceleftBigg
ICP(x)×ICP(x)ifx=y
{∅}×{A P} otherwise
The ndaosICDMT
P andICU
Pare deﬁned exactly the same as in section 3 (recall that ICP(x)
was generalized for aggregates in Section 5.1). We illustra te these semantics with an example:
Example 8
LetP={r∨q←#Sum[1 :s]>0;s←#Sum[1 :r,1 :q]>0}be given.
We ﬁrst look atICGZ
P. As an example of a ﬁxpoint, consider ({r,s},{r,s}). Notice ﬁrst that
#Sum[1 :r,1 :q]>0and#Sum[1 :r,1 :q]>0are true in{r,s}. Thus,HDP={{r,q},{s}}
andICGZ
P({r,s},{r,s}) ={{r,s},{q,s},{r,q,s}}×{{r,s},{q,s},{r,q,s}}.
We now look at the DMT -semantics. For this, we ﬁrst calculate HDPandICPfor all members
of℘({r,q,s})(with∆1={{r},{q},{r,q}}and∆2={{s,r},{s,q},{s,r,q}}):
x∅ {s} {q} {r} {r,q} {r,s} {q,s} {s,q,r}
HDP(x)∅ {{r,q}} {{s}} {{s}} {{s}} {{r,q},{s}} {{r,q},{s}} {{r,q},{s}}
ICP(x){∅}∆1{{s}} {{s}}∆2∆2 ∆2 ∆2
We then see that e.g. ICDMT
P({r,s},{r,s}) ={{r,s},{q,s},{r,q,s}} ×
{{r,s},{q,s},{r,q,s}}whereasICDMT
P(∅,{r,s}) ={∅}×{{r,s},{q,s},{r,q,s}}.
We see thatICU
P({r,s},{r,s}) ={{r,s},{q,s},{r,q,s}}×{{r,s},{q,s},{r,q,s}}
whereasICU
P(∅,{r,s}) =℘({r,s,q})×℘({r,s,q}).
We now show that these operators are approximation operator s with increasing orders of pre-
cision:ICGZ
Pis the least precise, ICDMT
P holds a middle ground and ICUis the most precise:
Proposition 7Non-deterministic AFT 13
Let someξ∈ {DMT,GZ,U}and a disjunctively normal aggregate logic program Pbe
given. ThenICξ
P(x,y)is an ndao approximating ICP. For any (x,y),ICGZ
P(x,y)/precedeseq⊓alA
i
ICDMT
P(x,y)/precedeseq⊓alA
iICU
P(x,y).
The following properties follow from the general propertie s shown by Heyninck et al. (2022):
Proposition 8
Let someξ∈{DMT,GZ,U}and a disjunctively normal aggregate logic program Pbe given.
Then: (1)S(ICǫ
P)(x,y)exists for any x,y⊆AP, and (2) every stable ﬁxpoint of ICǫ
Pis a
≤t-minimal ﬁxpoint of ICǫ
P.
The ndaoICGZ
Ponly admits two-valued stable ﬁxpoints, and these two-valu ed stable ﬁxpoints
generalize the GZ-semantics (Gelfond and Zhang 2019):
Proposition 9
If(x,y)∈min≤t(ICGZ
P(x,y))thenx=y. Let a disjunctively normal aggregate aggregate logic
programPs.t. for every/logicalortext∆←/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj∈P ,βiis a normal atom be given.
(x,x)∈S(ICGZ
P)(x,x)iffxis aGZ-answer set ofP.
We ﬁnally show that stable semantics based on ICDMT
P generalize those for non-disjunctive
logic programs with aggregates by Denecker et al. (2002).
Proposition 10
Let a non-disjunctive logic program Pbe given. Then (x,y)is a stable model according to
Denecker et al. (2002) iff (x,y)∈S(ICDMT
P)(x,y).
We have shown how semantics for disjunctive aggregate logic programs can be obtained using
the framework of non-deterministic AFT, solving the open qu estion (Alviano et al. 2023) of how
operator-based semantics for aggregate programs can be gen eralized to disjunctive programs.
This means AFT can be unleashed upon disjunctive aggregate p rograms, as demonstrated in this
paper, as demonstrated in this section. Other semantics, su ch as the weakly supported seman-
tics, the well-founded state semantics (Heyninck et al. 202 2) and semi-equilibrium semantics
(Section 4, as illustrated in Appendix C) are obtained witho ut any additional effort and while
preserving desirable properties shown algebraically for n daos. None of these semantics have,
to the best of our knowledge, been investigated for dlp’s wit h aggregates. Other ndao’s, left for
future work, can likely be obtained straightforwardly on th e basis of deterministic approxima-
tion operators for aggregate programs that we did not consid er in this paper (e.g. the operator
deﬁned by Vanbesien et al. (2021) to characterise the semant ics of Marek and Remmel (2004) or
the bounded ultimate operator introduced by Pelov and Trusz czynski (2004)).
6 Conclusion, in view of related work
In this paper, we have made three contributions to the theory of non-deterministic AFT: (1) deﬁ-
nition of the ultimate operator, (2) an algebraic generaliz ation of the semi-equilibrium semantics
and (3) an application of non-deterministic AFT to DLPs with aggregates in the body. To the best
of our knowledge, there are only a few other semantics that al low for disjunctive rules with aggre-
gates. Among the best-studied is the semantics by Faber et al . (2004) (so-called FLP-semantics).
As the semantics we propose generalize the operator-based s emantics for aggregate programs14 Jesse Heyninck and Bart Bogaerts
without disjunction, the differences between the FLP-semantics and the semantics proposed here
essentially generalize from the non-disjunctive case (see e.g. (Alviano et al. 2023)).
Among the avenues for future work, an in-depth analysis of th e computational complexity of
the semantics proposed in this paper seems to be among the mos t pressing of questions. Other
avenues of future work include the generalisation of the con structions in Section 5 to other se-
mantics (Vanbesien et al. 2021; Alviano et al. 2023) and deﬁn ing ndaos for rules with choice
constructs in the head (Marek et al. 2008), which can be seen a s aggregates in the head.
References
ALCˆANTARA , J., D AM´ASIO , C. V., AND PEREIRA , L. M. A well-founded semantics with disjunction. In
Proceedings of ICLP’05 2005, pp. 341–355. Springer.
ALVIANO , M., F ABER , W., AND GEBSER , M. 2023. Aggregate semantics for propositional answer set
programs. Theory and Practice of Logic Programming ,23, 1, 157–194.
AMENDOLA , G., E ITER , T., F INK, M., L EONE , N., AND MOURA , J. 2016. Semi-equilibrium models for
paracoherent answer set programs. Artiﬁcial Intelligence ,234, 219–271.
BOGAERTS , B. 2015. Groundedness in logics with a ﬁxpoint semantics . PhD thesis, Informatics Section,
Department of Computer Science, Faculty of Engineering Sci ence.
BOGAERTS , B. Weighted abstract dialectical frameworks through the l ens of approximation ﬁxpoint theory.
InProceedings of AAAI’19 2019, volume 33, pp. 2686–2693.
DENECKER , M., M AREK , V., AND TRUSZCZY ´NSKI , M. Approximations, stable operators, well-founded
ﬁxpoints and applications in nonmonotonic reasoning. In Logic-based Artiﬁcial Intelligence 2000, vol-
ume 597 of Engineering and Computer Science , pp. 127–144. Springer.
DENECKER , M., M AREK , V. W., AND TRUSZCZYNSKI , M. Ultimate approximations in nonmonotonic
knowledge representation systems. In Proceedings of KR’02 2002, pp. 177–190.
FABER , W., L EONE , N., AND PFEIFER , G. Recursive aggregates in disjunctive logic programs: Se mantics
and complexity. In Proceedings of JELIA’04 2004, volume 3229 of LNCS , pp. 200–212. Springer.
FERN ´ANDEZ , J. A. AND MINKER , J. 1995. Bottom-up computation of perfect models for disju nctive
theories. The Journal of logic programming ,25, 1, 33–51.
GELFOND , M. AND ZHANG , Y. 2019. Vicious circle principle, aggregates, and format ion of sets in asp
based languages. Artiﬁcial Intelligence ,275, 28–77.
HEYNINCK , J., A RIELI , O., AND BOGAERTS , B. 2022. Non-deterministic approximation ﬁxpoint theory
and its application in disjunctive logic programming. arXiv preprint arXiv:2211.17262 ,.
MAREK , V. W., N IEMEL ¨A, I., AND TRUSZCZYNSKI , M. 2008. Logic programs with monotone abstract
constraint atoms. Theory Pract. Log. Program. ,8, 2, 167–199.
MAREK , V. W. AND REMMEL , J. B. Set constraints in logic programming. In Logic Programming and
Nonmonotonic Reasoning: 7th International Conference, LP NMR 2004 Fort Lauderdale, FL, USA, Jan-
uary 6-8, 2004 Proceedings 7 2004, pp. 167–179. Springer.
PEARCE , D. 2006. Equilibrium logic. Annals of Mathematics and Artiﬁcial Intelligence ,47, 1, 3–41.
PELOV , N., D ENECKER , M., AND BRUYNOOGHE , M. 2007. Well-founded and stable semantics of logic
programs with aggregates. Theory and Practice of Logic Programming ,7, 3, 301–353.
PELOV , N. AND TRUSZCZYNSKI , M. Semantics of disjunctive programs with monotone aggreg ates: an
operator-based approach. In Proceedings of NMR’04 2004, pp. 327–334.
TRUSZCZY ´NSKI , M. 2006. Strong and uniform equivalence of nonmonotonic th eories–an algebraic ap-
proach. Annals of Mathematics and Artiﬁcial Intelligence ,48, 3, 245–265.
VAN EMDEN , M. H. AND KOWALSKI , R. A. 1976. The semantics of predicate logic as a programmin g
language. Journal of the ACM ,23, 4, 733–742.
VANBESIEN , L., B RUYNOOGHE , M., AND DENECKER , M. 2021. Analyzing semantics of aggregate an-
swer set programming using approximation ﬁxpoint theory. arXiv preprint arXiv:2104.14789 ,.Non-deterministic AFT 15
Appendix A Proofs of Results in the Paper
Proof of Proposition 1
It is immediate to see that OUis exact and approximates O(as/uniontext
x≤z≤xO(z) =O(x)). We now
show it is/precedeseq⊓alA
i-monotonic. For this, consider some (x1,y1)≤i(x2,y2). Then[x1,y1]⊇[x2,y2]
and thus/uniontext
x1≤z≤y1O(z)⊇/uniontext
x2≤z≤y2O(z)which impliesOU
l(x1,y1)/precedeseq⊓alS
LOU
l(x2,y2). The
case for the upper bound is entirely identical.
We now show that any ndao Othat approximates Obe given and for every x,y∈ L s.t.
x≤y,O(x,y)/precedeseq⊓alA
iOU(x,y). Indeed, consider an operator Othat approximates Oand some
x,y∈L s.t.x≤y. Consider some w∈OU
l(x,y), i.e.w∈O(z)for somez∈[x,y]. Since
x≤z≤y,(x,y)≤i(z,z)and thusO(x,y)/precedeseq⊓alA
iO(z,z)(with/precedeseq⊓alA
i-monotonicity) which
meansOl(x,y)/precedeseq⊓alS
LOl(z,z) =O(z)(the latter equality since Oapproximates O) and thus,
in particular,Ol(x,y)/precedeseq⊓alS
L{w}. Likewise, to show that OU
l(x,y)/precedeseq⊓alH
LOu(x,y), it sufﬁces to
observe that, since O(x,y)/precedeseq⊓alA
iO(z,z),O(z)/precedeseq⊓alH
LOu(x,y).
Proof of Proposition 3
suppose(x,y)is a model ofPand consider some/logicalandtextΘ1∪Θ2→/logicalortext∆∈P (whereΘ1consists
of atoms and Θ2consists of negated atoms). We ﬁrst show that (y,y)(¬/logicalandtextΘ1∪Θ2∨/logicalortext∆) =T.
To see this, suppose that (y,y)(/logicalandtextΘ1∪Θ2) =T. Then(x,y)(/logicalandtextΘ1∪Θ2)∈{T,U}and thus,
since(x,y)is a model ofP,(x,y)(/logicalortext∆)∈{T,U}which implies (y,y)(/logicalortext∆) =T. We now
show(x,y)/\e}a⊔io\slash|=HT/logicalandtextΘ1∪Θ2or(x,y)|=HT/logicalortext∆. Indeed, suppose that (x,y)/\e}a⊔io\slash|=HT/logicalandtextΘ1∪Θ2,
i.e.Θ1⊆xand for every¬α∈Θ2,α/\e}a⊔io\slash∈y. Thus,(x,y)(/logicalandtextΘ1∪Θ2=Twhich implies, since
(x,y)is a model ofP,(x,y)(/logicalortext∆) =T, i.e.x∩∆/\e}a⊔io\slash=∅. Thus,(x,y)|=HT/logicalortext∆.
To see that the inclusion can be proper, consider P={b←¬c}. Then(∅,{c})∈HT(P)as
{c}does not classically entail ¬c. However, (∅,{c})(¬c) =Uwhereas(∅,{c})(b) =Fand thus
(∅,{c})is not a model ofP.
Proof of Proposition 4
Proposition 4 follows from the following Lemma:
Lemma 11
For consistent (x,y),ICl
P(x,y)/precedeseq⊓alS
L(x,y)iff(x,y)/\e}a⊔io\slash|=HT/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βjor(x,y)|=HT/logicalortext∆for any/logicalortext∆←/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj∈P.
Proof
For the⇐-direction, suppose ICl
P(x,y)/precedeseq⊓alS
L(x,y)and consider some/logicalortext∆←/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj∈P. Suppose that (x,y)|=HT/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj, i.e.αi∈xfor every 1≤i≤n
andβ/\e}a⊔io\slash∈yfor every 1≤j≤m. Then(x,y)(/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj) =T(sincex⊆y,
(x,y)(/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj) =Cis excluded as (x,y)is consistent) and thus ∆∈HDl
P(x,y),
which means, since ICl
P(x,y)/precedeseq⊓alS
L(x,y), there is some (w,z)∈ICl
P(x,y)s.t.∆∩w/\e}a⊔io\slash=∅and
w⊆x, i.e.(x,y)|=HT/logicalortext∆. The⇒-direction is analogous.
Proof of Proposition 5
Ad (1). We will make use of the following Lemma:
Lemma 12 (Heyninck et al. (2022) )16 Jesse Heyninck and Bart Bogaerts
LetO:L→℘(L)be a/precedeseq⊓alS
L-monotonic non-deterministic operator. Then if wis a≤-minimal
pre-ﬁxpoint of O, it is a≤-minimal ﬁxpoint of O.
We now proceed to the proof of the proposition. We ﬁrst show th atmin≤t(HT(O))⊆
S(O)(x,x). Suppose (x,x)∈min≤t(HT(O)).
We ﬁrst show that x∈C(Ol)(x). AsOl(x,x)/precedeseq⊓alS
tx, i.e.xis a pre-ﬁxpoint of Ol(.,x).
Suppose towards a contradiction that there is some z < x s.t.Ol(z,x)/precedeseq⊓alS
tz. Then(z,x)∈
HT(O), contradicting (x,x)∈min≤t(HT(O)). Thus,xis a≤-minimal preﬁxpoint, and thus,
with Lemma 12, xis a≤-minimal ﬁxpoint of Ol(.,x), which implies x∈C(Ol)(x).
We now show that x∈C(Ou)(x). AsOl(x,x) =Ou(x,x)(since an ndaoOis exact),
x∈Ou(x,x). Suppose now towards a contradiction there is some y < x s.t.y∈Ou(x,y). As
Ois upwards coherent, Ol(x,y)/precedeseq⊓alS
LOu(x,y)which implies that there is some y′∈Ou(x,y),
i.e.Ou(x,y)/precedeseq⊓alS
L{y′}/precedeseq⊓alS
L{y}, i.e.y, which contradicts (x,x)∈min≤t(HT(O)).
We now show that min≤t(HT(O))⊇S(O)(x,x). Suppose (x,x)∈S(O)(x,x)and suppose
towards a contradiction there is some (w,z)∈HT(O)s.t.w≤xandz≤x, and either
z/\e}a⊔io\slash=xorw/\e}a⊔io\slash=x. Suppose ﬁrst the latter. Then Ol(w,z)/precedeseq⊓alS
Lwand thuswis a pre-ﬁxpoint of
Ol(w,z). Sincez≤x,O(w,x)/precedeseq⊓alS
LO(w,z)and thusOl(w,x)/precedeseq⊓alS
Lw, i.e.wis a pre-ﬁxpoint of
Ol(.,x). But this contradicts xbeing a minimal ﬁxpoint of Ol(.,x)(with Lemma 12). Suppose
nowz≤x. In view of the previous case, we can assume w=x. But then (w,z)∈HT(O)
contradictsz≤x=w, contradiction.
Ad (2). Since (x,x)∈ O(x,x),x∈ Ol(x)and thusOl(x,x)/precedeseq⊓alS
Lx. SinceO(x,x) =
O(x)×O(x), alsoO(x)/precedeseq⊓alS
Lx.
Proof of Proposition 6
We ﬁrst recall some background from Heyninck et al. (2022).
Deﬁnition 6
A non-deterministic operator O:L→℘(L)isdownward closed if for every sequence X=
{xǫ}ǫ<αof elements inLsuch that:
1. for every ǫ<α ,O(xǫ)/precedeseq⊓alS
L{xǫ}, and
2. for every ǫ<ǫ′<α,xǫ′<xǫ,
it holds that O(glb(X))/precedeseq⊓alS
Lglb(X).
It is clear that an operator over a ﬁnite lattice is always dow nwards closed. We now recall the
following result from Heyninck et al. (2022):
Proposition 13
LetL=/a\}bracke⊔le{⊔L,≤/a\}bracke⊔ri}h⊔be a lattice and let a O:L→℘(L)be a downward closed, /precedeseq⊓alS
L-monotonic
non-deterministic operator. Then Oadmits a≤-minimal ﬁxpoint.
This means thatOl(.,⊤)admits a≤-minimal ﬁxpoint for any operator over a ﬁnite lattice (as
it is/precedeseq⊓alS
L-monotonic in view of (Heyninck et al. 2022, Lemma 3). Let xbe such a ﬁxpoint. Then
x≤⊤,O(⊤)/precedeseq⊓alS
L⊤andO(x,y)/precedeseq⊓alS
Lx, i.e.(x,⊤)∈HT(O)and thusSEQ(O)/\e}a⊔io\slash=∅.
We now show that (x,x)∈mc(min≤t(HT(O)implies(x,x)∈S(O)(x,x). Indeed, as
x⊘x=⊥,(x1,y1)∈mc(min≤t(HT(O)iffx1⊘y1=⊥, which implies x1=y1. The
rest follos from Proposition 5.Non-deterministic AFT 17
Proof of Proposition 7
We ﬁrst show the ﬁrst item. The case for ξ=Ufollows from Proposition 1. The case for
ξ=DMT is the same as the case for disjunctive logic programs withou t aggregates (Proposition
3 of Heyninck et al. (2022)). For ξ=GZ, we ﬁrst show/precedeseq⊓alA
i-monotonicity. For this, consider
some(x1,y1)≤i(x2,y2). Ifx1/\e}a⊔io\slash=y1we are done. Suppose thus that x1=y1. But thenx1⊆x2
andy2⊆y1impliesx1=x2=y1=y2which meansICGZ
P(x1,y1) =ICGZ
P(x2,y2). Exactness
is clear, and so is the fact that ICξ
P(x,y)approximates ICP(asHDξ
P(x,x) =HDP(x,x).
We now show the second item. From Proposition 1, it follows th atICDMT
P(x,y)/precedeseq⊓alA
i
ICU
P(x,y). We now show that ICGZ
P(x,y)/precedeseq⊓alA
iICDMT
P(x,y). We ﬁrst consider the case x/\e}a⊔io\slash=y.
ThenICGZ
P(x,y) ={∅}×{A P}and we are done. If x=y,ICGZ
P(x,y) =ICDMT
P(x,y) =
ICP(x,x)×ICP(x,x)as both operators approximate ICP.
Proof of Proposition 9
The ﬁrst item is immediate from the fact that ICGZ
P(x,y) = (∅,AP)ifx/\e}a⊔io\slash=y.
We ﬁrst show the following useful Lemma:
Lemma 14
Let somey⊆x⊆APbe given. ThenICGZ,l
P(y,x)/precedeseq⊓alS
Lyiffyis a model ofPx
GZ
x.
Proof
For the⇐-direction, suppose ICGZ,l
P(y,x)/precedeseq⊓alS
Ly. Consider some/logicalortext∆←/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj∈
Ps.t. for every aggregate atom αi,x(αi) =T. Suppose furthermore βj/\e}a⊔io\slash∈x. Thus,
(y,x)(/logicalandtextm
j=1¬βj) =T. Letf(αi) =αiifαiis not an aggregate atom, and f(αi) =/uniontext{ψ⊆
Conj|x(ψ) =T}ifαi=f(/a\}bracke⊔le{⊔Vars:Conj/a\}bracke⊔ri}h⊔)∗w. Suppose that y(f(αi)) =Tfor
every1≤i≤n. This means that At(αi)∩y⊇At(αi)∩xand thus, since y⊆x,
At(αi)∩y=At(αi)∩x. Thus (in view of x(αi) =T,(x,y)|=GZαifor every 1≤i≤nand
thus∆∈HDGZ,l
P, which means y∩∆/\e}a⊔io\slash=∅(asICGZ,l
P(y,x)/precedeseq⊓alS
Ly).
For the⇒-direction, suppose yis a model ofPx
GZ
x. We show that for every/logicalortext∆←/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj∈P s.t.(y,x)|=GZ/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj,∆∩y/\e}a⊔io\slash=∅. Indeed, suppose that (y,x)|=GZ/logicalandtextn
i=1αi∧/logicalandtextm
j=1¬βj. This implies, (1) βj/\e}a⊔io\slash∈xfor any1≤j≤m, and (2)(y,x)|=GZαifor
every1≤i≤n. (2) means, in particular, that x(αi) =TandAt(αi)∩x=At(αi)∩y(for
i= 1,...,n ). Thus,/logicalortext∆←/logicalandtextn
i=1f(αi)∈Px
GZ(wheref(αi)is deﬁned as in the proof of the
⇐-direction). But then, since yis a model ofPx
GZ
x,y∩∆/\e}a⊔io\slash=∅.
We will furthermore use the following Lemma:
Lemma 15 (Heyninck et al. (2022) )
LetO:L→℘(L)be a/precedeseq⊓alS
L-monotonic non-deterministic operator. Then if wis a≤-minimal
ﬁxpoint ofO, it is a≤-minimal pre-ﬁxpoint of O.
For the⇒-direction, suppose (x,x)∈S(ICGZ
P)(x,x), i.e.xis a⊆-minimal ﬁxpoint of
ICGZ,l
P(.,x). We show that xis an answer set of Px
GZ. With Lemma 14, xis a model ofPx
GZ
x.
Suppose now there is some y⊂xs.t.yis a model ofPx
GZ
x. Then, again with Lemma 14,
ICGZ,l
P(y,x)/precedeseq⊓alS
Ly, i.e.yis a pre-ﬁxpoint of ICGZ,l
P(.,x). But sincexis a minimal ﬁxpoint
ofICGZ,l
P(.,x), with Lemma 15, xis a⊆-minimal pre-ﬁxpoint, contradiction.
For the⇐-direction, suppose that xis a GZ-answer set ofP. Then with Lemma 14,
ICGZ,l
P(x,x)/precedeseq⊓alS
Lx. Suppose that there is some y⊂xs.t.ICGZ,l
P(y,x)/precedeseq⊓alS
Ly. Then, again18 Jesse Heyninck and Bart Bogaerts
with Lemma 14, yis a model ofPx
GZ
x, contradiction. Thus, xis a⊆-minimal pre-ﬁxpoint of
ICGZ,l
P(.,x), which means, with Lemma 12, that xis a minimal ﬁxpoint of ICGZ,l
P(.,x), and thus
(x,x)∈S(ICGZ,l
P)(x,x).
Proof of Proposition 10
This is immediate from the deﬁnition of ICDMT
P.
Appendix B Addition Details for Section 4
B.1 On the Absence of the Upper Bound in HT-pairs and Upwards- Coherence
The reader might be suprised by the fact that only the lower bo undOloccurs in the deﬁnition
of aHT-pair. The reason is that HT-pairs have only been used in results relative to total stabl e
interpretations. For such interpretations, the exact form of the upper bound-operator is inconse-
quential as long as it extends the lower bound-operator. We c all such ndaos upwards coherent (as
already deﬁned in the main paper, and recalled here):
Deﬁnition 7
An ndaoOoverLis upwards coherent if for every x,y∈L,Ol(x,y)/precedeseq⊓alS
LOu(x,y).
Thus, an ndaoOis upwards coherent if for every upper bound y1∈Ou(x,y), there is a lower
boundx1∈ Ol(x,y)s.t.x1≤y1. This property was shown to hold for symmetric ndaos
(Heyninck et al. 2022, Proposition 5). However, there also e xist non-symmetric upwards coher-
ent operators. The operator ICDMTd
P is a case in point.
Proposition 16
ICDMT
P is upwards coherent.
Proof
This is immediate from the observation that if φis true in every interpretation x⊆z⊆y, thenφ
is true in at least one interpretation x⊆z⊆y
Proposition 17
Let an upwards coherent ndao Obe given. Then (x,x)∈S(O)(x,x)iffx∈C(Ol)(.,x).
Proof
The⇒-direction is immediate. Consider now an upwards coherent n daoOand suppose x∈
C(Ol)(x). With Lemma 15, this means that xis a minimal pre-ﬁxpoint of Ol(.,x). We have to
show thatx∈C(Ou)(x). First, notice that since Ois an ndao,Ol(x,x) =O(x)×O(x) =
Ou(x,x), which implies x∈Ou(x,x). Suppose now towards a contradiction that there is some
y < x s.t.y∈Ou(x,y). AsOl(x,.)is/precedeseq⊓alS
L-anti-monotonic ((Heyninck et al. 2022, Lemma 3)),
Ol(x,x)/precedeseq⊓alS
LOl(x,y), which implies there is some y′∈Ol(x,x)s.t.y′≤y(and thusy′<x).
AsOl(.,x)is/precedeseq⊓alS
L-monotonic ((Heyninck et al. 2022, Lemma 3)), Ol(y′,x)/precedeseq⊓alS
LOl(x,x). As
y′∈Ol(x,x), we see thatOl(y′,x)/precedeseq⊓alS
Ly′, which means that y′is a pre-ﬁxpoint of Ol(.,x). But
this contradicts xbeing a minimal pre-ﬁxpoint.Non-deterministic AFT 19
B.2 Semi-Equilibrium Semantics for Lattices without Diffe rence Operators
In this section, we look closer into the characterisation of the semi-equilibrium semantics for
operators over lattices without a difference operator. We ﬁ rst look closer into the relation between
the gap of an interpretation and the information ordering ≤iis therefore not unexpected:
Proposition 18
Given two consistent interpretations (x1,y1)and(x2,y2), if(x2,y2)≤i(x1,y1)then
gap(x1,y2)⊆gap(x2,y2), but not vice versa.
Proof
Suppose(x2,y2)≤i(x1,y1). Thenx2⊆x1⊆y1⊆x2and thusy1\x1⊆y2\x2. which
impliesgap(x1,y1)⊆gap(x2,y2).
The other direction might not hold, as two interpretations ( e.g.({r},{r,q})and({p},{p}))
might have a comparable gap (e.g. gap(({r},{r,q})) ={q}⊃gap(({p},{p}))) but be incom-
parable w.r.t.≤i.
We can now show that semi-equilibrium models can be approxim ated algebraically:
Corollary 2
Let a normal disjunctive logic program Pbe given. Then
max
≤i/parenleftbigg
min
≤t(HT(ICP)/parenrightbigg
⊇SEQ(P).
The properties deemed desirable by Amendola et al. (2016) ho ld for this algebraic generalisa-
tion in the following sense (for ﬁnite lattices):
Proposition 19
Let an ndaoOover a ﬁnite lattice be given. Then
max
≤i/parenleftbigg
min
≤t(HT(O))/parenrightbigg
/\e}a⊔io\slash=∅.
Furthermore, for any stable ﬁxpoint (x,x)ofO,(x,x)∈max≤i(min≤t(HT(O))), and for any
(x,x)∈max≤i(min≤t(HT(O))),(x,x)is a stable ﬁxpoint.
Proof
The proof is entirely analogous to the proof of Proposition 6 .
Appendix C Semi-Equilibrium Semantics for Disjunctive Agg regate Programs
In this appendix, we show some basic results on semi-equilib rium semantics induced by the
operators from Section 5, and illustrate these semantics wi th an example.
We ﬁrst show the following lemma which establishes that the t hree operatorsICGZ
P,ICDMT
P
andICU
Pdeﬁned in Section are upwards coherent:
Lemma 20
For any†∈{GZ,DMT,Uand any disjunctive aggregate program P,IC†
Pis upwards coherent,
that is,IC†
l,P(x,y)/precedeseq⊓alSIC†
u,P(x,y)for anyx⊆AP.20 Jesse Heyninck and Bart Bogaerts
Proof
To see thatICGZ
Pis upwards coherent, it sufﬁces to observe that either ICGZ
l,P(x,y) =ICGZ
u,P(x,y)
(whenx=y) or={∅}=IC†
l,P(x,y)/precedeseq⊓alSIC†
u,P(x,y) ={AP}(whenx/\e}a⊔io\slash=y).
We now show that ICDMT
P is upwards coherent. We ﬁrst show that HDDMT
l,P(x,y)⊆
HDDMT
u,P(x,y)for anyx⊆y⊆AP. Indeed, if ∆∈HDDMT
l,P(x,y), then for every x⊆z⊆y,
there is some/logicalortext∆←φ∈P s.t.z(φ) =T. Thus, there is some x⊆z⊆yand some/logicalortext∆←
φ∈P s.t.z(φ) =Tand thus∆∈HDDMT
u,P(x,y). We now showICDMT
l,P(x,y)/precedeseq⊓alSICDMT
u,P(x,y).
Indeed, consider some y1∈ICDMT
u,P(x,y). It is easy to see that y1∩/uniontextHDDMT
l,P(x,y)∈DMT
l,P(x,y)
asy1⊆HDDMT
u,P(x,y)and we have shown above that HDDMT
l,P(x,y)⊆HDDMT
u,P(x,y).
Finally,ICUis clearly upwards coherent as for any x⊆y⊆AP,ICU
l,P(x,y) =ICU
u,P(x,y).
We can now show that the semi-equilibrium semantics based on the ndao’s from Section 5
satisfy all properties deemed desirable by Amendola et al. ( 2016):
Proposition 21
For any†∈{GZ,DMT,U}and any disjunctively normal logic program P,SEQ(IC†
P)/\e}a⊔io\slash=∅.
Furthermore, if there is some (x,x)∈S(IC†
P)))thenSEQ(IC†
P) ={(x,x)∈L2|(x,x)∈
S(IC†
P)(x,x)}.
Proof
Follows immediately from Lemma 20 and Proposition 6.
In particular, this means that whenever Padmits aGZ-answer set,SEQ(ICGZ
P)coincides with
theGZ-answer sets (and similarly for DMT andU).
We now illustrate these semantics with an example:
Example 9 (Example 8 continued )
LetP={p∨q←#Sum[1 :p,1 :q]<0;s←#Sum[1 :p,1 :q]<0}be given.
We ﬁrst determine the heads and immediate consequences of al l relevant interpretations:
x∅ { s} { q} {p} {p,q} {p,s} {q,s} {s,q,p}
HDP(x){{p,q},{s}} {{p,q},{s}} ∅ ∅ ∅ ∅ ∅ ∅
ICP(x)∆1 ∆1{∅} {∅} {∅} {∅} {∅} {∅}
where∆1={{p,s},{q,s},{p,q,s}}.
We now determine the HT-interpretations of the respective ndao’s:
•HT(ICGZ
P) ={(x,y)|x⊆y⊆AP,y/\e}a⊔io\slash∈{∅,{s}}and(x/\e}a⊔io\slash=yorx/\e}a⊔io\slash=∅,{s})}.
•HT(ICGZ
P) ={(x,y)|x⊆y⊆AP,y/\e}a⊔io\slash∈{∅,{s}}}.
•HT(ICGZ
P) ={(x,y)|x⊆y⊆AP,y/\e}a⊔io\slash∈{∅,{s}}}.
Notice that, among others, (∅,{p}),(∅,{q})∈HT(IC†
P)while(∅,∅),(∅,{s})/\e}a⊔io\slash∈HT(IC†
P)
for any†∈{GZ,DMT,U}. We thus see that min≤t(HT(IC†
P) ={(∅,{p}),(∅,{q})}and that
SEQ(IC†
P) ={(∅,{p}),(∅,{q})}(again for any†∈{GZ,DMT,U}).Non-deterministic AFT 21
Appendix D Summary of Notational Conventions and Deﬁnition s
Elements Notations Example
Elements ofL x,y,... x,y
Sets of elements of L X,Y,... {x1,y1,x2,y2}
Table D 1: List of the notations of different types of sets use d in this paper
Preorder Type Deﬁnition
Element Orders
≤ L primitive
≤iL2×L2(x1,y1)≤i(x2,y2)iffx1≤x2andy1≥y2
≤tL2×L2(x1,y1)≤t(x2,y2)iffx1≤x2andy1≤y2
Set-based Orders
/precedesequalS
L ℘(L)×℘(L) X/precedesequalS
LYiff for everyy∈Ythere is anx∈Xs.t.x≤y
/precedesequalH
L ℘(L)×℘(L) X/precedesequalH
LYiff for everyx∈Xthere is any∈Ys.t.x≤y
/precedesequalA
i ℘(L)2×℘(L)2(X1,Y1)/precedesequalA
i(X2,Y2)iffX1/precedesequalS
LX2andY2/precedesequalH
LY1
Table D 2: List of the preorders used in this paper.
Operator Notation Type
Non-deterministic operator OL/mapsto→℘(L)
Non-deterministic approximation operator O L2/mapsto→℘(L)×℘(L)
Stable operator S(O)L2/mapsto→℘(L)×℘(L)
Ultimate operator OUL2/mapsto→℘(L)×℘(L)
Table D 3: List of the operators used in this paper.22 Jesse Heyninck and Bart Bogaerts
Immediate Consequence Operator for dlp’s
HDP(x) = {∆|/logicalortext∆←ψ∈P and(x,x)(ψ) =T},
ICP(x) = {y⊆/uniontextHDP(x)|∀∆∈HDP(x), y∩∆/ne}ationslash=∅}.
NdaoICPfor disjunctive logic programs
HDl
P(x,y) ={∆|/logicalortext∆←φ∈P,(x,y)(φ)≥tC},
HDu
P(x,y) ={∆|/logicalortext∆←φ∈P,(x,y)(φ)≥tU},
IC†
P(x,y) = {x1⊆/uniontextHD†
P(x,y)|∀∆∈HD†
P(x,y), x1∩∆/ne}ationslash=∅}(for†∈{l,u}),
ICP(x,y) = ( ICl
P(x,y),ICu
P(x,y)).
NdaoICDMT
P based on the deterministic ultimate approximation
HDDMT,l
P(x,y) =/intersectiontext
x⊆z⊆yHDP(z),
HDDMT,u
P(x,y) =/uniontext
x⊆z⊆yHDP(z)},
ICDMT,†
P(x,y) ={z⊆/uniontextHDDMT,†
P(x,y)|∀∆∈HDDMT,†
P(x,y)/ne}ationslash=∅:z∩∆/ne}ationslash=∅}.
Ultimate ndaoICU
P
ICU
P(x,y) =/uniontext
x⊆z⊆yICP(z)×/uniontext
x⊆z⊆yICP(z)
Trivial ndaoICGZ
P
ICGZ
P(x,y) =/braceleftBigg
ICP(x)×ICP(x)ifx=y
{∅}×{A P} otherwise
Table D 4: Concrete Operators for Disjunctive (Aggregate) L ogic Programs