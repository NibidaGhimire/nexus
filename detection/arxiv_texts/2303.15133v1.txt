Wiki Workshop (10th edition) – May 11, 2023
Synia: Displaying data from Wikibases
Finn Årup Nielsen
Technical University of Denmark
Abstract
I present an agile method and a tool to dis-
play data from Wikidata and other Wikibase
instances via SPARQL queries. The work-in-
progress combines ideas from the Scholia Web
application and the Listeria tool.
Keywords: Wikidata, Wikibase, SPARQL
Introduction
Scholia is a Web application running from the Wikime-
dia Foundation Toolforge server at http://scholia.
toolforge.org . It displays data from Wikidata
via SPARQL queries to the Wikidata Query Service
(WDQS), particularly showing metadata about scientiﬁc
publications (Nielsen et al., 2017), chemical informa-
tion (Willighagen et al., 2018), and software (Rasberry
and Mietchen, 2022). The Web application is imple-
mented with the Python Flask framework and SPARQL
templates are deﬁned with Jinja2 templates that are read
during the application startup and interpolated based on
the Scholia user browsing. Two other tools use a sim-
ilar Flask/SPARQL template approach to display Wiki-
data data: Ordia is specialized for the lexicographic part
of Wikidata (Nielsen, 2019) and CVRminer /one.supon Dan-
ish companies. Common limitations for these tools are
currently
1. ThetoolsareboundtotheWikidataWDQSendpoint
2. The language is ﬁxed to English
3. Developmentofnewpanelsandaspectsrequiresthe
involvement of software developers.
For Magnus Manske’s Listeria tool, wiki editors de-
ﬁne MediaWiki templates with SPARQL queries on
wikipages. The Listeria bot then edits on behalf of the
userandgeneratetablesonthewikipageaccordingtothe
SPARQL query. /two.sup
The approach I will describe here was ﬁrst explored
in a speciﬁc instance of a Wikibase for data related to
environmental impact assessment reports (Nielsen et al.,
/one.suphttps://cvrminer.toolforge.org/ .
/two.suphttps://listeria.toolforge.org/ .2023). In this abstract, I describe the extension of the
approach, so it can be used more widely with only slight
changes in conﬁgurations in and across diﬀerent Wiki-
bases, — including Wikidata.
Methods
I call the tool Syniawith the canonical homepage set
up at https://synia.toolforge.org/ . The imple-
mentation is a serverless single-page application (SPA)
consistingofasimpleHTMLpageandsomeJavaScript.
Instead of storing the SPARQL templates along with the
Web application, the templates are stored on wikipages.
The URL pattern of Scholia is borrowed and changed
to use URI fragments to control which wikipage should
be read and what values should be interpolated in the
template. Table 1 shows some of the mapping be-
tween the URI fragment and the wikipage. A pseudo-
namespace, Wikidata:Synia, is used as the default for
grouping the templates. If the template is not de-
ﬁned on the wiki Synia creates a link, so a user/editor
can create the template. Faceted search is supported,
e.g., “#venue/Q15817015/topic/Q2013” shows informa-
tion about the topic Wikidata occurring in the journal
Semantic Web . Aspects with multiple items, e.g., hand-
ling “#authors/Q20980928,Q20895241,Q20895785” is
not yet supported.
When wikipages are used for templates there are at
least two important issues to consider: The template
should be humanly readable as a wikipage and the in-
formation read should be untrusted as wikis are usually
openly editable. Currently, a limited set of components
arehandled,seeTable2. Theparsingofthecomponents
is based on a series of regular expressions. Synia will
recognizeMediaWikiheadingsandrenderthemwithh1,
h2,andh3HTMLtags. SPARQLtemplatesforSyniaare
stored on the wikipage in the Template:SPARQL Medi-
aWiki template. Synia extracts the SPARQL code, inter-
polatestheQ-andL-identiﬁer(s),andsendstheinterpo-
lated SPARQL to the SPARQL endpoint. The response
is rendered as a table in the SPA using the DataTables
JavaScript library or it may be rendered as a graph in an
iframewiththegraphingcapabilitiesofthequeryservice.
Fortheordinarywikiuser,thetemplatewikipageappears
as ordinary wikipages with SPARQL as code examples,
©Copyright held by the owner/author(s), published under Creative Commons CC BY 4.0 LicensearXiv:2303.15133v1  [cs.DL]  27 Mar 2023Wiki Workshop (10th edition) – May 11, 2023
see Figure 1. The wikipage may have multiple headings
and SPARQL templates.
Other endpoints than the conﬁgured default can
be queried. Currently Synia abuses an end-
pointparameter for the Template:SPARQL Media-
Wiki template on Wikidata to specify the other
endpoint. An example using the approach is
currently displayed at https://www.wikidata.org/
wiki/Wikidata:Synia:compound where a panel for
a SPARQL query goes to the endpoint of the https:
//wikifcd.wikibase.cloud wiki (Thornton et al.,
2021). This wiki has a Wikidata mapping property, so
the Q-identiﬁer can be matched across Wikibases to a
Wikidata identiﬁer.
Bootstrap, jQuery, and DataTables libraries are used.
To avoid leaking browsing behavior the static ﬁles are
hostedalongwiththeSPA.Conﬁguration,e.g.,aboutthe
location of templates and the default endpoint is main-
tained in a separate JavaScript ﬁle.
A few aspects have so far been deﬁned for Synia each
with a few panels, e.g., author, work, venue, ﬁlm, actor,
compound, and lexeme. Figure 2 shows a screenshot of
the actor aspect for the Wikidata entity Q294647 with
two panels: a table and a bar chart.
To demonstrate that it is possible to use other
template sites and other endpoints, I set up a template
page at https://www.wikidata.org/wiki/User:
Fnielsen:Synia:index copying a query from Wiki-
FCD and reconﬁgured a cloned version of Synia to use
“https://www.wikidata.org/wiki/User:Fnielsen:Synia:”
as the template base URL and https://wikifcd.
wikibase.cloud/query as the query service URL.
Discussion/Conclusions
The approach for the creation of new aspects and pan-
els with Synia is more agile and wiki-like than Scholia’s
method. While the creation of a new panel in Scholia
usually involves the creation of a new issue in GitHub,
creation of a new branch, editing SPARQL and jinja2
code, commiting, pushing, merging the branch, testing,
and deploying to Toolforge, a new panel with Synia is
created by just editing a wikipage. Creating a new as-
pectwithSyniacanbedonebycreatinganewwikipage,
while for Scholia it would entail editing Python code as
well as all the other steps involved in creating a panel.
DiscussionsaboutnewaspectsorchangesinScholiatake
placeonGitHubissuepages,whileforSynia,discussions
couldtakeplaceonthewiki,e.g.,thetalkpageassociated
with the templates.
Wikiswithopenediting,suchasWikidata,canbevan-
dalizedandsecurityisanissue. Ifamaliciouswikieditor
addsathird-partyendpointthenthebrowsingbehaviorof
aSyniauserwillleaktothethird-partysite. Theproblemcould be alleviated by having a set of allowed endpoints,
e.g., Wikidata and Wikibase.cloud instances.
Howlanguageshouldbestbehandledisnotclear. Fig-
ure 3 shows an aspect in Danish for a Danish company,
so it is possible to control the language from a template.
However,thisapproach“occupies”aspeciﬁcURIpattern
andachangeoflanguageisnotpossiblewithoutredoing
much of the template.
Navigation with menu and search is currently missing
in Synia as well as redirects and aspect-switching that
all are available in Scholia. Instead of hardcoding such
components in the Web application, it is envisioned that
components in the templates on the wiki could control
placement of menus and search forms.
SPARQL in MediaWiki templates may generate a
problem as the pipe and the equality characters in
SPARQL collide withthe use of the characters tohandle
parametersinMediaWikitemplates. Synia’ssimplereg-
ular expression parsing of the wikitext does not handle
“{{!}}” that may be used to escape the pipe character in
aMediaWikitemplate. Amoreelaborateparsingmaybe
needed.
Acknowledgment
Thanks to the Scholia team, particular Daniel Mietchen
and Egon Willighagen, for continued inspiration.
References
[Nielsen et al.2017] FinnÅrupNielsen,DanielMietchen,
andEgonWillighagen. 2017. Scholia,Scientometrics
and Wikidata. The Semantic Web: ESWC 2017 Satel-
lite Events , pages 237–259, October.
[Nielsen et al.2023] FinnÅrupNielsen,IvarLyhne,Dario
Garigliotti, Annika Butzbach, Emilia Ravn Boess,
Katja Hose, and Lone Kørnøv. 2023. Environmental
impactassessmentreportsinWikidataandaWikibase.
[Nielsen2019] Finn Årup Nielsen. 2019. Ordia: A Web
application for Wikidata lexemes. The Semantic Web:
ESWC 2019 Satellite Events , pages 141–146, May.
[Rasberry and Mietchen2022] Lane Rasberry and Daniel
Mietchen. 2022. ScholiaforSoftware. Research Ideas
and Outcomes , 8, September.
[Thornton et al.2021] Katherine Thornton, Kenneth
Seals-Nutt, and Mika Matsuzaki. 2021. Introducing
WikiFCD:ManyFoodCompositionTablesinaSingle
Knowledge Base. Proceedings of the Joint Ontology
Workshops 2021 .
[Willighagen et al.2018] EgonWillighagen,DeniseSlen-
ter, Daniel Mietchen, Chris T. Evelo, and Finn Årup
Nielsen. 2018. Wikidata and Scholia as a hub linking
chemical knowledge. 11th International Conference
on Chemical Structures. Program & Abstracts , page
146, May.
©Copyright held by the owner/author(s), published under Creative Commons CC BY 4.0 LicenseWiki Workshop (10th edition) – May 11, 2023
Template URI fragment example
index Main page
venue-index #venue
author #author/Q18618629
venue-topic #venue/Q15817015/topic/Q2013
lexeme #lexeme/L2310
Table 1: Mapping between URI fragments and
wikipages with SPARQL templates.
Template Handling
= Heading 1 = h1 HTML tag
== Heading 2 == h2 HTML tag
=== Heading 3 === h3 HTML tag
---- hr HTML tag
{{SPARQL }} Submitted to endpoint
Table 2: Handling of components on the wikipage.
Figure 1: Actor template at https://www.wikidata.
org/wiki/Wikidata:Synia:actor .
Figure 2: Rendered page for Wikidata entity Q294647
in the actor aspect of Synia at https://synia.
toolforge.org/#actor/Q294647 .
Figure 3: Rendered page in Danish for a
Danish company, https://synia.toolforge.org/
#danskvirksomhed/Q818846 , with a control graph
panel inspired from the CVRminer Web application.
©Copyright held by the owner/author(s), published under Creative Commons CC BY 4.0 License