arXiv:2304.02839v1  [cs.CY]  6 Apr 2023WhoseText Is It Anyway? Exploring BigCode,Intellectual
Property,and Ethics
MadihaZahrahChoksi
mc2376@cornell.edu
CornellTech
New York,New York,USADavidGoedicke
dg536@cornell.edu
Cornell Tech
New York,New York,USA
ABSTRACT
Intelligent orgenerative writingtoolsrelyonlargelangu agemod-
els thatrecognize, summarize,translate, and predictcont ent.This
positionpaperprobesthecopyrightinterestsofopendatas etsused
to train large language models (LLMs). Our paper asks, how do
LLMstrainedonopendatasetscircumventthecopyrightinte rests
oftheuseddata?Westartbydeﬁningsoftwarecopyrightandt rac-
ing its history.WerelyonGitHubCopilotas a moderncase stu dy
challengingsoftwarecopyright.Ourconclusionoutlineso bstacles
thatgenerativewritingassistantscreateforcopyright,a ndoﬀersa
practicalroadmapforcopyright analysis fordevelopers,s oftware
lawexperts,andgeneral userstoconsider inthecontextofi ntelli-
gent LLM-powered writing tools.
CCS CONCEPTS
•Computersystemsorganization →Embeddedsystems ;Re-
dundancy ;Robotics;• Networks →Network reliability.
KEYWORDS
open-source,data,largelanguagemodels,artiﬁcialintel ligence,in-
tellectualproperty,copyright, ethics
1 SOFTWARE COPYRIGHT
As a branch of intellectual property (IP) law, copyright pro tects
unique expressions [3]. Software, as a form of writing ﬁxed i n a
tangible medium (source code), is protected under copyrigh t law.
As software and the prevalence of openly available code onli ne
scaled,twolicensingmodelsemergedtoprotectsourcecode :open
or free software licensing and closed or proprietary licens ing. In
theformerfreesoftwaremodel,sourcecodeis openlyavaila bleto
the public.Ina general sense, anyone is welcome touse, shar e, or
modifysourcecode.Inthelattermodel,sourcecodeispropr ietary
and protected from public access [9]. This position paper is inter-
ested in probing the copyright interests of large language m odels
that rely on open-source codeat scale to produceintelligen t writ-
ing tools. How do large language models trained on open-sour ce
data sets circumvent copyright interests? Does the doctrin al his-
toryofsoftwarelicensing permitand protectthis novel phe nome-
non?
2 TRACING A BRIEF HISTORY OF
SOFTWARE COPYRIGHT
In 1978, the National Commission of New Technological Uses o f
Copyrighted Works (CONTU) released a lengthy report outlin ing
howtheCopyrightActof1976shouldtreatsoftwarecopyrigh t[8].CONTUwasinterestedincomputersandcopyright:howcancop y-
right extend to the creation of new works with computer assis -
tance? What about the use of copyrighted works in conjunctio n
withcomputers(i.e.,copyrightedworksplacedintocomput ers,the
creationanduseofautomateddatabases,andtheintellectu alprop-
ertyofcomputerprogramsthemselves)?Intheirﬁnalreport ,CONTU
underscoredprotectingtheincentives ofcodeproducers.C ONTU
argued that it takes more eﬀort to create original creative w orks
thantocopythem,sotheinterestsoftheauthorsprevail[8] .CONTU
reasoned that copyright law could easily expand to include n ew
technologies and their creative capabilities, as copyrigh t’s under-
lying structures and goals are already laid out to protect ow ners
and their creations.
However, responses from developers within the open softwar e
communityarguedthattreatingsoftwareasthesoleprotect edprop-
erty of developers produces bad software [7]. These communi ties
maintainedthatsourcecodeisanon-literaryformofcompos ition,
thatcodecommunicatestootherprogrammersasitcommunica tes
to other readers, and that software is a product of collabora tive
institutions and relationships. Along these lines, the ope n-source
communityﬁrmlybelieves softwareis forsharing.
3 CIRCLING BACK TOFREE-SOFTWARE
In contrast to the CONTU model of software copyright, the fre e
andopen-sourcesoftwarecommunityreliesonitsownestabl ished
frameworkforlicensing.Theopen-sourcelicensingmodel( encom-
passing copyleft and permissive licensing) protects sourc e code
through the use of licenses that specify the terms and condit ions
under which the software can be used, modiﬁed, and distribut ed.
These licenses are designed to ensure that the software rema ins
free and open-source and that anyone who uses the software is
abletodo sowithoutrestrictions orfees.
There are over eighty open-source licenses, and the most com -
monlyappliedincludetheGNUGeneral PublicLicense (GPL), the
MIT License, and the Apache License. While each license has i ts
own speciﬁc language, they share the common goal of protecti ng
thefreedomofthesoftware.
Further, free software licenses require that the software b e dis-
tributed with its source code and that any modiﬁcations or de riv-
ative works be distributed under the same license. Addition ally,
some licenses may require that any changes to the software be
madeavailabletothepublicorthatanysoftwarethatincorp orates
thefreesoftwarealsobemadeavailableunderacompatiblel icense.
Adopting a speciﬁc open-source license, modifying it, or wr it-
inganentirelynewoneisaprocessthatsignalscommunityag ree-
ment or consensus around sharing and openness. Simply put,t he
community and the project are inextricably linked to the lic enseMadiha ZahrahChoksi and DavidGoedicke
that enacts and reinforces the given community’s commitmen t to
sharing, transparency, and openness.
4 COPILOT: A CASE STUDYOFWRITING
ASSISTANTS
In 2021, GitHub and OpenAI launched Copilot, a closed commer -
cial“AI-pairprogrammer"plug-inthatsupportscodecompo sition
andauto-completion[5].Copilotmarketsitselfasatoolth athelps
programmers writebetterandmoreeﬃcient code.From insert ing
console.logs() to debug code, identifying contextual patt erns and
auto-suggestingfunctions,andgeneratingentirecodeblo cksfrom
comments,Copilotpridesitselfonsupportingcodegenerat ionfor
the GitHub community [1]. The availability of open-source c ode
onGitHubpowersCopilotbyingesting incalculablecodesam ples
hosted on the platform released under various copyleft lice nses.
That being said, there is nothing philosophicallyiniquito us about
employingopen-sourcecodeorsoftwareforcommercialpurp oses,
and this ideological commitment (held by the open-source co m-
munity) has been enshrined in numerous legal debates, inclu ding
Googlev.Oracle[2].However,asaclosedtool,Copilottrea tssoft-
ware as property,making essential aspects of copyright law ,such
as attribution,impossible.
5 CONUNDRUMS
Howeverconvenient Copilot’swritingassistantmaybe,the smart
writing assistant creates a serious copyright conundrum: a code
recommendationsystemthatgeneratescopyright-infringi ngworks.
Copilotistrainedonopen-sourcecodefromrepositorieson GitHub,
released under numerous open-source licenses without any a ttri-
bution. According to GitHub, the text of the GPL was containe d
inthetrainingdata700,000times.Under U.S. copyright law ,there
can be no secondary copyright liability without primary inf ringe-
ment [4].This means that Copilotis not itself liable for cop yright
infringement untilthetoolisutilizedtoproduceanoutput .There-
fore,asacode-writingassistant,Copilotreliesoncopied code,cre-
ating a signiﬁcant risk toits users.
Ongoinglitigationwilldeterminethelegalityoflaunderi ngopen-
source code to power an AI-writing tool with a paid subscript ion
model.However,regardlessoflegality,anumberofdevelop ersand
projects have left GitHub,citing that the platform is viola ting the
spiritoftheopencommunity,copyleftlicensing,and,most notably,
theirtrust.Onecomplaint,forexample,askswhythemodels treat
open-sourcecodeasafreecommodity.Whyweren’tthesemode ls
trainedontheproprietarycodeofGitHubanditsownerMicro soft
[6]if there areno copyright concerns withthesystem?
Withoutthoroughcopyrightanalyses,thereisalsoaheight ened
risk of normative consequences: a perceived precedence tha t enti-
ties training and distributing tools built using open-sour ce code
face no liabilityrisks.
6 AREAS FOR COPYRIGHT ANALYSIS
Weprovidethefollowingroad-maptooutlinewhatadetailed copy-
rightanalysisofgenerativewritingtoolsbuiltonopen-so urcecode
shouldcarefullyconsider:1. Licensereview: GitHubhousesmanydiﬀerentopen-source
repositories, yet it is unclear how the applied licenses per -
mit the use of the code for a system like Copilot. A thor-
ough license review will reveal which repositories permit
copying of code (MIT), which do not without attribution
(GPL), which are ambiguous, and which have been modi-
ﬁed by developers with further speciﬁcations. This review,
against thelicensethatMicrosoftandOpenAIreleasewith
Copilot, will signal if and how Copilot assumes copyright
interest over sourcecodethatis already protected.
2. Fairuseanalysis: Fair use is strictly deﬁned and permits
usingcopyrightedmaterial withoutoptioningthecopyright.
Underfairuse,anypersonmayusecertainamountsofcopy-
rightedmaterialwithoutpermissionfromthecopyrightown er.
Fairusethrivesinnumerousdomains,butmostprominently
ineducationaluses.Withinthiscontext,copyrightedwork s
are permitted for limited use for educational purposes. An-
alyzing the goals and purpose of the writing tool and the
training data it relies upon may demonstrate that it is pro-
tectedunderthefairusedoctrine.Inotherwords,theremay
be uses of the writing assistant that ﬁt under fair use and
others thatwouldmakethetoollosefair usestatus.
3. Attribution conﬂicts: The explicit purpose of attribution
is to provide reciprocal incentives to open-source code au-
thorsordevelopers.Ifaworkisprotectedbycopyright,the
author must be attributed when directly quoting portions
of their work. As soon as original copyrightable data is ex-
tracted from a repository, this feedback channel is broken.
The absence of attribution can signiﬁcantly impact open
communities, as it stymies motivation for knowledge pro-
ductionand dissemination.
4. Dataprivacyissues: First,inherenttolargelanguagemod-
els (particularly those that produce closed applications) is
the inability to check and verify that certain sensitive dat a
isnotstored.Modelscouldbetrainedondatathatcontains
personallyidentiﬁabledataordatathatcanbede-anonymiz ed.
Thisdatacanbeleakedtousersthroughprompt-basedLLM
interfaces. Second,openrepositoriescanbescrapedandﬁl -
tered, and computational inference methodologies can be
usedtoderivepatternsandinferconclusions.Theseinclud e
(but are not limited to) provenance and data subjects that
may have been omitted from the open data set. Exploring
data privacy issues is vital to understanding risks and the
copyrightinterestsofthedeveloperswhopublishthesedat a
sets and thosewhomthedataconcerns.
Copyright law has extended to encompass written code and sof t-
ware programs and applications. However, the rise of intell igent
AI-based writing tools trained on vast amounts of open-sour ce li-
censed code creates a modern dilemma for copyright. Our pape r
attemptstodeﬁnethisdilemmaasonecopyrightexpertshave pre-
viouslydealt with (CONTU). By starting with thebroader his tory
ofsoftwarecopyrightandopen-sourcelicensing,weoﬀeraf rame-
work for copyright analysis that addresses boththe materia l used
for training models and the material generated by the algori thm.Whose Text Is ItAnyway? Exploring BigCode, IntellectualPro perty, and Ethics
Ouranalysiscanbeastartingpointfordeveloperscreating andin-
terfacingwithLLM-basedtoolsintheabsenceofclearlegal guide-
lines and risks for intelligent LLM-powered tools.
REFERENCES
[1] Shraddha Barke, MichaelB James,and NadiaPolikarpova. 2022. Grounded copi-
lot: How programmers interact with code-generating models .arXiv preprint
arXiv:2206.15000 (2022).
[2] JosephGratzand MarkALemley.2017. Platformsand Inter operabilityinOracle
v.Google. Harv.JL &Tech. 31(2017), 603.
[3] JamesGrimmelmann.2004. Regulation bysoftware. Yale LJ114(2004), 1719.[4] James Grimmelmann. 2015. There’s No Such Thing as a Compu ter-Authored
Work-And It’sa Good Thing,Too. Colum. JL& Arts 39(2015), 403.
[5] Github Inc. 2021. Introducing GitHub Copilot: your
AI pair programmer . Retrieved 2023-02-03 from
https://github.blog/2021-06-29-introducing-github-c opilot-ai-pair-programmer/
[6] Bradley M. Kuhn. 2022. If Software is My Copilot, Who
Programmed My Software? Retrieved 2023-01-20 from
https://sfconservancy.org/blog/2022/feb/03/github-c opilot-copyleft-gpl/
[7] Eben Moglen. [n.d.]. Anarchism Triumphant: Free Softwa re and the Death of
Copyright,4 FIRST MONDAY(1999).
[8] PamelaSamuelson.1984. CONTUrevisited:thecaseagain stcopyrightprotection
for computerprogramsinmachine-readableform. Duke Lj(1984), 663.
[9] Steven Weber. 2005. The success of open source. In The Success of Open Source .
HarvardUniversityPress.