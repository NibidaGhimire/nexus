Eurographics Conference on Visualization (EuroVis) 2023
D. Archambault, R. Bujack, and T. Schreck
(Guest Editors)Volume 42 (2023 ),Number 3
VENUS : A Geometrical Representation for Quantum State
Visualization
Shaolun Ruan1, Ribo Yuan2;1, Qiang Guan3, Yanna Lin4;1, Ying Mao5, Weiwen Jiang6, Zhepeng Wang6, Wei Xu7, and Yong Wang1y
1School of Computing and Information System, Singapore Management University, Singapore
2Department of Computer and Information Sciences, University of Delaware, United States
3Department of Computer Science, Kent State University, United States
4Department of Computer Science and Engineering, The Hong Kong University of Science and Technology, Hong Kong, China
5Computer and Information Science Department, Fordham University, United States
6Electrical and Computer Engineering, George Mason University, United States
7Computational Science Initiative, Brookhaven National Laboratory, United States
Abstract
Visualizations have played a crucial role in helping quantum computing users explore quantum states in various quantum com-
puting applications. Among them, Bloch Sphere is the widely-used visualization for showing quantum states, which leverages
angles to represent quantum amplitudes. However, it cannot support the visualization of quantum entanglement and superpo-
sition, the two essential properties of quantum computing. To address this issue, we propose VENUS, a novel visualization for
quantum state representation. By explicitly correlating 2D geometric shapes based on the math foundation of quantum com-
puting characteristics, VENUS effectively represents quantum amplitudes of both the single qubit and two qubits for quantum
entanglement. Also, we use multiple coordinated semicircles to naturally encode probability distribution, making the quantum
superposition intuitive to analyze. We conducted two well-designed case studies and an in-depth expert interview to evaluate
the usefulness and effectiveness of VENUS. The result shows that VENUS can effectively facilitate the exploration of quantum
states for the single qubit and two qubits.
CCS Concepts
‚Ä¢Human-centered computing !Visualization application domains; ‚Ä¢ Hardware!Quantum computation;
1. Introduction
Quantum computing has been undergoing impressive development
in recent years [AAB19, MV17]. An increasing number of appli-
cations have been proven possible to achieve quantum speedups
such as optimization problems, machine learning, cryptography,
and Ô¨Ånance [HCS20]. Meanwhile, along with the evolution of
real quantum computers provided by many quantum vendors such
as IBM, Rigetti, Honeywell, and IonQ [SAP21], the last decade
represents a signiÔ¨Åcant milestone in the Ô¨Åeld of quantum comput-
ing [CKJA19, TCCG20, Gom18].
For the implementation of quantum computing, a quantum bit
(a.k.a. qubit ) is the basic unit of any quantum program. Gener-
ally, the state of a single qubit or multiple qubits is called quan-
tum state , such as statej0ifor a single-qubit state and state j01i
for a two-qubit system. Compared to classical computing, to-
day‚Äôs quantum computing is driven by two basic quantum-speciÔ¨Åc
yYong Wang is the corresponding author.properties called quantum superposition and quantum entangle-
ment [RP11, TQ19], which makes it possible to achieve the power
of the quantum advantages [Ste98]. SpeciÔ¨Åcally, quantum superpo-
sition ( a.k.a., superposition ) indicates the unknown quantum states
before measurement. Upon measurement of the qubit, it collapses
to either thej0iorj1istate according to the deterministic probabil-
ities of all possible states [GJAE20]. For example, the probability
of the measured result 0 is 0.4, while that of 1 is 0.6. Also, quantum
entanglement ( a.k.a. entanglement ) supports the correlations be-
tween multiple single qubits such that manipulating one qubit can
impact the state of the other qubit(s). Among them, two-qubit en-
tanglement plays a critical role in many popular applications ( e.g.,
Grover‚Äôs Algorithm [Hay08], Deutsch Algorithm [GRL03], and
Quantum Machine Learning [SLM21,BBF20]), especially in the
near-term Noisy Intermediate-Scale Quantum [BCLK21] (NISQ)
era where the qubit number is severely limited.
To effectively study and execute quantum programs, observing
the quantum state is a basic requirement. A visualization tech-
nique named Bloch Sphere [Blo46] was proposed to meet this need.
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John
Wiley & Sons Ltd. Published by John Wiley & Sons Ltd.arXiv:2303.08366v4  [quant-ph]  23 Apr 2023Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
Bloch Sphere leverages a point on the unit sphere to represent
theamplitudes of a pure single-qubit state. Due to the intuitive-
ness, Bloch Sphere is widely-accepted in the quantum computing
community to visually show the quantum state of a single qubit
[Wie14, FA09, HD04] and has been incorporated into many popu-
lar toolkits of quantum computing, such as Qiskit by IBM Quan-
tum [ibm14]. Despite its prevalence, several issues still exist when
using Bloch Sphere. First, it is impossible to use Bloch Sphere to
visualize quantum states of more than one qubit [BSR21, Wie14].
Once two qubits are entangled, the visualization approach Bloch
Sphere breaks down because the quantum state cannot be con-
densed into three dimensions in the same form [ZHVG20]. Sec-
ond, although Bloch Sphere can visualize quantum states, it can-
not support an intuitive view of the probability of all basis states.
However, the probability is a critical property of quantum states
as it is used to directly reÔ¨Çect superposition [Wie20]. Third, three-
dimension visualizations, like Bloch Sphere, have been proven to
perform worse than two-dimension counterparts when conducting
precise measurements [TKAM05, ARH15]. The prior study has
found that the three-dimensional visualization of the Bloch Sphere
introduces the possibility of visual occlusion [Wil21], which makes
the observation of quantum states rather inaccurate.
Thus, a novel 2D visualization approach is urgently needed to
address the above issues for all quantum computing users ( e.g.,
novices and experts). It is a challenging task to visualize quantum
states and the challenges mainly come from two aspects: individual
properties of quantum states , and complex construction of quan-
tum entanglement . First, according to our co-design process with
domain experts, it is essential to visually identify the correlation
among all quantum state components ( e.g., the amplitudes of the
state vectors and probabilities of quantum states) other than repre-
senting the above components individually. Because this can make
users aware of the hidden logic of the evolution of quantum states.
However, how to seamlessly link the individual quantum state com-
ponents by appropriate visual channels is not a trivial task. Second,
how to visualize the entangled quantum states remains a challeng-
ing task. Given that the two-qubit entanglement state is a speciÔ¨Åc
type of two-qubit state, the two-qubit state representation is still
non-transparent for quantum computing researchers and develop-
ers since the two-qubit state is not a simple accumulation of multi-
ple single-qubit states. Meanwhile, how to utilize the same scalable
form of visualization to represent the entangled states of both single
qubits and multiple qubits would be even more difÔ¨Åcult.
To address the above issues, we propose VENUS , a novel Visual
dEsigNfor quant Um state repre Sentation. VENUS supports quan-
tum state representation for not only single-qubit states but also
two-qubit states, which is the basis for two-qubit entanglement rep-
resentation. Meanwhile, VENUS can inform users of the probabil-
ity for the quantum superposition without any manual calculation
of the probability, leading to more efÔ¨Åcient and smooth analysis
of arbitrary quantum states. Following a user-centered design pro-
cess [Mun09], we work closely with Ô¨Åve domain experts in quan-
tum computing. A co-design process is conducted to iteratively de-
rive design requirements for observing quantum states, which also
guide our subsequent visual design. VENUS mainly consists of two
coordinated visual components: a set of right triangles to visualize
state vectors, and the circumscribed semicircles of these right trian-gles explicitly reÔ¨Çect the probability distribution of the correspond-
ing quantum states. To evaluate the usefulness and effectiveness of
VENUS , we present two case studies on single-qubit ( i.e., Quantum
Neural Network) and two-qubit ( i.e.,Grover‚Äôs algorithm ). More-
over, we conduct an in-depth interview with 14 domain experts in
quantum computing. The results show that VENUS can effectively
facilitate the visual analysis of various quantum programs. The ma-
jor contributions of this paper can be summarized as follows:
We co-design with Ô¨Åve domain experts to identify and summa-
rize the design requirements for visually analyzing the quantum
states, pinpointing the common challenges when performing vi-
sual analysis of quantum states.
We present a novel visualization, VENUS , to tackle both quan-
tum superposition and quantum entanglement representation
challenges for both single-qubit and two-qubit scenarios with
multiple visually correlated 2D geometrical shapes.
We conduct two case studies and user interviews with 14 domain
experts to validate the effectiveness and usefulness of VENUS .
2. Background
In this section, we introduce a set of relevant concepts in quantum
computing, including the building block of quantum computing,
the properties of the qubit, and the quantum state of the qubit.
2.1. Building Block of Quantum Computing
Qubit , the quantum version of the classic bit, is the basic unit in
quantum computing. Similar to a classical bit, there are two compu-
tational basis states called state 0 and state 1 for a qubit [HIP21].
However, a qubit can also be in an arbitrary linear superposition of
state 0 and state 1 [HIP21, RP00], which is well-known as quan-
tum superposition. Mathematically, one can represent a qubit using
the form of a state vector [RP00].
Quantum gate , just like the manipulation of classical bits us-
ing classical logic instructions such as ORandAND , it is applied
to qubits to change their quantum states. Mathematically, quantum
gates are represented as operation matrices, acting on single qubit
or multiple qubits. Operations of quantum gates are equivalent to
the dot products with the state vector of qubits.
Quantum circuit , similar to the classical circuit, is the imple-
mentation of the quantum program for execution. A quantum cir-
cuit consists of a set of quantum gates, acting on one or multiple
Ô¨Åxed qubits. As shown in Figure 3 and 4, a quantum state will be
initialized from the start of the quantum circuit and manipulated by
quantum gates designed in the quantum circuit.
2.2. Properties of Qubit
Superposition indicates that a qubit can not only be in one of the
computational basis states j0iorj1i, but also in a linear superpo-
sition of this two states [Nar99]. Thus, the quantum state jyiof
a qubit is described by aj0i+bj1i, where the complex numbers
aandbare called amplitudes such thatjaj2+jbj2=1 [RP00].
Meanwhile, the probability of measuring j0iisjaj2and the prob-
ability ofj1iisjbj2[HIP21, RP00, Nar99]. as a quantum system
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
with nqubits can generate a linear superposition of 2nbasis states
simultaneously [RP00, Hey99].
Entanglement is an essential feature that differentiates qubits
and classical bits. SpeciÔ¨Åcally, when two or more qubits are en-
tangled, their quantum states are coupled with each other, so that
changing the quantum state of any one qubit will instantaneously
change the other qubit‚Äôs quantum state in a predictable way [RP00].
Note that the entanglement operation requires more than one qubit,
making it critically important to analyze the quantum states of mul-
tiple qubits instead of a single qubit.
2.3. Quantum State of Qubit
In quantum computing, a quantum state is a mathematical entity
that provides a probability distribution of different basis states. For
clarity, we start with a single-qubit state, and the case of a two-
qubit state will be derived from these results. In Section 5, we will
illustrate how we apply the following quantum computing charac-
teristics and encode them with a variety of 2D geometric shapes to
form our visual design.
Single-qubit state represents the quantum state for a single
qubit. Recall that the quantum state of a qubit can be a superpo-
sition of basis states j0iandj1i, thus the quantum state jyican be
expressed asjyi=aj0i+bj1i=a1
0
+b0
1
=a
b
, where the
amplitudes aandbsatisfy:
a=a+bi;b=c+di; (1)
where iis the imaginary unit, and a,b,c, and dare real num-
bers. Based on the quantum theory, the probability of a measured
quantum state ( e.g.,j0i) satisÔ¨Åes
Pr(j0i) =jaj2=jaj2+jbj2: (2)
Meanwhile, since the amplitudes satisfy a normalization con-
straint, i.e., the sum of the probabilities of the two quantum states
for single qubits ( i.e.,j0iandj1i) consistently equals 1, thus apply-
ing Equation 2 yields
jaj2+jbj2+jcj2+jdj2=1: (3)
Two-qubit state is the quantum states executing on a pair of
qubits, which can be calculated by the tensor product of two single-
qubit states, e.g.,j00i=j0i
j0i. Meanwhile, any two qubits can
be in the statejyi=aj00i+bj01i+gj10i+dj11i, where the
amplitudes a,b,g, and dsatisfy:
a=a+bi;b=c+di;
g=e+fi;d=g+hi:(4)
Similar to single-qubit states, since the probabilities of all possi-ble qubits equal 1, the four amplitudes satisfy jaj2+jbj2+jgj2+
jdj2=1. By applying Equation 4 to the above constraint, we have
jaj2+jbj2+jcj2+jdj2+jej2+jfj2+jgj2+jhj2=1:(5)
3. Related Work
Our work is relevant to prior studies on graphical tools in quantum
computing and the visual design of quantum states.
3.1. Graphical Tools in Quantum Computing
Researchers have attempted to visualize quantum circuits using
graphical interfaces, including quantum circuit implementation and
building graphical simulators for quantum circuits. SpeciÔ¨Åcally,
Paykin et al. [PRZ17] presented an interface to manipulate quantum
circuits using a classical host approach. Zulehner et al. [ZW18] pro-
posed a new graph-based approach for quantum simulators. Much
prior work has also been studied to interpret quantum algorithms
and workÔ¨Çow using a graphical approach. Ruan et al. [RWJ22]
introduced a real-time visualization system for noise awareness in
quantum computers and compiled circuits. Tao et al. [TPCW17]
propose a tool to assist users in understanding Shor‚Äôs algorithms us-
ing a graphical interface. In addition, Quirk [Qui14] also provides
a graphical interface to make users aware of the quantum circuit‚Äôs
behavior. The aforementioned interfaces focused on improving the
interpretability of quantum circuits using multiple fundamental vi-
sualizations indivisually ( e.g., bar charts, circles in Quirk [Qui14]).
However, this type of visualization cannot intuitively visualize the
relationship between properties in quantum computing, making the
users feel struggle to understand the changes happening in quantum
states. Our work addressed this challenge by introducing a visual
solution, assisting users in quickly understanding single-qubit and
two-qubit states thoroughly.
3.2. Visual Design of Quantum States
Many prior studies have focused on visualizing quantum states
using 3D and 2D visualizations. For 3D representation, a Block
Sphere [Blo46] visualizes single-qubit states based on a 3D ge-
ometrical representation and is still the widely-used visual repre-
sentation till now [FA09, HD04]. Some prior work focused on ex-
tending Bloch Spheres. For example, Altepeter et al. [AJMK09]
extended Bloch Sphere using the remote-state preparation pro-
tocol. IBM also provides a Bloch Sphere-like design called Q-
Sphere [ibm14] to represent multiple states in a single sphere. In
addition, many researchers have studied how to represent quantum
states using 2D shapes other than extending Bloch Sphere. For ex-
ample, Galambos et al. [GI12] utilized fractal representation to vi-
sualize the multi-qubit qubit systems. Chernega et al. [CMM17]
mapped the density matrix of the qubit onto the vertices of a trian-
gle. While the prior studies provided different ways to portray the
quantum states, none of the prior work focused on the representa-
tion of superposition, which reÔ¨Çects the probability of measuring
each quantum state. We aim to visually correlate multiple proper-
ties with the probability of each quantum state, making the users
understand the probability more comprehensively.
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
4. Informing The Design
In this section, we introduce our co-design process and the derived
design requirements from it, which will inform our subsequent de-
velopment of the visual design.
4.1. Co-design Process
The primary goal of our co-design process is to collect the task ab-
stractions faced by quantum computing users. Thus, following the
guideline of design study [SMM12], we worked closely with Ô¨Åve
domain experts for over Ô¨Åve months. First, we conducted prelim-
inary interviews with Ô¨Åve quantum computing experts, where we
sought to understand the practical challenges and difÔ¨Åculties. Sec-
ond, over the next four months, we revised our initial prototype
iteratively according to the feedback collected from the expert test.
Participants. We invited Ô¨Åve domain experts P1-5 (5 males,
agemean =32:13,agesd=4:71) to participate in our co-design pro-
cess. SpeciÔ¨Åcally, P1is a research scientist from PaciÔ¨Åc Northwest
National Laboratory in the U.S., P2-5 are either professors or post-
doc researchers from three different universities in the U.S. Among
them, the research direction of P1-2 andP5is Quantum Machine
Learning, while P3-4 are working on Quantum Systems. All the
domain experts have an average of 6.3 years of research and devel-
opment experience in quantum computing.
Preliminary Interview. Following the methodology proposed
by Sedlmair et al. [SMM12], we began the preliminary interviews
by performing one-on-one, semi-structured, hour-long interviews
with Group 1 ( P1-3 ), to collect current challenges the participants
have when working on quantum computing. First, each participant
was asked to describe the major issues and challenges they faced
using the most popular visualization, i.e.,Bloch Sphere . Note that
each participant in Group 1 used Bloch Sphere as the common tool
in their daily routine tasks. Through this session, we collected a
set of high-level requirements about the limitations of the Bloch
Sphere representation. The aforementioned tasks last about 25 min-
utes. Then, we further asked every participant to describe the future
requirements in a think-aloud manner, including those that can fa-
cilitate the visual analysis of quantum states. We summarized these
initial requirements and expectations during this session. This ses-
sion lasted about 30 minutes. We video-recorded and took notes for
each interview and discussion. All requirements collected in this
round were used to inform our initial prototype.
Expert Test. Over the next four months, we focused on itera-
tively testing the features of our initial prototype with Group 2 ( P4-
5). We designed and implemented the visual design according to
the qualitative requirements collected from Group 1 and released it
as an online interface, which allows Group 2 to access and use it.
SpeciÔ¨Åcally, we began the expert test by brieÔ¨Çy introducing the ses-
sion‚Äôs purpose and describing the initial prototype‚Äôs functionality.
Each participant was encouraged to use our design when perform-
ing their daily domain tasks in quantum computing. We collected
their feedback by holding iterative meetings with the participants
every two weeks, which were open and loosely structured to en-
sure they could express anything they thought of. We further tuned
the several design alternatives (as shown in Fig. 2) accordingly to
guarantee our design meets all these practical needs.4.2. Design Requirements
We summarized all design requirements from the co-design pro-
cess. We reported six reÔ¨Åned requirements and categorized them
intofunctionality andusability .
For the functionality, participants reported three major require-
ments to facilitate the observation of arbitrary quantum states:
R1 Visualize two-qubit states in addition to one-qubit states.
All participants ( P1-5 ) reported a strong need to support the vi-
sualization of entanglement for two qubits. Thus, the basis for
two-qubit entanglement representation is how to represent a two-
qubit state. P3also suggested that it would be helpful to repre-
sent single-qubit and two-qubit states in the same set of visual-
ization other than using two different forms of approaches.
R2 Provide an intuitive representation for the probability dis-
tribution of different states. All participants ( P1-5 ) suggested
that visually reÔ¨Çecting the probability distribution is essential
for the quantum state exploration as the probabilities of differ-
ent states explicitly reveal the superposition , which is the funda-
mental ingredient of quantum computing. Also, they preferred a
visualization that can naturally show the probabilities with visual
elements without any time-consuming manual calculation.
R3 Inform users of the state vector of each quantum state.
Four participants ( P1-3, P5 ) conÔ¨Årmed that showing the state
vector ( e.g., amplitude aandb) as-is will greatly beneÔ¨Åt quan-
tum computing users. P5also reported that forming the visual-
ization with states vectors is better for any quantum computing
users due to every visual element‚Äôs intuitiveness.
For usability, participants focused on how to make full use of the
visualization for domain users, which was summarized as follows:
R4 Visually correlate elements in quantum states. Three par-
ticipants ( P1-2 ,P5) emphasized that it is signiÔ¨Åcant to represent
the state probabilities naturally by the basic element ( e.g., state
vectors) other than an additional individual visual channel, since
visually correlating different individual elements by the quantum
mechanics theory makes the evolution of quantum states more
easy-to-understand.
R5 Display all visual elements with 2D shapes. Three partici-
pants ( P3-5 ) conÔ¨Årmed that they prefer a 2D representation to
3D of a quantum state. For example, the Bloch Sphere - the visu-
alization tool that quantum computing users use most - is a 3D
sphere. They commented that it is tough to locate the point‚Äôs lo-
cation and read the rotation angles accurately, even though the
interaction of dragging is supported in some tools.
R6 Make the visualization tool accessible for all quantum com-
puting users. Even though four participants ( P1-2 ,P4-5 ) gave
positive feedback for the useful prototype interface to assist their
routine tasks during the stage of expert tests, they also empha-
sized the necessity of making it publicly-available to beneÔ¨Åt all
quantum computing users. Considering the power and popular-
ity of the web-based cloud quantum computing platforms ( e.g.,
IBM Quantum), an online web interface will be a good choice.
5.VENUS
Drawing from the iterative co-design process, we designed VENUS ,
a novel visualization approach that facilitates the observation of
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
Figure 1: The visual design of VENUS which supports single-qubit (A) and two-qubit (B) state representation based on the same visualization
form. Line segments visualize the state vector, where the black line denotes the real part, and the grey line denotes the imaginary part based
on Equation 1. Semicircles ‚Äôs area indicates the probability of measuring the corresponding state based on Equation 2. Triangle base ‚Äôs length
consistently equals to 1, because it encodes based on the constraint of normalization (e.g., Equation 3).
the single-qubit and two-qubit quantum states. To enhance acces-
sibility, we implemented a web-based graphical interface to Ô¨Åt
into routine tasks. Users can access VENUS interface via https:
//venus-interface.github.io/ . In this section, we Ô¨Årst
introduce the visual design of our visualization approach for single-
qubit states and extend it to the form of two-qubit states.
5.1. Single-qubit State Representation
Informed by the design requirements introduced in Section 4.2, we
propose a novel visual design for single-qubit state representation.
As shown in Figure 1 A, we utilize three right triangles and two
circumscribed semicircles to represent the quantum states.
State vector. According to the quantum computing theory, the
state vector of a quantum state is the fundamental discipline to rep-
resent a quantum state. Thus, it is of great importance to encode
the state vector in the visual design ( R3). SpeciÔ¨Åcally, we utilize
each amplitude‚Äôs real and imaginary parts ( e.g.,aandbof ampli-
tudea) to indicate the state vector according to the quantum theory
illustrated in Section 2.3. Based on Equation 1, we utilize two line
segments to depict the amplitudes of the state vector as shown in
Figure 1 1. Also, we use cyan and red right triangles to indicate the
two amplitudes aandbof the state vector, respectively. We encode
the absolute values of real parts ( i.e.,aandc) and imaginary parts
(i.e.,bandd) of each amplitude by the line segments in black and
grey, respectively. We apply the double lines, as shown in Figure
1A1, to reÔ¨Çect the negative real and imaginary values. Note that if
the number of the imaginary part is zero, the black line segment for
the real part will coincide with the diameter of the semicircle.
Probability of the quantum states. According to the reÔ¨Åned
requirement, the probability of each state ( e.g.,j0i) is signiÔ¨Åcant in
revealing the superposition in quantum computing ( R2). Based on
Equation 2, we already know that the probability of a quantum state
can be calculated by the absolute value of aandb. Meanwhile, for
VENUS , according to the geometry of the visual design, the areaof the semicircle circumscribed by the right triangle indicating the
state vector can be calculated as follows:
Ssemicircle =p
8(jaj2+jbj2); (6)
where aandbare the real and imaginary parts of a. Thus, build-
ing upon the above two equations, we can represent the probability
of a speciÔ¨Åc quantum state by the area of the semicircle circum-
scribed by the right triangle since the area of the semicircle is pro-
portional to the probability of the quantum state, as shown in Figure
12. Thus, it is apparent to visually analyze the two probabilities of
j0iandj1iby the semicircle area based on the numerical state vec-
tors without any manual calculation for the probability. Also, users
are allowed to visually analyze how a certain state vector ( i.e., line
segments) affects the corresponding probability.
Correlations between all elements. Through the co-design pro-
cess, all participants pointed out that it is signiÔ¨Åcant to visually link
all various elements based on the normalization constraint, because
this can highlight how state vector and corresponding probability
affect each other ( R4). As shown in Figure 1 3, we arrange all el-
ements in quantum states into a systematical form of shapes. We
arrange the visual channels of all elements in the quantum state
into a set of right triangles with the base side length of 1 according
to Equation 3. Building upon this rule, the bottom right triangle in
white is used to link the other two right triangles in cyan and red
for two states ( i.e.,j0iandj1i).
5.2. Two-qubit State Representation
From the co-design process, all domain experts strongly agreed that
it would be much more beneÔ¨Åcial if the visualization could support
the two-qubit state representation ( R1), which is one of the major
limitations for the widely-used approach, i.e., Bloch Sphere. Recall
that the two-qubit state representation is the basis to make the two-
qubit entanglement representation available. We extend from the
approach for single-qubit state illustrated in Section 5.1 to unveil
the mask of the two-qubit quantum states.
First, according to R3, we intend to present the two-qubit state
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
based on the state vector. As shown in Figure 1 B, we utilize four
pairs of line segments to visualize a;b;ganddbuilding upon Equa-
tion 4. Each pair of line segments consists of a line segment in black
to represent the real part and a line segment in grey to indicate the
imaginary part of the complex number amplitudes (Figure 1 2).
Second, the probability distribution of quantum states is also
supported for VENUS ‚Äôs two-qubit mode ( R2). In this case, there
are four possible quantum states, i.e.,j00i;j01i;j10i;andj11i. By
applying Equation 2, the probabilities of the above four quantum
states are proportional to the area of the corresponding circum-
scribed semicircle. So we encode the four two-qubit quantum states
by four semicircles colored blue, red, almond, and purple. In this
way, we convert the probability distribution for the two-qubit en-
tanglement case by the graphical area of the four semicircles.
Third, inspired by R4, we correlate all elements for entangled
two-qubit states ( i.e., four quantum states‚Äô state vectors and cor-
responding probabilities) by the geometry of VENUS intrinsically.
Compared to the single-qubit representation, we utilize three aux-
iliary triangles (the white triangles in Figure 1 B) to correlate all
colored triangles for quantum state representation based on Equa-
tion 5. It is clear that the base length of the other two triangles
equals the bottom triangle‚Äôs side length, which is always 1.
Figure 2: The design alternatives of VENUS. (A) The visualization
simply converts the three angles of the Bloch Sphere to 2D shapes.
(B) A triangle-like design that visualizes the probabilities of two
basic states (i.e.,j0iandj1i) using Viviani‚Äôs theorem. (C) The de-
sign utilizes the square and equilateral triangle area to explicitly
display the correlation between the probability and amplitudes.
5.3. Design JustiÔ¨Åcation
We considered three design alternatives before we came up with the
Ô¨Ånal design for quantum state representation, as shown in Figure 2.
SpeciÔ¨Åcally, Figure 2 Ashows the three axes ( i.e., x-axis, y-axis,
and z-axis) of Bloch Sphere, which simply converts the quantum
states in Bloch Sphere representation to 2D shapes. However, this
approach cannot display the state vector and probability distribu-
tion. Figure 2 Bencodes the probabilities of the two single-qubit
states ( i.e.,j0iandj1i) by the length of blue and red line segments
within an equilateral triangle, whose sum is a constant ( e.g., the
sum of two probabilities that equals 1) due to the geometrical prin-
ciple of equilateral triangles, i.e.,Viviani‚Äôs theorem [Kaw05]. How-
ever, the domain experts pointed out in our co-design process that
this design could not support the two-qubit state scenarios. Figure
2Cleverages two or four combinations of a square and a righttriangle to visualize single-qubit and two-qubit states, respectively,
where the length of two sides of triangles indicates the real and
imaginary parts of each vector amplitudes. However, it is difÔ¨Åcult
to analyze the relationship of all quantum states and how the state
vector will affect the probability. Thus, we further proposed the
Ô¨Ånal designs (Figure 1) that meet all the above requirements.
6. Case Study
We utilized two applications, i.e., a two-class quantum classiÔ¨Åer
andGrover‚Äôs algorithm , to evaluate VENUS for single-qubit and
two-qubit state representation, respectively. The participants were
asked to use a monitor with 1920 1080 resolution in advance.
6.1. Case Study I - Single-qubit Quantum ClassiÔ¨Åer
E4 employed VENUS to explore various quantum states at the
different stages of a quantum classiÔ¨Åer. SpeciÔ¨Åcally, E4 utilized
Iris datasets [Iri11] to train the quantum classiÔ¨Åer with a quan-
tum simulator. Following the design methodology [Pen11], E4
encoded a single qubit by applying the two features of the Iris
dataset. According to the network architecture proposed by Stein
et al. [SLM21], E4 Ô¨Årst implemented the classiÔ¨Åer circuit (Fig-
ure 3) using TorchQuantum [Tor11], which can support a Ô¨Çexible
output for quantum states at each stage of the classiÔ¨Åcation.
Understanding the learning process of the quantum classi-
Ô¨Åer.E4 was curious about how the learning process will act on the
data points. ‚ÄúGenerally, I faced the density matrix of the gates and
qubits only, so it will be interesting to check out the evolution of the
quantum states visually. ‚Äù Keeping this in mind, E4 Ô¨Årst selected a
data point from the validation sets, whose two features were 1.4595
and 0.6797, respectively. After the selection, E4 glanced at the
quantum state output at the Ô¨Årst epoch out of 100. As shown in Fig-
ure 3 A1, it is clear that the probability of state 0 is slightly larger
than state 1, as indicated by the area of the two semicircles. E4 was
surprised that VENUS shows the state probability from the ampli-
tude values directly without any calculation E4 then noticed that the
label of the data point is 1 ‚ÄúDue to Label 1, I expect to see when the
semicircle on the right will be larger than the left one, and how the
state vector affects this convergence process. ‚Äù So E4 evenly output
the results of the data point‚Äôs quantum states in subsequent three
epochs ( i.e., 25, 50, 100) to see the evolution of the quantum classi-
Ô¨Åer. As shown in Figure 3 A2, the area of the semicircles indicating
the probability of state 0 and 1 are almost the same at Epoch 25,
and then the semicircle area of state 1 is signiÔ¨Åcantly larger than
that of state 0 at Epoch 50, and almost remains the same at Epoch
100. E4 commented that it is apparent that the quantum classiÔ¨Åer
has converged around Epoch 50 for this data point. Meanwhile, E4
noticed that this probability change was caused by the evolution of
the corresponding state vector indicated by the line segments within
the semicircles. In addition, E4 found that the increase of the real
part in state 1 mainly results in the larger area of the red semicir-
cle. E4 then conÔ¨Årmed, ‚ÄúThese Ô¨Åndings provide me with a good
guideline for model tuning. For example, during the parameter ini-
tialization of the rotation gates, I will choose those rotation angles
which could make the absolute value of real parts larger than the
imaginary part for both state 0 and 1. ‚Äù
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
Figure 3: The case for the single-qubit quantum classiÔ¨Åer. (A) The learning process of the quantum classiÔ¨Åer for the Iris dataset. The four
charts indicate the evolution of a quantum classiÔ¨Åer from Epoch 1 to Epoch 100, where the probability of state 1 is 31% at Epoch 1 and
increased to 74% after 100 learning epochs. (B) The quantum states of an Iris data point in each step, which consists of two stages (i.e.,
quantum data embedding and the model layer). ‚ÄòP 0‚Äô indicates the probability the measurement result is 0.
Unveiling the mask of the prediction process of QNN. Build-
ing upon the trained quantum classiÔ¨Åer, E4 attempted to perform
the prediction process and inspect the propagation of data points.
First, E4 mentioned that despite the importance of quantum data
embedding, it is still hard for him to understand how the original
decimal data points are transformed into abstract quantum states.
E4 hinted that the whole prediction process consists of four gates,
where the Ô¨Årst two gates are used for quantum data embedding and
the last two gates correspond to the trained classiÔ¨Åcation model,
as shown in Figure 3. Hence, E4 Ô¨Årst randomly selected a data
point and then visualized it after the Ô¨Årst gate ( i.e., RY gate). E4
was surprised that the probabilities of the two states were around
0.50 (Figure 3 B1): After the second quantum gate RZ gate ( Fig-
ure 3 B2), E4 further noticed that the line segments representing
amplitudes coincide with the semicircles‚Äô diameters, while the am-
plitudes‚Äô imaginary parts convert to non-zero values. E4 explained
this phenomenon, ‚ÄúRZ is better to encode information because RZ
is for the phase rotation, so this converting makes the input data
more resilient to errors due to non-zero imaginary parts. ‚Äù After ex-
ploring the two gates for quantum data embedding, E4 started to
explore the two gates representing the classiÔ¨Åcation model. He Ô¨Årst
inspected the quantum state after RY gate (Figure 3 B3). E4 noticed
that the probability of state 0 decreased from 0.56 to 0.10, as indi-
cated by the semicircles‚Äô area, and almost remained the same after
the last gate (Figure 3 B4).‚ÄúThis is mainly because the absolute
values of amplitudes have increased and then cause the area of the
probability of State 0 to increase‚Äù , E4 commented.
6.2. Case Study II - Two-qubit Grover‚Äôs Algorithm
E9‚Äôs research interest lies primarily in Grover‚Äôs algorithm [Gro96],
a famous algorithm for the unstructured searching problem. Thus,E9 planned to explore the evolution of quantum states in Grover‚Äôs
algorithm . Following [Gro26], E9 implemented the circuit with
one iteration and the target ‚Äúwinner‚Äù of state j11i.
Revealing the insights of the hidden quantum states in
Grover‚Äôs algorithm. E9 was curious about the insights of the quan-
tum states provided by VENUS , and expected to see how different
modules interact with each other from a view of the functionality
block other than individual quantum gates. Thus, E9 input the den-
sity matrix of quantum states into VENUS . After a glance at the
results of the Hadamard gates (Figure 4 A1), which is used to gen-
erate the superposition of qubits, E9 noticed that the probabilities
of the four states (j00i,j01i,j10i,j11i) are the same, as indicated
by the white rectangle at the center and the same area of the four
semicircles. ‚ÄúIt is clear that there is a uniform superposition at this
stage because I found the probabilities are all the same. Besides,
the imaginary parts are 0 for all quantum states since the line seg-
ments coincide with the semicircle. ‚Äù E9 then exported the chart after
the oracle process (Figure 4 A2) that is used to Ô¨Çip the phase of the
searched state. He quickly identiÔ¨Åed a phase Ô¨Çip indicated by the
double line for state j11i. Thus, E9 reported, ‚ÄúClearly, the quan-
tum statej11iis the one we marked before the initialization due to
the negative amplitude shown by the double line. ‚Äù Building upon
these Ô¨Åndings of the pre-process before the iteration, E9 expected
to see ‚Äúwhat the state ‚Äúlooks like‚Äù after the whole iteration stage. ‚Äù
Hence, E9 exported the visualization of the state (Figure 4 A5) af-
ter the diffuser process, which is for the amplitude ampliÔ¨Åcation
of the target state. He quickly found that only a purple semicircle
remained in the chart. ‚ÄúTo my surprise, all semicircles and trian-
gles disappeared compared to the previous Ô¨Ågure. This is probably
because the iteration found the winner, whose probability is 1.00‚Äù ,
E9 said. E9 commented, ‚ÄúIt is interesting to see the original two-
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
Figure 4: The case for the two-qubit quantum algorithm, i.e., Grover‚Äôs Algorithm. (A) The calculation process of Grover‚Äôs Algorithm with
one iteration, along with four consecutive quantum states and an interaction shown by VENUS. (B) The Grover‚Äôs Algorithm with one more
iteration appended after the original circuit, along with two quantum states representation.
qubit state (i.e., four semicircles) convert to only one semicircle,
indicating the searching has converged. ‚Äù
Performing a what-if analysis for multiple iterations. When
using VENUS to explore the quantum state evolution of Grover‚Äôs
algorithm , E9 was also interested in exploring what would happen
if another iteration was implemented on the circuit, as more itera-
tion processes may lead to a better result. So he implemented one
more iteration block and checked the results using VENUS (Fig-
ure 4 B).‚ÄúAs I expected, the searching did not work with another
iteration, because the four semicircles with an equal area of 0.25
(Figure 4 B2) unlike the single output in the previous execution ‚Äù ,
E9 said. So, E9 attempted to explore the possible reasons. To this
end, he compared all charts of each gate in the two iterations and
quickly noticed that all states looked the same except those two af-
ter the last set of Hadamard gates in the respective iteration (Figure
4A3and Figure 4 B1). SpeciÔ¨Åcally, Figure 4 A3shows that the two
states ( i.e.,j10iandj11i) are with the same probability of 0.50 af-
ter the Ô¨Årst Hadamard gate, while Figure 4 B1indicated that the two
states ( i.e.,j00iandj11i) are 0.50 at the same gate during the sec-
ond iteration. Then, E9 hovered on the base triangle in Figure 4 A3
and the popped tooltip indicated that the probability is 1.00 when
the Ô¨Årst qubit‚Äôs state is 1 (Figure 4 A4). However, no tooltip popped
out when he hovered over the second chart. Thus, E9 concluded that
the failure of one more iteration is due to the differences between
the two density matrices after the second last Hadamard gate. The
last Hadamard gate can convert the state to the one with a probabil-
ity of 1.00 (Figure 4 A4) with the common Ô¨Årst qubit‚Äôs state with a
probability of 0.50. ‚ÄúThis is because the Hadamard gate can out-
put the unique value (i.e., 1.00) only if the operated state has the
equal value on the Ô¨Årst qubit‚Äôs state. ‚Äù E9 reported.
7. Expert Interview
We conducted in-depth expert interviews with 14 domain experts
to evaluate the performance of VENUS for given tasks.7.1. Participants and Apparatus
We invited 14 experts (2 females, 12 males) in quantum computing
to join our well-designed interviews. Participants ( agemean =33:07,
agesd=6:16) were with an average of over Ô¨Åve years of quantum
computing research experience. SpeciÔ¨Åcally, E4-8 are working on
Quantum Machine Learning; E9-12 current research direction is
Quantum Error Modeling; E13-14 are studying Quantum Chem-
istry, while the other three participants study Quantum Compiler
(E1), Quantum Systems (E2), and Quantum Simulator (E3), respec-
tively. Meanwhile, E3 and E12 are from the same research institute
in the U.S., while others work in different educational institutions
in the U.S. The above participants differ from the domain experts
involved in the co-design process. All participants were asked to
use a monitor with a resolution of 1920 1080 in advance.
7.2. Procedure
Before the formal study began, participants were asked questions
about their demographics and research directions. We Ô¨Årst intro-
duced the goal and detailed procedures of the study, and then show-
cased an example to illustrate the interface and usage of VENUS .
The above process lasted about 20 minutes.
After the introduction, they were expected to accomplish the pre-
deÔ¨Åned tasks described below in Section 7.3, which were about to
observe the qubit state using the VENUS interface. Note that the
application to perform the qubit state visualization was in line with
the research direction of each participant so that we can evaluate
the generalizability of VENUS for different domain tasks in quan-
tum computing ( e.g., quantum algorithm, quantum machine learn-
ing). We recorded and took notes on each task and participants‚Äô
interaction processes. The above process lasted about 45 minutes.
Upon task completion, all participants were then invited to par-
ticipate in the post-study interview. Each participant was encour-
aged to describe the advantages and limitations in a think-aloud
manner. Meanwhile, they were also encouraged to describe the is-
sues of Bloch Sphere regarding these three aspects and how these
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
Table 1: The questionnaire provided during the expert interview
based on the tasks in the expert interview, i.e., Task 1 ( Q1-2 ), Task
2 (Q3-4 ), Task 3 ( Q5-6 ), and an overall feedback of VENUS ( Q7-9 ).
Q1 It is useful to show the quantum entanglement when observ-
ing quantum states.
Q2 It is easy to identify the entangled states via the visually
correlated semicircles.
Q3 It is helpful to show the probability distribution.
Q4 It is intuitive to show probability distribution via the semi-
circle area.
Q5 It is informative to represent states via the state vectors.
Q6 It is easy to identify the state vectors via the line pairs within
each semicircle.
Q7 The user interactions in the interface are useful and smooth.
Q8 The design can be integrated into the workÔ¨Çow well.
Q9 The 2D visual design is easy to view.
Figure 5: The summary of the user feedback, which consists of the
results of the three analytical tasks and the overall feedback.
issues affect their routine tasks. We invited every participant to rate
theVENUS using a 7-Likert scale based on the questionnaire (Table
1). The above interview and rating procedures took 30 minutes.
7.3. Tasks
We designed the tasks to mimic the everyday tasks for analyzing
the quantum states. To enhance the generalizability and make it not
limited to one single application in quantum computing, we asked
each participant to complete the tasks based on a typical example in
their research directions ( e.g., variational quantum circuit for Quan-
tum Machine Learning, QEC [LB13] algorithm for Quantum Error
Modeling, or VQE [KMT17] algorithm for Quantum Chemistry).
We proposed three types of tasks as follows:
Task 1: Explore the two-qubit entanglement. Participants
were asked to identify all two-qubit states in VENUS , describe the
components in each two-qubit state, analyze the single-qubit state
in the two-qubit quantum system states , and describe how this fea-
ture beneÔ¨Åts their quantum state analysis.
Task 2: Observe the state probability distribution. Partici-
pants were asked to identify the probability of each quantum state
and compare all quantum state probabilities via the correspondingsemicircle area. User interactions displaying the exact probability
amplitudes are allowed after the answer is given.
Task 3: Identify the state vector. Participants were asked to
identify the real and imaginary parts of each state vector via the
line segments on the right triangles and describe how the length of
the line segments affects the semicircle area.
8. Interview Results
In this section, we report the summarized results, including the
Bloch Sphere‚Äôs challenges, the responses for the three analytical
tasks, and the suggestions provided by the participants. We reported
the ratings from each participant in Figure 5.
8.1. Current Bloch Sphere Challenges
We invited all participants to participate in the feedback collection
for Bloch Sphere, collecting challenges faced by the participants
when attempting to perform quantum state observation using Bloch
Sphere. We use this session to conÔ¨Årm our previous Ô¨Åndings from
the co-design process.
Challenge 1: Incapability of the two-qubit state representa-
tion. All participants agreed or strongly agreed that the inability
to support two-qubit representation is a severe limitation for Bloch
Sphere, they all agreed that it is unacceptable that Bloch Sphere
cannot support multiple qubits‚Äô observation, which is the most crit-
ical property for quantum computing. E7 also reported that Bloch
Sphere needs to be more scalable to allow the visualization of quan-
tum entanglement.
Challenge 2: Non-intuitiveness of the state probability dis-
tribution. Most participants (11 out of 14) conÔ¨Årmed that Bloch
Sphere could not intuitively visualize the probability of each possi-
ble quantum state. E13 mentioned that he has to manually calculate
the Ô¨Ånal measurement from the point‚Äôs location in Bloch Sphere.
However, it is not a trivial task ‚Äúbecause the rotation angle in each
axis of Bloch Sphere is hard to measure in a 3D model. ‚Äù
Challenge 3: Lack of the state vector representation. Most
participants (10 out of 14) agreed that the missing state vector in
Bloch Sphere makes it challenging to understand. E1 commented,
‚ÄúDespite the transparency of rotation gates for Bloch Sphere, but
I prefer a more intuitive way to reÔ¨Çect the density matrix when
designing circuits with quantum simulators. ‚Äù E8 added that Bloch
Sphere is unsuitable for educational purposes because of its com-
plexity, especially for entry-level users.
8.2. Results of Three Analytical Tasks
We summarized all feedback regarding the three analytical tasks
shown in Section 7.3.
Task 1: Two-qubit entanglement analysis. All participants
agreed or strongly agreed that it was easy to support the two-qubit
state observation using VENUS (rating mean =6:01,rating sd=
1:51). SpeciÔ¨Åcally, E3 believed that VENUS ‚Äôs most practical usage
is to ‚Äúmake it possible for the entanglement display, which is the
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
most important characteristic and needs for every quantum com-
puting researcher. ‚Äù E14, an expert in Quantum Chemistry, men-
tioned, ‚Äúmy research is mainly focused on cutting the large quan-
tum circuit; usually, the circuit has more than two qubits. This vi-
sualization of more qubits will help me to Ô¨Ånd the optimal cutting
point more accurately. ‚Äù Furthermore, as an expert on Quantum Er-
ror Modeling, E9 noted, ‚ÄúI can see a great potential of VENUS.
I think the quantum error correction (QEC) research can make
good use of VENUS, for visualizing the encoding qubits and an-
cilla qubits separately. ‚Äù
Task 2: State probability observation. Most participants
agreed that they could identify the probability of all possible quan-
tum states quickly ( rating mean =6:60,rating sd=1:42). E12 men-
tioned that the encoding area to visualize probability is ‚Äúeasy and
straightforward‚Äù . E4 praised that, ‚ÄúI like the idea of using the prob-
ability calculation equation to naturally visualize the probability
distributin. I can directly check the probability without any manual
calculation. ‚Äù For the speciÔ¨Åc research directions in quantum com-
puting, most participants (9 out of 12) highly appreciated VENUS ‚Äôs
usability and felt it could help them to handle their domain-speciÔ¨Åc
tasks smoothly. For example, E4 conÔ¨Årmed that ‚Äú(for Quantum
Machine Learning) VENUS can easily visualize the probability at
breakpoints in debugging, which saves time in in-line debugging. ‚Äù
Task 3: State vector exploration. Most participants agreed that
it was intuitive to get a sense of the state vectors in detail using
VENUS (rating mean =5:85,rating sd=1:24). SpeciÔ¨Åcally, 8 out
of 14 participants felt it helpful to show the amplitudes ( i.e.,a
andb) separately using multiple right triangles. E9 agreed that it
provides a better view of the relationships between the probability
distribution, especially the entanglements. Due to the accessibil-
ity of state vectors, E11 thought the visualizations of the real and
imaginary parts of amplitudes were helpful ‚Äúfor fresh starters in
quantum computing. ‚Äù Moreover, E2 conÔ¨Årmed the VENUS ‚Äôs value
in Quantum System, ‚ÄúI can quickly compare the consequence of
using different gates as it can Ô¨Åt into the debugger. ‚Äù
8.3. Overall Feedback
From the participants‚Äô responses and ratings ( i.e.,rating mean =
5:93,rating sd=1:03), we summarize the overall feedback re-
garding the user interaction, the integration with the workÔ¨Çow,
and the performance of 2D geometry. 1) User interactions. Par-
ticipants agreed that the user interactions of VENUS are valuable
and smooth. They enjoyed the overall interactions during the study.
Among them, participants gave highly positive feedback for the
feature of the switching of qubit display orders. 2) Integration
with the workÔ¨Çow. Participants liked how VENUS can seamlessly
Ô¨Åt into their speciÔ¨Åc domain tasks. Building upon the publicly-
available platform, VENUS can beneÔ¨Åt all quantum computing de-
velopers and researchers. 3) Performance of 2D geometry. Partici-
pants agreed that using 2D shapes was more readable and apparent
than 3D approaches. For instance,
9. Discussion
In this section, we Ô¨Årst summarize the lessons we learned during the
development of VENUS , then we discuss the limitations of VENUS .9.1. Lessons
During the above evaluation processes, all participants gave highly
positive feedback for VENUS . Among all the responses, partici-
pants emphasized a strong need for visualization to Ô¨Åt into quantum
computing regarding the complex quantum physics theory, non-
transparency of quantum program process, and non-intuitive quan-
tum computing properties ( i.e., quantum entanglement and super-
position). The above challenges make it hard for novices and the
general public to have a strong sense of quantum computing. Thus,
the quantum computing community urgently needs visualization
to aid the transparency and interpretability of quantum computing
with its scientiÔ¨Åc educational capability.
9.2. Limitations
Our evaluation shows that VENUS can effectively facilitate quan-
tum state observation. However, there are still some limitations.
Limited support for quantum noise visualization. VENUS can
effectively visualize various quantum states in situations where
noise analysis is not required, such as the design and debugging
of quantum algorithms. We do not consider the noise analysis of
VENUS because the design is built upon quantum simulators where
the execution of quantum circuits is completely noise-free.
Scalability. VENUS currently targets visualizing the quantum
states of one or two qubits. Compared with Block Sphere, it can
effectively visualize the quantum entanglement, a signiÔ¨Åcant step
towards effective qubit state visualization conÔ¨Årmed by the partic-
ipants. Also, E8 suggested enabling representation for more qubits
by adding more triangles on top of VENUS . In the future, we will
endeavor to extend the current design for more qubits.
Time-consuming input for state vectors. The update of
VENUS is driven by the inputted number of amplitudes, which re-
quires users to input the real and imaginary parts of amplitudes
manually. Participants reported that it is inconvenient to type in
the amplitude values. However, due to our contribution to a design
study, we plan to address this limitation in the future. For example,
as hinted by E4, converting from the popular visualization, Bloch
Sphere, will also be helpful for users.
10. Conclusion
We present VENUS , a novel visualization approach for quantum
state representation. Built upon the visualization of the state vec-
tors, we utilized multiple coordinated 2D geometrical shapes to re-
Ô¨Çect the probability distribution of all quantum states, which pro-
vides an intuitive view of quantum superposition. Also, we applied
the same form of visualization approaches to enable VENUS to sup-
port single-qubit and two-qubit state representations. We evaluated
VENUS by conducting two case studies and in-depth expert inter-
views, and the results show that VENUS can effectively facilitate
the visual analysis of single-qubit and two-qubit states.
In the future, we plan to enhance the data loading of quit states
by making the user interface of VENUS able to read qubit states
from quantum computing circuits automatically. Also, it will be in-
teresting to investigate how visualization techniques can be applied
to show the quantum states of more than two qubits.
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
Acknowledgment
This work was supported by the Lee Kong Chian Fellowship
awarded to Dr. Yong Wang by SMU. Qiang Guan was supported
by NSF 2212465, 2230111, 2217021 and 2238734.
References
[AAB19] A RUTE F., A RYA K., B ABBUSH R., B ACON D., B ARDIN
J. C., B ARENDS R., B ISWAS R., B OIXO S., B RANDAO F. G., B UELL
D. A., ET AL .: Quantum supremacy using a programmable supercon-
ducting processor. Nature 574, 7779 (2019), 505‚Äì510. 1
[AJMK09] A LTEPETER J. B., J EFFREY E. R., M EDIC M., K UMAR
P.: Multiple-qubit quantum state visualization. In Proceedings of
2009 Conference onLasers andElectro-Optics and2009 Conference on
Quantum Electronics andLaser Science Conference (2009), IEEE, Op-
tica Publishing Group, pp. 1‚Äì2. 3
[ARH15] A MINI F., R UFIANGE S., H OSSAIN Z., V ENTURA Q., I RANI
P., M CGUFFIN M. J.: The impact of interactivity on comprehend-
ing 2d and 3d visualizations of movement data. IEEE Transactions on
Visualization andComputer Graphics 21, 1 (2015), 122‚Äì135. doi:
10.1109/TVCG.2014.2329308 . 2
[BBF20] B EER K., B ONDARENKO D., F ARRELLY T., O SBORNE T. J.,
SALZMANN R., S CHEIERMANN D., W OLF R.: Training deep quan-
tum neural networks. Nature Communications 11, 1 (2020), 808. URL:
https://doi.org/10.1038/s41467-020-14454-2 ,doi:
10.1038/s41467-020-14454-2 . 1
[BCLK21] B HARTI K., C ERVERA -LIERTA A., K YAW T. H., H AUG
T., A LPERIN -LEAS., A NAND A., D EGROOTE M., H EIMONEN H.,
KOTTMANN J. S., M ENKE T.,ET AL .: Noisy intermediate-scale quan-
tum (nisq) algorithms. arXiv preprint arXiv:2101.08448 (2021). 1
[Blo46] B LOCH F.: Nuclear induction. Physical Review 70, 7-8 (1946),
460. 1, 3
[BSR21] B ARDIN J. C., S LICHTER D. H., R EILLY D. J.: Microwaves in
quantum computing. IEEE Journal ofMicrowaves 1, 1 (2021), 403‚Äì427.
2
[CKJA19] C √ìRCOLES A. D., K ANDALA A., J AVADI -ABHARI A.,
MCCLURE D. T., C ROSS A. W., T EMME K., N ATION P. D., S TEF-
FEN M., G AMBETTA J. M.: Challenges and opportunities of near-term
quantum computing systems. arXiv preprint arXiv:1910.02894 108, 8
(2019), 1338‚Äì1352. 1
[CMM17] C HERNEGA V. N., M AN‚ÄôKOO. V., M AN‚ÄôKOV. I.: Triangle
geometry of the qubit state in the probability representation expressed
in terms of the triada of malevich‚Äôs squares. Journal ofRussian Laser
Research 38, 2 (2017), 141‚Äì149. 3
[FA09] F ARGETTON R., A RRIGHI P.: The bloch representation of
quantum states. AIP Conference Proceedings 1110, 1 (2009), 87‚Äì90.
URL: https://aip.scitation.org/doi/abs/10.1063/1.
3131387 ,doi:10.1063/1.3131387 . 2, 3
[GI12] G ALAMBOS M., I MRE S.: Visualizing the effects of measure-
ments and logic gates on multi-qubit systems using fractal representa-
tion. International Journal onAdvances inSystems andMeasurements
V olume 5,Number 1&2,2012 (2012). 3
[GJAE20] G OKHALE P., J AVADI -ABHARI A., E ARNEST N., S HIY.,
CHONG F. T.: Optimized quantum compilation for near-term algo-
rithms with openpulse. In Proceedings of2020 53rd Annual IEEE/ACM
International Symposium onMicroarchitecture (MICRO) (2020), IEEE,
arXiv, pp. 186‚Äì200. 1
[Gom18] G OMES L.: Quantum computing: Both here and not here. IEEE
Spectrum 55, 4 (2018), 42‚Äì47. 1
[GRL03] G ULDE S., R IEBE M., L ANCASTER G., B ECHER C., E S-
CHNER J., H √ÑFFNER H., S CHMIDT -KALER F., C HUANG I. L., B LATT
R.: Implementation of the deutsch‚Äìjozsa algorithm on an ion-trap quan-
tum computer. Nature 421, 6918 (2003), 48‚Äì50. 1[Gro96] G ROVER L. K.: A fast quantum mechanical algorithm for
database search. In Proceedings oftheTwenty-eighth annual ACM
Symposium onTheory ofComputing (New York, NY , USA, 1996), As-
sociation for Computing Machinery, pp. 212‚Äì219. 7
[Gro26] Grover‚Äô algorithm. https://qiskit.org/textbook/
ch-algorithms/grover.html , Access Date: 2022-8-26. 7
[Hay08] H AYWARD M.: Quantum computing and shor‚Äôs algorithm.
Sydney: Macquarie University Mathematics Department (2008). 1
[HCS20] H ASSIJA V., C HAMOLA V., S AXENA V., C HANANA V.,
PARASHARI P., M UMTAZ S., G UIZANI M.: Present landscape of quan-
tum computing. IETQuantum Communication 1, 2 (2020), 42‚Äì48. 1
[HD04] H AVEL T. F., D ORAN C. J.: A bloch-sphere-type model for
two qubits in the geometric algebra of a 6d euclidean vector space. In
Quantum Information andComputation II (2004), vol. 5436, SPIE, SPIE,
pp. 93‚Äì106. 2, 3
[Hey99] H EYT. A. J. G.: Quantum computing: an introduction.
Computing &Control Engineering Journal 10 (1999), 105‚Äì112. 3
[HIP21] H UGHES C., I SAACSON J., P ERRY A., S UNR., T URNER J.:
Quantum Computing fortheQuantum Curious. 01 2021. doi:10.
1007/978-3-030-61601-4 . 2
[ibm14] Ibm quantum. https://quantum-computing.ibm.
com/ , Access Date: 2022-7-14. 2, 3
[Iri11] Iris dataset. https://archive.ics.uci.edu/ml/
datasets/iris , Access Date: 2022-8-11. 6
[Kaw05] K AWASAKI K.-I.: Proof without words: Viviani‚Äôs theorem.
Mathematics Magazine 78, 3 (2005), 213. 6
[KMT17] K ANDALA A., M EZZACAPO A., T EMME K., T AKITA M.,
BRINK M., C HOW J. M., G AMBETTA J. M.: Hardware-efÔ¨Åcient vari-
ational quantum eigensolver for small molecules and quantum magnets.
Nature 549, 7671 (2017), 242‚Äì246. 9
[LB13] L IDAR D. A., B RUN T. A.: Quantum error correction. Cam-
bridge university press, 2013. 9
[Mun09] M UNZNER T.: A nested model for visualization design and val-
idation. IEEE Transactions onVisualization andComputer Graphics 15,
6 (2009), 921‚Äì928. 2
[MV17] M √ñLLER M., V UIKC.: On the impact of quantum computing
technology on future developments in high-performance scientiÔ¨Åc com-
puting. Ethics andInformation Technology 19, 4 (2017), 253‚Äì269. 1
[Nar99] N ARAYANAN A.: Quantum computing for beginners. In
Proceedings ofthe1999 Congress onEvolutionary Computation-CEC99
(1999), vol. 3, pp. 2231‚Äì2238 V ol. 3. doi:10.1109/CEC.1999.
785552 . 2
[Pen11] Pennylane examples. https://pennylane.ai/qml/
demos/tutorial_variational_classifier.html , Access
Date: 2022-8-11. 6
[PRZ17] P AYKIN J., R AND R., Z DANCEWIC S.: Qwire: A core language
for quantum circuits. ACM SIGPLAN Notices 52, 1 (2017), 846‚Äì858. 3
[Qui14] Quirk. https://github.com/Strilanc/Quirk , Ac-
cess Date: 2022-7-14. 3
[RP00] R IEFFEL E., P OLAK W.: An introduction to quantum
computing for non-physicists. ACM Comput. Surv. 32 (sep
2000), 300‚Äì335. URL: https://doi.org/10.1145/367701.
367709 ,doi:10.1145/367701.367709 . 2, 3
[RP11] R IEFFEL E. G., P OLAK W. H.: Quantum computing: Agentle
introduction. MIT Press, 2011. 1
[RWJ22] R UAN S., W ANG Y., J IANG W., M AOY., G UAN Q.: Vac-
sen: A visualization approach for noise awareness in quantum comput-
ing. arXiv preprint arXiv:2207.14135 (2022). 3
[SAP21] S AKI A. A., A LAM M., P HALAK K., S URESH A.,
TOPALOGLU R. O., G HOSH S.: A survey and tutorial on security and
resilience of quantum computing. In Proceedings ofthe2021 IEEE
European Test Symposium (ETS) (2021), IEEE, pp. 1‚Äì10. 1
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.Shaolun Ruan et al. / VENUS: A Geometrical Representation for Quantum State Visualization
[SLM21] S TEIN S. A., L‚ÄôA BBATE R., M UW., L IUY., B AHERI
B., M AOY., Q IANG G., L IA., F ANG B.: A hybrid system for
learning classical data in quantum states. In Proceedings ofthe
2021 IEEE International Performance, Computing, andCommunications
Conference (IPCCC) (2021), pp. 1‚Äì7. doi:10.1109/IPCCC51483.
2021.9679430 . 1, 6
[SMM12] S EDLMAIR M., M EYER M., M UNZNER T.: Design study
methodology: ReÔ¨Çections from the trenches and the stacks. IEEE
Transactions onVisualization andComputer Graphics 18, 12 (2012),
2431‚Äì2440. 4
[Ste98] S TEANE A.: Quantum computing. Reports onProgress in
Physics 61, 2 (1998), 117. 1
[TCCG20] T ACCHINO F., C HIESA A., C ARRETTA S., G ERACE D.:
Quantum computers as universal quantum simulators: State-of-the-
art and perspectives. Advanced Quantum Technologies 3, 3 (2020),
1900052. 1
[TKAM05] T ORY M., K IRKPATRICK A. E., A TKINS M. S., M OLLER
T.: Visualization task performance with 2d, 3d, and combination dis-
plays. IEEE Transactions onVisualization andComputer Graphics 12, 1
(2005), 2‚Äì13. 2
[Tor11] Torchquantum. https://github.com/mit-han-lab/
torchquantum , Access Date: 2022-8-11. 6
[TPCW17] T AOZ., P ANY., C HEN A., W ANG L.: Shorvis: A compre-
hensive case study of quantum computing visualization. In Proceedings
ofthe2017 International Conference onVirtual Reality andVisualization
(ICVRV) (2017), IEEE, pp. 360‚Äì365. 3
[TQ19] T ANNU S. S., Q URESHI M. K.: Not all qubits are created
equal: A case for variability-aware policies for nisq-era quantum com-
puters. In Proceedings oftheTwenty-Fourth International Conference
onArchitectural Support forProgramming Languages andOperating
Systems (New York, NY , USA, 2019), Association for Computing Ma-
chinery, pp. 987‚Äì999. 1
[Wie14] W IEC.-R.: Bloch sphere model for two-qubit pure states. arXiv
preprint arXiv:1403.8069 (2014). 2
[Wie20] W IEC.-R.: Two-qubit bloch sphere. Physics 2, 3 (2020), 383‚Äì
396. 2
[Wil21] W ILLIAMS M. M.: QCVis: Aquantum circuit visualization and
education platform fornovices. PhD thesis, Harvard University, 2021. 2
[ZHVG20] Z ABLE A., H OLLENBERG L., V ELLOSO E., G ONCALVES
J.: Investigating immersive virtual reality as an educational tool for
quantum computing. In Proceedings ofthe26th ACM Symposium on
Virtual Reality Software andTechnology (New York, NY , USA, 2020),
Association for Computing Machinery, pp. 1‚Äì11. 2
[ZW18] Z ULEHNER A., W ILLE R.: Advanced simulation of quan-
tum computations. IEEE Transactions onComputer-Aided Design of
Integrated Circuits andSystems 38, 5 (2018), 848‚Äì859. 3
¬© 2023 The Author(s)
Computer Graphics Forum ¬© 2023 The Eurographics Association and John Wiley & Sons Ltd.