A C OMPARATIVE ANALYSIS OF PORT SCANNING TOOL
EFFICACY
A P REPRINT
Jason M. Pittman
ORCID: 0000-0002-5198-8157
ABSTRACT
Port scanning refers to the systematic exploration of networked computing systems. The goal of
port scanning is to identify active services and associated information. Although this technique is
often employed by malicious actors to locate vulnerable systems within a network, port scanning is
also a legitimate method employed by IT professionals to troubleshoot network issues and maintain
system security. In the case of the latter, cybersecurity practitioners use port scanning catalog exposed
systems, identify potential misconﬁgurations, or test controls that may be running on a system.
Existing literature has thoroughly established a taxonomy for port scanning. The taxonomy maps
the types of scans as well as techniques. In fact, there are several tools mentioned repeatedly in the
literature. Those are Nmap, Zmap, and masscan. Further, the presence of multiple tools signals
that how a port scanner interacts with target systems impacts the output of the tool. In other words,
the various tools may not behave identically or produce identical output. Yet, no work has been
done to quantify the efﬁcacy for these popular tools in a uniform, rigorous manner. Accordingly, we
used a comparative experimental protocol to measure the accuracy, false positive, false negative, and
efﬁciency of Nmap, Zmap, and masscan. The results show no difference between port scanners in
general performance. However, the results revealed a statistically signiﬁcant difference in efﬁciency.
This information can be used to guide the selection of port scanning tools based on speciﬁc needs and
requirements. As well, for researchers, the outcomes may also suggest areas for future work in the
development novel port scanning tools.
Keywords port scanning, cybersecurity, experiment, tools and techniques, efﬁcacy
1 Introduction
Many cybersecurity tools and techniques have two use
cases. One on hand, these tools and techniques can be used
to validate system or network conﬁgurations, map services
and architectures, as well as aid troubleshooting. On the
other hand, the same can be used by malicious actors to
discover endpoints and extract valuable information to feed
into exploitation chains. Port scanners ﬁrmly reside in this
set of two-sided use cases [1, 2, 3].
Port scanners, as a tool, leverage RFC [ 4] standards for
TCP/IP to interact with computing endpoints. It is impor-
tant to understand two points here. First, such interactions
are governed by the RFC standards. For example, RFC
1180 [ 5] is the standard for TCP/IP and serves as an un-
derlying structure for associated internetworking protocols.
One such protocol, used extensively by port scanners, is
TCP [ 6]. The techniques of port scanning layer various
elements of these standards to enumerate the endpoints andthe services running on them [ 1]. More speciﬁcally, port
scanners can identify open ports, [ 7], ﬁngerprint service
and operating system information [ 8], and assess ﬁrewall
conﬁgurations [ 9]. A majority of techniques manipulate
TCP ﬂags (e.g., SYN, ACK, FIN) to elicit the endpoint
responses. Some techniques exist, though, which use UDP
or IP.
While a healthy foundation of port scanning literature ex-
ists, there has been little examination of port scanner efﬁ-
cacy [ 10,3]. To that end, we found two out of 12 studies
between 1994 and 2022 demonstrating a quantitative eval-
uation. Moreover, no study comparatively analyzed port
scanners for accuracy, false positives, false negatives, and
efﬁciency (i.e., efﬁcacy ). This limits research innovation
and leaves practitioners without clear evidence of which
tool may be best suited for certain operational conditions.
For that reason, the purpose of this study was to quantita-
tively compare the efﬁcacy of three port scanners. We used
an experimental design to generate scan metrics, collectarXiv:2303.11282v1  [cs.CR]  20 Mar 2023A Comparative Analysis of Port Scanning Tool Efﬁcacy A P REPRINT
system utilization data during the scans, and employ sta-
tistical analysis. This work has practical signiﬁcance for
cybersecurity practitioners. Since port scanning is a legiti-
mate practice for network defense, selecting an accurate
tool with few or no false positives or false negatives may
be important to network and system operators. At the same
time, a variety of signiﬁcant use cases exist for researchers.
Understanding existing port scanners may lead to develop-
ment of new port scan algorithms and prototypes. Further,
the same understanding may inform development of robust
port scan detection mechanisms.
The rest of this work is organized in four sections. First,
we present related work on port scanning as a means of
establishing a conceptual framework. Afterward, we detail
the research method including the procedure we followed.
Then, we show the results of the data analysis and offer
comparative insights. We end by detailing a series of rec-
ommendations and ideas for future work based on results
informed conclusions.
2 Related Work
The literature background for port scanning is not exten-
sive. However, existing research has established a robust
conceptual framework to situate our work in. Speciﬁcally,
because port scanning techniques are inherently technical ,
we want to calibrate important terminology and technical
details. Moreover, understanding what efﬁcacy data exists
is important foundational material.
2.1 Port Scanning Foundation
The term port scanning has its roots in the early days of
computer networking and can be traced back to the late
1980s and early 1990s. As the Internet expanded and be-
came more prevalent, network administrators and security
professionals required tools to gain insight into the state
of their networks. Identifying active network services, as
well as open and closed ports on hosts, was a crucial task
for these professionals. This process came to be known as
port scanning and has since become a vital technique for
maintaining network security.
Port scanning leverages TCP/IP capabilities to identify
computing systems within a network. As network proto-
cols utilize distinct ports, a thorough scan of a broad range
of ports is crucial for comprehensive information gather-
ing. The maximum number of ports that can be scanned is
65535, classiﬁed into three categories: well-known ports
(0-1023), registered ports (1024-49151), and dynamic or
private ports (49152-65535) [11, 12].
For illustrative purposes, let us consider TCP-based port
scanning. Being connection-oriented, TCP communica-
tions rely on an initial four-way handshake (Algorithm 1).
In the context of port scanning, the Server response in step
2 signals (a) the endpoint is online and (b) an active ser-
vice is available on the port. Additionally, attention should
be given to the TCP ﬂags (SYN and ACK) present in theexchange. Client and Server use these ﬂags to control the
networking exchange [4].
Algorithm 1 TCP Four-Way Handshake
Client!Server : SYN (Seq=x)
Server!Client : SYN (Seq=y, Ack=x+1)
Client!Server : ACK (Seq=a+1, Ack=b+1)
Server!Client : ACK (Seq=b+1, Ack=a+1)
TCP is but one means of transport and thus one means of
port scanning. While one scan technique exists that uses
the full handshake [ 8,1], the majority either manipulate the
handshake sequence (i.e., sending an early connection re-
set), manipulate TCP ﬂags, or leverage other packet ﬁelds
in unexpected ways. Although the TCP handshake is based
on SYN and ACK, there are four additional ﬂags available:
URG, PSH, RST, and FIN [ 11,12]. Additionally, there
arefragment offset andoptions open to modiﬁcations. The
standard deﬁne all of these in the IPv4 packet structure
(Figure 1).
Figure 1: The ﬁelds within an IPv4 packet and their relative
sizes in bits
2.2 Port Scanning Conceptual Framework
Port scanning was made well-known in the literature by Fy-
odor [ 8]. This work introduced the concept of automated
network mapping including a method for identifying the
operating system of a remote host. The tool, Nmap, sends
TCP/IP probes to speciﬁc ports and analyzes the responses.
The paper explained how the behavior of the TCP/IP stack,
as well as responses to different types of probes, such as
initial sequence numbers (ISNs) and options in TCP head-
ers, could be used to determine service states as well as the
operating system. The work also described the use of this
technique to ﬁngerprint endpoints as well as the challenges
and limitations with port scanning. Nmap features heavily
throughout port scanning literature, popular cybersecurity
culture, and a variety of media outputs.
Now, Fyodor [ 8] was at least conceptually based on ear-
lier work by Comer and Lin [ 4]. The authors conducted a
series of experiments to measure the performance of TCP
implementations. The experiments involved sending a vari-
ety of TCP probes to the target systems and observing the
2A Comparative Analysis of Port Scanning Tool Efﬁcacy A P REPRINT
responses. Such active probing is port scanning in function
if not also in form. Furthermore, a critical takeaway is the
idea that active probing makes no assumptions about target
endpoints. It is the responses from the endpoints which
reveal all the information.
De Vivo et al. [ 1] generalizes from the port scanning foun-
dation provided in Fyodor [ 8] and several [ 4,13] others.
The signiﬁcance of De Vivo et al. [ 1] emerges from the
rigorous classiﬁcation applied to port scanning techniques
and procedures. The paper described the different types of
port scans, such as TCP connect scans and SYN scans as
classical . This is in relation to indirect andstealth scan-
ning. The latter is also referred to as a FIN, XMAS, or
NULL scan. The former is realized by bouncing scans
off of a zombie endpoint. The work goes on to describe
scanning techniques. These includes decoy scanning, frag-
mented scanning, and coordinated ordistributed scanning,
UDP scanning, and ICMP sweeping.
Staniford et al. [ 7] detailed several port scanning concepts
in the process of developing scan detection mechanisms.
Footprint encompasses the networking concept of a socket.
That is, an IP address paired with a TCP or UDP port. The
authors then make a distinction between that and a port
scanning script . Here, a script is the time associated with
probing a footprint. Together, footprint and script converge
to an active probing technique Staniford et al. refer to as
horizontal scanning . Horizontal scanning, or probing for
a single service across a network segment, is a concept
picked up in later work [14, 15, 16].
Barnett et al. [ 14] introduced a system for categorizing
network scanning techniques, which is signiﬁcant in es-
tablishing a structured and comprehensive classiﬁcation of
these methods and their applications. The authors proposed
a taxonomy that classiﬁes network scanning techniques
according to the level of interaction with the target system,
the information gathered, and the purpose of the scan. This
taxonomy builds on the work of De Vivo et al. [ 1], incor-
porating additional types and techniques. To do so, the
authors employed a multifaceted approach that involved
generating scan trafﬁc in a lab setting using Nmap. Addi-
tionally, Barnett et al. established a network telescope to
capture trafﬁc in the wild.
The authors identiﬁed a taxonomy of network scanning
techniques consisting of seven different scans categorized
into three levels. The root node of the taxonomy is the
TCP/IP scan, which is followed by layer 2, layer 3, scan-
ning speed, and scan distribution. Notably, scan distribu-
tion extends [ 7] by adding the concept of vertical scans
to horizontal. The layer 3 category is further divided into
ICMP, TCP, and UDP. The TCP category includes scans
using SYN, ACK, and FIN ﬂags. The scanning speed is
classiﬁed into three categories, namely, slow, medium, and
rapid, while the scan distribution is deﬁned by the relation-
ship between the source and destination, such as one-to-
one, one-to-many, many-to-one, and many-to-many.Bhuyan et al. [ 16] described general approaches to port
scanning by extended prior work by De Vivo et al. [ 1],
Staniford et al. [ 7], and Fyodor [ 8]. The authors [ 16]
made an important differentiation between single-source
and distributed port scans. Organizationally, single-source
scanning encompass types (vertical, horizontal, strobe, and
block), port (some or all, single, multiple, and all), and
target (single, multiple IPs, multiple IPs, and multiple IPs).
Distributed scans are many to one or many to many.
An additional contribution can be found in how the Bhuyan
et al. detail port scanning techniques, including the source
and target TCP/IP interactions. In doing so, the authors
demonstrate how the TCP/IP standards are utilized in port
scanning. The implication being that port scan enumera-
tion is unavoidable given the fundamental rules deﬁned
in such standards. A synthesis of this contribution is in
Figure 2.
Figure 2: The various port scan techniques and associated
protocol interactions.
Similarly, El-Nazeer and Daimi [ 2] evaluated network port
scanning tools with the goal of identifying the best tool
for network administrators to use to protect their networks.
The authors used a comparative analysis research method
to evaluate eight port scanning tools. Nmap and unicorn-
scan were in the port scanner evaluation set and are fea-
tured repeatedly in later studies. El-Nazeer and Daimi
described 15 evaluation criteria ranging from the ability
to perform SYN scan to whether the tool is free and open
source or not. They lab tested the port scanners for 13 of
the criteria and used documentation to derive values for
the other two. Somewhat puzzling given the lab testing is
the lack of quantitative measures. In place of such data,
the authors qualitatively declare Nmap as having the most
robust features amongst the examined port scanners.
Bou et al. [ 17] provided a detailed examination of the
various types of cyber scanning techniques employed to
identify different features of networks. The authors cate-
gorized port scanning techniques into two main categories:
passive and active. Passive scanning techniques involve
listening to network trafﬁc to collect information about the
target network without sending any packets. On the other
hand, active scanning techniques entail sending packets to
a target host to elicit a response, which can help determine
the host’s characteristics and identify vulnerabilities. The
latter harkens back to Comer and Lin [ 4] explicitly and to
others such as Staniford et al. [7] implicitly.
3A Comparative Analysis of Port Scanning Tool Efﬁcacy A P REPRINT
Furthermore, Bou et al. [ 17] added to the organizational
structure provided by De Vivo et al. [ 1] and Barnett et al.
[14] but differed in semantics. For instance, the De Vivo
et al. classical, indirect, and stealth scans map under the
nature of active and passive scanning offered by Bou et
al. [17]. As well, the semantic developed by [ 14] around
relations between scanner and target (e.g., one-to-many)
falls under approarch in Bou et al. [ 17]. Bou et al. also
offered strategy as a way to categorize directional relation-
ship between scanner and target. This continued with Bou
et al. deﬁning approach as aim and method. The former
having a wide range of targets and latter having speciﬁc
targets. Method encompasses single source or distributed.
Then, techniques includes open, half open, stealth (SYN,
ACK, IDLE, FIN, XMAS, NULL, ACK Window, and Frag-
mentation), sweep (ICMP, SYN) and miscellaneous (FTP
Bounce, UDP, IP, and RPC).
Kumar and Sudarson [ 18] and Zhang et al. [ 9] deviated
from the body of prior work insofar as both focus exclu-
sively on a single port scanning concept. Both studies also
demonstrate an original port scanning tool. Yet, similar
to De Vivo et al. [ 1] and Barnett et al. [ 14], Kumar and
Sudarson provided a technical analysis instead of general
principles. To that end, Kumar and Sudarson explored a
novel UDP port scanning mechanism. The objective was
to increase scanner performance (i.e., time to complete
a scan). Zhang et al. [ 9] introduced a SYN scan modi-
ﬁcation to bypass ﬁrewall ﬁlters. A standout against the
backdrop of the literature, the authors presented a rigor-
ous experiment and protocol to test hypotheses. Neither
study measured accuracy, false positives, false negatives,
or efﬁciency though.
2.3 Port Scanner Efﬁcacy
Taxonomies and other modes of knowledge organization
are vital to the development of a scientiﬁc ﬁeld. At the
same time, the signiﬁcance of such taxonomies is limited
to researchers. Applied experimentation and analysis is
required for practical use cases. Fortunately, a few studies
[10,3] recognized the need for future work to demonstrate
port scan results in more detail, such as the accuracy.
Im et al. [ 10] analyzed the accuracy and performance of
network scanning, speciﬁcally Nmap. Im et al. deﬁned
accuracy as the ability to correctly identify the target’s
operating system. Then, the authors used an experimen-
tal design to capture data while scanning a lab network
environment with more than 40 network devices running
Windows and GNU/Linux. Overall, they found Nmap had
a 27.5% scan accuracy with 47.8% scan precision while
targeting Windows 7 SP1 with a ﬁrewall active. Without
a ﬁrewall present, scan accuracy and precision jumped to
95% and 100% respectively. For GNU/Linux, with the
ﬁrewall actively ﬁltering trafﬁc, Nmap demonstrated zero
percent accuracy and precision. Absent a ﬁrewall, Nmap
produced 45% scan accuracy with 100% precision.While these results are important contributions to the the
ﬁeld, even more compelling are the captured frequencies of
true positives (TP), false positives (FP), and false negatives
(FN). These metrics were collected by Im et al. [ 10] on two
dimensions: Windows 7 SP1 and GNU/Linux and ﬁrewall
versus no ﬁrewall. In the case of Windows targets, Nmap
generated 11 TP, 12 FP, and 17 FN with a ﬁrewall active
and 38 TP, 0 FP, and 2 FN without the ﬁrewall. Against
GNU/Linux, Nmap had zero TP and FP with 40 FN while
a ﬁrewall was active. Without the ﬁrewall, Nmap generated
18 TP, zero FP, and 2 FN.
Yuan et al. [ 3] found Nmap, Zmap, masscan, and unicorn-
scan had defects making each not suitable for practical
application. Thus, the authors developed a custom port
scanning solution within the constraints of a speciﬁc use
case. Then, the custom port scanner was run against a
production network concurrent to running the other port
scanners. Results included performance of each scanner
(the same metric as Staniford et al. [ 7] concept of script)
with repeated experimental trials in both vertical and hor-
izontal modalities. Overall, the data suggest the custom
port scanner developed by Yuan et al. [ 3] was signiﬁcantly
faster than the other tools. However, the authors did not
indicate whether their solution had signiﬁcantly different
rates of false positives, false negatives, or efﬁciency.
3 Method
Taking into account the features and gaps in the related
work, we became interested in what potential quantita-
tive differences exist between popular port scanning tools.
According to McGeoch [ 19], this is a common approach
to applied experimentation in computer science and re-
lated ﬁelds (e.g., cybersecurity). From this perspective, we
framed the research by posing a single research question
in this study. The research question is, to what extent do
Nmap, ZMap, and masscan exhibit different accuracies,
false positive and negative rates, and system utilization
efﬁciencies when conducting the same type of port scan ?
To generate a potential answer, we opted for a comparison
experiment [ 20] design. The experiment incorporated a
set port scanning tools (Nmap, Zmap, masscan) as inde-
pendent variables. The dependent variables were accuracy,
false positives, false negatives, and efﬁciency. Moreover,
we established a broad set of controlled variables as (a)
scan system, (b) target endpoints, (c) and active services on
target endpoints. These are detailed further in the Experi-
mental Environment section. Finally, we operationalized
the research question and identiﬁed variables into a set of
hypotheses as follows:
•The null hypothesis ( H0) is stated as, The port scanning
tools do not exhibit statistically signiﬁcant differences in
accuracy, false positive rates, and false negatives rates .
•Alternatively, H1is stated as, The port scanning tools
exhibit statistically signiﬁcant differences in accuracy,
false positive rates, and false negatives rates .
4A Comparative Analysis of Port Scanning Tool Efﬁcacy A P REPRINT
We refer to the above as the general performance hypothe-
ses. Additionally, we established a pair of efﬁciency hy-
potheses:
•The null hypothesis ( H0) is stated as, The port scanning
tools do not exhibit statistically signiﬁcant differences in
CPU or RAM system utilization and scan runtime .
•Alternatively, H1is stated as, The port scanning tools ex-
hibit statistically signiﬁcant differences in CPU or RAM
system utilization and scan runtime .
3.1 Experimental Environment
The experimental environment consisted of a port scanning
virtual machine, a set of 20 endpoint target virtual ma-
chines, all interconnected through a 1GBe physical LAN
segment. The virtualization host had an AMD Ryzen 9
5900X processor and 128GB of RAM. The host operating
system was Ubuntu Desktop 22.04.1 LTS. Each virtual
machine, scanning machine and endpoint targets alike,
were conﬁgured with a single vCPU, 2GB RAM, and a
Intel PRO 1000MT virtual network interface. The virtual
machines all ran Ubuntu Server 22.04.02 LTS.
Virtual machine network interfaces were conﬁgured in
bridged mode but with static IP addressing. Further, we
conﬁgured the physical LAN segment as a class C net-
work with the scan host residing at 192.168.100.10 and
the endpoint targets occupying 192.168.100.101 through
192.168.100.120. We connected the virtualization host to
an air gapped Cisco 3560 switch running a layer 3 interface
in the experimental class C subnet.
3.2 Hosts and Services
Port scanning also requires ports to enumerate. Therefore,
we installed six services across the 20 scan targets. All
targets ran SSH as a control baseline. The remaining ﬁve
services were distributed across subgroups as detailed in
Table 1.
Table 1: The list of scan targets and services
Hosts Service Group Service
.101 - .110 80/tcp HTTP
.105 - .114 23/tcp Telnet
.108 - .115 21/tcp FTP
.111 - .120 111/tcp, 2049/tcp NFS
.101 - .120 22/tcp SSH
The intention with this experimental architecture was to
facilitate both horizontal (across the set of hosts) and ver-
tical (across a set of services per host). The scan host is
a single source for the scans and therefore did not require
additional conﬁguration beyond installing the necessary
scanner packages.3.3 Experimental Procedure
We developed a procedure to follow during the experiment.
While not a direct control, having a step-wise approach en-
sured consistency throughout the three scanner trials. After
powering up the scan host and scan targets, we captured a
baseline measure for CPU and RAM baseline on the scan
host. Next, we executed an Nmap SYN scan against the
experimental subnet. Both the scan results as well as the
CPU and RAM utilization were saved to ﬁle on the scan
host. Then, we reset all systems to clear buffers and caches.
The steps from running a port scan to resetting systems
were repeated for Zmap and masscan. Finally, we pulled
the scan ﬁles and utilization proﬁles from the scan host
through USB.
3.4 Data Analysis
We analyzed the collected scan ﬁles and utilization proﬁles
using statistical methods to determine if there is a signif-
icant difference between the tools in terms of accuracy,
false positives, false negatives, and (separately) efﬁciency.
First, we calculated the statistical means for the identiﬁed
variables under each scan. Thereafter, we conducted an
ANOV A test to determine if any difference existed between
outcomes followed by an Ad Hoc test if so.
4 Results
We present the results of the data analysis in two sections:
general performance andefﬁciency . Each section con-
tains a descriptive breakdown of the data as well as the
inferential statistics when appropriate.
4.1 General Performance
General performance captured how well a given port scan-
ner identiﬁes hosts and services. Identifying all hosts
(N= 20 ) and all services ( N= 120 ) would be one ex-
treme. The opposite extreme would be identifying zero
hosts and thus zero services. There were a variety of two
dimensional vectors possible in between these extremes.
Table 2: General performance of three port scanners
N Accuracy FP FN
Nmap 20 (120) 100% 0 0
Zmap 20 (120) 100% 0 0
masscan 20 (120) 100% 0 0
The results show all three port scanners identiﬁed the full
battery hosts and services correctly (Table 2). Furthermore,
no port scanner detected a host or service not present in
the experimental conﬁguration. An ANOV A would be su-
perﬂuous given the extreme condition of the data as the
lack of difference between scanners is prima facie true.
Accordingly, we accept the null hypothesis under these
conditions.
5A Comparative Analysis of Port Scanning Tool Efﬁcacy A P REPRINT
4.2 Efﬁciency
We took a snapshot of the scan host CPU and RAM utiliza-
tion prior to each scanning activity. The system demon-
strated 0% time spent on user processes and 1241652 K
in free memory or approximately 1230.7 megabytes in
each snapshot. Recall that the virtual machine had a sin-
gle vCPU allocated along with 2GB of RAM (i.e., 2048
megabytes). Such a baseline suggested the system was ap-
propriately quiescent and had a system overhead of 8173
megabytes.
We captured efﬁciency data during the three port scanner
trials by writing vmstat output to ﬁle in three second inter-
vals. The mean ( M) was calculated for the user processes
CPU elements as well as for the free RAM elements (Table
3). Scan runtimes, in seconds, were calculated through
difference between start and end timestamps for each port
scan trial.
Table 3: Port scanner CPU and RAM system utilization
and scan runtime
CPU RAM Runtime
Nmap 1 1230656 26.68
Zmap 1.11 988040 644
masscan 0 978492 2
Unlike the observable identical general performance across
port scanners, the efﬁciency measures demonstrated vari-
ability. Thus, we carried out an ANOV A as planned. The
statistic revealed there was a difference in efﬁciency be-
tween the scanners ( F(between groups d f= 2, within
groups d f= 6),F= 153 :9721 ,p= 0:000006981 ). What
is more, a Tukey’s HSD test conﬁrmed the means of the
variables were signiﬁcantly different with a large effect
size ( 7:16). We reject the null hypothesis under these con-
ditions.
5 Conclusion
Port scanning has a critical role in cybersecurity network
defense. The technology allows for enumeration of com-
puting systems on networks and, additionally, active ser-
vices on those endpoints. Existing literature provides a
robust taxonomy for port scanning tools, scan types, and
scan techniques. Yet, no work has been done to quantify
the efﬁcacy for these popular tools in a uniform, rigorous
manner. This study attempted to ﬁll in this gap. To that end,
we experimentally compared efﬁcacy of three popular port
scanning tools - Nmap, masscan, and Zmap. Speciﬁcally,
we measured accuracy, false positives, false negatives, and
efﬁciency during single source SYN type port scans using
a combined horizontal and vertical technique. The experi-
ment consisted of a virtual scan host and 20 virtual scan
targets. The scan targets exposed a mixture of six services-
FTP, SSH, Telnet, HTTP, and two ports for NFS. We col-
lected data of each scan trial and from the scan host during
each of the scans. The results demonstrated no difference
between tools in terms of accurately identifying targets.However, in the case of port scanner efﬁciency, the results
revealed a statistically signiﬁcant difference.
The results have implications for researchers and practi-
tioners alike. On one hand, researchers and practitioners
may take the lack of difference in accuracy between port
scanning tools as a signal that algorithms leveraging TCPIP
protocol standards are stable. Furthermore, existing imple-
mentations such as Nmap, Zmap, and masscan can server
as baselines for new tool development. Future work might
turn to unexplored algorithmic territories to expand scan-
ner stability while decreasing technique detection. On the
other hand, the signiﬁcant differences between port scanner
efﬁciency paints a clear path forward for research-based
and practical innovation. An additional idea therein might
be to expand the concept of efﬁciency to include green
computing key performance indicators.
Of course, no recommendation is without caveat. For in-
stance, while Nmap can use a variety of scan techniques,
the other tools used in this experiment use SYN scanning
exclusively. Accordingly, the comparative analysis com-
pared scans using that technique only. Doing so limits the
generalizability of the results because other types of scans
cannot be evaluated (i.e., ACK, FIN, XMAS, and so forth).
Further considering generalizable outcomes, we assume
Nmap, Zmap, and masscan implement SYN scanning in
similar enough fashion for the comparative analysis to
hold. Because SYN scanning follows a standard scanner
to client interaction pattern, it is reasonable to conclude
the SYN scan implementation is more-or-less identical.
At last, future work may be beneﬁcial if deep technical
analysis at the protocol level conﬁrmed such interactions.
On that note, we did observe one anomaly during the ex-
periment. We found Zmap and masscan did not function
as expected on a closed host-only VMWare network. Fu-
ture work should explore this more deeply. For now, we
observed scan packets leaving the scan host as well as
being received on the scan targets. This was conﬁrmed
through tcpdump packet capture. Our best speculation is
the scan targets responded outside of the port scanners’
timeout windows. Notably, Nmap worked identically on
the bridged LAN and the closed host-only conﬁguration.
Future work may be necessary to explore the technical
underpinnings of this phenomenon.
References
[1]Marco De Vivo, Eddy Carrasco, Germinal Isern, and
Gabriela O De Vivo. A review of port scanning tech-
niques. ACM SIGCOMM Computer Communication
Review , 29(2):41–48, 1999.
[2]Nazar El-Nazeer and Kevin Daimi. Evaluation of
network port scanning tools. In Proceedings of the
International Conference on Security and Manage-
ment (SAM) , page 1. The Steering Committee of The
World Congress in Computer Science, Computer . . . ,
2011.
6A Comparative Analysis of Port Scanning Tool Efﬁcacy A P REPRINT
[3]Chao Yuan, Jinze Du, Min Yue, and Tao Ma. The
design of large scale ip address and port scanning
tool. Sensors , 2020.
[4]Douglas E Comer and John C Lin. Probing tcp im-
plementations. In Usenix Summer , pages 245–255,
1994.
[5]Claudia Jeanne Kale and Theodore John Socolofsky.
TCP/IP tutorial. RFC 1180, January 1991.
[6]Transmission Control Protocol. RFC 793, September
1981.
[7]Stuart Staniford, James A Hoagland, and Joseph M
McAlerney. Practical automated detection of stealthy
portscans. Journal of Computer Security , 10(1-
2):105–136, 2002.
[8]Gordon Lyon. Remote os detection via tcp/ip stack
ﬁngerprinting, Oct 1998.
[9]Xu Zhang, Jeffrey Knockel, and Jedidiah R. Cran-
dall. Original syn: Finding machines hidden behind
ﬁrewalls. null, 2015.
[10] Sun-young Im, Seung-Hun Shin, Ki Yeol Ryu, and
Byeong-hee Roh. Performance evaluation of network
scanning tools with operation of ﬁrewall. In 2016
Eighth International Conference on Ubiquitous and
Future Networks (ICUFN) , pages 876–881. IEEE,
2016.
[11] Name, addresses, ports, and routes. RFC 814, July
1982.
[12] Michelle Cotton, Lars Eggert, Dr. Joseph D. Touch,
Magnus Westerlund, and Stuart Cheshire. Internet
Assigned Numbers Authority (IANA) Procedures for
the Management of the Service Name and Transport
Protocol Port Number Registry. RFC 6335, August
2011.
[13] Gary R Wright and W Richard Stevens. TCP/IP Illus-
trated, Volume 2 (paperback): The Implementation .
Addison-Wesley Professional, 1995.
[14] Richard J Barnett and Barry Irwin. Towards a taxon-
omy of network scanning techniques. In Proceedings
of the 2008 annual research conference of the South
African Institute of Computer Scientists and Infor-
mation Technologists on IT research in developing
countries: riding the wave of technology , pages 1–7,
2008.
[15] Patrick LaRoche, Nur Zincir-Heywood, and Mal-
colm I Heywood. Evolving tcp/ip packets: a case
study of port scans. In 2009 IEEE Symposium on
Computational Intelligence for Security and Defense
Applications , pages 1–8. IEEE, 2009.
[16] Monowar H. Bhuyan, D.K. Bhattacharyya, and J.K.
Kalita. Surveying Port Scans and Their Detection
Methodologies. The Computer Journal , 54(10):1565–
1581, 04 2011.
[17] Elias Bou-Harb, Mourad Debbabi, and Chadi Assi.
Cyber scanning: a comprehensive survey. Ieee com-munications surveys & tutorials , 16(3):1496–1519,
2013.
[18] Sumit Kumar and Sithu D Sudarsan. An innovative
udp port scanning technique. International Journal
of Future Computer and Communication , 3(6):381,
2014.
[19] Catherine C McGeoch. A guide to experimental al-
gorithmics . Cambridge University Press, 2012.
[20] Matti Tedre and Nella Moisseinen. Experiments in
computing: A survey. The Scientiﬁc World Journal ,
2014:549398, Feb 2014.
7