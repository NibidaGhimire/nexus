1
Model-Assisted Learning for Adaptive Cooperative
Perception of Connected Autonomous Vehicles
Kaige Qu, Member, IEEE , Weihua Zhuang, Fellow, IEEE , Qiang Ye, Senior Member, IEEE ,
Wen Wu, Senior Member, IEEE , and Xuemin Shen, Fellow, IEEE
Abstract —Cooperative perception (CP) is a key technology
to facilitate consistent and accurate situational awareness for
connected and autonomous vehicles (CA Vs). To tackle the net-
work resource inefficiency issue in traditional broadcast-based
CP, unicast-based CP has been proposed to associate CA V pairs
for cooperative perception via vehicle-to-vehicle transmission. In
this paper, we investigate unicast-based CP among CA V pairs.
With the consideration of dynamic perception workloads and
channel conditions due to vehicle mobility and dynamic radio
resource availability, we propose an adaptive cooperative percep-
tion scheme for CA V pairs in a mixed-traffic autonomous driving
scenario with both CA Vs and human-driven vehicles. We aim to
determine when to switch between cooperative perception and
stand-alone perception for each CA V pair, and allocate commu-
nication and computing resources to cooperative CA V pairs for
maximizing the computing efficiency gain under perception task
delay requirements. A model-assisted multi-agent reinforcement
learning (MARL) solution is developed, which integrates MARL
for an adaptive CA V cooperation decision and an optimization
model for communication and computing resource allocation.
Simulation results demonstrate the effectiveness of the proposed
scheme in achieving high computing efficiency gain, as compared
with benchmark schemes.
Index Terms —Connected and autonomous vehicles (CA Vs),
cooperative perception, data fusion, autonomous driving, multi-
agent reinforcement learning, model-assisted learning.
I. I NTRODUCTION
The advances in sensing, artificial intelligence (AI), and
vehicles-to-everything (V2X) communication technologies
have paved the way for autonomous driving, leading to a
potential paradigm shift in future transportation systems to-
wards improved road safety and traffic efficiency [1]–[3].
Reliable and real-time environment perception is a key compo-
nent in autonomous driving that facilitates the connected and
autonomous vehicles (CA Vs) to accurately and continuously
perceive the surrounding objects, such as traffic participants,
by using on-board cameras, light detection and ranging (Li-
DAR) sensors, and radar sensors [4], [5]. To enhance the
perception reliability in terms of both coverage and accuracy,
cooperative perception (CP) has been proposed to enable the
This work was supported by the Natural Sciences and Engineering Research
Council (NSERC) of Canada.
Kaige Qu, Weihua Zhuang, and Xuemin (Sherman) Shen are with
the Department of Electrical and Computer Engineering, University of
Waterloo, Waterloo, ON N2L 3G1, Canada (emails: {k2qu, wzhuang,
sshen}@uwaterloo.ca).
Qiang Ye is with University of Calgary, Calgary, AB T2N 1N4, Canada
(email: qiang.ye@ucalgary.ca).
Wen Wu is with Peng Cheng Laboratory, Shenzhen, Guangdong, China,
518055 (email: wuw02@pcl.ac.cn). He contributed to this study while work-
ing as a postdoctoral fellow at the University of Waterloo, Canada.sensory information sharing among CA Vs by leveraging V2X
communication, as a supplement to the stand-alone perception
(SP) by individual CA Vs based on their own viewpoints [6]–
[12]. In case of unreliable network connectivity or network
congestion due to limited network resources, CA Vs can switch
back to the default SP mode [13].
According to the type of shared sensory information, there
are three CP levels, including raw level, feature level, and
decision level. In the raw-level CP, complete [7], [14] or partial
raw data [13], [15] are shared among CA Vs, which preserves
the most fine-grained environmental information and leads to
the highest perception performance gain at the cost of huge
communication overhead due to the large data volume. The
decision-level CP integrates lightweight perception results of
individual CA Vs, which is communication-efficient but with
limited perception performance gain [10]. The feature-level
CP, which has gained significant attention in the computer
vision field, can balance between communication overhead
and perception performance gain [16], [17]. Research studies
on feature-level CP have focused on the design of AI-based
fusion schemes, but the underlying communication scheme
is usually simple, e.g., via broadcast-based vehicle-to-vehicle
(V2V) communication. Specifically, each CA V fuses all the
received feature data broadcast from neighboring CA Vs with
its own data and processes the fused data for inference [16],
[17]. Although the feature data are compressed from the
raw data, the data size is still large, e.g., in the scale of
Mbits. Hence, the broadcast-based CP schemes are commu-
nication inefficient especially in dense-traffic scenarios and
even not applicable when the available transmission resources
are limited. Moreover, due to individual computation at each
CA V , the overall computation demand is intensive, which is
roughly proportional to the number of CA Vs and the data
volume processed at each CA V [13]. The communication
and computation in such broadcast-based CP schemes lead to
large network resource consumption for satisfying the stringent
delay requirement of real-time perception tasks.
Recently, there are some studies on the deployment of CP
schemes in a practical network environment by considering
the limited V2X communication bandwidth and on-board
computing resources [7]–[10]. As nearby CA Vs collect sensing
data of common objects in a shared environment from diverse
viewpoints, adding sensing data from more CA Vs for data
fusion potentially improves the perception performance with
a diminishing marginal gain, at the cost of almost linearly
increasing network resources. For resource efficiency, unicast-
based CP schemes have been studied in [7]–[9], which dealarXiv:2401.10156v1  [cs.NI]  18 Jan 20242
with the association of CA V pairs that perform the cooper-
ative perception via unicast-based V2V communication. Two
CA Vs with complementary or enhancing sensory information
usually provide higher perception performance gain through
cooperation and tend to be associated, due to more even
spatial distribution or higher intensity of fused sensing data.
In comparison with the broadcast-based counterparts, unicast-
based CP schemes significantly improve the network resource
efficiency without a remarkable compromise on the perception
performance through proper association of CA V pairs.
In this work, we investigate unicast-based feature-level CP
among CA Vs. Different from the existing works on CA V
pair association to improve the perception performance gain,
we investigate how to support CP for predetermined CA V
pairs in a complex and dynamic network environment with
high resource efficiency. Specifically, we consider a practical
mixed-traffic autonomous driving scenario where a cluster
of CA Vs and human-driven vehicles (HDVs) traverse a road
segment with intermittent road-side-unit (RSU) coverage due
to the high RSU deployment cost. Each CA V pair works in
either the SP mode by default or the unicast-based feature-
level CP mode by selection. Considering the radio resource
sharing among vehicles, the radio resource availability for
CA Vs dynamically changes over time. Due to vehicle mobility,
the perception workloads and channel conditions for CA Vs are
dynamic in different perception task periods. In such a network
scenario, it is challenging to constantly support all CA V pairs
to work in the CP mode with delay satisfaction.
To accommodate the network dynamics, we propose an
adaptive cooperative perception scheme, which facilitates a
dynamic selection of CA V pairs for cooperative perception.
The selected CA V pairs are referred to as cooperative CAV
pairs , and the non-selected CA V pairs work in the SP mode
by default. For each cooperative CA V pair, we dynamically
allocate a fraction of available radio resources to support the
feature data transmission, and adjust the CPU frequency at the
CA Vs on demand, to balance between the transmission and
computation delays under the network dynamics, while satis-
fying a perception delay requirement. For the joint adaptive
CA V cooperation and resource allocation, there is a trade-off
between a total computing efficiency gain and a total cost
for dynamically switching between the SP and CP modes
for the CA V pairs. Specifically, for a CA V pair, the total
computing demand is significantly reduced in the CP mode,
by performing the data fusion and inference at one CA V and
allowing the computation result sharing within the CA V pair.
However, due to the on-demand CPU frequency allocation, the
CPU frequency in the CP mode can be occasionally higher
than that in the SP mode. As the CA Vs work in the SP
mode by default, we characterize the computing efficiency gain
of a CA V pair as the reduced amount of computing energy
consumption in comparison with that in the SP mode, which
depends on both computing demand and CPU frequency. We
focus on increasing the total computing efficiency gain while
reducing the total switching cost, via proper selection of
cooperative CA V pairs and optimal resource allocation. The
main contributions of this paper are summarized as follows.
•We propose an adaptive cooperative perception schemefor CA V pairs in a moving mixed-traffic vehicle cluster,
which allows each CA V pair to dynamically switch
between the SP and CP modes over different perception
task periods, to adapt to the network dynamics;
•We formulate a joint adaptive CA V cooperation and re-
source allocation problem, which can be decoupled to an
adaptive CA V cooperation subproblem in the long run and
a series of instantaneous resource allocation subproblems
in each perception task period, to maximize the total
computing efficiency gain with minimum switching cost,
while satisfying the perception delay requirement;
•We propose a model-assisted multi-agent reinforcement
learning (MARL) solution, where MARL is used to learn
the adaptive cooperation decisions among CA V pairs, and
a model-based solution is used for resource allocation
given each cooperation decision.
The remainder of this paper is organized as follows. The
system model is presented in Section II, with a performance
analysis included in Section III. The joint adaptive CA V
cooperation and resource allocation problem is formulated in
Section IV, with a model-assisted MARL solution presented
in Section V. Simulation results are provided in Section VI,
and conclusions are drawn in Section VII.
II. S YSTEM MODEL
A. Mixed-Traffic Autonomous Driving Scenario
We consider a vehicle cluster including MHDVs and K
CA V pairs in set K, moving on a multi-lane unidirectional
road under a consistent base station (BS) coverage and an
intermittent RSU coverage. The CA V pairs are predetermined
by using existing CA V pair association algorithms [8], [9]. a
cluster head is selected among the vehicles based on existing
vehicle clustering algorithms, to coordinate the communica-
tion, computing, and sensing in the vehicle cluster [4]. Both
BS and RSU provide the edge computing capability, facilitated
by co-located edge servers. Fig. 1 illustrates three snapshots
for a vehicle cluster moving through an RSU’s coverage area.
Initially, all the vehicles in the cluster have no access to the
RSU but the leading vehicle is about to move into the RSU
coverage. Then, the vehicles gradually move into and later
leave the RSU coverage. Consider a time-slotted system, in
which the time slots are indexed by integer n.
Each CA V initiates a perception task in each time slot to
identify the surrounding objects, whose results are essential
to supporting autonomous driving applications, such as path
planning and maneuver control. Each CA V pair k∈ K consists
of one transmitter CA V and one receiver CA V , and both CA Vs
share a similar view but from different angles. Each CA V pair
works in the SP mode by default and in the CP mode by
selection. Let x(n) ={xk(n),∀k∈ K} be a binary perception
mode selection decision vector for all CA V pairs (also referred
to as cooperation decisions for brevity) at time slot n, with
xk(n) = 1 indicating the CP mode and xk(n) = 0 indicating
the SP mode for CA V pair k. A CA V pair in the CP mode is
referred to as a cooperative CA V pair. Let KC(n)denote a set
of cooperative CA V pairs at time slot n, with KC(n)⊂ K.3
time Moving 
direction 
V2R 
link V2V 
link 
CAV pairs 
 HDVs RSU Edge 
servers Considered Cluster Considered Cluster 
Considered Cluster 
V2B 
link 
BS Snapshot 1
Snapshot 2
Snapshot 3
Fig. 1: A mixed-traffic autonomous driving scenario.
Each HDV occasionally requests an infotainment service,
e.g., mobile virtual reality, which is throughput sensitive and
computation intensive. For energy and delay efficiency, the
computation tasks at an HDV can be offloaded to a more
powerful edge server either at a BS or at an RSU, and the
data transmission is supported by either vehicle-to-BS (V2B)
or vehicle-to-RSU (V2R) communications [18].
B. Perception Task Model
For environment perception, lightweight data pre-processing
algorithms are used to slice the raw sensing data into ob-
ject partitions each containing one object of interest and
background partitions that contain only background infor-
mation [19]. An object tracking algorithm associates the
object partitions with existing objects in a maintained object
tracking list, by comparing the identified and predicted object
locations [20]. Only the new objects and the objects with
reduced tracking accuracy are further processed by a deep
neural network (DNN) for classification [21]. For CA V pair k,
letWk(n),WT
k(n), and WR
k(n)denote the number of objects
that require DNN model processing in the overlapping sensing
No Feature 
extraction Fast 
inference  ?Yes Input 
TI I pEarly exit output Each CAV 
Full 
inference Main 
output Fig. 2: Object classification by using a default DNN model.
Feature 
extraction Feature 
fusion Input 
Transmitter CAV Feature data 
transmission Receiver CAV 
Feature 
extraction Input No Fast 
inference  ?Yes 
TI I pEarly exit output 
Full 
inference Main 
output 
Fig. 3: Object classification by using a feature-fusion DNN model.
range of both CA Vs, in the non-overlapping sensing range of
the transmitter CA V , and in the non-overlapping sensing range
of the receiver CA V , respectively, at time slot n. We refer to the
objects in the overlapping and non-overlapping sensing ranges
as shared and individual objects respectively. Then, Wk(n)is
also referred to as shared workload, and WT
k(n),WR
k(n)are
referred to as individual workloads, for CA V pair k.
At time slot n, the object classification tasks for all the
objects of CA V pair kshould be completed within a time
duration of ∆, which is typically smaller than the time slot
length, with the consideration of 1) the raw data pre-processing
and object tracking procedures before the generation of object
classification tasks, and 2) the response time for autonomous
driving applications based on the object classification results.
1) DNN models: To support the object classification at
each CA V pair, we consider a default DNN model deployed
at both the transmitter and receiver CA Vs and a feature-
fusion DNN model partitioned between them, both employing
an early-exit DNN architecture, as illustrated in Fig. 2 and
Fig. 3 respectively [22]–[25]. As the objects can be processed
independently, we consider that both DNN models operate
on a per-object basis [19], [26]. Specifically, in the default
DNN model, a feature extraction module, mainly composed of
convolution ( CONV ) layers, first generates compressed feature
data based on an input of object sensing data. Then, the
feature data are further processed by a fast inference module,
composed of both CONV and fully-connected ( FC) layers, to
generate a DNN inference result, referred to as a fast inference
result. Letting Zdenote the total number of object classes,
a DNN inference result is a Z-dimension estimated class4
probability vector, where the classification performance is
measured by confidence level defined as one minus normalized
entropy [22], [23]. A higher confidence level indicates a less
uncertain estimation and implies a higher accuracy [23]. Let
ηdenote the confidence level of a fast inference result. If η
reaches a predetermined threshold, ηT, an object classification
result is obtained at an early exit output. Otherwise, a full
inference module, composed of deeper CONV andFClayers,
is triggered to re-process the feature data and generate another
DNN inference result, referred to as a full inference result, at
a main output. Let ρ∈(0,1)be the early exit probability for
the default DNN model, representing the probability that an
object classification result is obtained at the early exit output.
For a shared object of a CA V pair, the transmitter and
receiver CA Vs have object sensing data from different view-
points, implying a potential confidence level gain from data
fusion. Such an object can be processed by using the feature-
fusion DNN model. Specifically, both CA Vs process their own
object sensing data and extract features based on a feature
extraction module. Then, the feature data of the transmitter
CA V are transmitted via V2V communication to the receiver
CA V , where the feature data from both CA Vs are fused and
processed by the fast inference and selective full inference
modules. The object classification result is obtained at either
an early exit output with probability ˜ρ∈(0,1), or a main
output with probability 1−˜ρ, at the receiver CA V , which is then
sent back to the transmitter CA V . Typically, we have ˜ρ > ρ ,
as more fast inference results can satisfy the confidence level
requirement due to the confidence level gain from data fusion.
For the DNN models, let δ1,δ2,δ3andδ4be the computing
demand (in CPU cycles) for feature extraction, feature fusion,
fast inference, and full inference. Typically, we have δ2≪
min{δ3, δ4}, as the feature fusion module can be implemented
by simple operations such as concatenation, maxout, and aver-
age operations [16], [22] or lightweight attention schemes [17].
The average computing demand for processing one object by
the default and feature-fusion DNN models, denoted by δand
˜δrespectively, are given by
δ=δ1+δ3+ (1−ρ)δ4 (1)
˜δ= 2δ1+δ2+δ3+ (1−˜ρ)δ4. (2)
2) Cooperative Perception Mode: For a CA V pair in the
CP mode, the shared objects are collaboratively processed
by using the feature-fusion DNN model, while the individual
objects are independently processed at each CA V by using the
default DNN model. Consider two CPU cores at each CA V ,
for processing the shared and individual objects separately
using different DNN models. For each CPU core, the dynamic
voltage and frequency scaling (DVFS) technique is used
to allow on-demand CPU frequency scaling, to support the
dynamic perception workloads [7].
3) Stand-Alone Perception Mode: In the default SP mode,
both CA Vs in a CA V pair independently perform the object
classification tasks. Both the shared and individual objects
are processed by using the default DNN model. For ease of
analysis, we assume that the shared and individual objects are
processed at separate CPU cores, as in the CP mode.TABLE I: CPU F REQUENCY CONFIGURATION FOR A CAV P AIR
CPU Core Core 1 Core 2
Object Type Shared Objects Individual Objects
Perception Mode CP SP CP SP
CPU Frequencyfk(n)fD
k(n)fT
k(n) fT
k(n)at Transmitter CAV
CPU Frequencyfk(n)fD
k(n)fR
k(n) fR
k(n)at Receiver CAV
C. Computing Model
For CA V pair k, letδC
k(n),δS
k(n),δT
k(n), and δR
k(n)be
the average total computing demand for processing the shared
objects in the CP mode, the shared objects in the SP mode, the
transmitter CA V’s individual objects, and the receiver CA V’s
individual objects, at time slot n, given by
δC
k(n) =˜δWk(n), δS
k(n) = 2 δWk(n) (3)
δT
k(n) =δWT
k(n), δR
k(n) =δWR
k(n). (4)
There is a positive total computing demand reduction for CA V
pairkthrough cooperation which increases proportionally
to shared workload Wk(n), given by (2δ−˜δ)Wk(n) =
[δ3+ (1 + ˜ ρ−2ρ)δ4−δ2]Wk(n)>0.
For CA V pair k, letfk(n),fT
k(n), and fR
k(n)denote the
CPU frequencies (in Hz or cycle/s) for processing the shared
objects at both CA Vs, the individual objects at transmitter
CA V , and the individual objects at receiver CA V , respectively,
at time slot n. We have fk(n) =fD
k(n)ifxn(k) = 0 , where
fD
k(n)is the CPU frequency for processing the shared objects
at both CA Vs in the default SP mode. Table I summarizes
the relationships among CPU cores, object types, perception
modes, and CPU frequencies for a CA V pair. As the shared and
individual objects can be processed in parallel at the separate
CPU cores, we have fD
k(n) =δWk(n)
∆,fT
k(n) =δWT
k(n)
∆,
andfR
k(n) =δWR
k(n)
∆to ensure that the default DNN model
processing can be finished within delay bound ∆for the shared
objects in the SP mode, and for the individual objects in either
SP or CP mode, without CPU frequency over-provisioning.
All CPU frequencies are upper limited by a maximum CPU
frequency, fM, supported by DVFS, leading to an upper limit,
WM=fM∆
δ, forWk(n),WT
k(n), and WR
k(n).
The total computing energy consumption by all CPU cores
of CA V pair kat time slot n, denoted by ek(n), is given by
ek(n) =κ
fk(n)2δC
k(n)xk(n) +fD
k(n)2δS
k(n) (1−xk(n))
+fT
k(n)2δT
k(n) +fR
k(n)2δR
k(n)
(5)
where κis the energy efficiency coefficient of a CPU core [23].
From (5), we see that only the portion of computing energy for
processing the shared objects depends on cooperation decision
xk(n). The computing energy is a comprehensive metric that
integrates both CPU frequency and computing demand. We
characterize the computing efficiency gain of CA V pair kat
time slot n, denoted by Gk(n), as the reduced amount of
computing energy in comparison with that in the default SP
mode. We have Gk(n)≡0fork /∈ K C(n). For cooperative5
CA V pair k∈ KC(n), we have
Gk(n) =κfD
k(n)2δS
k(n)−κfk(n)2δC
k(n)
= 2κδfD
k(n)2Wk(n)−κ˜δfk(n)2Wk(n),∀k∈ KC(n)(6)
as a decreasing function of fk(n)>0. Here, Gk(n)is inde-
pendent of the individual workloads, as only shared objects
are processed differently between the SP and CP modes.
D. Communication Model
Consider a radio resource pool with total bandwidth B
for V2X sidelink communication, which is shared between
the V2R transmission from HDVs and the V2V transmission
for cooperative CA V pairs, and is non-overlapping with that
for V2B communication. The radio resource sharing between
CA Vs and HDVs occur only in the RSU coverage. Consider a
transmission priority for HDVs, as the CA Vs can work in the
SP mode without radio resource usage by default. Orthogonal
frequency division multiplexing (OFDM) based transmission
schemes are employed for the V2X sidelink communication.
LetB(n)be the time-varying available radio spectrum
bandwidth for CA Vs, with the consideration of dynamic
background radio resource usage by HDVs. Let β(n) =
{βk(n),∀k∈ K} be a radio resource allocation decision vector
for all CA V pairs at time slot n, with βk(n)denoting the
fraction of available radio resources allocated to CA V pair k
for supporting the feature data transmission at time slot n. The
average transmission rate for CA V pair kat time slot nis
Rk(n) =βk(n)B(n) log2
1 +pkgk(n)
σ2
,∀k∈ K (7)
where pkis the transmit power of CA V pair k,gk(n)is the
channel power gain between both CA Vs in CA V pair kat
time slot n, and σ2represents the received noise power. Due to
high vehicle mobility, we consider only the large-scale channel
conditions, specifically the path loss, for the CA V pairs.
E. Delay Model
Under the assumption of max{Wk(n), WT
k(n), WR
k(n)} ≤
WM, the CPU frequencies for processing the shared objects in
the SP mode and for processing the individual objects in both
SP and CP modes can be feasibly scaled up/down to ensure
delay satisfaction. Here, we focus on the delay performance of
the shared objects in the CP mode. Let wdenote the feature
data size in the unit of bit. If CA V pair kworks in the CP
mode, the average object classification delay for each shared
object, denoted by dk(n), depends on the feature-fusion DNN
model. The delay is composed of feature extraction delay
δ1
fk(n), feature data transmission delayw
Rk(n), feature fusion
delayδ2
fk(n), and the average inference delay,δ3+(1−˜ρ)δ4
fk(n). The
delay for sending the classification results is negligible due to
the small data size. For delay satisfaction, dk(n)should not
exceed a per-object delay budget,∆
Wk(n), given by
dk(n) =w
Rk(n)+ˆδ
fk(n)≤∆
Wk(n),∀k∈ KC(n)(8)
where ˆδ=δ1+δ2+δ3+ (1−˜ρ)δ4is a constant.F . Generalization
For computing efficiency gain and perception accuracy
enhancement, nearby CA Vs can be grouped for cooperative
perception by using a Y-input feature-fusion DNN model,
where Yis a general group size. At a given vehicle density,
the content similarity within a group tends to reduce as Y
increases, due to a lower average percentage of shared objects.
As only the shared objects can be collaboratively processed
by using the feature-fusion DNN model, the reduced content
similarity may gradually compromise the total computing effi-
ciency gain and the average perception accuracy enhancement
asYincreases. Additionally, a larger group size increases the
accuracy of shared objects with a diminishing marginal gain.
However, there is a higher overall communication cost for
supporting the feature data transmission of more transmitter
CA Vs in a larger group. For simplicity, we consider Y= 2
and pair the CA Vs based on existing works [7]–[9]. How to
select the best group size, Y, and how to optimally group the
CA Vs given Yremain to be investigated in our future work.
III. 2D P ERFORMANCE REGION ANALYSIS
For problem formulation, we analyze the performance of
an arbitrary cooperative CA V pair, k∈ K C(n), at time slot
n, under different transmission rates and CPU frequencies for
supporting the classification of shared objects. The condition
for non-negative computing efficiency gain via cooperation,
i.e.,Gk(n)≥0, is a CPU frequency requirement, given by
fk(n)≤fP
k(n) =r
2δ
˜δfD
k(n) =s
2δ3
˜δWk(n)
∆(9)
where fP
k(n)corresponds to zero computing efficiency gain
and increases proportionally to shared workload Wk(n). We
have fP
k(n)> fD
k(n), asq
2δ
˜δ>1. Under assumption
Wk(n)≤WM, there are two cases for the relationship among
fD
k(n),fP
k(n)andfM, depending on shared workload Wk(n):
•Low shared workload: ForWk(n)≤q
˜δ
2δfM∆
δ=q
˜δ
2δWM, we have fD
k(n)< fP
k(n)≤fM. For a feasible
CPU frequency scale-up from fD
k(n)tofM, computing
efficiency gain Gk(n)transits from positive to negative,
with a zero value at fk(n) =fP
k(n);
•High shared workload: Forq
˜δ
2δWM< W k(n)≤WM,
we have fD
k(n)≤fM< fP
k(n). Asfk(n)scales up from
fD
k(n)tofM,Gk(n)decreases but remains positive.
LetRM,RP
k(n), and RD
k(n)be the minimum transmission
rates for delay satisfaction if cooperative CA V pair koper-
ates at CPU frequencies fM,fP
k(n), and fD
k(n)respectively
for processing the shared objects. The three rate-frequency
pairs, [RM, fM],
RP
k(n), fP
k(n)
, and
RD
k(n), fD
k(n)
, all lie
on a curve indicating dk(n) =∆
Wk(n). We obtain RM=
w.
∆
Wk(n)−ˆδ
fM
,RP
k(n) =Wk(n)wϕ
(ϕ−1)∆where ϕ=q
2δ3
ˆδ2˜δ>1
is a constant, and RD
k(n) =Wk(n)wδ
[(˜ρ−ρ)δ4−δ2]∆, all increasing
with shared workload Wk(n). For cooperative CA V pair k,
there are multiple 2D performance regions with different delay
performance, CPU frequency scaling range, and computing6
TABLE II: S UMMARY OF DIFFERENT PERFORMANCE REGIONS OF A COOPERATIVE CAV P AIR
Region Shared Workload Delay Performance CPU Frequency Scaling Range Computing Efficiency Gain
R1 Low/High Violation N/A N/A
R2 Low/High Satisfaction Infeasible scale-up: fk(n)> fM N/A
R3 Low Satisfaction Feasible scale-up: fP
k(n)< fk(n)≤fM Negative
R4 Low/High SatisfactionFeasible scale-up:
Non-negative fD
k(n)< fk(n)≤fP
k(n)at a low workload,
fD
k(n)< fk(n)≤fMat a high workload
R5 Low/High Satisfaction Default or scale-down: fk(n)≤fD
k(n) Positive
20 25 30 35 40 45 50 
Transmission rate (Mbps)246810 CPU frequency (GHz) 
(a)Low workload
40 50 60 70 80 
Transmission rate (Mbps)45678910 CPU frequency (GHz) (b)High workload
Fig. 4: Examples of 2D performance regions for cooperative CA V pair
kat a different shared workload, where [RM, fM],
RP
k(n), fP
k(n)
, and
RD
k(n), fD
k(n)
are indicated by blue, pink, and green circles.
efficiency gain, for different combinations of Rk(n)andfk(n),
as summarized in Table II. The number of performance regions
depends on the shared workload, as illustrated in Fig. 4.
From Fig. 4 and Table II, we obtain some useful principles
in the resource allocation for each cooperative CA V pair. First,
only the rate-frequency pairs in Regions R4andR5should
be selected for both delay satisfaction and non-negative com-
puting efficiency gain at a feasible CPU frequency. Second,
a subset of Region R4andRegion R5rate-frequency pairs
that lie on curve dk(n) =∆
Wk(n)are the ideal candidate rate-
frequency pairs without transmission rate over-provisioning,
as indicated by red curves in Fig. 4. Accordingly, the ideal
candidate rate-frequency pairs for each cooperative CA V pair
k∈ KC(n)should satisfy the following constraints,
fk(n)≤min
fP
k(n), fM	
,∀k∈ KC(n) (10)
w
Rk(n)+ˆδ
fk(n)=∆
Wk(n),∀k∈ KC(n). (11)
IV. P ROBLEM FORMULATION
Due to the dynamic radio resource availability, the current
available radio resources may be insufficient for supporting
all CA V pairs to work in the CP mode with delay satis-
faction and non-negative computing efficiency gain. Thus,
an adaptive set of cooperative CA V pairs, KC(n)⊂ K
should be determined for each time slot. Due to environmental
changes, the shared workload and the transmitter-receiver
distance vary over time for each cooperative CA V pair. As
the total computing demand reduction through cooperationincreases in proportion to the shared workload, a moderate
shared workload increase potentially brings more computing
efficiency gain. However, due to a reduced per-object delay
budget, a heavier shared workload requires a higher CPU
frequency for delay satisfaction under limited radio resources,
compromising the computing efficiency gain. For a longer
transmitter-receiver distance, the average transmission rate
decreases due to a higher path loss, leading to a higher CPU
frequency requirement for delay satisfaction, which reduces
the computing efficiency gain. Hence, the dynamics in both
shared workloads and transmitter-receiver distances should be
considered in the adaptive selection of cooperative CA V pairs,
to maximize the total computing efficiency gain.
Moreover, the cooperation decisions for each CA V pair
should not change too frequently, as the switching between
the SP and CP modes incur a CPU process switching over-
head between scheduling the default and feature-fusion DNN
models [27]. Let C(n)be the total number of CA V pairs that
change the cooperation status at time slot n, given by
C(n) =X
k∈K|xk(n)−xk(n−1)|. (12)
The total switching cost increases proportionally to C(n). To
maximize the total computing efficiency gain while minimiz-
ing the total switching cost in the long run, we study a joint
adaptive CA V cooperation and resource allocation problem,
to adaptively switch between the SP and CP modes and
allocate resources among all CA V pairs for each time slot.
Letf(n) ={fk(n),∀k∈ K} be a CPU frequency allocation
decision vector for processing shared objects at all CA V pairs
at time slot n. Let ˙x={x(n),∀n},˙β={β(n),∀n},
˙f={f(n),∀n}denote the CA V cooperation, radio resource
allocation, and CPU frequency allocation decisions for all time
slots. Then, the joint problem is formulated as
P0: max
˙x,˙β,˙fX
n" X
k∈KGk(n)!
−˜ωC(n)#
(13)
s.t. (7) ,(10),(11)X
k∈Kβk(n)≤1 (14)
0≤βk(n)≤xk(n), k∈ K (15)
(1−xk(n))fD
k(n)≤fk(n)
≤(1−xk(n))fD
k(n) +xk(n)M, k∈ K (16)7
where ˜ωis a positive weight that controls the trade-off between
gain and cost, and Mis a very large constant. Among the con-
straints, (7) is the expression of transmission rate Rk(n), (10)
and (11) are conditions for the ideal candidate rate-frequency
pairs in the 2D performance regions. Constraints (14) and (15)
ensure that the total fraction of allocated bandwidth for all
CA V pairs does not exceed one, while guaranteeing that no
radio resources are allocated to CA V pairs in the SP mode.
With constraint (16), we have fk(n) =fD
k(n)in the SP mode
and0≤fk(n)≤Min the CP mode for CA V pair k.
Let∗associate the optimal solution to problem P0. Given
˙x∗, the resource allocation decisions can be decoupled among
time slots in the objective function and all the constraints.
Hence, given ˙x∗,(β∗(n),f∗(n))must be the resource alloca-
tion solution that maximizes the instantaneous total computing
efficiency gain,P
k∈KGk(n), for time slot n, since the total
switching cost depends only on ˙x. Therefore, problem P0
can be decoupled to a long-term optimization subproblem for
the adaptive CA V cooperation and a series of instantaneous
optimization subproblems for resource allocation, as follows.
A. Resource Allocation Subproblem
For time slot n, given any CA V cooperation decision x(n), a
cooperative CA V pair set, KC(n), is determined. For CA V pair
kin the SP mode, we have βk(n) = 0 ,fk(n) =fD
k(n)based
on (15) and (16), and Gk(n) = 0 . Accordingly, a resource
allocation subproblem for time slot nis formulated as
P1: max
βC(n),fC(n)X
k∈KC(n)Gk(n) (17)
s.t. (7) ,(10),(11)X
k∈KC(n)βk(n)≤1 (18)
where βC(n) = {βk(n),∀k∈ K C(n)}andfC(n) =
{fk(n),∀k∈ KC(n)}are the resource allocation decisions for
cooperative CA V pairs in KC(n). If problem P1is feasible,
we have G∗(n) =P
k∈KC(n)G∗
k(n)as the maximal total
computing efficiency gain achieved with optimal resource
allocation; otherwise, G∗(n)is undefined.
B. Adaptive CAV Cooperation Subproblem
We formulate an adaptive CA V cooperation subproblem as
a multi-agent Markov decision process (MMDP), where each
agent corresponds to a CA V pair that makes binary cooperation
decisions based on local observations over time. We consider
cooperative agents in the MMDP, where all CA V pairs collab-
oratively maximize an expected total discounted reward. An
MMDP is represented as (K,S,{Ak}, P, R, {Ωk}, γ), where
Kis a set of agents, Sis the state space, Akis the action space
for agent k, withA=×kAkbeing the set of joint actions, Pis
an unknown state transition probability matrix, R:S×A 7→ R
is a reward function, Ωkis a set of observations for agent k,
andγis a discount factor in [0,1). The observation, action,
and reward of agent kare given as follows.
•Observation : The local observation for agent kat time
slotn, denoted by o(n)
k, includes the available radiospectrum bandwidth for CA Vs, B(n), shared workload
Wk(n), transmitter-receiver distance Dk(n), and previous
cooperation status xk(n−1), given by
o(n)
k={B(n), Wk(n), Dk(n), xk(n−1)}; (19)
•Action : At time slot n, agent k’s action is the cooper-
ation decision, xk(n). Joint action x(n) ={xk(n),∀k}
determines a cooperative CA V pair set, KC(n);
•Reward : The reward for any agent at time slot n, denoted
byr(n), is given by
r(n)=
G∗(n)−˜ωC(n), ifP1is feasible
P, otherwise(20)
where G∗(n)is the maximal total computing efficiency
gain associated with optimal resource allocation for
KC(n). If problem P1is infeasible under the selected
joint action, a negative penalty, P, is used as the reward.
As both the objective function and the delay constraint
in problem P1are derived based on the early exit proba-
bilities of DNN models, we aim to learn the statistically
optimal adaptive CA V cooperation actions in the long run
by using the reward function in (20).
V. M ODEL -ASSISTED MULTI -AGENT REINFORCEMENT
LEARNING SOLUTION
We propose a model-assisted learning solution to the joint
problem. First, a model-based optimal solution is derived for
the resource allocation subproblem. Then, a model-assisted
MARL approach that relies on the model-based optimal re-
source allocation solution for reward calculation is proposed,
to solve the MMDP for adaptive CA V cooperation.
A. Optimal Resource Allocation Solution
With (6), maximizingP
k∈KC(n)Gk(n)inP1is equivalent
to minimizingP
k∈KC(n)Wk(n)fk(n)2. By writing βk(n)as
a function of Rk(n), we combine constraints (7) and (18) as
X
k∈KC(n)Rk(n)
B(n) log2(1 +pkgk(n)/σ2)≤1. (21)
From constraint (11), Rk(n) = w
∆
Wk(n)−ˆδ
fk(n)
is a
function of fk(n). Substituting Rk(n)in (21), we transform
(21) into a constraint on decision variables fC(n), given by
h(f) =X
k∈KC(n)ck
bk−ˆδ/fk(n)−1≤0 (22)
where bk=∆
Wk(n)andck=w
B(n) log2(1+pkgk(n)/σ2)are
known parameters given network status for time slot n. Here,
h(f)is a monotonically decreasing constraint function of
fC(n), defined in domain {fk(n)>ˆδ
bk,∀k∈ K C(n)}
to ensure Rk(n)>0fork∈ K C(n). Let f0
k(n) =
min
fP
k(n), fM	
, which is known to CA V pair k, and let
f0
C(n) =
f0
k(n),∀k∈ KC(n)	
. Then, problem P1is trans-
formed to a CPU frequency allocation problem, given by
P2: min
fC(n)X
k∈KC(n)Wk(n)fk(n)2(23)8
s.t. fC(n)⪯f0
C(n) (24)
h(f)≤0. (25)
Theorem 1. Problem P2is convex, and strong duality holds
if the problem is feasible under condition h(f0)<0.
The proof of Theorem 1 is given in Appendix. Based
on Theorem 1, Karush-Kuhn-Tucker (KKT) conditions are
necessary and sufficient conditions for optimal solution to
problem P2[28]. The Lagrangian of P2is
L(f,λ, ν) =X
k∈KC(n)Wk(n)fk(n)2
+X
k∈KC(n)λk 
fk(n)−f0
k(n)
+ν h(f)(26)
where λ={λk,∀k∈ K C(n)}andνare dual variables. Its
gradient with respect to primal variable fk(n)is given by
∂L(f,λ, ν)
∂fk(n)=2Wk(n)fk(n)+λk−νckˆδ

bkfk(n)−ˆδ2.(27)
Letf∗be a primal optimal point and (λ∗, ν∗)be a dual
optimal point. Then, the KKT conditions for the optimal
solution to problem P2are given by
f∗
k≤f0
k,∀k∈ KC (28a)
h(f∗)≤0 (28b)
λ∗
k≥0,∀k∈ KC (28c)
ν∗≥0 (28d)
λ∗
k 
f∗
k−f0
k
= 0,∀k∈ KC (28e)
2Wkf∗
k+λ∗
k−ν∗ ckˆδ

bkf∗
k−ˆδ2= 0,∀k∈ KC (28f)
where time slot index nis omitted for brevity. Among all
conditions, (28a) and (28b) are primal feasible conditions,
(28c) and (28d) are dual feasible conditions, (28e) indicates
the complementary slackness, and (28f) ensures that the La-
grangian gradient in (27) vanishes at f∗asf∗minimizes
L(f,λ∗, ν∗)[28]. From (28e) and (28f), we obtain

ν∗ckˆδ

bkf∗
k−ˆδ2−2Wkf∗
k
 
f∗
k−f0
k
= 0,∀k∈ KC.(29)
For dual variable ν, letS(fk, ν) =νckˆδ
(bkfk−ˆδ)2−2Wkfk,
which is a monotonically decreasing function in domain
fk>ˆδ
bk. Letf1
k(ν)be the root of S(fk, ν), which corresponds
to the intersection point of functions νckˆδ
(bkfk−ˆδ)2and2Wkfk
in domain fk>ˆδ
bk. Fig. 5 illustrates the root of function
S(fk, ν)forν1< ν2. We see that, for a smaller value of dual
variable ν, the root of S(fk, ν), i.e., f1
k(ν), has a smaller
value. According to (28f), we have λ∗
k=S(f∗
k, ν∗), and
condition (29) is rewritten as
S(f∗
k, ν∗) 
f∗
k−f0
k
= 0,∀k∈ KC. (30)
Then, the primal optimal point, f∗, that minimizes the objec-
0 1 2 3 4 5 6 7 8 9 100100200300400Fig. 5: An illustration of the root of function S(fk, ν)forν1< ν 2.
tive function in (23) is given by
f∗
k=
f1
k(ν∗), if f1
k(ν∗)≤f0
k
f0
k, if f0
k< f1
k(ν∗)(31)
for any k∈ KC, to guarantee condition (30) and ensure that
λ∗
k=S(f∗
k, ν∗)≥0in (28c). Specifically, if f1
k(ν∗)≤f0
k,
we have λ∗
k= 0; otherwise, we have λ∗
k>0.
Asν∗is an unknown optimal dual variable in (31), we will
find the primal optimal point, f∗, by exploring the possible
values of ν∗. Let ˆν∗be a candidate value of ν∗, and let ˆf∗
be the corresponding candidate value of f∗forν∗= ˆν∗
based on (31). For a smaller ˆν∗value, ˆf1
k(ˆν∗)is smaller,
then ˆf∗
kis potentially smaller according to (31), leading to a
potentially smaller objective value in (23). However, as h(ˆf∗)
is a decreasing function of ˆf∗
k, the primal feasible condition
in (28b) might be violated if the value of ˆν∗is too small.
Therefore, we should find a minimum non-negative value for
ˆν∗that satisfies (28b) and (28d), to obtain ν∗andf∗.
To solve problem P2, the feasibility is first checked by
calculating h(f0). Ifh(f0)>0, the problem is infeasible;
ifh(f0) = 0 , we can directly obtain the optimal solution as
f∗=f0; ifh(f0)<0, we continue to use a binary-search
method to iteratively find ν∗in a gradually reduced interval
[νL, νR]. The detailed algorithm is described as follows.
For initialization, as f∗
k∈ˆδ
bk, f0
ki
,νLandνRare set to sat-
isfySˆδ
maxk∈KCbk+ϵ, νL
= 0 andS 
mink∈KCf0
k, νR
=
0. Here, ϵis a very small number satisfying 0< ϵ≪1. The
shared workloads among all cooperative CA V pairs determine
the initial binary-search interval, [νL, νR]. In each iteration,
ˆν∗is set asνL+νR
2, and ˆf∗is obtained based on (31). For
f=ˆf∗, let ˆG∗=P
k∈KCˆG∗
kdenote the corresponding total
computing efficiency gain in (17). Constraint (28b) is checked
by calculating h(ˆf∗). Whether or not the binary search ends
at the current iteration and how to update interval [νL, νR]for
the next iteration depend on h(ˆf∗):
•Ifh(ˆf∗) = 0 , the optimal points, ν∗andf∗, are obtained
asˆν∗and ˆf∗, and the algorithm is ideally finished. In
practice, we set a stopping criteria, −10−4< h(ˆf∗)<0,
and obtain asymptotically optimal primal and dual vari-
ables when the binary search ends;
•Ifh(ˆf∗)>0, constraint (28b) is infeasible, and the
candidate value for ν∗should be increased in the next
iteration, thus we set νL= ˆν∗;9
•Ifh(ˆf∗)<0, the candidate value for ν∗can be further
reduced in the next iteration to increase h(ˆf∗)and reduce
the objective value in (23), thus we set νR= ˆν∗.
Such a centralized iterative algorithm can be executed at
the cluster head which is responsible for collecting the overall
network dynamics in the vehicle cluster.
B. Model-Assisted Multi-Agent Reinforcement Learning
We use a model-assisted MARL algorithm to solve the
MMDP for adaptive CA V cooperation. To address the in-
herent nonstationary issue due to the partial observability at
each agent, we use a multi-agent deep deterministic policy
gradient (MADDPG) algorithm which adopts a centralized
training distributed execution (CTDE) framework [29], [30].
The model-assisted MADDPG algorithm is presented in Al-
gorithm 1. Each agent trains a critic network and an actor
network based on the global state and joint action in a
centralized training stage, and uses the trained actor network
for decision based on local observation in a distributed exe-
cution stage. To enhance the observability at each agent, we
augment the local observation by two additional elements,
i.e., the average workload and the average transmitter-receiver
distance among all agents, both of which can be provided
by the cluster head [31]. In this manner, a CA V pair has
both local information and some statistical global information
for better-informed decisions during the distributed execution
stage, without acquiring the full global state. Let s(n)
kbe
the augmented local observation for agent kat time slot
n, given by s(n)
k=n
o(n)
k,P
k∈KWk(n)
K,P
k∈KDk(n)
Ko
. Let
s(n)={s(n)
k,∀k∈ K} be the global state at time slot n.
As the MMDP has a discrete action space for each agent,
specifically a binary action space for whether or not to
cooperate, a Gumbel-Softmax estimator is used by each agent
to allow the backpropagation of gradients through the actor
network during training [29]. For agent k, an actor network,
µk(sk), parameterized by weights φk, is trained to learn a
continuous action, ak={ak,j, j= 0,1}, based on aug-
mented local observation sk. Here, akis an estimated two-
dimension Gumbel-Softmax distribution over the binary action
space [32]. Let a(n)
k={a(n)
k,j, j= 0,1}be the continuous
action of agent kat time slot n, and let a(n)={a(n)
k,∀k}be
the joint continuous action at time slot n. Agent kobtains the
cooperation decision as the binary action with the maximum
Gumbel-Softmax probability, i.e., xk(n) = arg max j=0,1a(n)
k,j.
In addition to actor network µk(sk), agent ktrains a
critic network parameterized by weights θkto approximate
a centralized Q-function, Qk(s,a) =EhPN−1
n=0γnr(n)
ks,ai
,
that takes global state sand joint action aas input to estimate
aQ-value, where Nis the maximum number of learning steps
in an episode. In the training stage of such an actor-critic
framework, although the agents independently take actions
based on the augmented local observations, they evaluate
the actions and refine the policies by taking the actions of
other agents into consideration in Qk(s,a), thus facilitating a
collaborative exploration of the vehicular network environment
to maximize a collective reward. To overcome the divergenceAlgorithm 1: A Model-Assisted MADDPG Algorithm
/*Centralized Training Stage */
1All agents initialize networks with random weights.
2foreach episode do
3 Initialize local observation o(0)
kfork∈ K.
4 forlearning step ndo
5 foragent kdo
6 Send local observation o(n)
kto cluster head.
7 Collect augmented local observation s(n)
k.
8 Decide continuous action a(n)
k=µk
s(n)
k
,
derive binary cooperation decision xk(n), and
senda(n)
kto cluster head.
9 Cluster head solves the resource allocation
subproblem, obtains G∗(n)andr(n), and
broadcasts s(n),a(n), and r(n)to all agents.
10 foragent kdo
11 Add
s(n−1),a(n−1), r(n−1),s(n)
to buffer B
ifn≥1.
12 Sample mini-batch of experiences from B.
13 Update primary and target critic and actor
networks based on (33), (34), and (32).
/*Distributed Execution Stage */
14foreach episode do
15 forlearning step ndo
16 foragent kdo
17 Send local observation o(n)
kto cluster head.
18 Collect augmented local observation s(n)
k.
19 Decide continuous action a(n)
k=µk
s(n)
k
,
derive binary cooperation decision xk(n), and
sendxk(n)to cluster head.
20 Cluster head allocates resources to cooperative CA V
pairs.
update issue, agent kalso has a target critic network, ˆQk(s,a),
parameterized by ˆθk, and a target actor network, ˆµk(sk),
parameterized by ˆφk, with delayed updates. Agent kinitializes
the primary and target critic and actor networks with random
weights before training ( line 1) and then continually updates
the weights until convergence. MADDPG employs a soft
updating strategy, where agent kupdates weights ˆθkandˆφk
of the target networks in each learning step ( line13) as
ˆθk=ξθk+ (1−ξ)ˆθkand ˆφk=ξφk+ (1−ξ)ˆφk(32)
withξbeing the soft updating rate of the target networks.
The agents interact with the network environment in a
sequence of episodes, each containing a finite number of
learning steps, one learning step for one time slot. An episode
starts when a vehicle cluster is about to move into an RSU’s
coverage area and ends once it leaves the coverage. At the
beginning of each episode, each agent initializes the local
observation ( line3). At the beginning of time slot n, each agent
ksends local observation o(n)
kvia a dedicated control channel
to the cluster head ( line6), which calculates and then returns
the augmented information. Agent kcollects augmented local
observation s(n)
k(line 7), based on which the agent decides
continuous action a(n)
kasµk
s(n)
k
by the primary actor10
network, and then discretizes it into a binary cooperation
decision, xk(n)(line 8). All agents send the continuous
actions to the cluster head ( line8). The cluster head allocates
resources to cooperative CA V pairs, determines the maximal
total computing efficiency gain, G∗(n), using the model-based
resource allocation solution, and calculates reward r(n)in (20)
which is then broadcast to all agents together with global state
s(n)and joint action a(n)(line9). Then, each agent adds a new
transition tuple 
s(n−1),a(n−1), r(n−1),s(n)
to an experience
replay buffer, B, ifn≥1(line11).
To train the critic and actor networks at each learn-
ing step, each agent samples a mini-batch of Iexperi-
ences from B, among which 
s(i),a(i), r(i),s(i+1)
repre-
sents the i-th experience ( line 12). Agent kupdates the
critic network by minimizing a loss function, Lk(θk) =
1
IPI
i=1h
y(i)
k−Qk 
s(i),a(i)i2
, where y(i)
k=r(i)+
γˆQk
s(i+1),ˆµ1
s(i+1)
1
, . . . , ˆµK
s(i+1)
K
is a target value
estimated by the target critic and actor networks. Weights θk
are updated via a gradient descent ( line13), given by
θk←θk−αθ∇θkLk(θk) (33)
where αθis the learning rate for critic networks. The actor
network of agent kaims to maximize a long-term total
expected reward, Jk(φk) =EhPN
n=0γnr(n)
ki
, which is the
expected Q-value among all state-action pairs, i.e., Jk(φk) =
Es,aQk(s,a). Thus, weights φkof the actor network are
updated via a gradient ascent ( line13), given by
φk←φk+αφ∇φkJk(φk) (34)
where αφis the learning rate for actor networks, and the
gradient of Jk(φk)is given by
∇φkJk(φk) =1
IIX
i=1h
∇φkµk
s(i)
k
∇akQk
s(i), a(i)
1,
. . . , a k, . . . , a(i)
K
ak=µk
s(i)
k#
. (35)
After the centralized training stage, each agent uses the
trained actor network for decision in a distributed execution
stage, with the assistance of the cluster head ( lines 14-20).
VI. S IMULATION RESULTS
A. Simulation Setup
We consider a four-lane unidirectional highway, where
K∈ {2,3,4,5,6}CA V pairs are moving together with 10
HDVs in a vehicle cluster, with an intermittent RSU coverage.
The RSU is 10maway from the highway and provides a
communication radius of 250 m. In the RL task, we consider
a1500 mhighway segment for each episode, during which a
vehicle cluster moves for a distance of 1000 mthrough the
RSU coverage. The vehicle speed is uniformly set in a range
of[23,27]m/s. The time slot length is 500ms. Each episode
spans over an average time duration of 40sand contains
80time slots on average. The delay requirement for object
classification in each time slot is ∆ = 100 ms.TABLE III: S YSTEM PARAMETERS IN SIMULATION
Parameters Value
Center frequency ( fc) 6GHz
Noise power ( σ2) −104 dBm
Transmit power ( pk) 23dBm
Maximum local CPU frequency ( fM) 8GHz
Energy efficiency coefficient ( κ) 10−28J/s/Hz3
Feature extraction computing demand ( δ1)4×106cycles
Feature fusion computing demand ( δ2) 1000 cycles
Fast inference computing demand ( δ3) 3.1×105cycles
Full inference computing demand ( δ4) 7.7×107cycles
Feature data size ( w) 0.29Mbits
Default early exit probability ( ρ) 0.3
Feature-fusion early exit probability ( ˜ρ) 0.6
We use the Simulation of Urban Mobility (SUMO) traffic
simulator to simulate the vehicle trajectories in each episode,
based on which the transmitter-receiver distances of each CA V
pair can be obtained [9], [31], [33]. To obtain the time-varying
channel power gain for each CA V pair, we use the 3GPP
NR-V2X 37.885 highway case for the V2V link path loss
calculation [34]. The path loss in dBfor CA V pair kduring
time slot nis calculated as LdB(n) = 32 .4+20 log10Dk(n)+
20 log10fc, where Dk(n)is the transmitter-receiver distance
in meter, and fcis the center frequency in GHz. For CA V pair
k, the transitions of shared workload, Wk(n), across different
time slots follow a Markov chain with states in {4,5,6,7,8}.
When residing in the RSU coverage, each HDV generates
V2R transmission requests in each time slot according to
aBernoulli (0.5)distribution, with each V2R transmission
request occupying a bandwidth of 0.5MHz. With a total band-
width of B= 10 .5MHz for V2X sidelink communication,
the available radio spectrum bandwidth for V2V transmission
at time slot nisB(n) = B−0.5M(n), where M(n)is
the number of HDVs that request V2R transmission at time
slotn. On average, the B(n)value in an episode follows
a decreasing-then-increasing trend when the vehicle cluster
drives through the RSU coverage. Other system parameters
are given in Table III.
We implement both the iterative algorithm for optimal
resource allocation and the MADDPG algorithm for adaptive
CA V cooperation using Python 3.9.2. The learning modules
are implemented using TensorFlow 2.11.0. Each learning
agent has two hidden layers with (64,64)neurons and Relu
activation functions in critic and actor networks. The critic
network has a one-dimension output with no activation func-
tion, and the actor network has a two-dimension output with
Gumbel-SoftMax activation. We set weight ˜ω∈[0,1]and
penalty P=−10in reward function (20), and use αθ= 10−2
andαφ= 10−3as the critic and actor learning rates, a soft
updating rate of ξ= 0.01for target network update, and
discount factor γ= 0.95. For training at each learning step, a
mini-batch of I= 1024 experiences are sampled from buffer
Bwith size 100000 .11
0 500 1000 1500 2000 250000.40.81.21.622.42.8
(a)
0 500 1000 1500 2000 2500-0.6-0.4-0.200.20.4
(b)
Fig. 6: Performance of the optimal resource allocation solution for a different
number of cooperative CA V pairs ( |KC|) atW= 6. (a) Total computing
efficiency gain. (b) Constraint value.
B. Performance Evaluation
We first evaluate the performance of the optimal resource al-
location solution, for a set, KC, of cooperative CA V pairs with
an available bandwidth of 10.5MHz for V2V transmission.
Without loss of generality, all cooperative CA V pairs have an
identical shared workload, W. We examine the impact of |KC|
andWon the total computing efficiency gain.
In the first set of simulations, the performance of the
optimal resource allocation solution is evaluated for |KC| ∈
{2,3,4,5,6}, with W= 6. The transmitter-receiver distances
of all the cooperative CA V pairs are set as 20m. For the
constant workload, the initial binary-search interval, [νL, νR],
is the same for all the |KC|values. Fig. 6 shows the vari-
ations of total computing efficiency gain ˆG∗and constraint
value h(ˆf∗)during the binary-search of candidate optimal
dual variable ˆν∗, for each |KC|. The asymptotically optimal
total computing efficiency gain and constraint value, G∗and
h(f∗), obtained at an asymptotically optimal dual variable,
ν∗, are represented by a red dot for each |KC|value. As
|KC|increases, the radio resources are shared among more
cooperative CA V pairs for feature data transmission, and each
cooperative CA V pair should increase the CPU frequency
to compensate for the lower average transmission rate, to
achieve delay satisfaction. Accordingly, as |KC|increases, the
asymptotically optimal CPU frequency allocation variables,
f∗, are larger, corresponding to a larger ν∗value. Although
0 2000 4000 6000 8000 1000001234(a)
0 2000 4000 6000 8000 10000-0.6-0.4-0.200.20.4
(b)
Fig. 7: Performance of the optimal resource allocation solution for a different
workload ( W) at|KC|= 5 . (a) Total computing efficiency gain. (b)
Constraint value.
the total reduced amount of computing demand increases
in proportion to |KC|, the total computing efficiency gain
gradually decreases as the CPU frequency further increases,
leading to a first-increasing-then-decreasing trend of G∗, as
shown in Fig. 6(a). At the asymptotically optimal points,
constraint value h(f∗)approaches zero, as shown in Fig. 6(b).
In the second set of simulations, the performance of the
optimal resource allocation solution is evaluated for |KC|= 5,
with shared workload W∈ {4,5,6,7,8}, as shown in Fig. 7.
The transmitter-receiver distances of the 5cooperative CA V
pairs are set as [20.4,16.5,11.4,29.7,28.3]m, respectively.
For a heavier workload, there is a right shift for the initial
binary-search interval, [νL, νR], as both νLandνRhave a
larger value. When Wincreases, the total computing demand
reduction increases proportionally, while the per-object delay
budget,∆
W, decreases inverse proportionally. With a constant
radio spectrum bandwidth, the CPU frequency should be
increased at each CA V pair to satisfy the more stringent delay
requirement as Wincreases. Hence, in Fig. 7(a), we observe
a first-increasing-then-decreasing trend for G∗, due to a trade-
off between computing demand and CPU frequency. Fig. 7(b)
shows that the constraint value, h(f∗), approaches zero at the
asymptotically optimal points. Fig. 6 and Fig. 7 demonstrate
that, with a limited amount of radio resources, it is necessary
to select the best subset of CA V pairs for cooperation while
taking the shared workload into account, to improve the total12
0 0.2 0.4 0.6 0.8 100.30.60.91.21.51.82.1Computing efficiency gain
(a)
0 0.2 0.4 0.6 0.8 100.30.60.91.21.51.82.1Switching cost
(b)
Fig. 8: An illustration of gain-cost trade-off for different ˜ωvalues. (a)
Computing efficiency gain. (b) Switching cost.
computing efficiency gain.
Before the performance evaluation of the MADDPG al-
gorithm for adaptive CA V cooperation, we examine the im-
pact of weight ˜ωin reward function (20) on the trade-off
between computing efficiency gain and switching cost. We
set˜ω∈ {0,0.2,0.4,0.6,0.8,1}. For each ˜ωvalue, a group of
experiments are performed for a different number of CA V pairs
(K). In each experiment, a brute-force search is conducted
among all possible CA V cooperation decisions for a maximum
instantaneous reward in each time slot of 2000 episodes. Fig. 8
shows the slot-average performance in terms of computing
efficiency gain and switching cost for different Kvalues as
˜ωincreases. As a larger ˜ωvalue puts more emphasis on
minimizing the switching cost, we observe a decreasing trend
for both gain and cost with the increase of ˜ω. We also observe
higher gain and cost for more CA V pairs at a given ˜ωvalue,
which is to be discussed later. The weight, ˜ω, can be selected
according to the desired gain-cost trade-off. In the following,
˜ωis set to 0.4, as we observe that the cost is reduced by more
than80% at a gain loss of less than 20% in comparison with
that achieved at ˜ω= 0, forK= 6.
Next, we evaluate the convergence of the MADDPG al-
gorithm, in terms of both reward and training loss, for a
different number of CA V pairs. Fig. 9 shows the convergence
of the average reward per learning step over 15000 episodes,
for a different agent number ( K) from 2to6. In a practical
implementation, when there is a negative penalty in the reward
0 3000 6000 9000 12000 15000
Episode-8-6-4-202Reward with penaltySmoothed
2 Agents
3 Agents
4 Agents5 Agents
6 Agents9000 12000 150001.31.41.5(a)
0 3000 6000 9000 12000 15000
Episode-2-1.5-1-0.500.511.5Reward without penaltySmoothed
2 Agents
3 Agents
4 Agents5 Agents
6 Agents9000 12000 150001.31.41.5
(b)
Fig. 9: Convergence of the reward during the training process. (a) With
penalty. (b) Without penalty.
due to infeasible resource allocation, we can refine the joint
action and let all the CA V pairs work in the default SP mode,
which gives a zero computing efficiency gain and a refined
reward without penalty. The original reward with penalty
and the original action are used during training to guide the
learning agents towards a least penalty after convergence,
while the reward without penalty is the true reward for the
CA V pairs when the action refinement is enabled. Fig. 9
shows the average rewards with and without penalty during
the training process. As Kincreases, both rewards converge
in a slower speed, indicated by a later increase to a converged
value interval. By comparing the smoothed rewards with and
without penalty after convergence, we see that the penalty
has been effectively suppressed, indicated by the limited large
negative glitches in the reward with penalty. It implies that the
learning agents have collaboratively learn the adaptive CA V
cooperation decisions that are feasible for resource allocation
under the network dynamics. Moreover, we observe that more
learning agents tend to improve the reward, as to be discussed.
Fig. 10 shows the per-agent average critic and actor loss
during training for Kfrom 2to6. For the critic network,
the input dimension grows linearly with K. Thus, it is more
difficult to minimize the critic loss if there are more agents,
leading to a higher average critic loss after convergence as
Kincreases, as shown in Fig. 10(a). As the reward tends
to increase for more agents, as shown in Fig. 9, the average
Q-value for the sampled mini-batch of experiences at each13
0 1 2 3 4 5 6 7 8 9 10 11 12
Learning step 10501020304050Average critic loss
Smoothed2 Agents
3 Agents
4 Agents5 Agents
6 Agents
6 7 8 9 10 11 12
1050.511.522.5
(a)
0 1 2 3 4 5 6 7 8 9 10 11 12
Learning step 105-30-25-20-15-10-505101520Average actor lossSmoothed2 Agents
3 Agents
4 Agents5 Agents
6 Agents
9 10 11 12
105-28-27-26
(b)
Fig. 10: Convergence of the critic loss and actor loss during the training
process. (a) Average critic loss. (b) Average actor loss.
learning step increases for more agents. As the actor loss is
the negative average Q-value, there is a lower average actor
loss after convergence as Kincreases, as shown in Fig. 10(b).
To evaluate the effectiveness of the MADDPG algorithm
in improving the computing efficiency gain and reducing the
switching cost, we compare the performance between the
trained MADDPG algorithm and three benchmark algorithms,
for a different number of CA V pairs ( K). The first benchmark
is a random CA V cooperation scheme, in which each CA V pair
switches between SP and CP modes at random in each time
slot. Action refinement is enabled. In the second benchmark,
all CA V pairs always cooperate if there exists a feasible
resource allocation solution among them. Otherwise, action
refinement is triggered to let all CA V pairs work in the default
SP mode. Hence, the solution switches between all CA V pairs
working in the CP mode and all CA V pairs working in the
SP mode, referred to as “all CP mode” and “all SP mode”
respectively. In the third benchmark, we conduct a step-wise
brute-force search among all candidate joint CA V cooperation
decisions in each time slot, for a maximum instantaneous
reward. The time complexity for the brute-force benchmark is
2Ktimes of that for a trained MADDPG algorithm, for solving
2Kresource allocation subproblems given each candidate joint
CA V cooperation decision. By using a trained MADDPG
algorithm, only one resource allocation subproblem is solved
given one learned joint action. For performance comparison,
the25%,50%, and 75% percentiles of the slot-average total
2 3 4 5 6
Number of CAV pairs00.30.60.91.21.51.82.1Computing efficiency gainRandom All MADDPG Brute-force(a)
2 3 4 5 6
Number of CAV pairs00.511.522.53Switching costRandom All MADDPG Brute-force
(b)
2 3 4 5 6
Number of CAV pairs-0.500.511.52RewardRandom All MADDPG Brute-force
(c)
Fig. 11: Performance comparison between the proposed and benchmark
algorithms. (a) Computing efficiency gain. (b) Switching cost. (c) Reward.
computing efficiency gain, slot-average total switching cost,
and slot-average reward are evaluated for each Kvalue using
the four algorithms, as shown in Fig. 11.
Fig. 11(a) demonstrates an increasing trend of the com-
puting efficiency gain as the number of CA V pairs increases
for both the MADDPG algorithm and the brute-force bench-
mark, both of which significantly outperform the other two
benchmarks. Fig. 6(a) demonstrates the first-increasing-then-
decreasing computing efficiency gain when more CA V pairs
cooperate. Accordingly, for the random benchmark in which
the average number of selected cooperative CA V pairs in-
creases linearly with K, we observe such a trend in the
computing efficiency gain as Kincreases, with a turning
point at K= 4. The second benchmark achieves a gradually
degraded computing efficiency gain when Kincreases, until
obtaining a zero gain at K= 6 . For a larger Kvalue,
the chance for infeasible resource allocation among all CA V14
pairs increases, leading to more frequent action refinement
to the “all SP mode” with zero gain. Nevertheless, in both
the MADDPG algorithm and the brute-force benchmark, as
there are more candidate CA V pairs in the system, there is
a higher flexibility in selecting the best subset of CA V pairs
for cooperation, by considering their shared workloads and
transmitter-receiver distances. This flexibility contributes to a
further increase in the computing efficiency gain as Kfurther
increases from 4to6. We observe a decreasing speed in the
increase of computing efficiency gain as Kfurther increases,
as the gain from the higher flexibility gradually saturates.
Especially, it is more difficult for the MADDPG algorithm
to find the optimal solution in a distributed fashion as the
agent number, K, increases, leading to a slightly larger sub-
optimality gap from the brute-force benchmark.
From Fig. 11(b), we observe an almost linear increas-
ing switching cost for the random benchmark, while both
the MADDPG algorithm and the brute-force benchmark can
significantly reduce the switching cost. Especially, as the
switching cost has time correlation, the MADDPG algorithm
which can minimize the total switching cost in the long run
achieves a lower average switching cost in comparison with
the step-wise brute-force benchmark which does not take the
future states into account. For the second benchmark, as K
increases, the dominant solution gradually changes from the
“all CP mode” to the “all SP mode”, due to a higher action
refinement probability. Accordingly, the highest switching cost
is obtained at a medium Kvalue. For both the MADDPG
algorithm and the brute-force benchmark, due to a higher
flexibility in cooperative CA V pair selection as Kincreases,
there are more changes in the selection decision, leading to an
increasing switching cost as Kincreases. The reward, which
is a linear combination of the computing efficiency gain and
the switching cost, is shown in Fig. 11 (c) for reference.
VII. C ONCLUSION
In this paper, we develop an adaptive cooperative percep-
tion framework for CA Vs in a moving mixed-traffic vehicle
cluster, while considering the dynamic shared workloads and
channel conditions due to vehicle mobility, dynamic radio
resource availability, and intermittent RSU coverage. A model-
assisted multi-agent reinforcement learning solution is devel-
oped, which integrates learning-based adaptive CA V coopera-
tion decision over time with model-based resource allocation
decision in each time slot. Simulation results demonstrate the
necessity for dynamically activating the cooperative perception
among CA V pairs to improve the total computing efficiency
gain. The effectiveness of the model-assisted MADDPG algo-
rithm is verified, in improving the total computing efficiency
gain under a limited switching cost. In future works, we will
explore the generalization of the learning model for adaptive
CA V cooperation, while considering a varying vehicle cluster
size and a non-stationary network environment.
APPENDIX : PROOF OF THEOREM 1
Lemma 1. Constraint (25) must be active for an optimal
solution to problem P2.Proof. Assume there is an optimal solution to P2which
achieves “ <” in (25). Then, there must be another feasible so-
lution achieving “ =” in (25) by decreasing the CPU frequency
for some CA V pairs, thus further decreasing the objective
value in (23) without violating constraint (24), as the objective
function is an increasing function of fC(n)while constraint
function h(f)is a decreasing function of fC(n). Therefore,
the assumption must be false, and constraint (25) must be
active for an optimal solution. Lemma 1 is proved.
For problem P2, the objective function is a second-order
function of decision variable fk(n)∈fC(n)with coefficient
Wk(n)>0, which is convex. Constraint (24) is linear.
For constraint (25), the second-order derivative of constraint
function h(f)with respect to fk(n), is given by
∂h2(f)
∂(fk(n))2=2ckbkˆδ

bkfk(n)−ˆδ3. (A1)
Asfk(n)>ˆδ
bk, we have ∂h2(f)/∂(fk(n))2>0, thus h(f)
is convex. Therefore, P2is convex.
For a convex problem, strong duality holds if Slater’s
condition (or a weaker form) is satisfied, which requires the
nonlinear inequality constraints to be strictly feasible [28]. For
problem P2, there is only one nonlinear inequality constraint
in (25). Suppose the optimal solution is denoted as f∗
C(n)if
the problem is feasible. Based on Lemma 1, we have h(f∗) =
0. Then, as long as h(f0)<0, there must exist at least one
strictly feasible non-optimal solution f⋄
C(n)⪰f∗
C(n)which
gives a larger objective value while satisfying f⋄
C(n)⪯f0
C(n)
andh(f⋄)<0. Therefore, strong duality holds for P2if
h(f0)<0. Theorem 1 is proved. Note that, if h(f0) = 0 , we
can directly obtain the optimal solution as f∗
C(n) =f0
C(n); if
h(f0)>0, the problem is infeasible.
REFERENCES
[1] W. Zhuang, Q. Ye, F. Lyu, N. Cheng, and J. Ren, “SDN/NFV-
empowered future IoV with enhanced communication, computing, and
caching,” Proc. IEEE , vol. 108, no. 2, pp. 274–291, 2019.
[2] X. Shen, J. Gao, W. Wu, M. Li, C. Zhou, and W. Zhuang, “Holistic
network virtualization and pervasive network intelligence for 6G,” IEEE
Commun. Surv. Tutor. , vol. 24, no. 1, pp. 1–30, 2021.
[3] Y . Hui, X. Ma, Z. Su, N. Cheng, Z. Yin, T. H. Luan, and Y . Chen,
“Collaboration as a service: Digital-twin-enabled collaborative and dis-
tributed autonomous driving,” IEEE Internet Things J. , vol. 9, no. 19,
pp. 18 607–18 619, 2022.
[4] J. Wang, J. Liu, and N. Kato, “Networking and communications in
autonomous driving: A survey,” IEEE Commun. Surv. Tutor. , vol. 21,
no. 2, pp. 1243–1274, 2018.
[5] J. Zhang and K. B. Letaief, “Mobile edge intelligence and computing
for the Internet of vehicles,” Proc. IEEE , vol. 108, no. 2, pp. 246–261,
2019.
[6] X. Zheng, S. Li, Y . Li, D. Duan, L. Yang, and X. Cheng, “Confidence
evaluation for machine learning schemes in vehicular sensor networks,”
IEEE Trans. Wirel. Commun. , vol. 22, no. 4, pp. 2833–2846, 2023.
[7] Y . Jia, R. Mao, Y . Sun, S. Zhou, and Z. Niu, “Online V2X scheduling
for raw-level cooperative perception,” in Proc. IEEE ICC , 2022, pp.
309–314.
[8] ——, “Mass: Mobility-aware sensor scheduling of cooperative per-
ception for connected automated driving,” IEEE Trans. Veh. Technol. ,
vol. 72, no. 11, pp. 14 962–14 977, 2023.
[9] M. K. Abdel-Aziz, C. Perfecto, S. Samarakoon, M. Bennis, and W. Saad,
“Vehicular cooperative perception through action branching and feder-
ated reinforcement learning,” IEEE Trans. Commun. , vol. 70, no. 2, pp.
891–903, 2022.15
[10] Z. Xiao, J. Shu, H. Jiang, G. Min, H. Chen, and Z. Han, “Perception
task offloading with collaborative computation for autonomous driving,”
IEEE J. Sel. Areas Commun. , vol. 41, no. 2, pp. 457–473, 2023.
[11] Y . Sun, J. Xu, and S. Cui, “User association and resource allocation
for MEC-enabled IoT networks,” IEEE Trans. Wirel. Commun. , vol. 21,
no. 10, pp. 8051–8062, 2022.
[12] J. Lin, P. Yang, N. Zhang, F. Lyu, X. Chen, and L. Yu, “Low-latency edge
video analytics for on-road perception of autonomous ground vehicles,”
IEEE Trans. Industr. Inform. , vol. 19, no. 2, pp. 1512–1523, 2022.
[13] X. Zhang, A. Zhang, J. Sun, X. Zhu, Y . E. Guo, F. Qian, and Z. M. Mao,
“EMP: Edge-assisted multi-vehicle perception,” in Proc. 27th Annual
International Conf. Mobile Computing and Networking , 2021, pp. 545–
558.
[14] Q. Chen, S. Tang, Q. Yang, and S. Fu, “Cooper: Cooperative perception
for connected autonomous vehicles based on 3D point clouds,” in Proc.
IEEE Int. Conf. Distrib. Comput. Syst. (ICDCS) , 2019, pp. 514–524.
[15] H. Qiu, P. Huang, N. Asavisanu, X. Liu, K. Psounis, and R. Govin-
dan, “Autocast: Scalable infrastructure-less cooperative perception for
distributed collaborative driving,” in Proc. ACM Int. Conf. Mobile Syst.,
Appl. and Services (MobiSys) , 2021, pp. 128–141.
[16] Q. Chen, X. Ma, S. Tang, J. Guo, Q. Yang, and S. Fu, “F-cooper: Feature
based cooperative perception for autonomous vehicle edge computing
system using 3D point clouds,” in Proc. ACM/IEEE Symp. Edge Comput.
(SEC) , 2019, pp. 88–100.
[17] T.-H. Wang, S. Manivasagam, M. Liang, B. Yang, W. Zeng, and R. Ur-
tasun, “V2VNeT: Vehicle-to-vehicle communication for joint perception
and prediction,” in Proc. Eur. Conf. Comput. Vision (ECCV) , 2020, pp.
605–621.
[18] W. Wu, N. Chen, C. Zhou, M. Li, X. Shen, W. Zhuang, and X. Li,
“Dynamic RAN slicing for service-oriented vehicular networks via
constrained learning,” IEEE J. Sel. Areas Commun. , vol. 39, no. 7, pp.
2076–2089, 2021.
[19] W. Zhang, Z. He, L. Liu, Z. Jia, Y . Liu, M. Gruteser, D. Raychaudhuri,
and Y . Zhang, “Elf: accelerate high-resolution mobile deep vision with
content-aware parallel offloading,” in Proc. ACM MobiCom , 2021, pp.
201–214.
[20] H. Wang, Q. Li, H. Sun, Z. Chen, Y . Hao, J. Peng, Z. Yuan, J. Fu, and
Y . Jiang, “Vabus: Edge-cloud real-time video analytics via background
understanding and subtraction,” IEEE J. Select. Areas Commun. , vol. 41,
no. 1, pp. 90–106, 2023.
[21] K. Yang, J. Yi, K. Lee, and Y . Lee, “FlexPatch: Fast and accurate object
detection for on-device high-resolution live video analytics,” in IEEE
Proc. INFOCOM , 2022, pp. 1898–1907.
[22] S. Teerapittayanon, B. McDanel, and H.-T. Kung, “Distributed deep
neural networks over the cloud, the edge and end devices,” in Proc.
IEEE ICDCS , 2017, pp. 328–339.
[23] K. Qu, W. Zhuang, W. Wu, M. Li, X. Shen, X. Li, and W. Shi,
“Stochastic cumulative DNN inference with RL-aided adaptive IoT
device-edge collaboration,” IEEE Internet Things J. , vol. 10, no. 20,
pp. 18 000–18 015, 2023.
[24] E. Li, L. Zeng, Z. Zhou, and X. Chen, “Edge AI: On-demand acceler-
ating deep neural network inference via edge computing,” IEEE Trans.
Wirel. Commun. , vol. 19, no. 1, pp. 447–457, 2020.
[25] Z. Liu, Q. Lan, and K. Huang, “Resource allocation for multiuser
edge inference with batching and early exiting,” IEEE J. Select. Areas
Commun. , vol. 41, no. 4, pp. 1186–1200, 2023.
[26] H. Wang, H. Bao, L. Zeng, K. Luo, and X. Chen, “Real-time high-
resolution pedestrian detection in crowded scenes via parallel edge
offloading,” in Proc. IEEE ICC , 2023.
[27] K. Qu, W. Zhuang, Q. Ye, X. Shen, X. Li, and J. Rao, “Dynamic
flow migration for embedded services in SDN/NFV-enabled 5G core
networks,” IEEE Trans. Commun. , vol. 68, no. 4, pp. 2394–2408, 2020.
[28] S. Boyd, S. P. Boyd, and L. Vandenberghe, Convex optimization .
Cambridge university press, 2004.
[29] R. Lowe, Y . I. Wu, A. Tamar, J. Harb, O. Pieter Abbeel, and I. Mordatch,
“Multi-agent actor-critic for mixed cooperative-competitive environ-
ments,” in Proc. 30th Adv. Neural Inf. Process. Syst. (NeurIPS) , 2017,
pp. 6379–6390.
[30] J. Tian, Q. Liu, H. Zhang, and D. Wu, “Multiagent deep-reinforcement-
learning-based resource allocation for heterogeneous QoS guarantees for
vehicular networks,” IEEE Internet Things J. , vol. 9, no. 3, pp. 1683–
1695, 2022.
[31] Q. Ye, W. Shi, K. Qu, H. He, W. Zhuang, and X. Shen, “Joint RAN
slicing and computation offloading for autonomous vehicular networks:
A learning-assisted hierarchical approach,” IEEE Open J. Veh. Technol. ,
vol. 2, pp. 272–288, 2021.[32] E. Jang, S. Gu, and B. Poole, “Categorical reparameterization with
gumbel-softmax,” Proc. ICLR , 2017.
[33] “Simulation of Urban MObility (SUMO) 1.16.0,” https://www.eclipse.
org/sumo/, 2023, [Online; accessed 8-January-2024].
[34] 3GPP, “Study on evaluation methodology of new Vehicle-to-Everything
(V2X) use cases for LTE and NR,” 3rd Generation Partnership Project
(3GPP), Technical Specification (TS) 37.885, 2019, version 15.3.0.