Modeling and control of the rodwheel
Luc Jaulin
Lab-Sticc, ENSTA-Bretagne
Abstract . The rodwheel is a wheel equipped with a rod motorized on the axle. This paper proposes
a Lagrangian approach to find the state equations of the rodwheel rolling on a plane without friction. The
approach takes advantage of a symbolic computation. A controller is proposed to stabilize the rodwheel with
the rod upward and going straight at a desired speed.
1 Introduction
Consider a disk rolling on a plane without friction with a rod which can move along the wheel plane [4] as
shown on Figure 1. In the axle of the wheel, we have a motor which produces a torque ubetween the wheel
and the rod.
Fig. 1: Disk rolling on a plane with a rod
The disk has a mass m= 5kg and its radius is r= 1m. The gravity is taken as g= 9.81ms−2.The mass
µ= 1kg of the rod is reduced to the single point swhich is at a distance ℓ= 2mto the center cof the wheel.
In this paper, we want to find the state equations describing the motion of the rodwheel. The rolling wheel
model has already been found since a long time (see e.g. [1]) and even highly studied since (see e.g. [8]).
Extension to more general wheel based vehicle have also been proposed (see e.g. [2] for the bicycle). The
problem of the wheel with the rod seems to be original and I believe it can be used as a fast, light terrestrial
robot to move in a urban environment with a reduced amount of batteries. Computing the state equations for
a rodwheel is a tedious task. In this paper, I want to take advantage of symbolic computing (here the sympy
1arXiv:2401.08666v1  [math.NA]  4 Jan 20242 Modeling 2
package of Python ) in order to derive these state equations. The Lagrangian approach [9], often applied to
model robots [3], will be chosen.
Once we have found the state model of the rodwheel, we will propose a controller to make the rodwheel
going straight ahead at a desired speed with the rod upward. The control approach uses techniques dedicated
to underactuated mechanical systems [5].
2 Modeling
2.1 State vector
We take the state vector x= (c1, c2, φ, θ, ψ, β, ˙φ,˙θ,˙ψ,˙β) where ( c1, c2) is the vertical projection of center
c= (c1, c2, c3) of the disk, φ, θ, ψ are the three Euler angles and βis the rod angle. As illustrated by Figure 1,
•φis the spin angle
•θis the stand angle, i.e., when θ= 0, the disk is vertical
•ψis the heading, i.e., the horizontal orientation of the disk
•βis the angle of the rod with respect to the vertical axis.
Therefore, we should be able to find a state equations of the form
˙x=f(x, u). (1)
to represent the dynamics of the rodwheel. For this, we will follow the approach presented in [7].
To use sympy , we first declare the symbolic variables and functions to be used:
from sympy import *
t=symbols(’t’)
m,g,r, µ,l= symbols(’m g r, µ,l’)
c1,c2 = Function(’c1’)(’t’),Function(’c2’)(’t’)
dc1,dc2 = Function(’dc1’)(’t’),Function(’dc2’)(’t’)
ddc1,ddc2 = Function(’ddc1’)(’t’),Function(’ddc2’)(’t’),
φ,θ,ψ,β= Function(’ φ’)(’t’),Function(’ θ’)(’t’),Function(’ ψ’)(’t’),Function(’ β’)(’t’)
dφ,dθ,dψ,dβ= Function(’d φ’)(’t’),Function(’d θ’)(’t’),
Function(’d ψ’)(’t’),Function(’d β’)(’t’)
ddφ,ddθ,ddψ,ddβ= Function(’dd φ’)(’t’),Function(’dd θ’)(’t’),
Function(’dd ψ’)(’t’),Function(’dd β’)(’t’)
λ1,λ2 = Function(’ λ1’)(’t’),Function(’ λ2’)(’t’)
2.2 Orientation
The orientation of the disk is fixed by the three Euler angles φ, θ, ψ . The corresponding orientation matrix is
Reuler(φ, θ, ψ ) =
cosψ −sinψ 0
sinψ cosψ 0
0 0 1
·
cosθ
0
−sinθ0
1
0sinθ
0
cosθ
·
1 0 0
0 cos φ−sinφ
0 sin φ cosφ
 (2)
It is built by the following sympy function
def Reuler( φ, θ, ψ ):
Rφ= Matrix([[1,0,0],[0,cos( φ),-sin( φ)],[0,sin( φ),cos( φ)]])
Rθ= Matrix([[cos( θ),0,sin( θ)],[0,1,0],[-sin( θ),0,cos( θ)]])
Rψ= Matrix([[cos( ψ),-sin( ψ),0],[sin( ψ),cos( ψ),0],[0,0,1]])
Return R ψ*Rθ*Rφ2 Modeling 3
The rotation vector depends on the Euler angles and their derivatives. Its expression [6] can be obtained using
the relation
RT˙R=
0−ωr3ωr2
ωr3 0−ωr1
−ωr2ωr1 0
 (3)
which gives us the following sympy function
def wr(R):
W=Transpose(R)*diff(R,t)
return Matrix([[-W[1,2]],[W[0,2]],[-W[0,1]]])
2.3 Lagrangian
In order, to get the state equations the rodwheel, we use a Lagrangian approach. For this, we need to express
the Lagrangian Lwith respect to the state variables. Recall that
L=EK−Ep (4)
where EKis the kinetic energy and Epis the potential energy. We have
EK=1
2ωT
rIωr+1
2m∥˙c∥2+1
2µ∥˙s∥2(5)
where cis the center of the wheel, sis the end point of the rod given by
s=c+Reuler(β, θ, ψ )
and
I=
mr2
20 0
0mr2
40
0 0mr2
4
 (6)
is the inertia matrix of the disk. Denote by
q= (c1, c2, φ, θ, ψ, β ) (7)
the generalized coordinates of the system, i.e., the degrees of freedom. The Lagrangian, which is a function of
(q,˙q), is computed with sympy as follows:
def Lagrangian(q,dq):
c1,c2, φ,θ,ψ, β=list(q)
R = Reuler( φ,θ,ψ)
c=Matrix([[c1],[c2],[r*cos( θ)]])
dc=diff(c,t)
s=Reuler( β, θ, ψ )*Matrix([[0],[0],[l]])+c
ds=diff(s,t)
Ep=m*g*c3+ µ*s[2]
I=Matrix([[1/2*m*r**2,0,0],[0,1/4*m*r**2,0],[0,0,1/4*m*r**2]])
Ek=1/2*m*(dc.dot(dc))+1/2* µ*(ds.dot(ds))+1/2*wr(R).dot(I*wr(R))
L=subsdiff(Ek-Ep)
return L
where subsdiff(E) transforms the differentiation operator into the corresponding state variables:2 Modeling 4
def subsdiff(E):
E=E.subs( {diff(dc1,t): ddc1,diff(dc2,t): ddc2, diff(d φ,t): dd φ,
diff(d θ,t): dd θ, diff(d ψ,t): dd ψ, diff(d β,t): dd β})
E=E.subs( {diff(c1,t): dc1,diff(c2,t): dc2, diff( φ,t): d φ,
diff( θ,t): d θ,diff( ψ,t): d ψ, diff( β,t): d β})
return simplify(E)
We get
L(q,˙q) =m
8r2(˙θsinφ−˙ψcosθcosφ)2+m
8r2(˙θcosφ+˙ψsinφcosθ)2
+m
4r2( ˙φ−˙ψsinθ)2+m
2(r2˙θ2sin2θ+ ˙c2
1+ ˙c2
2)
−µ(ℓcosβ+r) cosθ
+µ
2
ℓsinψcosβcosθ˙θ+ℓ(sinβsinψ+ sin θcosβcosψ)˙ψ−ℓ(sinβsinθsinψ+ cos βcosψ)˙β+ ˙c22
+µ
2
ℓcosβcosθcosψ˙θ+ℓ(sinβcosψ−sinθsinψcosβ)˙ψ+ℓ(sinψcosβ−sinβsinθcosψ)˙β+ ˙c1
2
+µ
2
ℓsinβcosθ˙β+ (ℓsinθcosβ+rsinθ)˙θ2
−gmrcosθ
In what follows, we will avoid writing such complex expressions (which can be far larger than this one). Indeed,
these expressions should remain transparent for the user since is it handled by sympy .
2.4 Euler-Lagrange equations
The evolution of qobeys to the Euler-Lagrange equation for non-holonomic systems:
d
dt∂L
∂˙q
−∂L
∂q|{z }
Q(q,˙q,¨q)=
τc1
τc2
τφ
τθ
τψ
τβ

|{z}
τ+
0
0
1
0
0
−1
·u (8)
where the right hand side corresponds the generalized forces. It is composed of the forces τgenerated by the
ground and of the motor forces corresponding to internal torque. The entries for the motor force vector are
consistent with the fact that the motor produces the torque ubetween the degrees of freedom β(the rod) and
φ(the wheel).
Remark 1. Note that Q(q,˙q,¨q)is affine in ¨q. This property will be used later to build the state space model
of the rodwheel.
An expression for Q(q,˙q,¨q) is obtained using sympy by:
q=Matrix([c1,c2, φ,θ,ψ,β])
dq=Matrix([dc1,dc2,d φ,dθ,dψ,dβ])
ddq=Matrix([ddc1,ddc2,dd φ,ddθ,ddψ,ddβ])
L=Lagrangian(q,dq)
Q=subsdiff(diff(L.jacobian(dq),t)-L.jacobian(q))
The generalized forces τc1, τc2, τφ, τθ, τψ, τβgenerated by the reaction of the ground are linked by constraints
that should now be written.2 Modeling 5
2.5 Non holonomic constraints
Without any reaction constraint of the ground onto the disk, the state vector would have been
(q,˙q) = (c1, c2, φ, θ, ψ, β, ˙c1,˙c2,˙φ,˙θ,˙ψ,˙β), (9)
i.e., it would have been composed of the degrees of freedom qand they derivatives ˙q. Now, due to the ground
forces, the variables ( q,˙q) are linked by some differential constraints. These constraints will be needed to derive
the state equations with x= (c1, c2, φ, θ, ψ, β, ˙φ,˙θ,˙ψ,˙β) as a state vector. Since we have two variables to
eliminate (here ˙ c1and ˙c2), we need to find two more differential constraints. These two constraints are those
generated by the ground forces. They translate the fact that the point of the disk in contact with the ground
has a zero velocity. It means that the disk neither slides tangentially (it could be the first equation) nor laterally
(it could be the second equation). We understand that these two equations have the form
˙c1=α1·˙φ+α2·˙θ+α3·˙ψ
˙c2=β1·˙φ+β2·˙θ+β3˙·ψ(10)
where the αi’s and the β′
isdepend on q. More precisely, as shown in [7] these constraints are
˙c1= rsinψ·˙φ+rcosψcosθ·˙θ−rsinψsinθ·˙ψ
˙c2=−rcosψ·˙φ+rsinψcosθ·˙θ+rcosψsinθ·˙ψ(11)
Figure 2 illustrates how these formulas are obtained . The left subfigure shows that when ˙θ= 0 and ˙ψ= 0, we
have
˙c1= rsinψ·˙φ
˙c2=−rcosψ·˙φ(12)
The subfigure in the center illustrates that if ˙ φ= 0 and ˙ψ= 0,
˙c1=rcosψcosθ·˙θ
˙c2=rsinψcosθ·˙θ(13)
The right subfigure illustrates that if ˙θ= 0 and ˙ φ= 0,
˙c1=−rsinψsinθ·˙ψ
˙c2=rcosψsinθ·˙ψ(14)
By superposition, we get Equation 11. These constraints are said to be non holonomic since they will not allow
us to express our system with a state composed of some degrees of freedom qand their derivatives ˙ q.
Fig. 2: Wheel rolling on a plane (the rod is not represented)2 Modeling 6
2.6 D’Alembert’s principle
We need to find an expression for τwhich occurs in the right hand side of (8). The components for τcorrespond
to the generalized ground forces applied to our system. Now, since the contact point has no velocity, the ground
force cannot modify the energy of the system.
In order to use this information, let us to recall the principle of d’Alembert: for arbitrary virtual displace-
ments, the constraint forces don’t do any work .
The virtual displacements are infinitesimal changes δq=q(t+dt)−q(t) that should be consistent with
some feasible trajectories q(t). For our rolling system, the virtual displacements satisfy
δc1−rsinψ·δφ−rcosψcosθ·δθ+rsinψsinθ·δψ = 0 ( i)
δc2+rcosψ·δφ−rsinψcosθ·δθ−rcosψsinθ·δψ = 0 ( ii)(15)
for the same reasons than those used to derive (11). The fact that there is no work translates into
δW=τT·δq=τc1·δc1+τc2·δc2+τφ·δφ+τθ·δθ+τψ·δψ +τβ·δβ= 0 . (16)
Equivalently, Equation 16 is a linear combination of the two equations (15), i.e., (16) = λ1·(15,i)+ λ2·(15,ii).
Theλi’s are called the Lagrange parameters . Therefore:

τc1
τc2
τφ
τθ
τψ
τβ
=λ1·
1
0
−rsinψ
−rcosψcosθ
rsinψsinθ
0
+λ2·
0
1
rcosψ
−rsinψcosθ
−rcosψsinθ
0
(17)
or in a vector form:
τ=AT(q)λ1
λ2
(18)
where
A(q) =1 0 −rsinψ−rcosψcosθ r sinψsinθ0
0 1 rcosψ−rsinψcosθ−rcosψsinθ0
. (19)
2.7 State equations
Using (8) with (18), we get
Q(q,˙q,¨q)−τ(q,λ) =
0
0
u
0
0
−u
(20)
This system is made of 6 equations which are linear in 8 variables : λ= (λ1, λ2) and ¨q= (¨c1,¨c2,¨φ,¨θ,¨ψ,¨β)
(see Equation 18 and Remark 1). In order to square the system, we need to add two equations (to get 8
equations). They are obtained by differentiating of the non-holonomic constraints (11) given by
A(q)·˙q|{z}
a(q,˙q)=0. (21)
Let us differentiate this equation. We get:
∂a(q,˙q)
∂q·˙q+∂a(q,˙q)
∂˙q·¨q
| {z }
=d
dta(q,˙q)=0 (22)2 Modeling 7
Adding these two equations to (20) yields


d
dta(q,˙q) =0
0
Q(q,˙q,¨q)−τ(q,λ) =
0
0
u
0
0
−u

or equivalently
 
∂a(q,˙q)
∂q·˙q+∂a(q,˙q)
∂˙q·¨q
Q(q,˙q,¨q)−τ(q,λ)!
| {z }
S(q,˙q,¨q,λ)=
0
0
0
0
1
0
0
−1

|{z}·
buu (23)
SinceS(q,˙q,¨q,λ) is affine in λ,¨q(see Equation 18 and Remark 1), we have
S(q,˙q,¨q,λ) =
∂
∂λS(q,˙q,0,0)∂
∂¨qS(q,˙q,0,0)
| {z }
=M(q)·λ
¨q
+S(q,˙q,0,0)|{z}
=−b(q,˙q). (24)
where M(q) is a square matrix called the mass matrix (we can show that it does not depend on ˙q, this is why
we have written M(q) instead of M(q,˙q)). Thus (23) becomes
M(q)·λ
¨q
=b(q,˙q) +bu·u. (25)
Isolating ¨q, we get

¨φ
¨θ
¨ψ
¨β
=
0 0 0 0 1 0 0 0
0 0 0 0 0 1 0 0
0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 1

| {z }
P·M−1(q)·(b(q,˙q) +bu·u) (26)
where Pis the projection matrix which selects the four last components of the vector ( λ1, λ2,¨c1,¨c2,¨φ,¨θ,¨ψ,¨β).
The expression for Mandbare obtained by:
A=Matrix([[1,0,-r*sin( ψ),-r*cos( ψ)*cos( θ),r*sin( ψ)*sin( θ),0],
[0,1, r*cos( ψ),-r*sin( ψ)*cos( θ),-r*cos( ψ)*sin( θ),0]])
τ=λ1*A[0,:]+ λ2*A[1,:]
a=A*dq
da=diff(a,t)
S=Matrix([da,*list(Q- τ)])
S=subsdiff(S)
M=S.jacobian([ λ1,λ2,ddq])
b=-S.subs( {λ1:0,λ2:0,ddc1:0,ddc2:0,dd φ:0, dd θ:0, dd ψ:0, dd β:0})3 Control 8
Therefore, the state equations of the rodwheel are
˙c1
˙c2
=rsinψ cosψcosθ−sinψsinθ
−cosψ sinψcosθ cosψsinθ
˙φ
˙θ
˙ψ
 (see (11))

˙φ
˙θ
˙ψ
˙β
=
˙φ
˙θ
˙ψ
˙β


¨φ
¨θ
¨ψ
¨β
= P·M−1(q)·(b(q,˙q) +bu·u) (see (26))(27)
The symbolic computation is only used to generate the Python functions for M(q) and b(q,˙q). Getting an
expression for v(q,˙q, u) =M−1(q)·(b(q,˙q) +bu·u) would have been too heavy for sympy . This is why the
choice has been made to compute v(q,˙q, u) numerically during the simulation by solving the following linear
system
M(q)·v=b(q,˙q) +bu·u
each time we want to evaluate the evolution function f(x, u).To build the Python function from a sympy
expression, we write
M,b=lambdify((c1,c2, φ,θ,ψ,β,dφ,dθ,dψ,dβ,m,g,r, µ,l),(M,b))
3 Control
We want to build a controller for the rodwheel and validate on a simulation. We first have to build a simulator
based on the state space model.
3.1 Simulation
The Python code for the evolution function is:
def f(x,u):
c1,c2, φ,θ,ψ,β,dφ,dθ,dψ,dβ=list(x.flatten())
dc1= r*sin( ψ)*dφ+r*cos( ψ)*cos( θ)*dθ-r*sin( θ)*sin( ψ)*dψ
dc2=-r*cos( ψ)*dφ+r*sin( ψ)*cos( θ)*dθ+r*sin( θ)*cos( ψ)*dψ
bu=array([[0],[0],[0],[0],[1],[0],[0],[-1]])
v=np.linalg.solve(M,b+bu*u)
ddφ,ddθ,ddψ,ddβ=list((v[4:8]).flatten())
return array([[dc1],[dc2],[d φ],[dθ],[dψ],[dβ],[dd φ],[dd θ],[dd ψ],[dd β]])
We use a Runge-Kutta integration scheme for the simulation
x=x+dt*(0.25*f(x,u)+0.75*(f(x+(2/3)*dt*f(x,u),u)))
We chose the initial state vector as

c1, c2, φ, θ, ψ, ˙φ,˙θ,˙ψ
= (4,0,0,0.3,0,−0.5,6,−3,0,0). (28)
and the parameters as
(m, g, r, µ, ℓ ) = (5 ,9.81,1,1,2). (29)3 Control 9
The result of the simulation without any control ( i.e., foru= 0) is represented on Figure 3. The rod is painted
green. The blue wheel corresponds to t= 0 and the red wheel to t= 8. The evolution of the wheel’s center
and of the contact point are represented in red and magenta respectively. The simulation highlights the chaotic
behavior of the rodwheel.
Fig. 3: Evolution of rodwheel with no control
3.2 Controller
We want a controller that makes our rodwheel going straight, the rod upward at a given speed. Several difficulties
have to be raised:
•We have a single input ufor several state variables to control.
•The equations of the system are complex. It is difficult to write a closed form for the state equations in
less than one page.
•The system is not controllable once the rodwheel goes straight.
•The system is unstable with respect to the rod angle β.
•The system is unstable with respect to the stand angle θ.
Concerning the proof of the non controllability, instead of using the model, it is more direct to use the symmetries
of the problem. Assume that ˙ψ= 0, θ= 0,˙θ= 0 (this is what we have once our goal is reached). We have an
evolution which remains symmetric with respect to the vertical plane supported by the wheel. Thus, for any
control u, we are trapped in a situation where ˙ψ= 0,θ= 0,˙θ= 0.
For the instability a linearisation around ˙ψ= 0,θ= 0,˙θ= 0 could be used. Now, the instability with respect
toβis intuitive and the instability with respect to θis observed by simulation (see further). Indeed, when the
rod is stabilized above c, the precession tends to amplify.
In what follows, we propose a very simple expression for a possible controller. This will be enough to
illustrate that the robot can be controlled with uas a single input.
Case 1 . Consider the situation where the initial stand angle θand its derivative ˙θare both equal to zero.
Due to the symmetry of the system, θ(t) = 0 for all t. Take the following proportional and derivative controller
u= 20( β−β0) + 20 ˙β
β0= tanh(2 −˙φ)(30)
where β−β0is the error. If the closed loop system is stable, then β→β0(this notations means that βconverges
toβ0when t→ ∞ ). Now, the robot will accelerate (or decelerate) until β0= 0, i.e., ˙φ= 2. This means that4 Conclusion 10
we can control the speed of the rodwheel, at least when the stand angle θ(t) is equal to zero. Figure 4 shows
the behavior of the closed loop for the initial state :
(c1, c2, φ, θ, ψ, β, ˙φ,˙θ,˙ψ,˙β) = (4 ,0,0,0,0, π,0,0,0,0) (31)
For the initialization, the rod is downward and stands up in order to create the right acceleration. We observe
that ˙φ→2 and that β→0.
Fig. 4: Rodwheel with θ(t) = 0 which accelerates to reach the speed of ˙ φ= 2
To show the instability with respect to θ, take θ(0) = 2 ·10−12instead of θ(0) = 0. The simulation generates
Figure 5. We see the rodwheel falling strongly after few seconds.
Fig. 5: A tiny perturbation with respect to θgenerates a fall of the robot
To control the stand angle, we propose to add a term which accelerates when θdeviates from zero. We get
the following controller:
u= 5( β−β0) + 5 ˙β+ 20· |θ|
β0= 0 .2·tanh(10 −˙φ)(32)
The initial vector is the same as in Subsection 3.1, i.e.,

c1, c2, φ, θ, ψ, ˙φ,˙θ,˙ψ
= (4,0,0,0.3,0,−0.5,6,−3,0,0). (33)
The controller is now able to limit the precession still maintaining the rod upward as shown by Figure 6.
4 Conclusion
In this paper, we have proposed a state space model and a simple controller for the rodwheel. Since it is
composed of one wheel, one motor and one rod, the rodwheel can be seen as the most elementary wheeled robot
than can be built, i.e, it seems impossible to build a fast vehicle with less mechanical components. Due to its
shape, with almost no front surface that could slow down the vehicle, we could expect to have a fast robot which
makes long trips with few batteries. Moreover, the expected weight could be low enough to limit the danger is
case of collision.4 Conclusion 11
Fig. 6: The controller stabilizes the precession of the rodwheel
We have shown that it was possible to stabilize the robot and control the speed. Now, due to the singularity
forθ= 0 (which corresponds to the situation where the wheel goes straight ahead) the system becomes
uncontrollable. We should thus add a other actuator such as a small inertial wheel fixed the end of the rod to
be able to control the heading.
We have proposed a stability analysis which is based on simulation and symmetries, which is clearly not
enough. The stability should be studied by a linearization to have a better understanding of the instabilities
and to get a better tuning of the control parameters.
Since the rodwheel is considered here as a mobile robot, the heading control needs to be treated. An easy
solution would be to add an additional actuated inertial wheel spinning perpendicularly with respect to the rod.
From a control point of view, a more challenging question would be to control the heading of the robot without
changing the mechanics, i.e., changing the controller only.
The Python code associated to all examples can be found here:
https://www.ensta-bretagne.fr/jaulin/rodwheel.html
References
[1] P. Appell. Sur l’int´ egration des ´ equations du mouvement d’un corps pesant de r´ evolution roulant par une
arˆ ete circulaire sur un plan horizontal; cas particulier du cerceau. Rendiconti del Circolo Matematico di
Palermo , 1900. 1
[2] F. Boyer, M. Porez, and J. Mauny. Reduced dynamics of the non-holonomic whipple bicycle. Journal of
Nonlinear Science , 28, 06 2018. 1
[3] P. Corke. Robotics, Vision and Control . Springer, Berlin Heidelberg, 2011. 1
[4] D. Esnault. Robot d’engagement gyrostabilis´ e de reconnaissance. Rapport de PFE, ENSTA-Bretagne, Brest,
France , 2023. 1
[5] I. Fantoni and R. Lozano. Non-linear control for underactuated mechanical systems . Springer-Verlag, 2001.
1
[6] L. Jaulin. Mobile Robotics . ISTE editions, 2015. 2.2
[7] L. Jaulin. Modelisation of a rolling disk with sympy. arXiv:2311.16624, math.NA , 2023. 2.1, 2.54 Conclusion 12
[8] O. O’Reilly. The dynamics of rolling disks and sliding disks. Nonlinear Dynamics , 10(3):287–305, 1996. 1
[9] D.A. Wells. Lagrangian Mechanics . Schaum’s outlines, London, 1967. 1