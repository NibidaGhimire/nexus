Upside down: affordable high-performance motion platform
Nayan Man Singh Pradhan1, Patrick Frank1, An Mo1;, and Alexander Badri-Spr owitz1;2
1Dynamic Locomotion Group, Max Planck Institute for Intelligent Systems, Stuttgart, Germany
2Department of Mechanical Engineering, KU Leuven, Belgium
*mo@is.mpg.de
Abstract|Parallel robots are capable of high-speed manipulation and have become essential tools in the industry. The
proximal placement of their motors and the low weight of their end eectors make them ideal for generating highly
dynamic motion. Therefore, parallel robots can be adopted for motion platform designs, as long as end eector loads
are low. Traditional motion platforms can be large and powerful to generate multiple g acceleration. However, these
designs tend to be expensive and large. Similar but smaller motion platforms feature a small work range with reduced
degrees of freedom (DoFs) and a limited payload. Here we seek a medium-sized aordable parallel robot capable of
powerful and high-speed 6-DoF motion in a comparably large workspace. This work explores the concept of a
quadruped robot ipped upside-down, with the motion platform xed between its feet. In particular, we exploit the
high-power dynamic brushless actuation and the four-leg redundancy when moving the motion platform. We
characterize the resulting motion platform by tracking sinusoidal and circular trajectories with varying loads. Dynamic
motions in 6 DoFs up to 10 Hz and 10 mm amplitude are possible when moving a mass of 300 grams. We
demonstrate single-axis end-eector translations up to 20 mm at 10 Hz for higher loads of 1.2 kg. The motion
platform can be replicated easily by 3D printing and o-the-shelf components. All motion platform-related hardware
and the custom-written software required to replicate are open-source.
1 Introduction
Motion platforms are designed to move objects in 3D space
in a given workspace. 6-degree of freedom (DoF) motion
platforms are widely adapted to simulate the complex and
dynamic motions of aircraft, vehicles, ships, entertainment
platforms, and research test benches [1, 2].
Multiple approaches for generating 6-DoF motion have
been proposed, such as using industrial 6 DoF robotic
arms [3], crank arm platforms [1, 4], linear actuators [5, 6],
and parallel robots. Parallel robots are ”closed-loop mechan-
ical structures whose mobile platforms are linked to the base
by independent kinematic chains, presenting good potential
in terms of accuracy, rigidity, and ability to manipulate large
loads with positioning errors” [7]. Thanks to their high
rigidity, robustness against external force and good payload
abilities[8–11], parallel robots are often adopted for high
acceleration motion platform designs.
Delta robots [12–14] and Stewart-Gough platforms [8, 9]
are well known solutions. Delta robots feature three transla-
tional DoFs where the end-effector stays parallel to the base
of the robot, allowing for high-speed pick and place tasks [14–
16]. Stewart-Gough platforms consist of a platform connected
to a ﬁxed base using six extensible legs of adjustable lengths,
which determine the position and orientation of the attached
platform [8]. Despite their popularity, such robots are still
costly and less well suited for non-industrial applications.
High performance 6-DoF motion platforms are more ex-
pensive with price tags above 100k e, as they are intended
for simulating the motion of large objects. These commer-
cial motion platforms are operated with proprietary, custom-
designed software. We found that limited affordable options
for motion simulation exist for research. Low-end motion
platforms are often designed for education purposes, and
deliver insufﬁcient acceleration in case of high-range motions
and higher mass objects. Hence, researchers have developed
motion platforms from off-the-shell components [17]. Clearly,
(a)Simulation environment.
 (b)Hardware photo.
Figure 1. The proposed 6-DoF motion platform. The right
ﬁgure shows a high-weight load (1.2 kg) mounted to the
motion platform.
building an entire motion platform and its software framework
from scratch is time-consuming.
Here, we were looking for open-source robot platforms as
solutions to build an affordable, customized motion platform
(Figure 1 ). For our speciﬁc need of high acceleration motion
simulation, we could not ﬁnd designs at affordable prices. But
as a robotic research laboratory, we work daily with dynam-
ically running legged robots that are open-source available.
Consequently, we build our solution around the recently open-
sourced quadruped robot Solo [18]. Solo robot is capable of
highly dynamic movements, such as high vertical jumps, and
even back ﬂips. Its highly dynamic robot motion is made
possible by the robot’s powerful brushless motors controlled
by ﬁeld oriented control (FOC). By ﬂipping the robot upside
down, its four legs can be used to actuate a motion platform in
6-DoF. The four-legged SOLO robot (SOLO-12) features in
sum twelve motors with 3 motors per leg; two shoulder actu-
ators, and one knee actuator. A comparably low gearbox ratio
(9:1) allows for high accelerations, and powerful brushless
motors supply high torque output. The Solo robot is designed
with off-the-shell components and made mostly from 3DarXiv:2303.17974v1  [cs.RO]  31 Mar 2023printing parts, which lead to comparably low production and
maintenance costs.
In this work, we present the resulting high-performance
and affordable 6-DoF motion platform hardware design and
its software and control framework. Our hardware design
is based on the quadruped robot Solo-12. As we ﬂip the
Solo robot upside down, making the legs face upwards and
attach to our custom designed platform, we created a parallel
robot with closed-loop kinematic chains. We developed a
multibody simulation model of the robot in the PyBullet
environment [19], which we connect with our robot control
framework. Both hardware design and software framework
are open-source available. The proposed motion platform
achieves highly dynamic movement. It tracks a sinusoidal
trajectory up to 10 Hz with 10 mm translation amplitude, for
motion platform loads of 0.3 kg. Higher loads of 1.2 kg can
be moved at 2 Hz, for a motion range of 20 mm translation
or10 degrees rotation. To the best of our knowledge, there
is no open-source 6-DoF motion platform capable of such
highly dynamic movement, with a comparable price tag.
2 Robot Framework
2.1 Hardware Framework
The hardware framework consists of three main components
(Figure 2 ); a quadruped robot Solo [18], a light-weight
motion platform attached to the robot’s legs, and a base and
ﬁxture to mount the SOLO robot body to the table. The
complete setup requires a total installation space with a height
of 50 cm (z-axis), length of 110 cm (x-axis), and a width of
80 cm (y-axis). Safety margins are included. The maximum
workspace of the platform is x-axis 255 mm, y-axis 
105 mm, and z-axis 105 mm for translation; 30 degrees for
roll, yaw and pitch.
The Solo robot [18] is an open source modular robot.
The SOLO actuator module features a 9 : 1 dual-stage timing
belt transmission, a high-resolution optical encoder, and a
brushless motor. Each SOLO joint can output tmax=2:7 Nm
joint torque, and is controlled at up to 1 kHz [18].
The platform is mounted to the robot’s feet with ball
joints (IGUS KGLM-05). Ball joint allow a maximum pivot
angle of 30 degrees. We press-ﬁt the ball joints into the
robot’s feet and secured them with M4 nuts to the platform.
The platform itself is 3D printed from PLA material. The
platform provides multiple mounting points for attaching
payloads. An inertia measurement unit (IMU, 3DM-CX5-25)
is mounted at the bottom of the platform. With the IMU,
we record end effector ground truth data. To ﬁx the robot
body during movement, we designed a base that is screwed
on top of an optic table. We replaced the lower center plate
of the original robot with our mounting plate. CAD models
of the platform and the base are available on GitHub https:
//github.com/nayan-pradhan/solo-6dof-motion-platform. The
cost for the 3D printing parts of the motion platform’s base,
clamps, the platform, and the connecting ball joints amounts
to approximately 100 e. The material cost of the SOLO robot
is approximately 6 ;300ewithout an inertial measurement
unit (IMU), and 8 ;000ewith an IMU (Lord Microstrain
3DM-CX5-25).
Platform
Solo
Robot
BaseFigure 2. Main components of the motion platform. The
coordinate system on the platform shows x, y, z directions
in red, green and blue.
2.2 Software Framework
We custom-wrote a software framework to control platform
motion. This open-source software package offers full control
for 6 DoF motion. In addition to the physical robot control,
we also offer a PyBullet-based simulation environment to
evaluate the performance of the platform. The framework
features two options of logging the platform pose - through
the physically mounted IMU or through forward kinematic
calculations of joint angles. Because of the high price of
higher quality IMUs, the forward kinematic calculation is
the low-cost option. The software package is mainly written
in Python3. The software framework is built modular such
that users may update, add, or remove parts of the module
as long as the input format is maintained. The detailed
documentation can be found in our GitHub repository: https:
//github.com/nayan-pradhan/solo-6dof-motion-platform.
Our software framework consists of four main modules,
shown in Figure 3 :
1) Platform Trajectory Generation
2) Inverse Kinematics Tool
3) Control Environment
4) Post Processing
2.2.1 Platform Trajectory Generation
The Platform Trajectory Generation module generates the tar-
get pose of the platform. We implemented four base trajectory
options:
Sine Trajectory : A sine wave trajectory of speciﬁed
run time (seconds), wait time (seconds), type of movement
(translation/rotation), frequency (Hz), amplitude (mm/deg),
and x, y, z axis offsets (mm) is generated.
Arbitrary Trajectory : A smooth linear interpolation of
speciﬁed time (seconds) between a series of arbitrary target
positions (mm) and orientations (deg) is generated.
Step Trajectory : A step function in a speciﬁed position
(mm) and orientation (deg) is generated. As such, a step
response is useful for tuning controller gains.
Circular Trajectory : A circular trajectory of speciﬁed
radius of translation (mm), angle of rotation (deg), numberStart
Sine T rajectory
GenerationArbitrary
Trajectory
GenerationStep T rajectory
GenerationPlatform T rajectory Generation
Inverse Kinematics T ool
PyBullet Inverse
KinematicsRobotics T oolkit
Inverse Kinematics
Control Environment
PyBullet Simulation SOLO Environment
Post Processing
Data Storage
IMU Data
 RemappingAcceleration
Calculation
EndData
Preview/V isualization
(Plots)Custom Inverse
KinematicsCircular
Trajectory
Generation
Free SOLO
EnvironmentFigure 3. Software framework.
of rounds, frequency of rotation, direction of translation
and rotation (clock-wise/counter-clock-wise), and ability to
enable/disable translation and/or rotation is generated.
2.2.2 Inverse Kinematics Tool
The Inverse Kinematics Tool module takes platform target
trajectories generated from Section 2.2.1 as the input and
calculates target joint angles for each joint using inverse
kinematics. We use PyBullet [20] for the inverse kinematics
calculation. Additionally, we provide an API for custom
inverse kinematics packages such as Robotics Toolbox [21].
2.2.3 Control Environment
The Control Environment module takes the target joint angles
generated from Section 2.2.2 as the input and starts the plat-
form motion. Our software framework contains two control
environments:
1) PyBullet Simulation Environment
2) Solo Environment
The PyBullet Simulation Environment ( Figure 1a ) executes
joint commands in simulation at 240 Hz. The control update
frequency is limited by PyBullet. The simulation environment
loads the URDF models of the Solo robot and the platform. It
creates constraints between foot joints and platform corners.
The PyBullet simulation can be used to test new algorithmsand implementations without wearing the physical robot setup
out.
The Solo Environment ( Figure 1b ) is used to control our
physical motion platform at 1000 Hz. The Solo environment
initializes the robot, calibrates the robot, executes the desired
motion trajectory, and logs the all sensor data.
2.2.4 Post Processing
The Post Processing module loads the stored data, processes
data, and plots previews.
Target trajectories and sensor readings from Sections
2.2.1, 2.2.2, and 2.2.3 are loaded. We calculate the pose of
the platform from robot joint angles.
We do this by ﬁrst calculating the position of the foot
links in the Solo robot (our end-effectrs) for each leg using
the loaded joint angles and the measured distances between
joints from the CAD model. We deﬁne a dummy ball joint
at the foot links (end-effectors). We then construct a vector
from the front left ball joint to the back right ball joint and
another vector from the front right ball joint to the back left
ball joint. We compute the intersection point between the two
constructed vectors. This intersection point represents the x
and y values of the platform center. In order to get the correct
z value, we have to add an offset in z, which we get from the
CAD model.
To get the orientation of the platform we calculate three
more vectors. First we calculate the vector from the front left
to the back left ball joint position. This vector represents the x
direction of our platform. By calculating the vector from the
front left to the front right we get the y direction. Lastly we get
the z direction by building the cross product of the two vectors
we calculated earlier. To get the platform orientation we use
the Rotation class from scipy.spation.transform .
We use the method align_vectors() where we get the
transformation matrix between the global coordinate system
and our three calculated vectors representing the platform
axes. This transformation matrix represents our platform ori-
entation. For easier understanding we chose to use the Euler
angle representation.
The linear and angular velocity and acceleration at the
center of our platform is derived using the calculated positions
and orientations. This provides the use the option to record the
position, velocity, and acceleration of the platform without
purchasing an expensive IMU. The calculated pose is ﬁltered
using a Butterworth low pass ﬁlter with a cutoff frequency of
50 Hz.
We validate our calculated data with the raw IMU data.
Figure 4 shows an example of the calculated, target, and
measured IMU values in x-axis direction for a sinusoidal
motion of frequency 1 Hz and amplitude 20 mm/ 10 deg.
The data preview module showing desired plots and
graphs is loaded automatically after the data is processed. This
can also be executed independently for quick visualization of
the latest data.
3 Experimental Benchmarking and Results
In this section, we present benchmarking experiments and
results with our 6-DoF motion platform hardware. In order
to benchmark the results, we compare the commanded and
target values with the calculated and actual values.
We benchmark our setup with two motion trajectories:28 29time [s]50
050 deg
Ang. Vel. for
Rot. in x [deg/s]
4 5time [s]10
5
0510
m/s2
Lin. Acc. for
Tran. in x [m/s2]
calculated target imuFigure 4. Calculated, target, and IMU angular velocity and
linear acceleration in x-direction.
Joint Name RMSE
Right Front Hip Joint 1:6 deg
Right Front Upper Joint 1:9 deg
Right Front Lower Joint 3:1 deg
Average of Right Leg Joints 2:3 deg
TABLE 1: RMSE between target and actual joint angle
1) Sinusoidal Trajectory
2) Circular Trajectory
3.1 Sinusoidal Trajectory
We use sinusoidal trajectory as one of the benchmarks be-
cause we can test and validate a wide range of dynamic
motions with varying amplitude and frequencies on each DoF.
We use a target sine trajectory in each of the 6 DoF with
a sequence run-time of 3 seconds, wait-time of 2 seconds,
frequency of 2 Hz, translational amplitude of 20 mm and
rotational amplitude of 10 degrees.
3.1.1 Joint Angles
We compare the actual robot joint angles to the target joint
angles from the right front leg, and show the current measure-
ment (in linear relation to torque output) of the respective mo-
torFigure 5 . The Root Mean Squared Error (RMSE) between
the target and actual joint angles is calculated as shown in
Table 1 . The average RMSE for the right leg was 2 :3 degrees,
showing good tracking results. We notice a constant offset in
the right front upper and right front lower joint angles, which
is caused by gravity. In this control, the inﬂuence of gravity
is not modeled, and hence not compensated for.
3.1.2 Platform Pose
A second approach to benchmark our motion platform is to
compare the target pose to the calculated pose ( Section 2.2.4 ),
as shown in Figure 6 .
We observed overshoot motions in x, y translation and
in x rotation. The overshoot motions are associated with the
joint overshoots as in Figure 5 . The pose tracking RMSE is
documented in Table 2 . We ﬁnd that the largest RMSE of 5 :8
mm happens during x-axis translation, followed by 4 :7 mm
in the y-axis translation. We believe ﬁne-tuning the controller
gains can improve the tracking performance.
In a set of additional experiments, we increased the
platform’s sine wave motion frequency to identify the setup’sPlatform Traj. Motion Type Motion Axis RMSE
x 5:8 mm
Translation y 4:7 mm
z 1:6 mm
Sine Average Translation xyz 4:4 mm
Trajectory x 1:3 deg
Rotation y 1:6 deg
z 1:9 deg
Average Rotation xyz 1:6 deg
TABLE 2: RMSE Error between Target Platform Pose and
Calculated Platform Pose for each axis for Sine Trajectory in
Solo Control Environment.
Platform Traj. Motion Type Motion Axis R.M.S.E
x 4:0 mm
Translation y 1:6 mm
z 7:9 mm
Circular Average Translation x, y, z 5:2 mm
Trajectory x 2:5 deg
Rotation y 1:9 deg
z 1:8 deg
Average Rotation x, y, z 2:1 deg
TABLE 3: RMSE between target and calculated platform pose
for each axis for circular trajectory.
maximum acceleration. We stopped experiments at 10 Hz
with an amplitude of 10 mm. At these loads, the motor current
is reaching the limit of 15 A. At 10 Hz, the platform move-
ment becomes relatively violent at maximum acceleration of
4 g, and pose tracking quality decays much. Nevertheless,
this experiment demonstrates the high acceleration capacity
of the proposed motion platform.
3.2 Circular Trajectory
We use a circular trajectory to test dynamic motion tracking
of multiple DoF movements simultaneously. The circular tra-
jectory generation method in 2.2.1 to generate a simultaneous
clock-wise circular translation and rotation motion on the z-
axis in a motion frequency of 2 Hz ( Figure 7 ).
The platform can follow the target trajectory as shown in
Figure 7 . We notice deviations from the nominal path, which
we connect to minor calibration errors. The platform follows
a smooth path consistently over 20 cycles, with a satisfactory
and repeatable precision. The accuracy of path tracking is
documented in Table 3, which should be improved further. We
also notice relatively high RMSE on z axis translation, which
can be improved by implementing a gravity compensation
function.
The experiment videos of the motion platform are avail-
able at https://youtu.be/thXPA2MYcQw.
4 Conclusion
In this work, we propose a high-performance low-cost motion
platform design. The motion platform hardware is centered
around the four legs of the quadruped robot Solo. Its legs hold
a platform, creating a parallel robot. Besides the quadruped
robot, our setup requires only few, simple-to-implement 3D
printing parts, and a few off-the-shell components like bear-
ings and screws. Driven by the four legs and 12 motors simul-
taneously, this motion platform provides high acceleration, up
to 4 g at a platform loading of 300 grams. Our systematic10
010Joint Angles [deg]
Right Front Hip
60
50
40
Right Front Upper
8090100110
Right Front Lower
actual
target
0 205.0
2.5
0.02.55.0Current [A]
0 20
time [s]5.0
2.5
0.02.55.0
0 205.0
2.5
0.02.55.0
currentFigure 5. Robot front right leg target vs actual joint angles for the Solo Control Environment. The respective current
measurements are performed in the motor drivers, which is in linear relationship to torque output, with a software limit
up to 15 A.
Tran. X Tran. Y Tran. Z Rot. X Rot. Y
calculated target imuRot. Z
2 40.0250.0000.025
Pos. [m]
8 100.0250.0000.025
12 140.240.26
16 18 2010
010
Orn. [deg]
22 24 2610
010
26 28 3010
010
2 420
020
Lin. Acc. [m/s2]
20
8 1020
0
20
12 1420
0
16 18 20500005000
Ang. Acc. [deg/s2]
22 24 26500005000
26 28 30500005000
2 40.5
0.00.5
Lin. Vel. [m/s]
0.5
8 100.50.0
12 140.250.000.25
16 18 20100
0100
Ang. Vel. [deg/s]
22 24 262000
time [s]26 28 300200
Figure 6. Motion platform target vs calculated position, linear velocity, linear acceleration, orientation, angular velocity, and
angular acceleration for sine trajectory25
025
x [mm]40
20
02040y [mm]
Translation
20
0 20
x [deg]20
10
01020y [deg]
Rotation
calculated targetFigure 7. Motion platform target vs calculated pose for
circular trajectory.
benchmarking on sinusoidal and circular trajectories with 1.2
kg platform loading demonstrates good tracking performance
and workspace. We custom-developed a control framework
and a PyBullet-based simulation model of the motion plat-
form, allowing for real-time control and data logging up to
1 kHz. The hardware design and software packages are fully
open source available at https://github.com/nayan-pradhan/
solo-6dof-motion-platform. We envision our robot design
will support barrier free research, catalyzing future robot
development and application.
Acknowledgments
The authors thank the International Max Planck Research
School for Intelligent Systems (IMPRS-IS) and the China
Scholarship Council (CSC) for supporting An Mo. This
work was funded by the Max-Planck Institute for Intelligent
Systems’ Grassroots project and the Deutsche Forschungs-
gemeinschaft (DFG, German Research Foundation), project
449912641. The authors thank Felix Grimminger and Huanbo
Sun for supporting the hardware development.
References
[1] M.-Y . Wei, “Design and implementation of inverse
kinematics and motion monitoring system for 6dof
platform,” Applied Sciences , vol. 11, no. 19, p. 9330,
2021.
[2] B. Li, S. Guo, X. Mao, et al. , “Design and simulation
analysis of 6-dof electric platform,” in IOP Conference
Series: Materials Science and Engineering , IOP Pub-
lishing, vol. 563, 2019, p. 052 059.
[3] J. Iqbal, R. U. Islam, H. Khan, et al. , “Modeling and
analysis of a 6 dof robotic arm manipulator,” Canadian
Journal on Electrical and Electronics Engineering ,
vol. 3, no. 6, pp. 300–306, 2012.
[4] A. Fomin, A. Antonov, V . Glazunov, et al. , “Inverse
and forward kinematic analysis of a 6-dof parallel ma-
nipulator utilizing a circular guide,” Robotics , vol. 10,
no. 1, p. 31, 2021.
[5] E. L. Faulring, J. E. Colgate, and M. A. Peshkin,
“A high performance 6-dof haptic cobot,” in IEEE
International Conference on Robotics and Automation,
2004. Proceedings. ICRA’04. 2004 , IEEE, vol. 2, 2004,
pp. 1980–1985.[6] K. Fujimoto, S. Tadokoro, and T. Takamori, “Develop-
ment of a 6-dof direct-drive wrist joint by pneumatic
linear actuator drive,” in [Proceedings] IECON’90:
16th Annual Conference of IEEE Industrial Electronics
Society , IEEE, 1990, pp. 427–432.
[7] S. Staicu, Dynamics of Parallel Robots . Springer, 2019.
[8] X.-S. Gao, D. Lei, Q. Liao, et al. , “Generalized stewart-
gough platforms and their direct kinematics,” IEEE
Transactions on Robotics , vol. 21, no. 2, pp. 141–151,
2005.
[9] A. Ghobakhloo, M. Eghtesad, and M. Azadi, “Posi-
tion control of a stewart-gough platform using inverse
dynamics method with full dynamics,” in 9th IEEE
International Workshop on Advanced Motion Control,
2006. , IEEE, 2006, pp. 50–55.
[10] H. Zhang, H. Fang, D. Zhang, et al. , “Forward kine-
matics and workspace determination of a novel re-
dundantly actuated parallel manipulator,” International
Journal of Aerospace Engineering , vol. 2019, 2019.
[11] M. Ratiu and D. Anton, “A brief overview of paral-
lel robots and parallel kinematic machines,” in IOP
Conference Series: Materials Science and Engineering ,
IOP Publishing, vol. 898, 2020, p. 012 007.
[12] F. Pierrot, C. Reynaud, and A. Fournier, “Delta: A
simple and efﬁcient parallel robot,” Robotica , vol. 8,
no. 2, pp. 105–109, 1990.
[13] L. Rey and R. Clavel, “The delta parallel robot,” in
Parallel Kinematic Machines , Springer, 1999, pp. 401–
417.
[14] I. Bonev, “Delta parallel robot-the story of success,”
Newsletter, available at http://www. parallelmic. org ,
2001.
[15] J.-P. Merlet, Parallel robots . Springer Science & Busi-
ness Media, 2005, vol. 128.
[16] H. McClintock, F. Z. Temel, N. Doshi, et al. , “The mil-
lidelta: A high-bandwidth, high-precision, millimeter-
scale delta robot,” Science Robotics , vol. 3, no. 14,
eaar3018, 2018.
[17] A. Mo, V . Kamska, F. Bribiesca-Contreras, et al. ,
“Open electronics for a biophysical model for in-
traspinal mechanosensing in avians,” 2021.
[18] F. Grimminger, A. Meduri, M. Khadiv, et al. , “An open
torque-controlled modular robot architecture for legged
locomotion research,” IEEE Robotics and Automation
Letters , vol. 5, no. 2, pp. 3650–3657, 2020.
[19] E. Coumans and Y . Bai, Pybullet, a python module for
physics simulation for games, robotics and machine
learning , http://pybullet.org, 2016–2021.
[20] PyBullet, Bullet real-time physics simulation , https://
pybullet . org / wordpress/, [Online; accessed 2022-10-
27], 2022.
[21] P. Corke and J. Haviland, “Not your grandmother’s
toolbox–the robotics toolbox reinvented for python,” in
2021 IEEE International Conference on Robotics and
Automation (ICRA) , IEEE, 2021, pp. 11 357–11 363.