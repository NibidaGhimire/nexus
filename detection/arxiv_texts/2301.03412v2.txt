Neighbor Auto-Grouping Graph Neural Networks for Handover Parameter
Conﬁguration in Cellular Network
Mehrtash Mehrabi1,2, Walid Masoudimansour1, Yingxue Zhang1, Jie Chuai1, Zhitang Chen1,
Mark Coates3, Jianye Hao1, 4, Yanhui Gen1
1Huawei Noah’s Ark Lab,2University of Alberta,3McGill University,4Tianjin University
fmehrtash.mehrabi, walid.masoudimansour, yingxue.zhang, chuaijie, chenzhitang2,
haojianye, geng.yanhui g@huawei.com, mark.coates@mcgill.ca
Abstract
The mobile communication enabled by cellular networks is
the one of the main foundations of our modern society. Op-
timizing the performance of cellular networks and providing
massive connectivity with improved coverage and user ex-
perience has a considerable social and economic impact on
our daily life. This performance relies heavily on the conﬁg-
uration of the network parameters. However, with the mas-
sive increase in both the size and complexity of cellular net-
works, network management, especially parameter conﬁgu-
ration, is becoming complicated. The current practice, which
relies largely on experts’ prior knowledge, is not adequate
and will require lots of domain experts and high mainte-
nance costs. In this work, we propose a learning-based frame-
work for handover parameter conﬁguration. The key chal-
lenge, in this case, is to tackle the complicated dependencies
between neighboring cells and jointly optimize the whole net-
work. Our framework addresses this challenge in two ways.
First, we introduce a novel approach to imitate how the net-
work responds to different network states and parameter val-
ues, called auto-grouping graph convolutional network (AG-
GCN). During the parameter conﬁguration stage, instead of
solving the global optimization problem, we design a local
multi-objective optimization strategy where each cell con-
siders several local performance metrics to balance its own
performance and its neighbors. We evaluate our proposed al-
gorithm via a simulator constructed using real network data.
We demonstrate that the handover parameters our model can
ﬁnd, achieve better average network throughput compared to
those recommended by experts as well as alternative base-
lines, which can bring better network quality and stability. It
has the potential to massively reduce costs arising from hu-
man expert intervention and maintenance.
1 Introduction
The rapid growth in the number of devices that need real
time, high quality connection to the internet (e.g., internet of
things (IoT) devices, health monitoring equipment, devices
used for online education and remote working, autonomous
vehicles, etc.) makes it essential to improve cellular network
performance. Unsatisfactory user experience and network
interruption have negative impacts in our modern society.
Thus, improving the cellular network has both economic and
Copyright © 2023, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.social impact towards achieving United Nations Sustainable
Development Goals (UNSDGs) (Weisenborn 2018; World
Economic Forum 2020). Moreover, it can highly contribute
to enhancing infrastructure, promoting sustainable indus-
trialization, fostering innovation, responsible consumption,
enabling sustainable cities and communities, and promot-
ing decent work and economic growth (Gohar and Nencioni
2021; Rao and Prasad 2018; Siriwardhana et al. 2021).
The performance of a cellular network relies heavily on
its parameter conﬁgurations and it is becoming more cru-
cial, as the number of mobile users continues to grow rapidly
(statista 2022). These parameters govern access control,
handover, and resource management (Dahlman et al. 2013;
Bhat et al. 2012). One of the factors that has a signiﬁcant
impact on the quality of service (QoS) in such networks is
the handover parameter (Tekinay et al. 1991). We provide
more details concerning this parameter and its effects in the
supplementary materials, Sec. A.1.
Optimizing handover parameters is one of the most com-
mon approaches to guarantee minimum service delay or in-
terruption and improve coverage and throughput (Mu et al.
2014). However, with the massive increase in both the size
and complexity of cellular networks, parameter conﬁgura-
tion is becoming complicated. The current practice, which
relies largely on experts’ prior knowledge, is inadequate, re-
quiring many domain experts and leading to high mainte-
nance costs.
One of the key challenges in the network parameter op-
timization problem is the complex spatial and temporal de-
pendencies in the cellular network. Any employed algorithm
should be capable of tracking the non-stationary changes in
the environment, i.e., the ﬂuctuations of user number, net-
work load, etc. (Agiwal et al. 2016). Also, due to the diverse
characteristics of cells across the network, the best parame-
ter conﬁguration for one cell may not be optimal for another
and parameter conﬁguration of one cell not only affects its
own performance, but also affects its neighbors’ (Dahlman
et al. 2013). Therefore, there are strong interactions between
neighboring cells which become extremely complicated in
heterogeneous network. Consequently, developing an algo-
rithm that can adapt to the temporal dynamics and cell diver-
sity in real networks is essential for parameter conﬁguration
(Jiang et al. 2016).
The current cellular network deployments are highly de-arXiv:2301.03412v2  [cs.NI]  28 Feb 2023pendent on human designed rules or analytical models based
on domain knowledge and assumptions about the network
dynamics which is far from optimal. They only consider
a limited number of network states (e.g., user distribution,
channel quality, etc.) and parameters, and cannot capture the
complex relationships between network states, parameter
conﬁgurations and network performance. Also, the assump-
tions of the network dynamics, based on which the rules/-
models are developed, are often simpliﬁed without consider-
ing the non-stationary changes in real environments, which
degrades their performance. Finally, these rules/models may
not be able to deal with the cell diversities in the network
which makes them sub-optimal (Imran et al. 2014).
Recently, data-driven approaches based on machine learn-
ing (ML) have been extensively used for parameter con-
ﬁguration and network management in cellular networks
(Yu et al. 2017; Tabrizi et al. 2012; Riihijarvi et al. 2018;
Chuai et al. 2019; Ye et al. 2013). It has been shown that
the multi-layer perceptron (MLP) can be considered as a
universal function approximator (Goodfellow et al. 2016).
Thus, in environments such as cellular networks where there
is lack of an accurate analytical model and the network is
highly dynamic, neural-network-based methods can be used
to achieve high-accuracy prediction. ML models can uti-
lize high dimensional information and approximate complex
functions to fully describe the relationship between network
states, parameter conﬁgurations and network performance
metrics, which cannot be achieved by human experience.
In order to address the above challenges, we investigate
two important questions: 1) Modeling : how to model the
spatial and temporal dependencies of the cellular network?
2)Decision-making : how to choose the parameter values to
jointly optimize the overall performance of interconnected
and interacting cells? We ﬁrst, propose a ML-based model to
precisely imitate the cellular network environment and then,
use it to conﬁgure the parameters.
We demonstrate that the handover parameters recom-
mended by our model can achieve better average network
throughput compared to the existing methods and our ap-
proach can massively reduce costs from human expert in-
tervention and maintenance. It opens up the potential for
high-quality internet access to geographical areas that are
currently under-served by the cellular network. Besides, this
framework can bring new possibilities for important appli-
cations to under-developed regions including online educa-
tion, health monitoring devices by improving their real time
connection (Attaran 2021).
Our main contributions are summarized as follows.
• We propose a novel method to model the impact from the
neighbors of each cell in a distinguishable way to capture
the complex spatial dependencies of the network.
• We consider the changing dynamics of the network in our
reward model to better reﬂect the temporal dependencies.
• We introduce a multi-objective optimization strategy
based on the model to consider several performance met-
rics and improve the overall network throughput, which
has the potential for high social impact applications.2 Background and Related Work
The adjustment of handover parameters helps to balance the
trafﬁc load in the network and it can dramatically affect the
network throughput. During the handover process in cellular
networks, in order to guarantee an acceptable service qual-
ity, a user equipment (UE) must monitor the reference signal
received power (RSRP) of the serving cell (3GPP TS36.331
2016). As soon as the RSRP drops below a pre-deﬁned
threshold (called A2-threshold), the UE starts to report mea-
surements to its serving cell and prepares for handover. In-
creasing the value of A2-threshold decreases the number of
UEs in the serving cell in which the handover is triggered,
and this spreads the serving cell’s load to its neighbors, re-
sulting in a signiﬁcant change of throughput for the serving
cell and its neighbors. While improving the load balance of
the network, this can have adverse effects on the network
performance since it forces frequent handovers which re-
quires a considerable amount of bandwidth for measurement
reporting and causes a drop in network throughput. Decreas-
ing the value of A2-threshold, on the other hand, may cause
a poor experience for edge UEs and lead to repeated connec-
tion loss due to weak signal. In attempt to solve the problem
of optimization of the parameters of a wireless network, dif-
ferent techniques such as fuzzy systems, deep reinforcement
learning (DRL), and contextual bandit have been used in the
literature. (see Sec. A.2 for some details).
The use of graph convolutoinal networks (GCNs) (Hamil-
ton et al. 2017; Kipf et al. 2017; Fan et al. 2019) has also
yielded signiﬁcantly well-designed models to predict the
network trafﬁc and optimize the corresponding parameters.
For example, in (Zhang et al. 2020), the authors introduce a
novel handover strategy based on GCNs. The handover pro-
cess is modeled as a directed graph by which the user tries to
predict its future signal strength. Other works such as (Zhao
et al. 2020) introduce novel methods of network trafﬁc pre-
diction combined with a greedy search or action conﬁgu-
ration method to optimize handover parameters. However,
these works fail to consider the heterogeneous aspect of the
cellular networks.
Despite being effective, none of the above-mentioned
methods uses the capacity of the neighbors’ information to
fully tailor the model to adapt to the spatial characteristics
of a cellular network, where the interaction is complex and
the network is heterogeneous. Also, despite the fact that
these techniques consider some important measures of op-
timization, none of them approaches the problem at hand
by considering two of the most important measures simul-
taneously (especially from the users’ perspective): load bal-
ancing and throughput. In this article, we propose an effec-
tive and efﬁcient framework that models the network as a
heterogeneous graph where we learn an implicit interaction
type for each neighboring cell. Then, it incorporates the im-
pact of neighboring cells from each interaction group in a
unique way. Moreover, in contrast to the available methods
in the literature, we exploit two important measures in the
network simultaneously, to conﬁgure the parameters effec-
tively: throughput and load balancing, which are directly re-
lated to the user experience in the network.3 Problem Formulation
Let us consider a network with Ncells, and form Nclusters
each composed of one of the network cells as its center cell
along with its neighboring cells. As an example, we choose
the optimization of the A2-threshold to investigate the per-
formance of our algorithm. According to the 3GPP standard
(3GPP TS36.331 2016), an A2 event is triggered when the
received power at user ufrom celln,Pu;n, satisﬁes
Pu;n+Hys<Thresh; (1)
whereHysis the hysteresis parameter to avoid frequent han-
dovers andThresh is the A2-threshold we are optimizing.
We consider an online optimization process. In real prac-
tice, network operators are often conservative and only allow
a limited number of experiments. During the optimization
period ofLdays, and the A2-threshold can be adjusted once
for each cell at the beginning of each day. For day t, letDt
be the total bits transmitted by all the cells, and Ttbe the to-
tal transmission time. We would like to maximize the accu-
mulated network throughput of the optimization period, i.e.,
maxPL
t=1Dt
Tt. Maximizing the overall network throughput
by jointly optimizing the A2-threshold of all cells is difﬁ-
cult. The problem becomes even more complicated as the
network size increases, which makes a centralized solution
not scalable. The adjustment of the A2-threshold of one cell
only affects its local neighborhood and thus, we convert the
centralized problem into a local decision problem. That is,
each cell only examines its local performance metrics and
chooses its own parameter conﬁguration value.
The adjustment of the A2-threshold affects the network
throughput via two means: better resource utilization by load
balancing, and improved cell throughput with less connec-
tion loss and measurement reporting. Consequently, in order
to conﬁgure it, these two metrics must be considered in the
local decision problem. The throughput of cell ion daytis
highly dependent on its A2-threshold, formulated as ai
t, de-
noted asi
t(ai
t). The load balancing factor in the i-th cluster
with center cell ion daytwithai
tis deﬁned as the ratio
of the center cell throughput to the average throughput of
its neighboring cells, denoted by i
t(ai
t)and formulated as
i
t(ai
t) =i
t(ai
t)=i
t, where i
tis the average throughput
of the neighbors of cell iwith action ai
tand, denoting by
Nt(i)the set of all neighbors of cell ion dayt, it can be
formulated as i
t=1
jNt(i)jP
j2Nt(i)j
t(aj
t). The through-
put ratio (rather than trafﬁc/user ratio) is used since different
cells have different capacities. This value approaches 1when
loads of different cells match their capacities.
Our goal is to maximize the overall network throughput
by optimizing the two important network performance met-
rics, namely, throughput ratio i
t(ai
t)and cell throughput
i
t(ai
t)for each cell i2[1;Nt], whereNtis the total number
of cells on day t, at the same time. Therefore, we propose the
following optimization problem for tuning the A2-threshold
for celli:
arg max
ai
t2A
 q1 i
t(ai
t);i
t(ai
t)
; (2)
whereAis the set of all possible values for the A2-threshold
in the cellular network.The challenge of solving the above problem lies in sev-
eral folds. First , since the network performance function is
complex, dynamic and unknown, obtaining accurate i
t(ai
t)
andi
t(ai
t)is difﬁcult. Instead, in this work, we adopt a
data-driven approach to learn reward models and estimate
the performance metrics. Second , in real-world cases, only
a limited experimental budget is allowed by network opera-
tors leading to insufﬁcient diverse historical data (state, ac-
tion pairs) to train a data-driven learning model. In our de-
sign, we use a data augmentation technique in the form of
neighbor cell augmentation to enrich the features from each
cell. Third , the handover parameter conﬁguration is affected
by adjacent cells. Thus, it is essential to model the informa-
tion coming from the adjacent cells to achieve accurate re-
ward modeling. Lastly , optimizing one performance metric
greedily might hinder another, thus, how to jointly optimize
different performance metrics needs careful consideration.
4 Temporal Auto-Grouping GCN for
Reward Modeling
In order to better capture the dependency between each
cell and its neighboring cells, we ﬁrst introduce our novel
method for neighboring cell feature aggregation. Second , we
propose a temporal feature aggregation step with recurrent
neural networks (RNN) to model the temporal correlation
from the historical sequence of the network states. Third , we
elaborate the overall training process, considering the im-
pact from the neighboring cells, the temporal correlation in
the network and the action we aim to optimize.
4.1 Spatial Feature Modeling
The handover parameters heavily impact the learning prob-
lem on the graph of the center cells as well as the neighbor-
ing cells, hence, we aim to capture the neighboring cells in-
formation during our modeling process. Recently, message-
passing neural networks (MPNNs) in the form of graph neu-
ral networks (GNNs) have been introduced and showed to
be effective in modeling real world applications with struc-
tural information. The dependencies in the dataset are mod-
eled using a graph (Hamilton et al. 2017; Ying et al. 2018;
Wang et al. 2019). In each layer of a GNN, each node’s rep-
resentation includes the features from itself as well as the
features from its neighboring nodes (messages sent from the
neighborhood). We believe the GNN framework is suitable
for handling the dependencies between the center cell and
the neighboring cells in cellular networks. We present more
details on GNN and recent works on homogeneous and het-
erogeneous graphs in the Sec. A.3.
Graph-Based Cellular Network Modeling We construct
a graphGt=(Vt;Et;Xt)for dayt, where each node v2Vt
represents one cell and is associated with a feature vector
xv
t2Rd(v-th column of Xt2RdjVtj), including the sta-
tistical properties of node vmeasured on day t. The sta-
tistical properties could include several features such as the
antenna transmission power, physical resource block (PRB)
usage ratio, the amount of data trafﬁc, and the transmission
bandwidth. These features serve as the node attributes. The
edge setEtencodes the interactions between cells based onthe handover events between pairs of cells. Based on his-
torical data, if any pair of cells has an average number of
handover events above a threshold , we assume an edge
between those two cells. The neighboring set for node vis
denoted asNg
t(v)=fuju2Vt;(u;v)2Etg.
Due to the heterogeneous nature of the cellular network,
the relationships between the neighboring cells can be com-
plex. Concretely, there might be an implicit Mlatent rela-
tionship typesR=fr1;r2;;rMgthat can be learned
to better handle the complex interactions in the cellular net-
works. Assuming each cell is represented by its states such
as PRB usage, trafﬁc, etc. in the network graph, we aim at
dividing the neighboring cells into different groups, each of
which will provide some information that is shared between
the neighbors in that group and help to better capture the
rich information from neighboring cells in a distinguishable
way. Thus, inspired by the above motivation and a recent
work (Pei et al. 2020), we propose a novel GCN approach
called auto-grouping GCN (AG-GCN) to characterize this
special property of cellular networks when handling the in-
teractions between neighboring cells. In the following, we
elaborate upon the detailed steps to realize our design.
Neighborhood Augmentation In cellular network mod-
eling, since the experiment budget is limited, the historical
data (state-action pairs) is not diverse enough to train our
data-driven model. Besides, since we construct the graph
based on the handover events, there are cells that have a very
limited number of neighboring cells. Thus, in our design, we
use a data augmentation technique in the form of neighbor
cell augmentation based on the similarity between cells in a
latent space, to enrich the features of each cell.
We deﬁne a feature transformation function f() :Rd!
Rlwhich maps the input node feature xv
t2Rdto a la-
tent space yv
t=f(xv
t)2Rl. In order to capture the long-
range dependencies and similarity in the cellular network,
we design an additional neighborhood in the latent repre-
sentation space based on Euclidean distance. For each node
v2 Vt, we form the augmented neighborhood Nt(v) =
Ng
t(v)[Ns
t(v), whereNg
t(v)andNs
t(v)are the neigh-
bors of node vin the original graph and in the latent space,
respectively. The neighbors in the latent space are selected
based on their Euclidean distance to the center cell. The n
nearest nodes in the latent space are selected to create Ns
t(v)
for cellv, where the number of nodes we select based on the
feature similarity is equal to the neighborhood size in the
original graphjNg
t(v)j=jNs
t(v)j=n. The neighbor augmen-
tation module in Fig. 1 illustrates this process.
Neighborhood Auto-Grouping Once we have obtained
the augmented neighborhood set, the neighbors in the
augmented neighborhood Nt(v)are divided into different
groups by a geometric operator . Consider node vand
its neighbor node u2 Nt(v). The relation between them
on daytis denoted as (yv
t;yu
t) : (Rl;Rl)! R =
fr1;r2;;rMg. This grouping aims at combining neigh-
bors’ information in groups with similar inter-group fea-
tures. For each group ri2R, the neighborhood feature set
on daytis deﬁned asNri
t(v) =fuju2Nt(v);(yv
t;yu
t) =
rig:The auto-grouping module in Fig. 1 demonstrates thisprocess. Note that yellow neighbors (marked with *) are the
projected counterparts of the neighbors in the graph space,
while the green neighbors (marked with +) correspond to the
augmented neighbors from the latent space.
Conditional Message Passing Since the order within
each neighbor group should not impact the output of the
representation, we apply a permutation invariant function
()on the neighbors within each group (mean pooling
across each feature dimension) and aggregate them sepa-
rately. Fig. 1 shows an example of the AG-GCN, where
l= 2 andjRj= 4 and the representation after the per-
mutation invariant function ()is shown by black dashed
arrows ended to nodes 1, 2, 3, and 4. Then for each group
ri2R, a non-linear transform is further applied as:
zv;ri
t=
Wv;ri
t 
fxu
tju2Nri
t(v)g
; (3)
where Wv;ri
tis a learnable weight matrix for the neighbors
in groupriof nodevon dayt, and()is a non-linear
function, e.g., tanh . Then for each node we aim to aggre-
gate the transformed neighborhood features from their dif-
ferent groups of neighbors in a distinguishable way. The
vectors zv;ri
tforri2 R are further aggregated as hv
t=
[zv;r1
t;;zv;rM
t];where [ ; ]represents concatenation.
4.2 Temporal Feature Modeling
Capturing the trend in the evolution of the states of each cell
within a day properly can beneﬁt the prediction of the per-
formance metric for the following day. We propose to use
additional temporal features for each center cell to extract
the changing dynamic pattern of its states within each day to
further improve the reward model performance. We assume
the samples of the center cell von daytcan be divided into
Kgroups by their temporal order. For all the samples in each
groupk, we take the average network state for each group of
samples and denote it as xv
t;k. We use an RNN layer to cap-
ture this temporal dependency of the features from different
groups by feeding all the network states as an input sequence
Pv
t=
xv
t;1T;xv
t;2T;;xv
t;KTT2RKd, to obtain
cv
t= RNN( Pv
t;)2Rd0; (4)
whereandd0are the set of trainable parameters and the
output dimension of the RNN layer, respectively.
4.3 Overall Training Pipeline
The main purpose of the model is to estimate the real
network‘s response, and predict the throughput ratio and
throughput of the center cell for the next day based on the
observed network states in the current day. These perfor-
mance metrics are not only affected by the current day’s
states, but also highly correlated with the action we choose
to conﬁgure for the next day. Thus, we also consider the ac-
tions of the next day. Furthermore, the throughput ratio and
throughput of the next day are highly dependent on the pre-
vious performance metrics. Hence, we consider the current
throughput ratio, i.e., v
t, in the prediction process.
To make the ﬁnal prediction, the learned representation of
the neighborhood by the AG-GCN aggregation, the tempo-
ral features of the center cell, and the throughput ratio of theRNN
Predict 
Throughout 
or 
Throughput 
Ratio
Neighbor 
Augmentation Module
Auto-Grouping 
ModuleDaily Average
Graph SpaceEuclidean SpaceEmbedding function 
Group 1 Group 2
Group 3
Group 41
4
32
*+
Neighbors from graph space
Neighbors from Euclidean space
TAG-GCN
Neighbor Augmentation Module
Auto-Grouping ModuleCapturing Spatial Information
Capturing Temporal Information
*
++
+
+*Temporal Feature 
Modeling
Neighbor 
Information 
Modeling
Concatenation
Concatenation
ConcatenationFigure 1: The ﬂow of information from graph structure to ﬁnal prediction, used to form the training pipeline of two models for
predicting the throughput ^and the throughput ratio ^forTin=f1;2;;t 1g. In this demo example, the auto-grouping
module constructs M= 4groups of neighbors, where l= 2. Empty groups are ﬁlled with the average of other groups.
current day, i.e. v
t, are concatenated to form the state vec-
tor of cellvassv
t= 	( Wv
t
v
t;cv
t;hv
t
), where Wv
tis
a learnable weight matrix for node von dayt, and 	()is
a non-linear function, e.g., tanh . Since the ﬁnal representa-
tion should be sensitive to the chosen input action (of which
the decision making process will be elaborated in Sec. 5),
the throughput ratio and throughput of the next day for cell
vare formulated as the output of a non-linear transformation
()function of state and action:
^v
t+1=  
Wv
:([sv
t;av
t])
; (5)
^v
t+1=  
Wv
:([sv
t;av
t])
; (6)
where Wv
andWv
are trainable matrices of node vfor
throughput ratio and throughput models, respectively. The
overall ﬂow of data from the graph structure to the ﬁnal pre-
diction is represented in Fig. 1. Note that we train two sepa-
rate models for predicting the throughput and the throughput
ratio simultaneously.
In order to properly use the A2-threshold for the predic-
tion, we use the change in this parameter compared to the
previous day as the action av
t=A2v
t+1 A2v
t, whereA2v
t+1
andA2v
tare the A2-thresholds for cell von dayt+ 1andt,
respectively. The reason for this design choice has twofold.
First, the original action space of A2 is large, but the range
of the change of action can be smaller by controlling the
adjustment steps, making it easier for the model to learn
and conduct the decision making step. Besides, the delta ac-
tion directly reﬂects the change in the cell coverage/loads, so
they are more sensitive to the performance metrics. To form
the training objective, we consider data of T+ 1consecu-
tive days and form the pairs (t;t+ 1) ,t2f1;2;;Tg,
to predict the throughput ratio and throughput of the center
cell in dayT+ 1, trained by minimizing the following loss
functions respectively:
1
TTX
t=11
NtNtX
v=1(^v
t+1 v
t+1)2+1jj1jj2; (7)
1
TTX
t=11
NtNtX
v=1(^v
t+1 v
t+1)2+2jj2jj2; (8)where1and2are the hyperparameters chosen for reg-
ularization. 1and2represent all the trainable parame-
ters in the models. The trained reward model is now able to
mimic the real network and predict both throughput ratio and
throughput of each center cell for the coming day and can be
used to check the impact of actions towards the performance
metrics we are considering.
5 Action Conﬁguration
As discussed in the earlier sections the main objectives to
consider in the action conﬁguration process are load balanc-
ing, identiﬁed by the throughput ratio, and the cell through-
put. Hence, the best action for cell von dayt, i.e.av
t2A, is
the one that optimizes the problem in (2). In general, when
dealing with a multi-objective problem, different objectives
are often conﬂicting, and we may not be able to optimize
them simultaneously. One common way to tackle this prob-
lem is to give different objectives weights and optimize the
weighted objective value. However, in our scenario, it is dif-
ﬁcult to determine the weights and different clusters may
require cluster-speciﬁc weights. Here we break the problem
in (2) into two sub-problems, and solve them sequentially.
We ﬁrst optimize the action with respect to the predicted
throughput ratio, i.e., ^v
t+1(av
t)for cellvon dayt, where
av
t2A, and then optimize the throughput ^v
t+1(av
t).
Speciﬁcally, the throughput ratio is optimized and we ﬁnd
the set of best cvalues forav
t, denotedAv
c, such that
min
av
t2Avc q1 ^v
t+1(av
t)max
av
t2A Avc q1 ^v
t+1(av
t):(9)
Then, our goal is to achieve the maximum possible through-
put for cellvon daytand this is through
^av
t= arg max
av
t2Avc^v
t+1(av
t): (10)
^av
tis then the ﬁnal recommended action for cell von dayt.
This procedure for all the Ntcells of the network on day tis
presented in Algorithm 1.
6 Experimental Results
The experiments are conducted on a large-scale cellular net-
work simulator constructed from real-world data which pre-
sented in Sec. B.1. We use principal component analysis(yv
t;yu
t) yv
t[0]>yu
t[0] yv
t[0]yu
t[0]
yv
t[1]yu
t[1] 2 1
yv
t[1]>yu
t[1] 3 4
Table 1: The relationship operator 
Algorithm 1: TAG-GCN for Action Conﬁguration
Input :Pv
tandxu
twhere,u2Nt(v)8v2[1;Nt]
Output :av
tfor8v2[1;Nt]
1:Letv= 1and8j2[1;Nt]setAj
c=;.
2:whilevNtdo
3: Feed the TAG-GCN model with Pv
tandxu
t, for all
neighboru2Nt(v).
4: Freeze all inputs of TAG-GCN except actions and
predict the performance metrics ^v
t+1()and^v
t+1()
for the input actions.
5: forjAv
cjdo
6:x= arg maxa2fA Avcg q1 ^v
t+1(a)
7:Av
c=Av
c[fxg
8: end for
9:av
t= arg maxa2Avc^v
t+1(a)
10:v=v+ 1
11:end while
12:returnav
tfor8v2[1;Nt]
(PCA) as the mapping function f(), as deﬁned in Sec. 4, for
obtaining the latent representation in the AG-GCN step. It
transforms the original feature into a 2-dimensional space to
perform the neighborhood augmentation and the neighbors
group assignment process. After this transformation, the re-
lationship operator for the auto-grouping assigns a group
to each subset of points in each quadrant of this two dimen-
sional space presented in Table 1. The permutation-invariant
functionapplied on each group of neighbors is average in
our experiments.
6.1 Datasets
To perform our experiments and evaluate the proposed
model, two datasets are used in this study (see Sec. B.2 for
more details):
Dataset-A: A real metropolitan cellular network contain-
ing around 1500 cells sampled hourly and collected from
Oct. 17 to Oct. 31, 2019. Each data sample contains infor-
mation such as the cell ID, sample time, conﬁguration of cell
parameters, and measurements of the cell states.
Dataset-B: Also a real metropolitan cellular network. The
network contains 1459 cells, and the data is collected from
Sep. 1 to Sep. 29, 2021. Each data sample contains similar
information as above.
6.2 Reward Model Accuracy Evaluation
Dataset Generation In order to evaluate the prediction ac-
curacy of our model, we use a simulator to modify Dataset-A
with a random policy to diversify our network conﬁguration.
On each day, the A2-threshold for each cell is randomly se-
lected around the default action -100 dBm within the range
[ 105; 95]. This approach provides us a ﬁx data buffer
with diverse action dataset to train all models and have a fair
2019-10-22 2019-10-23 2019-10-24 2019-10-25 2019-10-28 2019-10-29
Time67891011Throughput MSE
MLP
GCN
AG-GCN
TAG-GCN(a)
2021-09-05 2021-09-06 2021-09-07 2021-09-08 2021-09-09 2021-09-10 2021-09-11 2021-09-12
Time67891011Throughput MSE
MLP
GCN
AG-GCN
TAG-GCN (b)
Figure 2: Achieved MSE of the throughput for test data of
(a) Dataset-A and (b) Dataset-B for different methods
comparison of their accuracy. For Dataset-B, there exists a
reasonable amount of the diversity in the handover parame-
ter conﬁguration, thus we directly use the raw dataset from
the live network to perform the training and evaluation.
Training Process and Metrics As samples generated
hourly, we aggregate them within each day as described in
Sec. 4. To evaluate the model accuracy in predicting cell
throughput and throughput ratio, we train the model with
the generated pairs f(1;2);;(t 1;t)gfort= 9and 12
days for Dataset-A and B, respectively. At each day t >2,
data pairsf(1;2);;(t 2;t 1)gare used as training and
validation sets, and (t 1;t)serves as testing set for eval-
uation across different models. We report the mean square
error (MSE) to measure the reward model performance.
Comparison with Benchmark Models It is important to
note that, the social impact of this work has not been ad-
dressed by ML approaches the same way as we propose.
Due to the uniqueness of our problem, existing solutions
for optimizing handover parameters are either not appropri-
ate to solve it or there is no apparent way to directly adapt
them to our problem. For instance, traditional handover op-
timization methods rely on designing fuzzy rules based on
different measures of QoS in the network (Vasu et al. 2012),
however, designing proper rules is complex and cannot han-
dle the change in highly dynamic systems well. Instead, we
hope to use a data-driven approach, among which the (deep)
RL method gains the most attention (Cao et al. 2018; Wang
et al. 2018). However, in this type of problems, the network
provider only allows limited exploration of the parameter
values (e.g., allows changing the A2 value once a day) to en-
sure the stability of the network. Thus, we only have limited
days for exploring the best action. RL models, nevertheless,
usually need longer episodes to optimize the accumulated
return. Despite this fact, we made some preliminary attempt,
presented in Sec. B.3, to adapt the RL paradigm from the lit-
erature into our problem which did not show any advantage
over our simpler design.
In order to show the effectiveness of our proposed re-
ward model, we compare it with alternative designs for the
prediction model. It should be mentioned that all of these
models are our contribution. In the Sec. B.4, we summarize
our benchmarks and the properties of each model. The ﬁrst
model is MLP, where we only use the features of the cen-
ter cells and ignore the neighboring cells’ features. In GCN
model, we follow the typical GCN formulation (Hamilton
et al. 2017) and process the network as a homogeneousModel
Action 
ConfigurationSimulator𝐱𝑡𝑣,{𝐱𝑡𝑢|𝑢∈𝒩𝑡(𝑣)}
𝐱𝑡+1𝑣,{𝐱𝑡+1𝑢|𝑢∈𝒩𝑡+1(𝑣)}𝑎𝑡𝑣 𝛽𝑡+1𝑣, 𝛼𝑡+1𝑣Figure 3: The process of action recommendation by the
trained model and the simulator
graph where the neighbor information is aggregated jointly
without distinction. The AG-GCN model ignores the tem-
poral dependencies of the data which we consider in TAG-
GCN model. In Fig. 2, we compare the prediction accuracy
of these models for throughput in Dataset-A and B. We ob-
serve on average the best accuracy for the test set is achieved
by AG-GCN and TAG-GCN, with TAG-GCN performing
marginally better on the average rank metric across the eval-
uation days, indicating that our neighbor aggregation and
temporal features extraction have a considerable impact on
the reward modeling for cellular networks. The same results
also achieved for the throughput ratio model. The same test
is performed for throughput ratio and included in the sup-
plementary materials in Fig. 10.
6.3 Overall Parameter Optimization
Performance
The Action Recommendation Process In the following
experiments we use the presented models to recommend the
actions for Dataset-A. The actions in day 1, i.e., Oct. 17,
has been set to the default action which is -100 dBm. Unless
otherwise stated, the action for the second day, i.e., Oct. 18,
is initialized by a set of random actions around the default
action in the range of [ 105; 95]. The model is trained it-
eratively on each day and used to recommend actions for the
next day. The process is depicted in Fig. 3, where states of
the cells on day tare given to the trained model to predict
performance metrics of the network on day t+ 1 and the
actionav
tis adjusted for each cell based on the predictions.
Finally, the network states and performance measurements
for dayt+ 1 are computed according to the new selected
action by the cellular network simulator and used for model
training and action recommendation in the following day.
Baseline Performance Bounds In addition to the result
achieved by the actions recommended by the models, we use
three baseline performance bounds achieved by the default
A2-threshold , the expert rule , and the optimal actions of the
simulator. As stated before the default A2-threshold value
is 100dBm and this is used as the lower bound in the fol-
lowing experiments. The optimal actions in the simulator are
obtained by brute-force search and it introduces the upper
performance bound. The expert rule-based method provided
by experienced network operator is a simple rule presented
in the Sec. B.6. The performance achieved by the expert rule
is better than the default action. We hope to use our proposed
learning based framework to further ﬁll the gap with the re-
ward achieved by optimal actions.
Results In the following experiments, we compare the per-
formance of the network under the actions recommended
2019-10-17 2019-10-18 2019-10-21 2019-10-22 2019-10-23 2019-10-24 2019-10-25 2019-10-28 2019-10-29 2019-10-30 2019-10-31
Time1.00
0.75
0.50
0.25
0.000.250.500.751.001.25Reward
MLP
GCN
AG-GCN
TAG-GCN
Best Action
Experts Actions
Default Action
Figure 4: Performance comparison of different models along
with optimal action curve initialized with random actions
by different models in terms of the network throughput as
deﬁned in Sec. 3. We plot the trajectory of the throughput
difference to the default A2-threshold baseline (dash black
line) in Fig. 4. We repeat all the experiments 20 times for
all models, where each run uses the same set of random ac-
tions on the ﬁrst action exploration day (Oct. 18) for all the
models. We also show the performance achieved through the
expert rule action recommendation, default action, and the
optimal actions of the simulator (random actions are also
used on Oct. 18 for the curve of the optimal action). The
quantitative results for Fig. 4 are summarized in Table 6
in the supplementary materials. TAG-GCN can achieve bet-
ter average throughput in the ﬁnal days which indicates the
importance of our auto-grouping GCN design to tailor the
heterogeneous property of the cellular networks. Besides, as
expected, all the learning-based models can beat the expert
rule algorithm which is highly dependent on human experi-
ence and is unable to recover from the performance degra-
dation due to bad random initialization on the ﬁrst day. Fur-
thermore, to show the effectiveness of our proposed model
in terms of load balancing and enhancing cluster through-
put ratio, we illustrate the progress of this ratio achieved by
TAG-GCN for some selected severely unbalanced cells in
Fig.5. As it can be seen, the throughput ratio of the clusters
form a trajectory that converges to 1 which is the ideal target
value. More ablation studies are presented in Sec. B.7.
Based on the above experiments, our proposed ML-based
solutions can improve the network performance and opti-
mize the handover process compared to the conventional
methods such as using the default action or human experts
rule-based methods. Moreover, the automation of the param-
eter optimization process achieved by our ML-based solu-
tions reduces the domain expert’s intervention and, hence,
the management cost of network operators and improves the
maintenance efﬁciency of cellular networks. Consequently,
the proposed solutions open up the possibilities to provide
reliable and high-quality network access even to geograph-
ical areas that are currently underserved by the cellular net-
work. This can bring exciting new opportunities to these
regions such as remote education, remote working, health
monitoring, video streaming, etc.
7 Conclusion
In this paper, we study the handover parameter conﬁgura-
tion problem in cellular networks. We propose a reward pre-
diction model to accurately imitate the cellular network and
estimate the performance metrics. Our proposed model, i.e.,2019-10-17 2019-10-18 2019-10-21 2019-10-22 2019-10-23 2019-10-24 2019-10-25 2019-10-28 2019-10-29 2019-10-30 2019-10-31
Time0.60.81.01.21.41.61.8Throughput RatioCELL_CELLNAME
cell132
cell2575
cell1304
cell3141
cell2955cell2790
cell2250
cell3872
cell1015
cell3140Figure 5: Trend of the throughput ratio for sample clusters
TAG-GCN, investigates the impact of the adjacent cells and
differentiate their impact on the center cell of each clus-
ter. We also consider the network changing dynamics in our
model to learn the temporal dependencies in the data. Based
on the reward model, a novel multi-objective parameter con-
ﬁguration strategy is proposed to perform the optimization
for each cluster and balance the performance metrics in each
neighborhood. The conducted simulations shows the superi-
ority of TAG-GCN which has a huge potential social impact
by improving the cellular network parameters and providing
massive connectivity and high coverage with a balanced traf-
ﬁc across the network. Hence, this can help the widespread
adaptation of new technologies to beneﬁt many sectors such
as health and education.
References
3GPP TS36.331. 2016. Evolved Universal Terrestrial Radio
Access (E-UTRA);Radio Resource Control (RRC); Protocol
speciﬁcation.
Agiwal, M.; et al. 2016. Next generation 5G wireless net-
works: A comprehensive survey. IEEE Communications
Surveys & Tutorials , 18(3): 1617–1655.
Attaran, M. 2021. The impact of 5G on the evolution of
intelligent automation and industry digitization. Journal of
Ambient Intelligence and Humanized Computing , 1–17.
Bhat, P.; et al. 2012. LTE-advanced: an operator perspective.
IEEE Communications Magazine , 50(2): 104–114.
Cao, G.; et al. 2018. AIF:An Artiﬁcial Intelligence Frame-
work for Smart Wireless Network Management. IEEE Com-
munications Letters , 22(2): 400–403.
Chuai, J.; et al. 2019. A Collaborative Learning Based Ap-
proach for Parameter Conﬁguration of Cellular Networks. In
IEEE Int. Conf. on Computer Communications .
Dahlman, E.; et al. 2013. 4G: LTE/LTE-advanced for mobile
broadband . Academic press.
Fan, W.; et al. 2019. Graph Neural Networks for Social Rec-
ommendation. In Proc. Int. Conf. World Wide Web .
Gilmer, J.; Schoenholz, S. S.; Riley, P. F.; Vinyals, O.; and
Dahl, G. E. 2017. Neural message passing for quantum
chemistry. In International conference on machine learn-
ing.
Gohar, A.; and Nencioni, G. 2021. The role of 5G technolo-
gies in a smart city: The case for intelligent transportation
system. Sustainability , 13(9): 5188.
Goodfellow, I.; et al. 2016. Deep learning . MIT press.Hamilton, W. L.; et al. 2017. Inductive Representation
Learning on Large Graphs. In Proc. Adv. Neural Inf. Proc.
Systems .
Imran, A.; et al. 2014. Challenges in 5G: how to empower
SON with big data for enabling 5G. IEEE Network , 28(6):
27–33.
Jiang, C.; et al. 2016. Machine learning paradigms for next-
generation wireless networks. IEEE Wireless Communica-
tions , 24(2): 98–105.
Jiang, N.; et al. 2020. A decoupled learning strategy for
massive access optimization in cellular iot networks. IEEE
Journal on Selected Areas in Communications , 39(3): 668–
685.
Kipf, T. N.; et al. 2017. Semi-Supervised Classiﬁcation with
Graph Convolutional Networks. In Proc. Int. Conf. Learning
Representations .
Koushik, A.; et al. 2017. Intelligent spectrum management
based on transfer actor-critic learning for rateless transmis-
sions in cognitive radio networks. IEEE Transactions on
Mobile Computing , 17(5): 1204–1215.
Li, R.; et al. 2014. TACT: A transfer actor-critic learn-
ing framework for energy saving in cellular radio access
networks. IEEE transactions on wireless communications ,
13(4): 2000–2011.
Mu, P.; Barco, R.; Fortes, S.; et al. 2014. Conﬂict resolution
between load balancing and handover optimization in LTE
networks. IEEE Communications Letters , 18(10): 1795–
1798.
Pei, H.; et al. 2020. Geom-GCN: Geometric Graph Convo-
lutional Networks. In International Conference on Learning
Representations (ICLR) .
Rao, S. K.; and Prasad, R. 2018. Impact of 5G technologies
on industry 4.0. Wireless personal communications , 100(1):
145–159.
Riihijarvi, J.; et al. 2018. Machine learning for performance
prediction in mobile cellular networks. IEEE Computational
Intelligence Magazine , 13(1): 51–60.
Schlichtkrull, M.; et al. 2018. Modeling relational data with
graph convolutional networks. In European semantic web
conference , 593–607. Springer.
Siriwardhana, Y .; G ¨ur, G.; Ylianttila, M.; and Liyanage, M.
2021. The role of 5G for digital healthcare against COVID-
19 pandemic: Opportunities and challenges. ICT Express ,
7(2): 244–252.
statista. 2022. Number of smartphone
users worldwide from 2016 to 2027. In
https://www.statista.com/statistics/330695/number-of-
smartphone-users-worldwide/ .
Tabrizi, H.; et al. 2012. Dynamic handoff decision in het-
erogeneous wireless systems: Q-learning approach. In 2012
IEEE International Conference on Communications (ICC) ,
3217–3222.
Tekinay, S.; et al. 1991. Handover and channel assignment in
mobile cellular networks. IEEE Communications magazine ,
29(11): 42–46.Vasu, K.; et al. 2012. QoS-aware fuzzy rule-based vertical
handoff decision algorithm incorporating a new evaluation
model for wireless heterogeneous networks. EURASIP Jour.
on Wireless Comm. and Networking , 2012.
Wang, X.; et al. 2019. Neural Graph Collaborative Filter-
ing. In Proc. ACM Int. Conf. Research and Development in
Information Retrieval .
Wang, Z.; et al. 2018. Handover Control in Wireless Systems
via Asynchronous Multiuser Deep Reinforcement Learning.
IEEE Internet of Things Journal , 5(6): 4296–4307.
Wei, Y .; et al. 2018. Joint optimization of caching, comput-
ing, and radio resources for fog-enabled IoT using natural
actor–critic deep reinforcement learning. IEEE Internet of
Things Journal , 6(2): 2061–2073.
Weisenborn, G. 2018. United Nations Sustainable Develop-
ment Goals.
World Economic Forum. 2020. The Impact of 5G: Creating
New Value across Industries and Society.
Ye, Q.; et al. 2013. User Association for Load Balancing in
Heterogeneous Cellular Networks. IEEE Trans. on Wireless
Communications , 12(6).
Ying, R.; et al. 2018. Graph Convolutional Neural Net-
works for Web-Scale Recommender Systems. In Proc. ACM
SIGKDD Int. Conf. Knowledge Discovery and Data Mining .
Yu, C.; et al. 2017. Modeling User Activity Patterns for
Next-Place Prediction. IEEE Systems Journal , 11(2): 1060–
1071.
Zhang, C.; et al. 2019. Heterogeneous graph neural network.
InProc. ACM SIGKDD Int. Conf. Knowledge Discovery and
Data Mining .
Zhang, C.; et al. 2020. An AI-Based Optimization of
Handover Strategy in Non-Terrestrial Networks. In 2020
ITU Kaleidoscope: Industry-Driven Digital Transformation
(ITU K) , 1–6.
Zhao, S.; et al. 2020. Cellular Network Trafﬁc Prediction In-
corporating Handover: A Graph Convolutional Approach. In
2020 17th Annual IEEE International Conference on Sens-
ing, Communication, and Networking (SECON) , 1–9.Supplementary Materials
A Extended Background and Related Work
A.1 Handover in Cellular Networks
A cellular network is formed by many cells distributed over
land areas, each served by at least one ﬁxed-location base
station (BS) providing wireless links with a wide geographic
area coverage to support many users. A cluster in a cellular
network (consisting of a cell and its neighboring cells) is
shown in Fig. 6 where, user uis crossing one cell’s cov-
erage area and monitors the received power from cell nto
check the handover criteria. The cell BS is responsible for
monitoring the strength of the signals received by served
users, which can degrade when a user travels from one cell
to another. The BS should trigger a handover process at the
proper moment to avoid any service interruption and trans-
fer the user to another cell BS that is receiving the strongest
signals (Bhat et al. 2012; Tekinay et al. 1991).
There are multiple parameters that impact handover in a
network. These parameters generally are grouped in three
categories. RSRP andRSRQ parameters are indicators of the
signal strength and quality of the serving station, respec-
tively, Hysteresis parameters act as a tolerance margin to
avoid the Ping Pong (PP) effect, and Time To Trigger (TTT)
parameters are set such that short term violations of han-
dover conditions are ignored to avoid the PP effect. Also,
different measures such as handover failure (HOF) rate, han-
dover frequency, Ping-Pong (PP) rate, network throughput,
and load balancing have been used in the literature to assess
the effectiveness of the proposed algorithms for optimizing
handover parameters. When performing optimization in a
real network, some of these measures may conﬂict. There-
fore, it is crucial to consider a combination of these quanti-
ties to ﬁnd a solution that satisﬁes different requirements of
the network.
A.2 Related Work
Different methods have been used in the literature for solv-
ing the problem of optimization of handover parameters in
a wireless network. Fuzzy system handover algorithms, for
example, have been used in (Vasu et al. 2012). Such tech-
niques, however, are not scalable despite being accurate and
stable. Deep reinforcement learning (DRL) is another tech-
nique that has been used to solve the handover optimization
problem. In (Cao et al. 2018), the authors propose a frame-
work based on DRL where actions are ﬂexible and can be
chosen by the user, and the objective of the optimization
is the throughput and the handover count. In (Wang et al.
2018), the authors propose a framework in which the UEs
ﬁrst are clustered based on their usage pattern and then the
handover process is optimized in each cluster by a DRL
method. Another newly introduced approach to the problem
of cellular network parameter optimization is the Contex-
tual Bandit model proposed in (Chuai et al. 2019)in which
the throughput of the cells is used as a performance metric
for optimizing some of the cell parameters.
The above mentioned methods, despite being effective, do
not exploit the information from the neighboring cells which<A2-threshold
<A2-threshold<A2-threshold
<A2-threshold
<A2-threshold<A2-threshold
<A2-thresholdCenter Cell 𝑛
User 𝑢𝑃𝑢,𝑛Figure 6: A typical structure of a cluster in the cellular net-
work serving different types of users.
Model each sub-network as a graph where 
nodes are cells and each edge represents heavy 
handover events between this pair of cells 𝒢𝑡=(𝒱𝑡,ℰ𝑡)Graph Construction Typical GCN Aggregation
All neighbors are using the same 
transformation function to perform 
the feature mapping
Figure 7: Commonly used GNN design.
can be used to develop a more effective model of the net-
work. Moreover, two of the most important measures from
the user’s standpoint are throughput and load balancing,
none of which are considered in the above models simulta-
neously. Thus, in the current work, we propose a technique
which remedies these shortcomings by utilizing the neigh-
bors’ information, and optimizing the parameters of the net-
work using two signiﬁcantly important objectives, namely,
load balancing and throughput.
A.3 Graph Neural Networks for Cellular
Network
Successful applications of GNNs mostly rely on a homoge-
neous graph structure. For example, in social networks or
recommender systems, each edge represents a positive cor-
relation between the adjacent nodes (Kipf et al. 2017; Fan
et al. 2019). The MPNN framework (Gilmer et al. 2017) ap-
plies the same transformation function to every neighbor and
aggregates across them to obtain the neighbor representa-
tion, shown in Fig. 7. There is a rich literature that studies
how to process a heterogeneous graph with multiple relation
types (Schlichtkrull et al. 2018; Zhang et al. 2019). They
are established on the prior knowledge of the given relation
type between each pair of nodes and then use a meta-path
design to distinguish the information coming from different
types of neighbors. Such an approach is not applicable to our
problem.
B Experimental Details, Results, and
Ablations
B.1 Simulator Construction
The experiments are run through a proprietary cellular net-
work simulator which uses statistical models to simulate the
Figure 8: The internal workﬂow of the simulator.
network response to any change in the parameter values.
This simulator is designed based on the network correspond-
ing to Dataset-A and uses the states of the network cells
along with their action to simulate the throughput and the
trafﬁc of the cells.
Dataset-A is collected under the default network conﬁgu-
ration and the value of A2-threshold is not changed during
the collection period. To evaluate our model and the action
conﬁguration strategy, the simulator needs to simulate the
network performance given arbitrary A2-threshold values of
the cells. More precisely, let xi
trepresents cell i’s states at
daytunder the default A2-threshold conﬁguration, and A2i
t
be the conﬁgured A2-threshold value for cell iat dayt, the
simulator will output
~x0
t;:::;~xNt
t;r0
t;:::;rNt
t=g(x0
t;:::;xNt
t;A20
t;:::;A 2Nt
t);
(11)
whereri
tis celli’s throughput, and ~xi
tis the observed states
of celliunder the new conﬁgurations at t.
Fig. 8 gives a simple sketch on the internal workﬂow of
the simulator. During simulation, when A20
t;:::;A 2Nt
tare
conﬁgured at day t, the cell states x0
t;:::;xNt
tare read from
the collected data, and inputted to the simulator. The cell
coverageCifor eachiis ﬁrst computed by a built-in func-
tion that considers cell i’s frequency, bandwidth and A2i
t.
Then celli’s trafﬁc load (including the number of users and
the amount of data bits for transmission) at day tis redis-
tributed among itself and its neighbors based on the change
ofCiandCjwithj2Nt(i). After each cell’s trafﬁc load is
updated, the throughput ri
tis predicted based on cell i’s traf-
ﬁc load. The load-throughput prediction model for each cell
is pre-trained from the collected historical data and stored
when the simulator is initialized. The value ri
tis further ad-
justed by a factor that considers the throughput loss due to
measurement reporting or connection loss. Finally, the sim-
ulator outputs r0
t;:::;rNt
t. As each cell’s trafﬁc load (part of
the cell states) is modiﬁed, the updated states ~x0
t;:::;~xNt
tare
also outputted.
B.2 Dataset Samples
Dataset-A and B contain wide range of cell states (e.g., the
number of total users within the cell, the number of active
users, the cell average CQI, the cell trafﬁc load, etc.) and
performance indicators (e.g., the average cell throughput,
the edge user throughput, etc.). The neighbor relation infor-
mation between cells in both datasets are collected and the
hourly average handover counts between neighbor cells are
recorded. The weekend dates are excluded from Dataset-A
since these days are not considered as rush hour usage for
this region of cellular networks.
We present the values of four different features of threeTime Cell Throughput A VG Trafﬁc Cell Bandwidth A VG CQI
00 - 01 17.18 86.14 5.0 11.84
01 - 02 12.97 55.06 5.0 12.36
Cell 999 02 - 03 19.25 50.09 5.0 12.48
(Dataset-A)...............
23 - 00 7.17 128.63 5.0 11.84
Daily A VG 17.78 105.52 5.0 11.82
00 - 01 17.45 16.31 5.0 11.46
01 - 02 24.15 11.59 5.0 10.51
Cell 1720 02 - 03 32.26 7.36 5.0 9.49
(Dataset-A)...............
23 - 00 27.62 18.38 5.0 11.19
Daily A VG 24.42 18.08 5.0 10.24
00 - 01 26.56 15.65 5.0 11.51
01 - 02 37.82 7.52 5.0 10.97
Cell 997 02 - 03 35.80 4.62 5.0 11.53
(Dataset-A)...............
23 - 00 31.41 22.94 5.0 11.67
Daily A VG 31.05 26.72 5.0 11.48
00 - 01 16.83 4.35 5.0 10.10
01 - 02 22.67 7.27 5.0 9.90
Cell 1284 02 - 03 22.94 4.99 5.0 9.75
(Dataset-B)...............
23 - 00 28.62 5.76 5.0 10.45
Daily A VG 17.92 7.18 5.0 10.16
00 - 01 8.12 6.28 3.0 8.95
01 - 02 18.22 5.73 3.0 9.12
Cell 1127 02 - 03 18.66 6.00 3.0 9.24
(Dataset-B)...............
23 - 00 14.91 7.61 3.0 8.96
Daily A VG 11.09 10.38 3.0 8.98
00 - 01 32.50 29.14 5.0 10.35
01 - 02 30.39 22.81 5.0 10.58
Cell 986 02 - 03 33.88 22.67 5.0 10.99
(Dataset-B)...............
23 - 00 29.25 37.42 5.0 10.21
Daily A VG 22.45 43.41 5.0 10.32
Table 2: Samples from Dataset-A and B.
random cells in Dataset-A in Tables 2. Note that the repre-
sented values are collected in the ﬁrst day. As seen the range
of variation across different cells and different hours for each
single cell is too high and that is the reason we consider the
modules to handle spatial and temporal dependencies in our
model to better imitate the real-world environment. We have
almost the same pattern in Dataset-B as well for these pre-
sented features.
B.3 Reinforcement Learning Modeling
As we mentioned in Sec. 6, for problems similar to ours
which require following a policy to choose an action to inter-
act with an environment, reinforcement learning (RL) mod-
eling is a good candidate. Among all the RL methods, the
actor-critic (AC) method is a potential match to our prob-
lem due to its continuous action space and modeling ﬂexibil-
ity. AC methods have been widely used in cellular network
problems and for different tasks such as power allocation
and trafﬁc forecasting (Li et al. 2014; Koushik et al. 2017;
Jiang et al. 2020; Wei et al. 2018). Hence, as an additional
benchmark we compare our proposed algorithm with a ba-
sic AC algorithm we implemented to adapt to our problem
where the actor model recommends actions in order to max-
imize the reward predicted by the critic model.
We use TAG-GCN as the critic model to predict the re-
ward which can be either throughput ratio or throughput to
train the actor model. For the actor model, we use the same
modules presented for TAG-GCN to do the neighbor auto-
grouping and capture the temporal dependencies in the data
2019-10-17 2019-10-18 2019-10-21 2019-10-22 2019-10-23 2019-10-24 2019-10-25 2019-10-28 2019-10-29 2019-10-30 2019-10-31
Time1.00
0.75
0.50
0.25
0.000.250.500.751.001.25Reward
TAG-GCN
Actor-CriticFigure 9: Performance comparison between our proposed
design and actor-critic design for action exploration.
Model List
Model Name GraphHeterogeneous
GraphDaily Temporal
Features
MLP 7 7 7
GCN 3 7 7
AG-GCN 3 3 7
TAG-GCN 3 3 3
Table 3: Properties of Different Models
and train it with the following loss function
Loss (actor ) =1
TTX
t=11
NtNtX
v=1q1 ^v
t(^av
t)+3jj3jj2;
(12)
where ^av
tis the recommended action by the actor model and
^v
t(^av
t)is the predicted reward by the critic model using the
recommended action. 3is the hyperparameter chosen for
regularization and 3represents all the trainable parameters
in the actor model.
Fig. 9 shows that TAG-GCN outperforms this basic RL
model. The proposed AC model is a very preliminary one
and obviously it can be improved even more which is out of
the scope of this paper. However, this potential improvement
comes with the cost of increasing complexity and requires
a highly diverse data and more interactions with the envi-
ronment. The RL approach generally requires frequent and
plenty of interactions with the environment. However, in our
case, the action is conﬁgured once a day, and the total explo-
ration duration only consists of small number of days, and
is far less than what is generally required by the RL mod-
els. Furthermore, RL models usually consider accumulated
returns, i.e., impact of the current action on the future per-
formance. However, in our scenario, the current action only
affects the loads distribution of the current hour, and does
not affect the future performance. Therefore the standard RL
approach does not apply here.
B.4 Alternative reward model comparison
We summarize the alternative designs for the reward model
we consider in our paper in Table 3.
B.5 Additional Model Evaluation Metrics (avg.
Rank)
We present the average rank of different models across dif-
ferent evaluation days in terms of the achieved test MSE for
both throughput ratio and cell throughput models in Dataset-
A and B, in Table 4 and 5, respectively. As seen, consideringModel Name Ratio Model Throughput Model Average
MLP 3.83 3.83 3.83
GCN 3.17 3.00 3.08
AG-GCN 1.67 1.67 1.67
TAG-GCN 1.33 1.50 1.42
Table 4: Average rank of the learning models in terms of the
achieved test MSE across the evaluation days for Dataset-A
Model Name Ratio Model Throughput Model Average
MLP 3.50 3.83 3.67
GCN 3.00 3.00 3.00
AG-GCN 2.00 1.50 1.75
TAG-GCN 1.50 1.67 1.58
Table 5: Average rank of the learning models in terms of the
achieved test MSE across the evaluation days for Dataset-B
2019-10-22 2019-10-23 2019-10-24 2019-10-25 2019-10-28 2019-10-29
Time0.0080.0100.0120.0140.0160.0180.0200.022Ratio MSE
MLP
GCN
AG-GCN
TAG-GCN
(a)
2021-09-05 2021-09-06 2021-09-07 2021-09-08 2021-09-09 2021-09-10 2021-09-11 2021-09-12
Time0.0080.0100.0120.0140.0160.018Ratio MSE
MLP
GCN
AG-GCN
TAG-GCN (b)Figure 10: Mean squared error of the throughput ratio for
test data of (a) Dataset-A and (b) Dataset-B for TAG-GCN.
the results of both datasets, TAG-GCN can achieve better
performance than other proposed model which is due to its
capacity to learn the spatial and temporal dependencies in
the network.
B.6 Expert Rule-Based Parameter Optimization
Strategy
The experts rule-based method can set the actions for each
cellv2Ntfor dayt+ 1based on the load balancing as:
av
t=rv
1(v
t 1)v
t1
rv
2(v
t 1)v
t<1; (13)
whererv
1;rv
2<0are the weights set by human experts based
on domain knowledge and assumptions about the network
dynamics. The intuition is to increase the A2-threshold to
release trafﬁc when a cell is overloaded and decrease the
value in the opposite case.
B.7 Additional Experimental Results
Reward Modeling Performance for Throughput Ratio
We repeat the same experiment as Fig. 2 in the paper but
for the throughput ratio reward and compare the perfor-
mance measured in the achieved MSE by different models
for Dataset-A and B in Fig. 10.
Ablation Study on the Multi-Objective Action Recom-
mendation Strategy In Fig. 11, we show an ablation study
on the effectiveness of our proposed multi-objective action
recommendation strategy. For each setting, we repeat our ex-
periment ﬁve times with TAG-GCN as the reward model but
follow different action conﬁguration strategies. Other than
the multi-object formulation, we consider two alternatives
2019-10-17 2019-10-18 2019-10-21 2019-10-22 2019-10-23 2019-10-24 2019-10-25 2019-10-28 2019-10-29 2019-10-30 2019-10-31
Time1.00
0.75
0.50
0.25
0.000.250.500.751.00Reward
TAG-GCN (multi-objective)
TAG-GCN (single objective by throughput ratio)
TAG-GCN (single objective by cell throughput)Figure 11: The impact of different optimization objectives
for the parameter conﬁguration in our proposed TAG-GCN
model.
for action conﬁguration, one by considering only the cell
throughput in the optimization problem, and one by consid-
ering only the load-balancing objective. As shown in Fig. 11,
our proposed TAG-GCN model with both load-balancing
and throughput as optimization objectives can outperform
others, achieving the best average throughput in the ﬁnal
days across random trials.
The Quantitative Results The quantitative results for
Fig. 4 and Fig. 11 are summarized in Table 6 and Table 7, re-
spectively. We present the achieved network throughput by
different models divided by the performance achieved by the
best actions of the simulator for the last 4 days of the exper-
iments. It should be noted that in all these experiments the
model is trained up to Oct. 29 and after that the model is
not updated and only performs the inference step. As seen
in Table 6, the proposed method is outperforming the rest of
the methods and yields better average throughput. Further-
more, our method also yields lower variance with respect to
change in the initial values of the actions, which is a signif-
icant advantage. In general, our method proves to be very
robust in this regard. The second table demonstrates the ef-
fectiveness of the multi-objective optimization strategy. In
this table, we have denoted three different variants of TAG-
GCN which represent three optimization strategies, namely,
multi-objective strategy using both throughput and through-
put ratio models (TAG-GCN1), single objective strategies
using throughput ratio (TAG-GCN2), and throughput mod-
els (TAG-GCN3). As the results in the table show, the multi-
objective strategy outperforms the single objective ones and
therefore is superior.
The Average Rank of Different Models (Fig. 4) As
stated earlier the models for the experiment depicted in
Fig. 4 are trained up to Oct. 29 and for the rest of days they
are not updated. In Table 8, we compare the performance of
the proposed learning-based models in terms of the achieved
average rank. We separate the results for before and after
Oct. 29 to show the generalization of different methods. As
seen TAG-GCN has the best performance both before and
after freezing the learning model.
Different action initialization strategies In Fig. 12, we
present an ablation study on the different initialization
schemes on the ﬁrst action exploration day. In addition to the
random initialization, we use two more action initialization
schemes including the expert rule and the negative slope.Model Name 10-28 10-29 10-30 10-31
Experts Rule-Based :47:0026:37:0173:62:0007:41:0090
MLP :68:0073:76:0080:87:0102:66:0110
GCN :66:0148:76:0077:86:0002:65:0118
AG-GCN :68:0345:77:0055:86:0019:67:0068
TAG-GCN :71:0136:78:0005:93:0074:73:0069
Table 6: The Average throughput divided by the throughput
achieved from the best action designed by the simulator (in
last four days) for different reward models.
Model Name 10-28 10-29 10-30 10-31
TAG-GCN1 :71:0136:78:0005:93:0074:73:0069
TAG-GCN2 :66:0259:75:0212:85:0131:65:0060
TAG-GCN3 :63:0199:71:0094:74:0089:61:0170
Table 7: The 95% conﬁdence interval for the average
throughput divided by the throughput achieved from the best
action designed by the simulator (in last four days) for dif-
ferent optimization methods using TAG-GCN model.
Model Name Before Oct. 29 After Oct. 29 All Days
MLP 2.80 3.67 3.13
GCN 2.80 3.33 3.00
AG-GCN 3.20 2.00 2.75
TAG-GCN 1.20 1.00 1.13
Table 8: Average rank of different models in terms of the
achieved reward before and after freezing the learning mod-
els
2019-10-17 2019-10-18 2019-10-21 2019-10-22 2019-10-23 2019-10-24 2019-10-25 2019-10-28 2019-10-29 2019-10-30 2019-10-31
Time1.00
0.75
0.50
0.25
0.000.250.500.751.00Reward
TAG-GCN (random initialization)
TAG-GCN (negative slope initialization)
TAG-GCN (experts rule initialization)
Figure 12: Performance comparison of the TAG-GCN model
under different types of action initialization for Oct. 18.
The expert rule initialization is given in (13). The negative
slope procedure for the action initialization is deﬁned based
on the throughput ratio of the ﬁrst day of each cell v, i.e.,v
t1as
av
t1=h2(v
t1 )
 +i
; (14)
where= minv2Nt1(v
t1), and= maxv2Nt1(v
t1)and
[]is the rounding operation. For controlling the variation
of action, the maximum range of change is deﬁned as .
We can observe that regardless of the type of initialization,
the model can converge to almost the same performance in
the ﬁnal days, which indicates that even without strong prior
information from the network, our design can still quickly
converge to the desired model performance.