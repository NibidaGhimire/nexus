Multiplicative Auction Algorithm for Approximate Maximum
Weight Bipartite Matching
Da Wei Zheng
University of Illinois Urbana-Champaign
Urbana, IL, USAMonika Henzinger
Institute of Science and Technology Austria
Klosterneuburg, Austria
Abstract
We present an auction algorithm using multiplicative instead of constant weight updates
to compute a (1−ε)-approximate maximum weight matching (MWM) in a bipartite graph
with nvertices and medges in time O(mε−1), beating the running time of the fastest known
approximation algorithm of Duan and Pettie [JACM ’14] that runs in O(mε−1logε−1). Our
algorithm is very simple and it can be extended to give a dynamic data structure that maintains
a(1−ε)-approximate maximum weight matching under (1) one-sided vertex deletions (with
incident edges) and (2) one-sided vertex insertions (with incident edges sorted by weight) to
the other side. The total time used is O(mε−1), where mis the sum of the number of initially
existing and inserted edges.1
1 Introduction
LetG= (U∪V, E)be an edge-weighted bipartite graph with n=|U∪V|vertices and m=|E|
edges where each edge uv∈Ewith u∈Uandv∈Vhas a non-negative weight w(uv). The
maximum weight matching (MWM) problem asks for a matching M⊆Ethat attains the largest
possible weight w(M) =P
uv∈Mw(uv). This paper will focus on approximate solutions to the MWM
problem. More specifically, if we let M∗denote a maximum weight matching of G, our goal is to
find a matching Msuch that w(M)≥(1−ε)w(M∗)for any small constant ε >0.
Matchings are a very well studied problem in combinatorial optimization. Kuhn [ Kuh55] in
1955 published a paper that started algorithmic work in matchings, and presented what he called
the “Hungarian algorithm” which he attributed the work to Kőnig and Egerváry. Munkres [ Mun57]
showed that this algorithm runs in O(n4)time. The running time for computing the exact MWM
has been improved many times since then. Recently, Chen et al. [ CKL+22] showed that it was
possible to solve the more general problem of max flow in O(m1+o(1))time.
For(1−ε)-approximation algorithms for MWM in bipartite graphs, Gabow and Tarjan in 1989
showed an O(m√nlog(n/ε))algorithm. Since then there were a number of results for different
running times and different approximation ratios. The prior best approximate algorithm is by
Duan and Pettie [ DP14] which computes a (1−ε)-approximate maximum weight matching in
O(mε−1log(ε−1))time with a scaling algorithm. We defer to their work for a more thorough survey
of the history on the MWM problem.
1An earlier version of this paper appeared in the 24th International Conference on Integer Programming and
Combinatorial Optimization (IPCO 2023) with a slightly slower algorithm running in O(mε−1logε−1)time.
1arXiv:2301.09217v5  [cs.DS]  23 Jan 2024We show in our work that the auction algorithm for matchings using multiplicative weights can
give a (1−ε)-approximate maximum weight matching with a running time of O(mε−1)for bipartite
graphs. This is a modest improvement of a logε−1factor over the prior algorithm of Duan and Pettie
[DP14] which works in general graphs. However, in comparison to their rather involved algorithm,
our algorithm is simple and only uses elementary data structures. Furthermore, we are able to
use properties of the algorithm to support two dynamic operations, namely one where vertices are
deleted from one side and one where vertices of the other side of the bipartite graph are inserted
together with their incident edges. No algorithm that allows both these operations with running
time faster than recomputation from scratch was known prior.
1.1 Dynamic matching algorithms.
Dynamic weighted matching. There has been a large body of work on dynamic matching
and many variants of the problem have been studied, e.g, the maximum, maximal, as well as
α-approximate setting for a variety of values of α, both in the weighted as well as in the unweighted
setting. See [ HHS22] for a survey of the current state of the art for the fully dynamic setting. For
any constant δ >0there is a conditional lower bound based on the OMv conjecture that shows
that any dynamic algorithm that returns the exactvalue of a maximum cardinality matching in
a bipartite graph with polynomial preprocessing time cannot take time O(m1−δ)per query and
O(m1/2−δ)per edge update operation [HKNS15].
Dynamic (1−ε)-approximate matchings Forgeneral weighted graphs Gupta and Peng [ GP13]
gave the first algorithm in the fully dynamic setting with edge insertions and deletions to maintain
a(1−ε)-approximate matching in O(ε−1√mlogwmax)time, where the edges fall into the range
[1, wmax]. There are also some results for bipartite graphs in partially dynamic settings. In the
incremental setting, edges are only inserted, and decremental setting, edges are only deleted. For
unweighted bipartite graphs, the fastest known decremental algorithm is by Bernstein, Probst
Gutenberg, and Saranurak [ BGS20] achieves update times of O(ε−4log3(n))per edge deletion. For
incremental algorithms Blikstad and Kiss [ BK23] achieve update times of O(ε−6)time per edge
insertion. These results can be made to work in weighted graphs by a meta theorem of Bernstein,
Dudeja, and Langley [ BDL21]. Their theorem states that any dynamic algorithm on an unweighted
bipartite graph can be transformed into a dynamic algorithm on weighted bipartite graph at the
expense of an extra (1/ε)O(1/ε)lognfactor.
Vertex updates. By vertex update we refer to updates that are vertex insertion (resp. deletion)
that also inserts (resp. deletes) all edges incident to the vertex. There is no prior work on maintaining
matchings in weighted graphs under vertex updates. However, vertex updates in the unweighted
bipartite setting has been studied. Bosek et al. [ BLSZ14] gave an algorithm that maintains the
(1−ε)-approximate matching when vertices of one side are deleted in O(ε−1)amortized time per
changed edge. The algorithm can be adjusted to the setting where vertices of one side are inserted
in the same running time, but it cannot handle both vertex insertions and deletions. Le et al.
[LMSW22 ] gave an algorithm for maintaining a maximal matching under vertex updates in constant
amortized time per changed edge. They also presented an e/(e−1)≈1.58approximate algorithm
for maximum matchings in an unweighted graph when vertex updates are only allowed on one side
of a bipartite graph.
We give the first algorithm to maintain a (1−ε)-approximate maximum weight matching where
vertices can undergo vertex deletions on one side andvertex insertions on the other side in total
time O(mε−1), where mis the sum of the number of initially existing and inserted edges. It assumes
2that the edges incident to an inserted vertex are given in sorted order by weight, otherwise, the
running time increases by O(logn)per inserted edge.
1.2 Linear Program for MWM
The MWM problem can be expressed as the following linear program (LP) where the variable xuv
denotes whether the edge uvis in the matching. It is well known [ S+03] that the below LP is integral,
that is the optimal solution has all variables xuv∈ {0,1}.
maxX
uv∈Ew(uv)xuv
s.t.X
v∈N(u)xuv≤1 ∀u∈U
X
u∈N(v)xuv≤1 ∀v∈V
xuv≥0 ∀uv∈E
We can also consider the dual problem of weighted vertex cover that aims to find dual weights
yuandyvfor every vertex u∈Uandv∈Vrespectively.
minX
u∈Uyu+X
v∈Vyv
s.t. y u+yv≥w(uv) ∀uv∈E
yu≥0 ∀u∈U
yv≥0 ∀v∈V
1.3 Multiplicative weight updates for packing LPs
Packing LPs are LPs of the form max{cTx|Ax≤b}forc∈Rn
≥0,b∈Rm
≥0andA∈Rn×m
≥0. The LP
for MWM is a classical example of a packing LP. The multiplicative weight update method (MWU)
has been investigated extensively to provide faster algorithms for finding approximate solutions2to
packing LPs [ You14,KY14,CQ18,AO19,WRM16,Qua20]. Typically the running times for solving
these LPs have a dependence on εofε−2, e.g. the algorithm of Koufogiannakis and Young [ KY14]
would obtain a running time of O(mε−2logn)when applied to the matching LP.
The fastest multiplicative weight update algorithm for solving packing LPs by Allen-Zhu and
Orecchia [ AO19] would obtain an O(mε−1logn)running time for MWM. Very recently, work by
Battacharya, Kiss, and Saranurak [ BKS22] extended the MWU for packing LPs to the partially
dynamic setting . When restricted to the MWM problem means the weight of edges either only
increase or only decrease. Using similar ideas with MWUs, Assadi [ Ass23] recently derived a simple
semi-streaming algorithm for bipartite matchings. However as packing LPs are more general than
MWM, these algorithms are significantly more complicated and are slower by lognfactors (and
sometimes worse dependence on εe.g. in [BKS22]) when compared to our algorithms.
2Byapproximate solution we mean a possibly fractional assignments of variables that obtains an approximately
good LP objective. If we find such an approximate solution to MWM, fractional solutions need to be rounded to
obtain an actual matching.
3We remark that our algorithm, while it uses multiplicative weight updates, is unlike typical
MWU algorithms as it has an additional monotonicity property. We only increase dual variables on
one side of the matching.
1.4 Auction Algorithms
Auction algorithms are a class of primal dual algorithms for solving the MWM problem that view
Uas a set of goodsto be sold, Vas a set of buyers. The goal of the auction algorithm is to find a
welfare-maximizing allocation of goods to buyers. The algorithm is attributed to Bertsekas [ Ber81],
as well as to Demange, Gale, and Sotomayor [DGS86].
An auction algorithm initializes the prices of all the goods u∈Uwith a price yu= 0(our choice of
yuis intentional, as prices correspond directly to dual variables), and has buyers initially unallocated .
For each buyer v∈V, theutilityof that buyer upon being allocated u∈Uisutil(uv) =w(uv)−yu.
The auction algorithm proceeds by asking an unallocated buyer v∈Vfor the good they desire that
maximizes their utility, i.e. for uv=arg max u∈N(v)util(uv). Ifutil(uvv)<0, the buyer remains
unallocated. Otherwise the algorithm allocates uvtov, then increases the price yutoyu+ε. The
algorithm terminates when all buyers are either allocated or for every unallocated buyer v, it holds
thatutil(uvv)<0. If the maximum weight among all the edges is wmax, then the auction algorithm
terminates after O(nε−1wmax)rounds and outputs a matching that differs from the optimal by an
additive factor of at most nε.
There have been a recent resurgence in interest in auction algorithms. Assadi, Liu, and Tar-
jan [ALT21] used the auction algorithm for matchings in unweighted graphs in semi-streaming and
massively parallel computing (MPC) settings. This work was generalized for weighted bipartite
graphs in the same settings by Liu, Ke, and Kholler [LKK23].
1.5 Our contribution
We present the following modification of the auction algorithm:
When vis allocated u, increase yutoyu+ε·w(uv)instead of yu+ε.
Note that this decreases util(v)by at least a factor of (1−ε)as well as increases yuby at least a
factor of (1+ε). Thus we will call algorithms with this modification multiplicative auction algorithms .
Surprisingly, we were not able to find any literature on this simple modification. Changing the
constant additive weight update to a multiplicative weight update has the effect of taking much
larger steps when the weights are large, and so we are able to show that the algorithm can have
no dependence on the size of the weights. In fact, we are able to improve the running time to
O(mε−1), faster than the prior approximate matching algorithm of Duan and Pettie [ DP14] that
ran in O(mε−1logε−1). While the algorithm of [ DP14] has the advantage that it works for general
graphs and ours is limited to bipartite graphs, our algorithm is simpler as it avoids the scaling
algorithm framework and is easier to implement.
Theorem 1.1. LetG= (U∪V, E)be a weighted biparitite graph and εbe a value such that 1> ε > 0.
There is a multiplicative auction algorithm running in time O(mε−1)that finds a (1−ε)-approximate
maximum weight matching of G.
Furthermore, it is straightforward to extend our algorithm to a setting where vertices on one
side are deleted andvertices on the other side are added with all incident edges given in sorted order
4of weight . When the inserted edges are not sorted by weight, the running time per inserted edge
increases by an additive term of O(log log n)to sort the log of the weights of incident inserted edges.
Theorem 1.2. LetG= (U∪V, E)be a weighted bipartite graph. There exists a dynamic data
structure that maintains a (1−ε)-approximate maximum weight matching of Gand supports any
arbitrary sequence of the following operations
(1) Deleting a vertex in U
(2) Adding a new vertex into Vwith all its incident edges sorted by weight
in total time O(mε−1), where mis sum of the number of initially existing and inserted edges.
2 The static algorithm
2.1 A slower algorithm
For sake of exposition we will first present a slower algorithm that runs in near-linear time in the
number of edges that will use the following update rule:
When uis allocated to v, increase yutoyu+ε·util(uv)
We assume that the algorithm is given as input some fixed 0< ε′<1, and the goal is to find a
(1−ε′)-approximate MWM. We will also assume that m= Ω( n), as a graph with medges has at
most 2mvertices that have at least one incident edge. If 2m < n, then we may discard the isolated
vertices and reduce n.
Notation For sake of notation let N(u) ={v∈V|uv∈E}be the set of neighbors of u∈UinG,
and similarly for N(v)forv∈V.
Preprocessing of the weights. Letwmax>0be the maximum weight edge of E. For our static
auction algorithm we may ignore any edge uv∈Eof weight less than ε′·wmax/nasw(M∗)≥wmax
as taking nof these small weight edges would not even contribute ε′·w(M∗)to the matching. Thus,
we only consider edges of weight at least ε′·wmax/n, which allows us to rescale all edge weights by
dividing them by ε′·wmax/n. As a result we can assume (by slight abuse of notation) in the following
that the minimum edge weight is 1and the largest edge weight wmaxequals n/ε′. Furthermore,
since we only care about approximations, we will also round down all edge weights to the nearest
power of (1 +ε)for some ε < ε′/2. We define iLog (x) =⌊log1+ε(x)⌋, and we will only care about
weights after applying this operation.
Letkmax=iLog (wmax) =iLog (n/ε′) =O(ε−1log(n/ε)). Let kminbe the smallest integer such
that (1 +ε)−kmin≤ε. Observe that as log(1 + ε)≤εfor0≤ε≤1it holds that
kmin≥log(ε−1)
log(1 + ε)≥ε−1log(ε−1).
Thus we see that kmin= Θ( ε−1log(ε−1)).
Algorithm. The algorithm first builds for every v∈Va list Qvof pairs (i, uv)for each edge uv
and each value iwith−kmin≤i≤juv=iLog (wuv)and then sorts Qvby decreasing value of i.
After, it calls the function MatchR (v)on every v∈V. The function MatchR (v)matches vto
5the item that maximizes its utility and updates the price yuaccording to our multiplicative update
rule. While matching v, another vertex v′originally matched to vmay become unmatched. If this
happens, MatchR (v′)is called immediately after MatchR (v).
Algorithm 2.1: MultiplicativeAuction (G= (U∪V, E))
M← ∅.
yu←0for all u∈U.
yv←0for all v∈V # This is only used in the analysis
jv←kmaxfor all v∈V # This is only used in the analysis
Qv← ∅for all v∈V.
Forv∈V:
1. For u∈N(v):
(a)juv←iLog (w(uv))
(b) For ifrom juvto−kmin:
i. Insert the pair (i, uv)intoQv.
2. Sort all pairs (i, uv)∈Qvso the pairs are in non-increasing order of i.
Forv∈V:
3.MatchR (v).
Return M.
6MatchR( v)
While Qvis not empty:
1.(j, uv)←the first element of Qv
2.jv←j # This is only used in the analysis
3.util(uv)←w(uv)−yu
4. If util(uv)<(1 +ε)j:
•Remove (j, uv)from Qv.
5. Else:
(a)yv←util(uv) # This is only used in the analysis
(b)yu←yu+ε·(util( uv)) # Update rule
(c) If uwas matched to v′so that uv′∈M:
•Remove (u, v′)from M
•yv′←0 # This is only used in the analysis
•Add (u, v)toM
•MatchR (v′)
•Return
(d) Else:
•Add (u, v)toM
•Return
Data structure. We store for each vertex v∈Vthe list Qvas well as its currently matched edge
if it exists. In the pseudocode we keep for each vertex va value jvcorresponding to the highest
weight threshold (1 +ε)jvthat we will consider. We also keep a value yvwhich corresponds to the
utility vreceivesbeforewe update the price yuwhen vis matched to u. Note that jvandyvare
only needed in the analysis.
Running time. The creation and sorting of the lists Qvtakes time O(|N(v)|(kmax+kmin))
if we use bucket sort as there are only kmax+kmindistinct weights. The running time of all
calls to MatchR (v)is dominated by the size of Qv, as each iteration in MatchR (v)removes
an element of Qvand takes O(1)time. Thus, the total time is O P
v∈V|N(v)|(kmax+kmin)
=
O(m(kmax+kmin)) =O(mε−1log(n/ε)).
Invariants maintained by the algorithm. The algorithm maintains five different invariants.
Invariant 1. For all v∈V, and all u∈N(v),util(uv) =w(uv)−yu≤(1 +ε)jv+1.
Proof.This clearly is true at the beginning, since jvis initialized to kmax, and
util(uv) =w(uv)<(1 +ε)juv+1.
As the algorithm proceeds, util(uv)which equals w(uv)−yuonly decreases as yuonly increases.
Thus, we only have to make sure that the condition holds whenever jvdecreases. The value jvonly
7decreases from some value, say j+ 1, to a new value j, inMatchR (v)and when this happens Qv
does not contain any pairs (j′, uv)with j′> janymore. Thus, there does not exist a neighbor uof
vwith util(uv)≥(1 +ε)j+1. It follows that when jvdecreases to jfor all u∈N(v)it holds that
util(uv)<(1 +ε)jv+1.
Invariant 2. For all u∈U y u≥0andyunever decreases over the course of the algorithm.
Furthermore, if u∈Uis not matched, then yu= 0.
Proof.We initialize yuto0. Ifuis never matched, we never change yu, so it stays 0. Throughout
the algorithm, we only ever increase yu.
Invariant 3. For all v∈Vfor which MatchR (v)was called at least once, if vis unmatched, then
yv= 0andQvis empty. Furthermore, for all u∈N(v)we have that yu+yv=yu>(1−ε)·w(uv).
Proof. MatchR (v)terminates (i) after it matches vand recurses or (ii) if Qvis empty. Initially v
is unmatched and yvis set to 0. If vis matched, it is possible that for some v′∈V,v′̸=v, that v
becomes temporarily unmatched during MatchR (v′)andyvis set to 0, but MatchR (v)will be
immediately called again. Thus, whenever vis unmatched, yv= 0.
Hence, if the last call to MatchR (v)does not result in vbeing matched, then this means that
Qvmust be empty and yv= 0. Since Qvis empty, then for all u∈N(v), we must have util(uv)<
(1+ε)−kmin≤ε. Since we rescaled weights so that w(uv)≥1, we know that util(uv)< ε≤ε·w(uv).
Note that util(uv) =w(uv)−y∗
uwhere y∗
udenotes the value of yubefore uwas matched, and yu≥y∗
u.
Thus,
yu≥y∗
u=w(uv)−util(uv)>(1−ε)·w(uv).
Invariant 4. Ifv∈Vis matched to u∈U, then for all u′∈N(v),yu′+yv≥(1−ε)·w(u′v)for
as long as vstays matched.
Proof.Note that yvdoesn’t change as long as vstays matched, and for all u′∈N(v),yu′can only
increase by Invariant 2, so it suffices to prove yu′+yv≥(1−ε)·w(u′v)right after vwas matched
tou.
Lety∗
ube the value of yuright before vwas matched to u. Note that yv=w(uv)−y∗
u. For
u′=u, we know that yv+y∗
u=w(uv), and, by Invariant 2, y∗
u≤yusoyv+yu≥w(uv).
For all other u′∈U, right before we updated yu, we had that (1 + ε)jv≤util(uv)and, by
Invariant 1, util(u′v)≤(1+ε)jv+1. Thus, (1+ε)·util(uv)≥util(u′v), so that util(uv) =w(uv)−y∗
u=
yv≥(1 +ε)−1·(w(u′v)−yu′). As yu′≥0by Invariant 2 and 1> ε > 0, it follows that:
yv+yu′≥(1 +ε)−1·w(u′v) + (1 −(1 +ε)−1)·yu′≥(1−ε)·w(u′v),
Invariant 5. Ifv∈Vis matched to u∈U, then yu+yv≤(1 +ε)·w(uv)for as long as vremains
matched to u.
8Proof.Note that yuandyvdon’t change as long as vremains matched to u. Let y∗
udenote the value
ofyuright before the update rule of line 5(b) in MatchR . Then observe yu=y∗
u+ε·(w(uv)−y∗
u),
andyv=w(uv)−y∗
u. Thus,
yu+yv=y∗
u+ε·(w(uv)−y∗
u) +w(uv)−y∗
u
= (1 + ε)·w(uv)−ε·y∗
u
≤(1 +ε)·w(uv).
Approximation factor. We will show the approximation factor of the matching Mfound by
the algorithm by primal dual analysis. We remark that it is possible to show this result purely
combinatorially as well. We will show that this Mand a vector ysatisfy the complementary slackness
condition up to a 1±εfactor, which implies the approximation guarantee. This was used by Duan
and Pettie [ DP14] (the original lemma was for general matchings, we have specialized it here to
bipartite matchings).
Lemma 2.1 (Lemma 2.3 of [ DP14]).LetMbe a matching and let ybe an assignment of the dual
variables. Suppose yis a complementary solution to Min the following approximate sense:
(i) For all uv∈E, y u+yv≥(1−ε0)·w(uv),
(ii) For all e∈M,yu+yv≤(1 +ε1)·w(uv),
(iii) The y-values of all unmatched vertices are zero.
Then Mis a 
(1 +ε1)−1(1−ε0)
-approximate maximum weight matching.
Proof.LetM∗be the maximum weight matching.
w(M) =X
uv∈Mw(uv)
≥X
uv∈M(1 +ε1)−1·(yu+yv) by (ii)
= (1 + ε1)−1 X
u∈Uyu+X
v∈Vyv!
by (iii)
≥(1 +ε1)−1X
uv∈M∗(yu+yv) asM∗is a matching
≥(1 +ε1)−1X
uv∈M∗(1−ε0)·w(uv) by (i)
≥(1−ε0)(1 + ε1)−1w(M∗)
This lemma along with our invariants is enough for us to prove the approximation factor of our
algorithm.
9Lemma 2.2. MultiplicativeAuction (G= (U∪V, E))outputs a (1−ε′)-approximate maximum
weight matching of the bipartite graph G.
Proof.Letε >0be a parameter depending on ε′that we will choose later. We begin by choosing
an assignment of the dual variables yuforu∈Uandyvforv∈Vas exactly the values used by
the algorithm at termination. It remains to verify that we satisfy the conditions of Lemma 2.1.
Property (i) is satisfied by Invariant 3 or Invariant 4 (depending on whether vis matched or not) for
ε0=ε. Property (ii) is satisfied by Invariant 5 for ε1=ε. Property (iii) is satisfied by Invariant 2
and Invariant 3. Thus we have satisfied Lemma 2.1 with ε0=εandε1=ε. Setting ε=ε′/2gives
us a(1−ε′)-approximate maximum weight matching.
We have shown the following result that is weaker than what we have set out to prove by a factor
oflog(nε−1)that we will show how to get rid of in Section 2.2.
Theorem 2.3. LetG= (U∪V, E)be a weighted biparitite graph, and εbe a value such that
1> ε > 0. There exists a multiplicative auction algorithm running in time O(mε−1log(nε−1))that
finds a (1−ε)-approximate maximum weight matching of G.
2.2 Improving the running time
Variations to the update rule We remark that there is some flexibility in choosing the update
rule in line 5(a) of MatchR .
Observation 2.1. To compute an (1−ε′)-approximate maximum weight matching the update rule
in line 5(a) of MatchR can be any of the following:
(1)yu←yu+δ·(util( uv)), with δ≤ε′/2,
(2)yu←yu+δ·(yu), with δ≤ε′/2,
(3)yu←yu+δ·(w(uv)), with δ≤ε′/4.
Proof.It suffices to verify that all invariants hold for different update rules. Invariant 1, 2, 3, and 4
all hold regardless of the update rule, as they only use the fact that yuis non-decreasing throughout
the algorithm, so we will only focus on Invariant 5.
We proved that update rule (1) works in Section 2.1 for δ=ε=ε′/2. Note that if we chose an
δ < ε, we would still have yu≤y∗
u+ε(w(uv)−y∗
u), and Invariant 5 holds.
To prove update rule (2) works for δ≤ε=ε′/2, letv∈Vbe matched to u∈U, and y∗
ube
the value of yuright before the update rule. Observe that yu= (1 + δ)·y∗
u≤(1 + ε)·y∗
uand
yv=w(uv)−y∗
u. Furthermore y∗
u≤w(uv)as otherwise util(uv)<0andvwould not be trying to
match to u. Thus,
yu+yv≤(1 +ε)·y∗
u+w(uv)−y∗
u=w(uv) +ε·y∗
u≤(1 +ε)·w(uv).
Since we have shown that either update rule (1) or (2) work, we can choose the larger of the two
update rules, i.e. the update of adding δ·max{util(uv), yu}is also a valid update rule. However, as
util(uv) +yu=w(uv), this means that δ·(w(uv))≤ε′/4·(w(uv)), so (3) is also a valid update rule.
10Remarks. Update rule (2) offers an alternative way to implement the algorithm with a running
time of O(mε−1log(nε−1). Update rule (3) shows that vcan update the value of yuat most O(ε−1)
times before util(uv)becomes non-positive, so using update rule (3) results in at most O(mε−1)
total updates. Furthermore, a careful reader may have noticed that Invariant 3 only requires for an
edge uvthatutil(uv)≤ε·w(uv)when we stop considering that edge, so it suffices to only consider
edges in multiples of ε/2and stop considering an edge when it falls below a value of ε·w(uv).
Improved algorithm For simplicity of the exposition we will assume 2ε−1is a positive integer
(otherwise we can choose a slightly smaller ε). To improve the running time to O(mε−1), we use the
observation in the above remark that every edge only needs to be updated O(ε−1)times if we use
update rule (3) and we only need to consider edges in multiples of ε/2. Thus it suffices if we change
line 1.(b) in MultiplicativeAuction to insert copies of an edge uvif it has weight of the form
j·w(uv)for some j=ε,3ε/2,2ε, . . . , 1, after rounding down to the nearest power of (1 +ε). This
change implies that we insert O(ε−1|N(v)|)items into Qvfor every v∈V. However, sorting Qvfor
every vertex individually, would be too slow.
We will instead sort on all the rounded edge weights at once, as we have O(mε−1)total copies
of the edges that can take on values of integers between −kminandkmax. As kmax+kmin=
O(nε−1logε−1) = poly(n), we can actually use radix sort to sort all the edges in linear time.
Afterwards, we can go through the weight classes in decreasing order to insert the pairs into the
corresponding Qv. We explicitly give the pseudocode below as MultiplicativeAuction+ .
Algorithm 2.2: MultiplicativeAuction+ (G= (U∪V, E))
M← ∅.
yu←0for all u∈U.
Qv← ∅for all v∈V.
L← ∅
Foruv∈E:
1. For jfrom εto1in multiples of ε/2:
(a)i←iLog (j·w(uv))
(b) Insert the pair (i, uv)intoL.
SortLin decreasing order with radix sort.
For(i, uv)inL:
2. Insert (i, uv)to the back of Qv.
Forv∈V:
3.MatchR (v).
Return M.
New runtime. Radix sorting all O(mε−1)pairs and initializing the sorted Qvfor all v∈Vtakes
linear time in the number of pairs. The total amount of work done in MatchR (v)for a vertex
v∈VisO(|N(v)|ε−1)which also sums to O(mε−1). Thus we get our desired running time and
have proven our main theorem that we restate here.
11Theorem 1.1. LetG= (U∪V, E)be a weighted biparitite graph and εbe a value such that 1> ε > 0.
There is a multiplicative auction algorithm running in time O(mε−1)that finds a (1−ε)-approximate
maximum weight matching of G.
3 Dynamic algorithm
There are many monotonic properties of our static algorithm. For instance, for all u∈Utheyu
values strictly increase. As another example, for all v∈Vthe value of jvstrictly decreases. These
monotonic properties allow us to extend MultiplicativeAuction+ to a dynamic setting with the
following operations.
Theorem 1.2. LetG= (U∪V, E)be a weighted bipartite graph. There exists a dynamic data
structure that maintains a (1−ε)-approximate maximum weight matching of Gand supports any
arbitrary sequence of the following operations
(1) Deleting a vertex in U
(2) Adding a new vertex into Vwith all its incident edges sorted by weight
in total time O(mε−1), where mis sum of the number of initially existing and inserted edges.
Type (1) operations: Deleting a vertex in U.To delete a vertex u∈U, we can mark uas
deleted and skip all edges uvinQvfor any v∈Vin all further computation. If uwere matched to
some vertex v∈V, that is if there exists an edge uv∈M, we need to unmatch vand remove uv
from M. All our invariants hold except Invariant 3 for the unmatched v. To restore this invariant
we simply call MatchR (v).
Type (2) operations: Adding a new vertex to Vwith all incident edges. To add a new
vertex vtoVwith ℓincident edges to u1v, . . . , u ℓvwith w(u1v)>···> w(uℓv), we can create the
queue Qvby inserting the O(ε−1)pairs such that it is non-increasing in the first element of the pair.
Afterwards we call MatchR (v). All invariants hold after doing so.
Declarations
Funding Monika Henzinger : This work was done in part at the University of
Vienna. This project has received funding from the European Research Council
(ERC) under the European Union’s Horizon 2020 research and innovation pro-
gramme (Grant agreement No. 101019564 “The Design of Modern Fully Dynamic Data Structures
(MoDynStruct)” and from the Austrian Science Fund (FWF) project “Fast Algorithms for a Reactive
Network Layer (ReactNet)”, P 33775-N, with additional funding from the netidee SCIENCE Stiftung ,
2020–2024.
Acknowledgements The first author thanks Chandra Chekuri for useful discussions about this
paper.
12References
[ALT21] Sepehr Assadi, S. Cliff Liu, and Robert E. Tarjan. An auction algorithm for bipartite
matching in streaming and massively parallel computation models. In Hung Viet Le
and Valerie King, editors, 4th Symposium on Simplicity in Algorithms, SOSA 2021,
Virtual Conference, January 11-12, 2021 , pages 165–171. SIAM, 2021. doi:10.1137/1.
9781611976496.18 .
[AO19] Zeyuan Allen-Zhu and Lorenzo Orecchia. Nearly linear-time packing and covering LP
solvers - achieving width-independence and -convergence. Math. Program. , 175(1-2):307–
353, 2019. doi:10.1007/s10107-018-1244-x .
[Ass23] Sepehr Assadi. A simple (1- ϵ)-approximation semi-streaming algorithm for maximum
(weighted) matching. CoRR, abs/2307.02968, 2023. arXiv:2307.02968 ,doi:10.48550/
arXiv.2307.02968 .
[BDL21] Aaron Bernstein, Aditi Dudeja, and Zachary Langley. A framework for dynamic matching
in weighted graphs. In Samir Khuller and Virginia Vassilevska Williams, editors, STOC
’21: 53rd Annual ACM SIGACT Symposium on Theory of Computing, Virtual Event,
Italy, June 21-25, 2021 , pages 668–681. ACM, 2021. doi:10.1145/3406325.3451113 .
[Ber81] Dimitri P. Bertsekas. A new algorithm for the assignment problem. Math. Program. ,
21(1):152–171, 1981. doi:10.1007/BF01584237 .
[BGS20] Aaron Bernstein, Maximilian Probst Gutenberg, and Thatchaphol Saranurak. Deter-
ministic decremental reachability, scc, and shortest paths via directed expanders and
congestion balancing. In Sandy Irani, editor, 61st IEEE Annual Symposium on Foun-
dations of Computer Science, FOCS 2020, Durham, NC, USA, November 16-19, 2020 ,
pages 1123–1134. IEEE, 2020. doi:10.1109/FOCS46700.2020.00108 .
[BK23] Joakim Blikstad and Peter Kiss. Incremental (1- ϵ)-approximate dynamic matching
in o(poly(1/ ϵ)) update time. CoRR, abs/2302.08432, 2023. arXiv:2302.08432 ,doi:
10.48550/arXiv.2302.08432 .
[BKS22] Sayan Bhattacharya, Peter Kiss, and Thatchaphol Saranurak. Dynamic algorithms for
packing-covering lps via multiplicative weight updates. CoRR, abs/2207.07519, 2022.
arXiv:2207.07519 ,doi:10.48550/arXiv.2207.07519 .
[BLSZ14] Bartlomiej Bosek, Dariusz Leniowski, Piotr Sankowski, and Anna Zych. Online bipartite
matching in offline time. In 55th IEEE Annual Symposium on Foundations of Computer
Science, FOCS 2014, Philadelphia, PA, USA, October 18-21, 2014 , pages 384–393. IEEE
Computer Society, 2014. doi:10.1109/FOCS.2014.48 .
[CKL+22]Li Chen, Rasmus Kyng, Yang P. Liu, Richard Peng, Maximilian Probst Gutenberg, and
Sushant Sachdeva. Maximum flow and minimum-cost flow in almost-linear time. CoRR,
abs/2203.00671, 2022. arXiv:2203.00671 ,doi:10.48550/arXiv.2203.00671 .
[CQ18] Chandra Chekuri and Kent Quanrud. Randomized MWU for positive LPs. In Artur
Czumaj, editor, Proceedings of the Twenty-Ninth Annual ACM-SIAM Symposium on
13Discrete Algorithms, SODA 2018, New Orleans, LA, USA, January 7-10, 2018 , pages
358–377. SIAM, 2018. doi:10.1137/1.9781611975031.25 .
[DGS86] Gabrielle Demange, David Gale, and Marilda Sotomayor. Multi-item auctions. Journal
of political economy , 94(4):863–872, 1986.
[DP14] Ran Duan and Seth Pettie. Linear-time approximation for maximum weight matching.
J. ACM, 61(1):1:1–1:23, 2014. doi:10.1145/2529989 .
[GP13] Manoj Gupta and Richard Peng. Fully dynamic (1 + ϵ)-approximate matchings. In
54th Symposium on Foundations of Computer Science, FOCS , pages 548–557. IEEE
Computer Society, 2013. doi:10.1109/FOCS.2013.65 .
[HHS22] Kathrin Hanauer, Monika Henzinger, and Christian Schulz. Recent advances in fully
dynamic graph algorithms (invited talk). In James Aspnes and Othon Michail, editors,
1st Symposium on Algorithmic Foundations of Dynamic Networks, SAND 2022, March
28-30, 2022, Virtual Conference , volume 221 of LIPIcs, pages 1:1–1:47. Schloss Dagstuhl
- Leibniz-Zentrum für Informatik, 2022. doi:10.4230/LIPIcs.SAND.2022.1 .
[HKNS15] Monika Henzinger, Sebastian Krinninger, Danupon Nanongkai, and Thatchaphol Sara-
nurak. Unifying and strengthening hardness for dynamic problems via the online matrix-
vector multiplication conjecture. In Proc. of the forty-seventh annual ACM symposium
on Theory of computing , pages 21–30, 2015. doi:10.1145/2746539.2746609 .
[Kuh55] Harold W Kuhn. The hungarian method for the assignment problem. Naval research
logistics quarterly , 2(1-2):83–97, 1955.
[KY14] Christos Koufogiannakis and Neal E. Young. A nearly linear-time PTAS for explicit
fractional packing and covering linear programs. Algorithmica , 70(4):648–674, 2014.
doi:10.1007/s00453-013-9771-6 .
[LKK23] Quanquan C. Liu, Yiduo Ke, and Samir Khuller. Scalable auction algorithms for bipartite
maximum matching problems. CoRR, abs/2307.08979, 2023. arXiv:2307.08979 ,doi:
10.48550/arXiv.2307.08979 .
[LMSW22] Hung Le, Lazar Milenkovic, Shay Solomon, and Virginia Vassilevska Williams. Dynamic
matching algorithms under vertex updates. In Mark Braverman, editor, 13th Innovations
in Theoretical Computer Science Conference, ITCS 2022, January 31 - February 3,
2022, Berkeley, CA, USA , volume 215 of LIPIcs, pages 96:1–96:24. Schloss Dagstuhl -
Leibniz-Zentrum für Informatik, 2022. doi:10.4230/LIPIcs.ITCS.2022.96 .
[Mun57] James Munkres. Algorithms for the assignment and transportation problems. Journal
of the society for industrial and applied mathematics , 5(1):32–38, 1957.
[Qua20] Kent Quanrud. Nearly linear time approximations for mixed packing and covering
problems without data structures or randomization. In Martin Farach-Colton and
Inge Li Gørtz, editors, 3rd Symposium on Simplicity in Algorithms, SOSA 2020, Salt
Lake City, UT, USA, January 6-7, 2020 , pages 69–80. SIAM, 2020. doi:10.1137/1.
9781611976014.11 .
14[S+03]Alexander Schrijver et al. Combinatorial optimization: polyhedra and efficiency , vol-
ume 24. Springer, 2003.
[WRM16] Di Wang, Satish Rao, and Michael W. Mahoney. Unified acceleration method for
packing and covering problems via diameter reduction. In Ioannis Chatzigiannakis,
Michael Mitzenmacher, Yuval Rabani, and Davide Sangiorgi, editors, 43rd International
Colloquium on Automata, Languages, and Programming, ICALP 2016, July 11-15, 2016,
Rome, Italy , volume 55 of LIPIcs, pages 50:1–50:13. Schloss Dagstuhl - Leibniz-Zentrum
für Informatik, 2016. doi:10.4230/LIPIcs.ICALP.2016.50 .
[You14] Neal E. Young. Nearly linear-time approximation schemes for mixed packing/covering
and facility-location linear programs. CoRR, abs/1407.3015, 2014. URL: http://arxiv.
org/abs/1407.3015 ,arXiv:1407.3015 .
15